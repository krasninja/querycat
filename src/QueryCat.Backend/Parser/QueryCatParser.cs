//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../QueryCat.Backend/Parser/QueryCatParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace QueryCat.Backend.Parser {
 #pragma warning disable 3021 
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class QueryCatParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LEFT_PAREN=1, RIGHT_PAREN=2, ASSIGN=3, ASSOCIATION=4, COLON=5, COMMA=6, 
		PERIOD=7, ELLIPSIS=8, SEMICOLON=9, QUESTION=10, LEFT_BRACKET=11, RIGHT_BRACKET=12, 
		LEFT_RIGHT_BRACKET=13, PIPE=14, AT_SIGN=15, EXCLAMATION_SIGN=16, DOLLAR_SIGN=17, 
		PLUS=18, MINUS=19, STAR=20, DIV=21, MOD=22, EQUALS=23, NOT_EQUALS=24, 
		GREATER=25, GREATER_OR_EQUALS=26, LESS=27, LESS_OR_EQUALS=28, CONCAT=29, 
		LESS_LESS=30, GREATER_GREATER=31, TYPECAST=32, ANY=33, BLOB=34, BOOL=35, 
		BOOLEAN=36, DECIMAL=37, FLOAT=38, INT=39, INT8=40, INTEGER=41, NUMERIC=42, 
		OBJECT=43, REAL=44, STRING=45, TEXT=46, TIMESTAMP=47, AND=48, AS=49, AT=50, 
		BEGIN=51, BY=52, CAST=53, DEFAULT=54, END=55, EXISTS=56, FALSE=57, FROM=58, 
		IN=59, IS=60, LIKE=61, LIKE_REGEX=62, NOT=63, NULL=64, ON=65, ONLY=66, 
		OR=67, SOME=68, TO=69, TRUE=70, USING=71, VOID=72, TRIM=73, LEADING=74, 
		TRAILING=75, BOTH=76, CURRENT_DATE=77, CURRENT_TIMESTAMP=78, INTERVAL=79, 
		YEAR=80, DOY=81, DAYOFYEAR=82, MONTH=83, DOW=84, WEEKDAY=85, DAY=86, HOUR=87, 
		MINUTE=88, SECOND=89, MILLISECOND=90, LOCAL=91, TIME=92, ZONE=93, CASE=94, 
		COALESCE=95, EXTRACT=96, POSITION=97, WHEN=98, OCCURRENCES_REGEX=99, SUBSTRING_REGEX=100, 
		POSITION_REGEX=101, TRANSLATE_REGEX=102, ECHO=103, ALL=104, ASC=105, BETWEEN=106, 
		CURRENT=107, DESC=108, DISTINCT=109, EXCEPT=110, FETCH=111, FIRST=112, 
		FOLLOWING=113, FORMAT=114, FULL=115, GROUP=116, HAVING=117, INNER=118, 
		INTERSECT=119, INTO=120, JOIN=121, LAST=122, LEFT=123, LIMIT=124, NEXT=125, 
		NULLS=126, OFFSET=127, ORDER=128, OUTER=129, OVER=130, PARTITION=131, 
		PRECEDING=132, RECURSIVE=133, RIGHT=134, ROW=135, ROWS=136, SELECT=137, 
		SIMILAR=138, TOP=139, UNBOUNDED=140, UNION=141, VALUES=142, WHERE=143, 
		WINDOW=144, WITH=145, UPDATE=146, INSERT=147, DELETE=148, DECLARE=149, 
		SET=150, CALL=151, IF=152, THEN=153, ELSE=154, ELSEIF=155, WHILE=156, 
		BREAK=157, CONTINUE=158, FOR=159, TYPE=160, NO_QUOTES_IDENTIFIER=161, 
		QUOTES_IDENTIFIER=162, INTEGER_LITERAL=163, FLOAT_LITERAL=164, NUMERIC_LITERAL=165, 
		STRING_LITERAL=166, BOOLEAN_LITERAL=167, SINGLE_LINE_COMMENT=168, MULTILINE_COMMENT=169, 
		SPACES=170;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_functionSignature = 2, RULE_functionType = 3, 
		RULE_functionArg = 4, RULE_functionCall = 5, RULE_functionCallArg = 6, 
		RULE_declareVariable = 7, RULE_setVariable = 8, RULE_selectStatement = 9, 
		RULE_selectOrderByClause = 10, RULE_selectSortSpecification = 11, RULE_selectAlias = 12, 
		RULE_selectQueryExpression = 13, RULE_selectQueryExpressionBody = 14, 
		RULE_selectQueryPrimary = 15, RULE_selectQuerySpecification = 16, RULE_selectList = 17, 
		RULE_selectExcept = 18, RULE_selectDistinctClause = 19, RULE_selectDistinctOnClause = 20, 
		RULE_selectWithClause = 21, RULE_selectWithElement = 22, RULE_selectWithColumnList = 23, 
		RULE_selectSublist = 24, RULE_selectTarget = 25, RULE_selectFromClause = 26, 
		RULE_selectTableReferenceList = 27, RULE_selectTableReference = 28, RULE_selectTableValuesRow = 29, 
		RULE_selectTableValues = 30, RULE_selectTablePrimary = 31, RULE_selectTableJoined = 32, 
		RULE_selectJoinType = 33, RULE_selectGroupBy = 34, RULE_selectHaving = 35, 
		RULE_selectSearchCondition = 36, RULE_selectWindowSpecification = 37, 
		RULE_selectWindowPartitionClause = 38, RULE_selectWindowOrderClause = 39, 
		RULE_selectWindow = 40, RULE_selectWindowDefinitionList = 41, RULE_selectOffsetClause = 42, 
		RULE_selectFetchFirstClause = 43, RULE_selectTopClause = 44, RULE_selectLimitClause = 45, 
		RULE_updateStatement = 46, RULE_updateSource = 47, RULE_updateSetClause = 48, 
		RULE_insertStatement = 49, RULE_insertToSource = 50, RULE_insertColumnsList = 51, 
		RULE_insertFromSource = 52, RULE_deleteStatement = 53, RULE_deleteFromSource = 54, 
		RULE_echoStatement = 55, RULE_callStatement = 56, RULE_ifStatement = 57, 
		RULE_ifCondition = 58, RULE_identifierSimple = 59, RULE_identifier = 60, 
		RULE_identifierSelector = 61, RULE_array = 62, RULE_intervalLiteral = 63, 
		RULE_blockExpression = 64, RULE_castOperand = 65, RULE_atTimeZone = 66, 
		RULE_caseExpression = 67, RULE_caseWhen = 68, RULE_standardFunction = 69, 
		RULE_dateTimeField = 70, RULE_type = 71, RULE_expression = 72, RULE_simpleExpression = 73, 
		RULE_literal = 74;
	public static readonly string[] ruleNames = {
		"program", "statement", "functionSignature", "functionType", "functionArg", 
		"functionCall", "functionCallArg", "declareVariable", "setVariable", "selectStatement", 
		"selectOrderByClause", "selectSortSpecification", "selectAlias", "selectQueryExpression", 
		"selectQueryExpressionBody", "selectQueryPrimary", "selectQuerySpecification", 
		"selectList", "selectExcept", "selectDistinctClause", "selectDistinctOnClause", 
		"selectWithClause", "selectWithElement", "selectWithColumnList", "selectSublist", 
		"selectTarget", "selectFromClause", "selectTableReferenceList", "selectTableReference", 
		"selectTableValuesRow", "selectTableValues", "selectTablePrimary", "selectTableJoined", 
		"selectJoinType", "selectGroupBy", "selectHaving", "selectSearchCondition", 
		"selectWindowSpecification", "selectWindowPartitionClause", "selectWindowOrderClause", 
		"selectWindow", "selectWindowDefinitionList", "selectOffsetClause", "selectFetchFirstClause", 
		"selectTopClause", "selectLimitClause", "updateStatement", "updateSource", 
		"updateSetClause", "insertStatement", "insertToSource", "insertColumnsList", 
		"insertFromSource", "deleteStatement", "deleteFromSource", "echoStatement", 
		"callStatement", "ifStatement", "ifCondition", "identifierSimple", "identifier", 
		"identifierSelector", "array", "intervalLiteral", "blockExpression", "castOperand", 
		"atTimeZone", "caseExpression", "caseWhen", "standardFunction", "dateTimeField", 
		"type", "expression", "simpleExpression", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "':='", "'=>'", "':'", "','", "'.'", "'...'", "';'", 
		"'?'", "'['", "']'", "'[]'", "'&>'", "'@'", "'!'", "'$'", "'+'", "'-'", 
		"'*'", "'/'", "'%'", "'='", "'<>'", "'>'", "'>='", "'<'", "'<='", "'||'", 
		"'<<'", "'>>'", "'::'", "'ANY'", "'BLOB'", "'BOOL'", "'BOOLEAN'", "'DECIMAL'", 
		"'FLOAT'", "'INT'", "'INT8'", "'INTEGER'", "'NUMERIC'", "'OBJECT'", "'REAL'", 
		"'STRING'", "'TEXT'", "'TIMESTAMP'", "'AND'", "'AS'", "'AT'", "'BEGIN'", 
		"'BY'", "'CAST'", "'DEFAULT'", "'END'", "'EXISTS'", "'FALSE'", "'FROM'", 
		"'IN'", "'IS'", "'LIKE'", "'LIKE_REGEX'", "'NOT'", "'NULL'", "'ON'", "'ONLY'", 
		"'OR'", "'SOME'", "'TO'", "'TRUE'", "'USING'", "'VOID'", "'TRIM'", "'LEADING'", 
		"'TRAILING'", "'BOTH'", "'CURRENT_DATE'", "'CURRENT_TIMESTAMP'", "'INTERVAL'", 
		"'YEAR'", "'DOY'", "'DAYOFYEAR'", "'MONTH'", "'DOW'", "'WEEKDAY'", "'DAY'", 
		"'HOUR'", "'MINUTE'", "'SECOND'", "'MILLISECOND'", "'LOCAL'", "'TIME'", 
		"'ZONE'", "'CASE'", "'COALESCE'", "'EXTRACT'", "'POSITION'", "'WHEN'", 
		"'OCCURRENCES_REGEX'", "'SUBSTRING_REGEX'", "'POSITION_REGEX'", "'TRANSLATE_REGEX'", 
		"'ECHO'", "'ALL'", "'ASC'", "'BETWEEN'", "'CURRENT'", "'DESC'", "'DISTINCT'", 
		"'EXCEPT'", "'FETCH'", "'FIRST'", "'FOLLOWING'", "'FORMAT'", "'FULL'", 
		"'GROUP'", "'HAVING'", "'INNER'", "'INTERSECT'", "'INTO'", "'JOIN'", "'LAST'", 
		"'LEFT'", "'LIMIT'", "'NEXT'", "'NULLS'", "'OFFSET'", "'ORDER'", "'OUTER'", 
		"'OVER'", "'PARTITION'", "'PRECEDING'", "'RECURSIVE'", "'RIGHT'", "'ROW'", 
		"'ROWS'", "'SELECT'", "'SIMILAR'", "'TOP'", "'UNBOUNDED'", "'UNION'", 
		"'VALUES'", "'WHERE'", "'WINDOW'", "'WITH'", "'UPDATE'", "'INSERT'", "'DELETE'", 
		"'DECLARE'", "'SET'", "'CALL'", "'IF'", "'THEN'", "'ELSE'", "'ELSEIF'", 
		"'WHILE'", "'BREAK'", "'CONTINUE'", "'FOR'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LEFT_PAREN", "RIGHT_PAREN", "ASSIGN", "ASSOCIATION", "COLON", "COMMA", 
		"PERIOD", "ELLIPSIS", "SEMICOLON", "QUESTION", "LEFT_BRACKET", "RIGHT_BRACKET", 
		"LEFT_RIGHT_BRACKET", "PIPE", "AT_SIGN", "EXCLAMATION_SIGN", "DOLLAR_SIGN", 
		"PLUS", "MINUS", "STAR", "DIV", "MOD", "EQUALS", "NOT_EQUALS", "GREATER", 
		"GREATER_OR_EQUALS", "LESS", "LESS_OR_EQUALS", "CONCAT", "LESS_LESS", 
		"GREATER_GREATER", "TYPECAST", "ANY", "BLOB", "BOOL", "BOOLEAN", "DECIMAL", 
		"FLOAT", "INT", "INT8", "INTEGER", "NUMERIC", "OBJECT", "REAL", "STRING", 
		"TEXT", "TIMESTAMP", "AND", "AS", "AT", "BEGIN", "BY", "CAST", "DEFAULT", 
		"END", "EXISTS", "FALSE", "FROM", "IN", "IS", "LIKE", "LIKE_REGEX", "NOT", 
		"NULL", "ON", "ONLY", "OR", "SOME", "TO", "TRUE", "USING", "VOID", "TRIM", 
		"LEADING", "TRAILING", "BOTH", "CURRENT_DATE", "CURRENT_TIMESTAMP", "INTERVAL", 
		"YEAR", "DOY", "DAYOFYEAR", "MONTH", "DOW", "WEEKDAY", "DAY", "HOUR", 
		"MINUTE", "SECOND", "MILLISECOND", "LOCAL", "TIME", "ZONE", "CASE", "COALESCE", 
		"EXTRACT", "POSITION", "WHEN", "OCCURRENCES_REGEX", "SUBSTRING_REGEX", 
		"POSITION_REGEX", "TRANSLATE_REGEX", "ECHO", "ALL", "ASC", "BETWEEN", 
		"CURRENT", "DESC", "DISTINCT", "EXCEPT", "FETCH", "FIRST", "FOLLOWING", 
		"FORMAT", "FULL", "GROUP", "HAVING", "INNER", "INTERSECT", "INTO", "JOIN", 
		"LAST", "LEFT", "LIMIT", "NEXT", "NULLS", "OFFSET", "ORDER", "OUTER", 
		"OVER", "PARTITION", "PRECEDING", "RECURSIVE", "RIGHT", "ROW", "ROWS", 
		"SELECT", "SIMILAR", "TOP", "UNBOUNDED", "UNION", "VALUES", "WHERE", "WINDOW", 
		"WITH", "UPDATE", "INSERT", "DELETE", "DECLARE", "SET", "CALL", "IF", 
		"THEN", "ELSE", "ELSEIF", "WHILE", "BREAK", "CONTINUE", "FOR", "TYPE", 
		"NO_QUOTES_IDENTIFIER", "QUOTES_IDENTIFIER", "INTEGER_LITERAL", "FLOAT_LITERAL", 
		"NUMERIC_LITERAL", "STRING_LITERAL", "BOOLEAN_LITERAL", "SINGLE_LINE_COMMENT", 
		"MULTILINE_COMMENT", "SPACES"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "QueryCatParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static QueryCatParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public QueryCatParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public QueryCatParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(QueryCatParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(QueryCatParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(QueryCatParser.SEMICOLON, i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 150;
				Match(SEMICOLON);
				}
				}
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 156;
			statement();
			State = 161;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 157;
					Match(SEMICOLON);
					State = 158;
					statement();
					}
					} 
				}
				State = 163;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 164;
				Match(SEMICOLON);
				}
				}
				State = 169;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 170;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StatementIfContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public StatementIfContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementIf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementSelectExpressionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public StatementSelectExpressionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementSelectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementEchoContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public EchoStatementContext echoStatement() {
			return GetRuleContext<EchoStatementContext>(0);
		}
		public StatementEchoContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementEcho(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementExpressionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementExpressionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementDeclareVariableContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclareVariableContext declareVariable() {
			return GetRuleContext<DeclareVariableContext>(0);
		}
		public StatementDeclareVariableContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementDeclareVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementCallContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallStatementContext callStatement() {
			return GetRuleContext<CallStatementContext>(0);
		}
		public StatementCallContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementFunctionCallContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public StatementFunctionCallContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementSetVariableContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetVariableContext setVariable() {
			return GetRuleContext<SetVariableContext>(0);
		}
		public StatementSetVariableContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementSetVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementDeleteExpressionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		public StatementDeleteExpressionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementDeleteExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementUpdateExpressionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public UpdateStatementContext updateStatement() {
			return GetRuleContext<UpdateStatementContext>(0);
		}
		public StatementUpdateExpressionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementUpdateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementInsertExpressionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public InsertStatementContext insertStatement() {
			return GetRuleContext<InsertStatementContext>(0);
		}
		public StatementInsertExpressionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementInsertExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 183;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new StatementFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 172;
				functionCall();
				}
				break;
			case 2:
				_localctx = new StatementDeclareVariableContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 173;
				declareVariable();
				}
				break;
			case 3:
				_localctx = new StatementSetVariableContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 174;
				setVariable();
				}
				break;
			case 4:
				_localctx = new StatementSelectExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 175;
				selectStatement();
				}
				break;
			case 5:
				_localctx = new StatementUpdateExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 176;
				updateStatement();
				}
				break;
			case 6:
				_localctx = new StatementInsertExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 177;
				insertStatement();
				}
				break;
			case 7:
				_localctx = new StatementDeleteExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 178;
				deleteStatement();
				}
				break;
			case 8:
				_localctx = new StatementEchoContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 179;
				echoStatement();
				}
				break;
			case 9:
				_localctx = new StatementCallContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 180;
				callStatement();
				}
				break;
			case 10:
				_localctx = new StatementIfContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 181;
				ifStatement();
				}
				break;
			case 11:
				_localctx = new StatementExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 182;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSignatureContext : ParserRuleContext {
		public IdentifierSimpleContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(QueryCatParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSimpleContext identifierSimple() {
			return GetRuleContext<IdentifierSimpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext[] functionArg() {
			return GetRuleContexts<FunctionArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext functionArg(int i) {
			return GetRuleContext<FunctionArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(QueryCatParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public FunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSignatureContext functionSignature() {
		FunctionSignatureContext _localctx = new FunctionSignatureContext(Context, State);
		EnterRule(_localctx, 4, RULE_functionSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			_localctx.name = identifierSimple();
			State = 186;
			Match(LEFT_PAREN);
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELLIPSIS || _la==AT_SIGN || _la==NO_QUOTES_IDENTIFIER || _la==QUOTES_IDENTIFIER) {
				{
				State = 187;
				functionArg();
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 188;
					Match(COMMA);
					State = 189;
					functionArg();
					}
					}
					State = 194;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 197;
			Match(RIGHT_PAREN);
			State = 200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 198;
				Match(COLON);
				State = 199;
				functionType();
				}
			}

			State = 202;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(QueryCatParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSimpleContext identifierSimple() {
			return GetRuleContext<IdentifierSimpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(QueryCatParser.GREATER, 0); }
		public FunctionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeContext functionType() {
		FunctionTypeContext _localctx = new FunctionTypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_functionType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			type();
			State = 209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LESS) {
				{
				State = 205;
				Match(LESS);
				State = 206;
				identifierSimple();
				State = 207;
				Match(GREATER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgContext : ParserRuleContext {
		public IToken variadic;
		public IToken optional;
		public IToken isArray;
		public LiteralContext @default;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSimpleContext identifierSimple() {
			return GetRuleContext<IdentifierSimpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(QueryCatParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSIS() { return GetToken(QueryCatParser.ELLIPSIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(QueryCatParser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_RIGHT_BRACKET() { return GetToken(QueryCatParser.LEFT_RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(QueryCatParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(QueryCatParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(QueryCatParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgContext functionArg() {
		FunctionArgContext _localctx = new FunctionArgContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELLIPSIS) {
				{
				State = 211;
				_localctx.variadic = Match(ELLIPSIS);
				}
			}

			State = 214;
			identifierSimple();
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUESTION) {
				{
				State = 215;
				_localctx.optional = Match(QUESTION);
				}
			}

			State = 218;
			Match(COLON);
			State = 219;
			functionType();
			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_RIGHT_BRACKET) {
				{
				State = 220;
				_localctx.isArray = Match(LEFT_RIGHT_BRACKET);
				}
			}

			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18014398517870600L) != 0)) {
				{
				State = 223;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 18014398517870600L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 224;
				_localctx.@default = literal();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSimpleContext identifierSimple() {
			return GetRuleContext<IdentifierSimpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallArgContext[] functionCallArg() {
			return GetRuleContexts<FunctionCallArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallArgContext functionCallArg(int i) {
			return GetRuleContext<FunctionCallArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(QueryCatParser.STAR, 0); }
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 10, RULE_functionCall);
		int _la;
		try {
			State = 246;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 227;
				identifierSimple();
				State = 228;
				Match(LEFT_PAREN);
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -8995940255671746558L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 531502260801L) != 0) || ((((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & 63L) != 0)) {
					{
					State = 229;
					functionCallArg();
					State = 234;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 230;
						Match(COMMA);
						State = 231;
						functionCallArg();
						}
						}
						State = 236;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 239;
				Match(RIGHT_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 241;
				identifierSimple();
				State = 242;
				Match(LEFT_PAREN);
				State = 243;
				Match(STAR);
				State = 244;
				Match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSimpleContext identifierSimple() {
			return GetRuleContext<IdentifierSimpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSOCIATION() { return GetToken(QueryCatParser.ASSOCIATION, 0); }
		public FunctionCallArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallArgContext functionCallArg() {
		FunctionCallArgContext _localctx = new FunctionCallArgContext(Context, State);
		EnterRule(_localctx, 12, RULE_functionCallArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 248;
				identifierSimple();
				State = 249;
				Match(ASSOCIATION);
				}
				break;
			}
			State = 253;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(QueryCatParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSimpleContext identifierSimple() {
			return GetRuleContext<IdentifierSimpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(QueryCatParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public DeclareVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareVariableContext declareVariable() {
		DeclareVariableContext _localctx = new DeclareVariableContext(Context, State);
		EnterRule(_localctx, 14, RULE_declareVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			Match(DECLARE);
			State = 256;
			identifierSimple();
			State = 257;
			type();
			State = 260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 258;
				Match(ASSIGN);
				State = 259;
				statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(QueryCatParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(QueryCatParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public SetVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetVariableContext setVariable() {
		SetVariableContext _localctx = new SetVariableContext(Context, State);
		EnterRule(_localctx, 16, RULE_setVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			Match(SET);
			State = 263;
			identifier();
			State = 264;
			Match(ASSIGN);
			State = 265;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementContext selectStatement() {
		SelectStatementContext _localctx = new SelectStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_selectStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			selectQueryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectOrderByClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(QueryCatParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(QueryCatParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectSortSpecificationContext[] selectSortSpecification() {
			return GetRuleContexts<SelectSortSpecificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSortSpecificationContext selectSortSpecification(int i) {
			return GetRuleContext<SelectSortSpecificationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectOrderByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectOrderByClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectOrderByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectOrderByClauseContext selectOrderByClause() {
		SelectOrderByClauseContext _localctx = new SelectOrderByClauseContext(Context, State);
		EnterRule(_localctx, 20, RULE_selectOrderByClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			Match(ORDER);
			State = 270;
			Match(BY);
			State = 271;
			selectSortSpecification();
			State = 276;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 272;
					Match(COMMA);
					State = 273;
					selectSortSpecification();
					}
					} 
				}
				State = 278;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectSortSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(QueryCatParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(QueryCatParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS() { return GetToken(QueryCatParser.NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(QueryCatParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(QueryCatParser.LAST, 0); }
		public SelectSortSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectSortSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSortSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectSortSpecificationContext selectSortSpecification() {
		SelectSortSpecificationContext _localctx = new SelectSortSpecificationContext(Context, State);
		EnterRule(_localctx, 22, RULE_selectSortSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			expression(0);
			State = 281;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 280;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 287;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				{
				State = 283;
				Match(NULLS);
				State = 284;
				Match(FIRST);
				}
				}
				break;
			case 2:
				{
				{
				State = 285;
				Match(NULLS);
				State = 286;
				Match(LAST);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectAliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSimpleContext identifierSimple() {
			return GetRuleContext<IdentifierSimpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(QueryCatParser.AS, 0); }
		public SelectAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectAliasContext selectAlias() {
		SelectAliasContext _localctx = new SelectAliasContext(Context, State);
		EnterRule(_localctx, 24, RULE_selectAlias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 289;
				Match(AS);
				}
			}

			State = 294;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT_SIGN:
			case NO_QUOTES_IDENTIFIER:
			case QUOTES_IDENTIFIER:
				{
				State = 292;
				identifierSimple();
				}
				break;
			case STRING_LITERAL:
				{
				State = 293;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectQueryExpressionContext : ParserRuleContext {
		public SelectQueryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectQueryExpression; } }
	 
		public SelectQueryExpressionContext() { }
		public virtual void CopyFrom(SelectQueryExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectQueryExpressionFullContext : SelectQueryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionBodyContext selectQueryExpressionBody() {
			return GetRuleContext<SelectQueryExpressionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectWithClauseContext selectWithClause() {
			return GetRuleContext<SelectWithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectOrderByClauseContext selectOrderByClause() {
			return GetRuleContext<SelectOrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectLimitClauseContext selectLimitClause() {
			return GetRuleContext<SelectLimitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectOffsetClauseContext selectOffsetClause() {
			return GetRuleContext<SelectOffsetClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectFetchFirstClauseContext selectFetchFirstClause() {
			return GetRuleContext<SelectFetchFirstClauseContext>(0);
		}
		public SelectQueryExpressionFullContext(SelectQueryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQueryExpressionFull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectQueryExpressionContext selectQueryExpression() {
		SelectQueryExpressionContext _localctx = new SelectQueryExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_selectQueryExpression);
		try {
			_localctx = new SelectQueryExpressionFullContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 296;
				selectWithClause();
				}
				break;
			}
			State = 299;
			selectQueryExpressionBody(0);
			State = 301;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 300;
				selectOrderByClause();
				}
				break;
			}
			State = 304;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 303;
				selectLimitClause();
				}
				break;
			}
			State = 307;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 306;
				selectOffsetClause();
				}
				break;
			}
			State = 310;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 309;
				selectFetchFirstClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectQueryExpressionBodyContext : ParserRuleContext {
		public SelectQueryExpressionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectQueryExpressionBody; } }
	 
		public SelectQueryExpressionBodyContext() { }
		public virtual void CopyFrom(SelectQueryExpressionBodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectQueryExpressionBodyUnionExceptContext : SelectQueryExpressionBodyContext {
		public SelectQueryExpressionBodyContext left;
		public SelectQueryExpressionBodyContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionBodyContext[] selectQueryExpressionBody() {
			return GetRuleContexts<SelectQueryExpressionBodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionBodyContext selectQueryExpressionBody(int i) {
			return GetRuleContext<SelectQueryExpressionBodyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(QueryCatParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(QueryCatParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(QueryCatParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(QueryCatParser.ALL, 0); }
		public SelectQueryExpressionBodyUnionExceptContext(SelectQueryExpressionBodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQueryExpressionBodyUnionExcept(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectQueryExpressionBodyIntersectContext : SelectQueryExpressionBodyContext {
		public SelectQueryExpressionBodyContext left;
		public SelectQueryExpressionBodyContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT() { return GetToken(QueryCatParser.INTERSECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionBodyContext[] selectQueryExpressionBody() {
			return GetRuleContexts<SelectQueryExpressionBodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionBodyContext selectQueryExpressionBody(int i) {
			return GetRuleContext<SelectQueryExpressionBodyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(QueryCatParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(QueryCatParser.ALL, 0); }
		public SelectQueryExpressionBodyIntersectContext(SelectQueryExpressionBodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQueryExpressionBodyIntersect(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectQueryExpressionBodyPrimaryContext : SelectQueryExpressionBodyContext {
		public SelectQueryPrimaryContext left;
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryPrimaryContext selectQueryPrimary() {
			return GetRuleContext<SelectQueryPrimaryContext>(0);
		}
		public SelectQueryExpressionBodyPrimaryContext(SelectQueryExpressionBodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQueryExpressionBodyPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectQueryExpressionBodyContext selectQueryExpressionBody() {
		return selectQueryExpressionBody(0);
	}

	private SelectQueryExpressionBodyContext selectQueryExpressionBody(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SelectQueryExpressionBodyContext _localctx = new SelectQueryExpressionBodyContext(Context, _parentState);
		SelectQueryExpressionBodyContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_selectQueryExpressionBody, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SelectQueryExpressionBodyPrimaryContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 313;
			((SelectQueryExpressionBodyPrimaryContext)_localctx).left = selectQueryPrimary();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 329;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 327;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
					case 1:
						{
						_localctx = new SelectQueryExpressionBodyIntersectContext(new SelectQueryExpressionBodyContext(_parentctx, _parentState));
						((SelectQueryExpressionBodyIntersectContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_selectQueryExpressionBody);
						State = 315;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 316;
						Match(INTERSECT);
						State = 318;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==ALL || _la==DISTINCT) {
							{
							State = 317;
							_la = TokenStream.LA(1);
							if ( !(_la==ALL || _la==DISTINCT) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
						}

						State = 320;
						((SelectQueryExpressionBodyIntersectContext)_localctx).right = selectQueryExpressionBody(3);
						}
						break;
					case 2:
						{
						_localctx = new SelectQueryExpressionBodyUnionExceptContext(new SelectQueryExpressionBodyContext(_parentctx, _parentState));
						((SelectQueryExpressionBodyUnionExceptContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_selectQueryExpressionBody);
						State = 321;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 322;
						_la = TokenStream.LA(1);
						if ( !(_la==EXCEPT || _la==UNION) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 324;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==ALL || _la==DISTINCT) {
							{
							State = 323;
							_la = TokenStream.LA(1);
							if ( !(_la==ALL || _la==DISTINCT) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
						}

						State = 326;
						((SelectQueryExpressionBodyUnionExceptContext)_localctx).right = selectQueryExpressionBody(2);
						}
						break;
					}
					} 
				}
				State = 331;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SelectQueryPrimaryContext : ParserRuleContext {
		public SelectQueryPrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectQueryPrimary; } }
	 
		public SelectQueryPrimaryContext() { }
		public virtual void CopyFrom(SelectQueryPrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectQueryPrimaryNoParensContext : SelectQueryPrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectQuerySpecificationContext selectQuerySpecification() {
			return GetRuleContext<SelectQuerySpecificationContext>(0);
		}
		public SelectQueryPrimaryNoParensContext(SelectQueryPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQueryPrimaryNoParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectQueryPrimaryParensContext : SelectQueryPrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		public SelectQueryPrimaryParensContext(SelectQueryPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQueryPrimaryParens(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectQueryPrimaryContext selectQueryPrimary() {
		SelectQueryPrimaryContext _localctx = new SelectQueryPrimaryContext(Context, State);
		EnterRule(_localctx, 30, RULE_selectQueryPrimary);
		try {
			State = 337;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
			case WITH:
				_localctx = new SelectQueryPrimaryNoParensContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 332;
				selectQuerySpecification();
				}
				break;
			case LEFT_PAREN:
				_localctx = new SelectQueryPrimaryParensContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 333;
				Match(LEFT_PAREN);
				State = 334;
				selectQueryExpression();
				State = 335;
				Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectQuerySpecificationContext : ParserRuleContext {
		public SelectQuerySpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectQuerySpecification; } }
	 
		public SelectQuerySpecificationContext() { }
		public virtual void CopyFrom(SelectQuerySpecificationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectQuerySpecificationFullContext : SelectQuerySpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(QueryCatParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectListContext selectList() {
			return GetRuleContext<SelectListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectWithClauseContext selectWithClause() {
			return GetRuleContext<SelectWithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTopClauseContext selectTopClause() {
			return GetRuleContext<SelectTopClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectDistinctClauseContext selectDistinctClause() {
			return GetRuleContext<SelectDistinctClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectExceptContext selectExcept() {
			return GetRuleContext<SelectExceptContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTargetContext selectTarget() {
			return GetRuleContext<SelectTargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectFromClauseContext selectFromClause() {
			return GetRuleContext<SelectFromClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectWindowContext selectWindow() {
			return GetRuleContext<SelectWindowContext>(0);
		}
		public SelectQuerySpecificationFullContext(SelectQuerySpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQuerySpecificationFull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectQuerySpecificationContext selectQuerySpecification() {
		SelectQuerySpecificationContext _localctx = new SelectQuerySpecificationContext(Context, State);
		EnterRule(_localctx, 32, RULE_selectQuerySpecification);
		int _la;
		try {
			_localctx = new SelectQuerySpecificationFullContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 339;
				selectWithClause();
				}
			}

			State = 342;
			Match(SELECT);
			State = 344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOP) {
				{
				State = 343;
				selectTopClause();
				}
			}

			State = 347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				State = 346;
				selectDistinctClause();
				}
			}

			State = 349;
			selectList();
			State = 351;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 350;
				selectExcept();
				}
				break;
			}
			State = 354;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 353;
				selectTarget();
				}
				break;
			}
			State = 357;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 356;
				selectFromClause();
				}
				break;
			}
			State = 360;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 359;
				selectWindow();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectSublistContext[] selectSublist() {
			return GetRuleContexts<SelectSublistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSublistContext selectSublist(int i) {
			return GetRuleContext<SelectSublistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectListContext selectList() {
		SelectListContext _localctx = new SelectListContext(Context, State);
		EnterRule(_localctx, 34, RULE_selectList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			selectSublist();
			State = 367;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 363;
					Match(COMMA);
					State = 364;
					selectSublist();
					}
					} 
				}
				State = 369;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectExceptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(QueryCatParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectExceptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectExcept; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectExcept(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectExceptContext selectExcept() {
		SelectExceptContext _localctx = new SelectExceptContext(Context, State);
		EnterRule(_localctx, 36, RULE_selectExcept);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			Match(EXCEPT);
			State = 371;
			identifier();
			State = 376;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 372;
					Match(COMMA);
					State = 373;
					identifier();
					}
					} 
				}
				State = 378;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectDistinctClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(QueryCatParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(QueryCatParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectDistinctOnClauseContext selectDistinctOnClause() {
			return GetRuleContext<SelectDistinctOnClauseContext>(0);
		}
		public SelectDistinctClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectDistinctClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectDistinctClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectDistinctClauseContext selectDistinctClause() {
		SelectDistinctClauseContext _localctx = new SelectDistinctClauseContext(Context, State);
		EnterRule(_localctx, 38, RULE_selectDistinctClause);
		try {
			State = 382;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 379;
				Match(ALL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 380;
				Match(DISTINCT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 381;
				selectDistinctOnClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectDistinctOnClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(QueryCatParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(QueryCatParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext[] simpleExpression() {
			return GetRuleContexts<SimpleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression(int i) {
			return GetRuleContext<SimpleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectDistinctOnClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectDistinctOnClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectDistinctOnClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectDistinctOnClauseContext selectDistinctOnClause() {
		SelectDistinctOnClauseContext _localctx = new SelectDistinctOnClauseContext(Context, State);
		EnterRule(_localctx, 40, RULE_selectDistinctOnClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384;
			Match(DISTINCT);
			State = 385;
			Match(ON);
			State = 386;
			Match(LEFT_PAREN);
			State = 387;
			simpleExpression(0);
			State = 392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 388;
				Match(COMMA);
				State = 389;
				simpleExpression(0);
				}
				}
				State = 394;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 395;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectWithClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(QueryCatParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectWithElementContext[] selectWithElement() {
			return GetRuleContexts<SelectWithElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectWithElementContext selectWithElement(int i) {
			return GetRuleContext<SelectWithElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(QueryCatParser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectWithClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectWithClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectWithClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectWithClauseContext selectWithClause() {
		SelectWithClauseContext _localctx = new SelectWithClauseContext(Context, State);
		EnterRule(_localctx, 42, RULE_selectWithClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397;
			Match(WITH);
			State = 399;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RECURSIVE) {
				{
				State = 398;
				Match(RECURSIVE);
				}
			}

			State = 401;
			selectWithElement();
			State = 406;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 402;
				Match(COMMA);
				State = 403;
				selectWithElement();
				}
				}
				State = 408;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectWithElementContext : ParserRuleContext {
		public IdentifierSimpleContext name;
		public SelectQueryExpressionContext query;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(QueryCatParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LEFT_PAREN() { return GetTokens(QueryCatParser.LEFT_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN(int i) {
			return GetToken(QueryCatParser.LEFT_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RIGHT_PAREN() { return GetTokens(QueryCatParser.RIGHT_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN(int i) {
			return GetToken(QueryCatParser.RIGHT_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSimpleContext identifierSimple() {
			return GetRuleContext<IdentifierSimpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectWithColumnListContext selectWithColumnList() {
			return GetRuleContext<SelectWithColumnListContext>(0);
		}
		public SelectWithElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectWithElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectWithElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectWithElementContext selectWithElement() {
		SelectWithElementContext _localctx = new SelectWithElementContext(Context, State);
		EnterRule(_localctx, 44, RULE_selectWithElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409;
			_localctx.name = identifierSimple();
			State = 414;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 410;
				Match(LEFT_PAREN);
				State = 411;
				selectWithColumnList();
				State = 412;
				Match(RIGHT_PAREN);
				}
			}

			State = 416;
			Match(AS);
			State = 417;
			Match(LEFT_PAREN);
			State = 418;
			_localctx.query = selectQueryExpression();
			State = 419;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectWithColumnListContext : ParserRuleContext {
		public IdentifierContext name;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectWithColumnListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectWithColumnList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectWithColumnList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectWithColumnListContext selectWithColumnList() {
		SelectWithColumnListContext _localctx = new SelectWithColumnListContext(Context, State);
		EnterRule(_localctx, 46, RULE_selectWithColumnList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 421;
			_localctx.name = identifier();
			State = 426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 422;
				Match(COMMA);
				State = 423;
				_localctx.name = identifier();
				}
				}
				State = 428;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectSublistContext : ParserRuleContext {
		public SelectSublistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectSublist; } }
	 
		public SelectSublistContext() { }
		public virtual void CopyFrom(SelectSublistContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectSublistExpressionContext : SelectSublistContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public SelectSublistExpressionContext(SelectSublistContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSublistExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectSublistWindowContext : SelectSublistContext {
		public IdentifierSimpleContext windowName;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(QueryCatParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectWindowSpecificationContext selectWindowSpecification() {
			return GetRuleContext<SelectWindowSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSimpleContext identifierSimple() {
			return GetRuleContext<IdentifierSimpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public SelectSublistWindowContext(SelectSublistContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSublistWindow(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectSublistAllContext : SelectSublistContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(QueryCatParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSimpleContext identifierSimple() {
			return GetRuleContext<IdentifierSimpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(QueryCatParser.PERIOD, 0); }
		public SelectSublistAllContext(SelectSublistContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSublistAll(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectSublistContext selectSublist() {
		SelectSublistContext _localctx = new SelectSublistContext(Context, State);
		EnterRule(_localctx, 48, RULE_selectSublist);
		int _la;
		try {
			State = 448;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				_localctx = new SelectSublistAllContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 432;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT_SIGN || _la==NO_QUOTES_IDENTIFIER || _la==QUOTES_IDENTIFIER) {
					{
					State = 429;
					identifierSimple();
					State = 430;
					Match(PERIOD);
					}
				}

				State = 434;
				Match(STAR);
				}
				break;
			case 2:
				_localctx = new SelectSublistWindowContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 435;
				functionCall();
				State = 436;
				Match(OVER);
				State = 439;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AT_SIGN:
				case NO_QUOTES_IDENTIFIER:
				case QUOTES_IDENTIFIER:
					{
					State = 437;
					((SelectSublistWindowContext)_localctx).windowName = identifierSimple();
					}
					break;
				case LEFT_PAREN:
					{
					State = 438;
					selectWindowSpecification();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 442;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
				case 1:
					{
					State = 441;
					selectAlias();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new SelectSublistExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 444;
				expression(0);
				State = 446;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
				case 1:
					{
					State = 445;
					selectAlias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTargetContext : ParserRuleContext {
		public FunctionCallContext into;
		public IToken uri;
		public FunctionCallContext format;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(QueryCatParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext[] functionCall() {
			return GetRuleContexts<FunctionCallContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall(int i) {
			return GetRuleContext<FunctionCallContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(QueryCatParser.FORMAT, 0); }
		public SelectTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTarget; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTarget(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTargetContext selectTarget() {
		SelectTargetContext _localctx = new SelectTargetContext(Context, State);
		EnterRule(_localctx, 50, RULE_selectTarget);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450;
			Match(INTO);
			State = 453;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT_SIGN:
			case NO_QUOTES_IDENTIFIER:
			case QUOTES_IDENTIFIER:
				{
				State = 451;
				_localctx.into = functionCall();
				}
				break;
			case STRING_LITERAL:
				{
				State = 452;
				_localctx.uri = Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 457;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 455;
				Match(FORMAT);
				State = 456;
				_localctx.format = functionCall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectFromClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableReferenceListContext selectTableReferenceList() {
			return GetRuleContext<SelectTableReferenceListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSearchConditionContext selectSearchCondition() {
			return GetRuleContext<SelectSearchConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectGroupByContext selectGroupBy() {
			return GetRuleContext<SelectGroupByContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectHavingContext selectHaving() {
			return GetRuleContext<SelectHavingContext>(0);
		}
		public SelectFromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectFromClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectFromClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectFromClauseContext selectFromClause() {
		SelectFromClauseContext _localctx = new SelectFromClauseContext(Context, State);
		EnterRule(_localctx, 52, RULE_selectFromClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459;
			selectTableReferenceList();
			State = 461;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 460;
				selectSearchCondition();
				}
				break;
			}
			State = 464;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				State = 463;
				selectGroupBy();
				}
				break;
			}
			State = 467;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 466;
				selectHaving();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTableReferenceListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(QueryCatParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableReferenceContext[] selectTableReference() {
			return GetRuleContexts<SelectTableReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableReferenceContext selectTableReference(int i) {
			return GetRuleContext<SelectTableReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectTableReferenceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTableReferenceList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTableReferenceList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTableReferenceListContext selectTableReferenceList() {
		SelectTableReferenceListContext _localctx = new SelectTableReferenceListContext(Context, State);
		EnterRule(_localctx, 54, RULE_selectTableReferenceList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 469;
			Match(FROM);
			State = 470;
			selectTableReference();
			State = 475;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 471;
					Match(COMMA);
					State = 472;
					selectTableReference();
					}
					} 
				}
				State = 477;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTableReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectTablePrimaryContext selectTablePrimary() {
			return GetRuleContext<SelectTablePrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableJoinedContext[] selectTableJoined() {
			return GetRuleContexts<SelectTableJoinedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableJoinedContext selectTableJoined(int i) {
			return GetRuleContext<SelectTableJoinedContext>(i);
		}
		public SelectTableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTableReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTableReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTableReferenceContext selectTableReference() {
		SelectTableReferenceContext _localctx = new SelectTableReferenceContext(Context, State);
		EnterRule(_localctx, 56, RULE_selectTableReference);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 478;
			selectTablePrimary();
			State = 482;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 479;
					selectTableJoined();
					}
					} 
				}
				State = 484;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTableValuesRowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext[] simpleExpression() {
			return GetRuleContexts<SimpleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression(int i) {
			return GetRuleContext<SimpleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectTableValuesRowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTableValuesRow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTableValuesRow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTableValuesRowContext selectTableValuesRow() {
		SelectTableValuesRowContext _localctx = new SelectTableValuesRowContext(Context, State);
		EnterRule(_localctx, 58, RULE_selectTableValuesRow);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 485;
			Match(LEFT_PAREN);
			State = 486;
			simpleExpression(0);
			State = 491;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 487;
				Match(COMMA);
				State = 488;
				simpleExpression(0);
				}
				}
				State = 493;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 494;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTableValuesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(QueryCatParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableValuesRowContext[] selectTableValuesRow() {
			return GetRuleContexts<SelectTableValuesRowContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableValuesRowContext selectTableValuesRow(int i) {
			return GetRuleContext<SelectTableValuesRowContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectTableValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTableValues; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTableValues(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTableValuesContext selectTableValues() {
		SelectTableValuesContext _localctx = new SelectTableValuesContext(Context, State);
		EnterRule(_localctx, 60, RULE_selectTableValues);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 496;
			Match(VALUES);
			State = 497;
			selectTableValuesRow();
			State = 502;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 498;
				Match(COMMA);
				State = 499;
				selectTableValuesRow();
				}
				}
				State = 504;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTablePrimaryContext : ParserRuleContext {
		public SelectTablePrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTablePrimary; } }
	 
		public SelectTablePrimaryContext() { }
		public virtual void CopyFrom(SelectTablePrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectTablePrimaryExpressionContext : SelectTablePrimaryContext {
		public FunctionCallContext format;
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(QueryCatParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public SelectTablePrimaryExpressionContext(SelectTablePrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTablePrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectTablePrimaryNoFormatContext : SelectTablePrimaryContext {
		public FunctionCallContext func;
		public FunctionCallContext format;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext[] functionCall() {
			return GetRuleContexts<FunctionCallContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall(int i) {
			return GetRuleContext<FunctionCallContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(QueryCatParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public SelectTablePrimaryNoFormatContext(SelectTablePrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTablePrimaryNoFormat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectTablePrimarySubqueryContext : SelectTablePrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public SelectTablePrimarySubqueryContext(SelectTablePrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTablePrimarySubquery(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectTablePrimaryWithFormatContext : SelectTablePrimaryContext {
		public IToken uri;
		public FunctionCallContext format;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(QueryCatParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public SelectTablePrimaryWithFormatContext(SelectTablePrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTablePrimaryWithFormat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectTablePrimaryTableValuesContext : SelectTablePrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableValuesContext selectTableValues() {
			return GetRuleContext<SelectTableValuesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public SelectTablePrimaryTableValuesContext(SelectTablePrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTablePrimaryTableValues(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectTablePrimaryStdinContext : SelectTablePrimaryContext {
		public FunctionCallContext format;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(QueryCatParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(QueryCatParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public SelectTablePrimaryStdinContext(SelectTablePrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTablePrimaryStdin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectTablePrimaryIdentifierContext : SelectTablePrimaryContext {
		public IdentifierContext name;
		public FunctionCallContext format;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(QueryCatParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public SelectTablePrimaryIdentifierContext(SelectTablePrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTablePrimaryIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTablePrimaryContext selectTablePrimary() {
		SelectTablePrimaryContext _localctx = new SelectTablePrimaryContext(Context, State);
		EnterRule(_localctx, 62, RULE_selectTablePrimary);
		try {
			State = 557;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				_localctx = new SelectTablePrimaryNoFormatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 505;
				((SelectTablePrimaryNoFormatContext)_localctx).func = functionCall();
				State = 508;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
				case 1:
					{
					State = 506;
					Match(FORMAT);
					State = 507;
					((SelectTablePrimaryNoFormatContext)_localctx).format = functionCall();
					}
					break;
				}
				State = 511;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
				case 1:
					{
					State = 510;
					selectAlias();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new SelectTablePrimaryStdinContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 513;
				Match(MINUS);
				State = 516;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
				case 1:
					{
					State = 514;
					Match(FORMAT);
					State = 515;
					((SelectTablePrimaryStdinContext)_localctx).format = functionCall();
					}
					break;
				}
				State = 519;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
				case 1:
					{
					State = 518;
					selectAlias();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new SelectTablePrimaryWithFormatContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 521;
				((SelectTablePrimaryWithFormatContext)_localctx).uri = Match(STRING_LITERAL);
				State = 524;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
				case 1:
					{
					State = 522;
					Match(FORMAT);
					State = 523;
					((SelectTablePrimaryWithFormatContext)_localctx).format = functionCall();
					}
					break;
				}
				State = 527;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
				case 1:
					{
					State = 526;
					selectAlias();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SelectTablePrimarySubqueryContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 529;
				Match(LEFT_PAREN);
				State = 530;
				selectQueryExpression();
				State = 531;
				Match(RIGHT_PAREN);
				State = 533;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
				case 1:
					{
					State = 532;
					selectAlias();
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new SelectTablePrimaryIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 535;
				((SelectTablePrimaryIdentifierContext)_localctx).name = identifier();
				State = 538;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
				case 1:
					{
					State = 536;
					Match(FORMAT);
					State = 537;
					((SelectTablePrimaryIdentifierContext)_localctx).format = functionCall();
					}
					break;
				}
				State = 541;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
				case 1:
					{
					State = 540;
					selectAlias();
					}
					break;
				}
				}
				break;
			case 6:
				_localctx = new SelectTablePrimaryTableValuesContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 543;
				Match(LEFT_PAREN);
				State = 544;
				selectTableValues();
				State = 545;
				Match(RIGHT_PAREN);
				State = 547;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
				case 1:
					{
					State = 546;
					selectAlias();
					}
					break;
				}
				}
				break;
			case 7:
				_localctx = new SelectTablePrimaryExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 549;
				simpleExpression(0);
				State = 552;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
				case 1:
					{
					State = 550;
					Match(FORMAT);
					State = 551;
					((SelectTablePrimaryExpressionContext)_localctx).format = functionCall();
					}
					break;
				}
				State = 555;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
				case 1:
					{
					State = 554;
					selectAlias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTableJoinedContext : ParserRuleContext {
		public SelectTableJoinedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTableJoined; } }
	 
		public SelectTableJoinedContext() { }
		public virtual void CopyFrom(SelectTableJoinedContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectTableJoinedUsingContext : SelectTableJoinedContext {
		public SelectTablePrimaryContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(QueryCatParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(QueryCatParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectTablePrimaryContext selectTablePrimary() {
			return GetRuleContext<SelectTablePrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectJoinTypeContext selectJoinType() {
			return GetRuleContext<SelectJoinTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectTableJoinedUsingContext(SelectTableJoinedContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTableJoinedUsing(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectTableJoinedOnContext : SelectTableJoinedContext {
		public SelectTablePrimaryContext right;
		public ExpressionContext condition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(QueryCatParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(QueryCatParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectTablePrimaryContext selectTablePrimary() {
			return GetRuleContext<SelectTablePrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectJoinTypeContext selectJoinType() {
			return GetRuleContext<SelectJoinTypeContext>(0);
		}
		public SelectTableJoinedOnContext(SelectTableJoinedContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTableJoinedOn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTableJoinedContext selectTableJoined() {
		SelectTableJoinedContext _localctx = new SelectTableJoinedContext(Context, State);
		EnterRule(_localctx, 64, RULE_selectTableJoined);
		int _la;
		try {
			State = 584;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				_localctx = new SelectTableJoinedOnContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 560;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 115)) & ~0x3f) == 0 && ((1L << (_la - 115)) & 524553L) != 0)) {
					{
					State = 559;
					selectJoinType();
					}
				}

				State = 562;
				Match(JOIN);
				State = 563;
				((SelectTableJoinedOnContext)_localctx).right = selectTablePrimary();
				State = 564;
				Match(ON);
				State = 565;
				((SelectTableJoinedOnContext)_localctx).condition = expression(0);
				}
				break;
			case 2:
				_localctx = new SelectTableJoinedUsingContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 568;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 115)) & ~0x3f) == 0 && ((1L << (_la - 115)) & 524553L) != 0)) {
					{
					State = 567;
					selectJoinType();
					}
				}

				State = 570;
				Match(JOIN);
				State = 571;
				((SelectTableJoinedUsingContext)_localctx).right = selectTablePrimary();
				State = 572;
				Match(USING);
				State = 573;
				Match(LEFT_PAREN);
				State = 574;
				identifier();
				State = 579;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 575;
					Match(COMMA);
					State = 576;
					identifier();
					}
					}
					State = 581;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 582;
				Match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectJoinTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(QueryCatParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(QueryCatParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(QueryCatParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(QueryCatParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(QueryCatParser.OUTER, 0); }
		public SelectJoinTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectJoinType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectJoinType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectJoinTypeContext selectJoinType() {
		SelectJoinTypeContext _localctx = new SelectJoinTypeContext(Context, State);
		EnterRule(_localctx, 66, RULE_selectJoinType);
		int _la;
		try {
			State = 591;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INNER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 586;
				Match(INNER);
				}
				break;
			case FULL:
			case LEFT:
			case RIGHT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 587;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 115)) & ~0x3f) == 0 && ((1L << (_la - 115)) & 524545L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 589;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 588;
					Match(OUTER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectGroupByContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(QueryCatParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(QueryCatParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectGroupByContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectGroupBy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectGroupBy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectGroupByContext selectGroupBy() {
		SelectGroupByContext _localctx = new SelectGroupByContext(Context, State);
		EnterRule(_localctx, 68, RULE_selectGroupBy);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 593;
			Match(GROUP);
			State = 594;
			Match(BY);
			State = 595;
			expression(0);
			State = 600;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 596;
					Match(COMMA);
					State = 597;
					expression(0);
					}
					} 
				}
				State = 602;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectHavingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(QueryCatParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectHavingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectHaving; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectHaving(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectHavingContext selectHaving() {
		SelectHavingContext _localctx = new SelectHavingContext(Context, State);
		EnterRule(_localctx, 70, RULE_selectHaving);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 603;
			Match(HAVING);
			State = 604;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectSearchConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(QueryCatParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectSearchConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectSearchCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSearchCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectSearchConditionContext selectSearchCondition() {
		SelectSearchConditionContext _localctx = new SelectSearchConditionContext(Context, State);
		EnterRule(_localctx, 72, RULE_selectSearchCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 606;
			Match(WHERE);
			State = 607;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectWindowSpecificationContext : ParserRuleContext {
		public IdentifierSimpleContext existingWindowName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectWindowPartitionClauseContext selectWindowPartitionClause() {
			return GetRuleContext<SelectWindowPartitionClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectWindowOrderClauseContext selectWindowOrderClause() {
			return GetRuleContext<SelectWindowOrderClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSimpleContext identifierSimple() {
			return GetRuleContext<IdentifierSimpleContext>(0);
		}
		public SelectWindowSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectWindowSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectWindowSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectWindowSpecificationContext selectWindowSpecification() {
		SelectWindowSpecificationContext _localctx = new SelectWindowSpecificationContext(Context, State);
		EnterRule(_localctx, 74, RULE_selectWindowSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 609;
			Match(LEFT_PAREN);
			State = 611;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT_SIGN || _la==NO_QUOTES_IDENTIFIER || _la==QUOTES_IDENTIFIER) {
				{
				State = 610;
				_localctx.existingWindowName = identifierSimple();
				}
			}

			State = 614;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 613;
				selectWindowPartitionClause();
				}
			}

			State = 617;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 616;
				selectWindowOrderClause();
				}
			}

			State = 619;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectWindowPartitionClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(QueryCatParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(QueryCatParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectWindowPartitionClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectWindowPartitionClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectWindowPartitionClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectWindowPartitionClauseContext selectWindowPartitionClause() {
		SelectWindowPartitionClauseContext _localctx = new SelectWindowPartitionClauseContext(Context, State);
		EnterRule(_localctx, 76, RULE_selectWindowPartitionClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 621;
			Match(PARTITION);
			State = 622;
			Match(BY);
			State = 623;
			expression(0);
			State = 628;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 624;
				Match(COMMA);
				State = 625;
				expression(0);
				}
				}
				State = 630;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectWindowOrderClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(QueryCatParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(QueryCatParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectSortSpecificationContext[] selectSortSpecification() {
			return GetRuleContexts<SelectSortSpecificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSortSpecificationContext selectSortSpecification(int i) {
			return GetRuleContext<SelectSortSpecificationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectWindowOrderClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectWindowOrderClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectWindowOrderClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectWindowOrderClauseContext selectWindowOrderClause() {
		SelectWindowOrderClauseContext _localctx = new SelectWindowOrderClauseContext(Context, State);
		EnterRule(_localctx, 78, RULE_selectWindowOrderClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631;
			Match(ORDER);
			State = 632;
			Match(BY);
			State = 633;
			selectSortSpecification();
			State = 638;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 634;
				Match(COMMA);
				State = 635;
				selectSortSpecification();
				}
				}
				State = 640;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectWindowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(QueryCatParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectWindowDefinitionListContext[] selectWindowDefinitionList() {
			return GetRuleContexts<SelectWindowDefinitionListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectWindowDefinitionListContext selectWindowDefinitionList(int i) {
			return GetRuleContext<SelectWindowDefinitionListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectWindowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectWindow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectWindow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectWindowContext selectWindow() {
		SelectWindowContext _localctx = new SelectWindowContext(Context, State);
		EnterRule(_localctx, 80, RULE_selectWindow);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 641;
			Match(WINDOW);
			State = 642;
			selectWindowDefinitionList();
			State = 647;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 643;
					Match(COMMA);
					State = 644;
					selectWindowDefinitionList();
					}
					} 
				}
				State = 649;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectWindowDefinitionListContext : ParserRuleContext {
		public IdentifierContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(QueryCatParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectWindowSpecificationContext selectWindowSpecification() {
			return GetRuleContext<SelectWindowSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SelectWindowDefinitionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectWindowDefinitionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectWindowDefinitionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectWindowDefinitionListContext selectWindowDefinitionList() {
		SelectWindowDefinitionListContext _localctx = new SelectWindowDefinitionListContext(Context, State);
		EnterRule(_localctx, 82, RULE_selectWindowDefinitionList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 650;
			_localctx.name = identifier();
			State = 651;
			Match(AS);
			State = 652;
			selectWindowSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectOffsetClauseContext : ParserRuleContext {
		public ExpressionContext offset;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(QueryCatParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(QueryCatParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(QueryCatParser.ROWS, 0); }
		public SelectOffsetClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectOffsetClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectOffsetClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectOffsetClauseContext selectOffsetClause() {
		SelectOffsetClauseContext _localctx = new SelectOffsetClauseContext(Context, State);
		EnterRule(_localctx, 84, RULE_selectOffsetClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 654;
			Match(OFFSET);
			{
			State = 655;
			_localctx.offset = expression(0);
			}
			State = 657;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				{
				State = 656;
				_la = TokenStream.LA(1);
				if ( !(_la==ROW || _la==ROWS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectFetchFirstClauseContext : ParserRuleContext {
		public ExpressionContext limit;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(QueryCatParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(QueryCatParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(QueryCatParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(QueryCatParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(QueryCatParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(QueryCatParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(QueryCatParser.ONLY, 0); }
		public SelectFetchFirstClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectFetchFirstClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectFetchFirstClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectFetchFirstClauseContext selectFetchFirstClause() {
		SelectFetchFirstClauseContext _localctx = new SelectFetchFirstClauseContext(Context, State);
		EnterRule(_localctx, 86, RULE_selectFetchFirstClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 659;
			_la = TokenStream.LA(1);
			if ( !(_la==FETCH || _la==LIMIT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 661;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FIRST || _la==NEXT) {
				{
				State = 660;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST || _la==NEXT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			{
			State = 663;
			_localctx.limit = expression(0);
			}
			State = 665;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				{
				State = 664;
				_la = TokenStream.LA(1);
				if ( !(_la==ROW || _la==ROWS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 668;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				{
				State = 667;
				_la = TokenStream.LA(1);
				if ( !(_la==ONLY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTopClauseContext : ParserRuleContext {
		public IToken limit;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOP() { return GetToken(QueryCatParser.TOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(QueryCatParser.INTEGER_LITERAL, 0); }
		public SelectTopClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTopClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTopClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTopClauseContext selectTopClause() {
		SelectTopClauseContext _localctx = new SelectTopClauseContext(Context, State);
		EnterRule(_localctx, 88, RULE_selectTopClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 670;
			Match(TOP);
			State = 671;
			_localctx.limit = Match(INTEGER_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectLimitClauseContext : ParserRuleContext {
		public ExpressionContext limit;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(QueryCatParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectLimitClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectLimitClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectLimitClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectLimitClauseContext selectLimitClause() {
		SelectLimitClauseContext _localctx = new SelectLimitClauseContext(Context, State);
		EnterRule(_localctx, 90, RULE_selectLimitClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 673;
			Match(LIMIT);
			State = 674;
			_localctx.limit = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(QueryCatParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdateSourceContext updateSource() {
			return GetRuleContext<UpdateSourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(QueryCatParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdateSetClauseContext[] updateSetClause() {
			return GetRuleContexts<UpdateSetClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateSetClauseContext updateSetClause(int i) {
			return GetRuleContext<UpdateSetClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSearchConditionContext selectSearchCondition() {
			return GetRuleContext<SelectSearchConditionContext>(0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateStatementContext updateStatement() {
		UpdateStatementContext _localctx = new UpdateStatementContext(Context, State);
		EnterRule(_localctx, 92, RULE_updateStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 676;
			Match(UPDATE);
			State = 677;
			updateSource();
			State = 678;
			Match(SET);
			State = 679;
			updateSetClause();
			State = 684;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 680;
				Match(COMMA);
				State = 681;
				updateSetClause();
				}
				}
				State = 686;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 688;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 687;
				selectSearchCondition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateSourceContext : ParserRuleContext {
		public UpdateSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateSource; } }
	 
		public UpdateSourceContext() { }
		public virtual void CopyFrom(UpdateSourceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UpdateFromVariableContext : UpdateSourceContext {
		public IdentifierContext name;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public UpdateFromVariableContext(UpdateSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateFromVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UpdateWithFormatContext : UpdateSourceContext {
		public IToken uri;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(QueryCatParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public UpdateWithFormatContext(UpdateSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateWithFormat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UpdateNoFormatContext : UpdateSourceContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public UpdateNoFormatContext(UpdateSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateNoFormat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateSourceContext updateSource() {
		UpdateSourceContext _localctx = new UpdateSourceContext(Context, State);
		EnterRule(_localctx, 94, RULE_updateSource);
		int _la;
		try {
			State = 706;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
			case 1:
				_localctx = new UpdateNoFormatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 690;
				functionCall();
				State = 692;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT_SIGN || _la==AS || ((((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & 35L) != 0)) {
					{
					State = 691;
					selectAlias();
					}
				}

				}
				break;
			case 2:
				_localctx = new UpdateWithFormatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 694;
				((UpdateWithFormatContext)_localctx).uri = Match(STRING_LITERAL);
				State = 697;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FORMAT) {
					{
					State = 695;
					Match(FORMAT);
					State = 696;
					functionCall();
					}
				}

				State = 700;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT_SIGN || _la==AS || ((((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & 35L) != 0)) {
					{
					State = 699;
					selectAlias();
					}
				}

				}
				break;
			case 3:
				_localctx = new UpdateFromVariableContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 702;
				((UpdateFromVariableContext)_localctx).name = identifier();
				State = 704;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT_SIGN || _la==AS || ((((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & 35L) != 0)) {
					{
					State = 703;
					selectAlias();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateSetClauseContext : ParserRuleContext {
		public IdentifierContext source;
		public ExpressionContext target;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(QueryCatParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UpdateSetClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateSetClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateSetClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateSetClauseContext updateSetClause() {
		UpdateSetClauseContext _localctx = new UpdateSetClauseContext(Context, State);
		EnterRule(_localctx, 96, RULE_updateSetClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 708;
			_localctx.source = identifier();
			State = 709;
			Match(EQUALS);
			State = 710;
			_localctx.target = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(QueryCatParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(QueryCatParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InsertToSourceContext insertToSource() {
			return GetRuleContext<InsertToSourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertFromSourceContext insertFromSource() {
			return GetRuleContext<InsertFromSourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertColumnsListContext insertColumnsList() {
			return GetRuleContext<InsertColumnsListContext>(0);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertStatementContext insertStatement() {
		InsertStatementContext _localctx = new InsertStatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_insertStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 712;
			Match(INSERT);
			State = 713;
			Match(INTO);
			State = 714;
			insertToSource();
			State = 716;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				{
				State = 715;
				insertColumnsList();
				}
				break;
			}
			State = 718;
			insertFromSource();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertToSourceContext : ParserRuleContext {
		public InsertToSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertToSource; } }
	 
		public InsertToSourceContext() { }
		public virtual void CopyFrom(InsertToSourceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InsertFromVariableContext : InsertToSourceContext {
		public IdentifierContext name;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public InsertFromVariableContext(InsertToSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertFromVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InsertWithFormatContext : InsertToSourceContext {
		public IToken uri;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(QueryCatParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public InsertWithFormatContext(InsertToSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertWithFormat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InsertNoFormatContext : InsertToSourceContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public InsertNoFormatContext(InsertToSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertNoFormat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertToSourceContext insertToSource() {
		InsertToSourceContext _localctx = new InsertToSourceContext(Context, State);
		EnterRule(_localctx, 100, RULE_insertToSource);
		int _la;
		try {
			State = 736;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				_localctx = new InsertNoFormatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 720;
				functionCall();
				State = 722;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT_SIGN || _la==AS || ((((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & 35L) != 0)) {
					{
					State = 721;
					selectAlias();
					}
				}

				}
				break;
			case 2:
				_localctx = new InsertWithFormatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 724;
				((InsertWithFormatContext)_localctx).uri = Match(STRING_LITERAL);
				State = 727;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FORMAT) {
					{
					State = 725;
					Match(FORMAT);
					State = 726;
					functionCall();
					}
				}

				State = 730;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT_SIGN || _la==AS || ((((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & 35L) != 0)) {
					{
					State = 729;
					selectAlias();
					}
				}

				}
				break;
			case 3:
				_localctx = new InsertFromVariableContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 732;
				((InsertFromVariableContext)_localctx).name = identifier();
				State = 734;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT_SIGN || _la==AS || ((((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & 35L) != 0)) {
					{
					State = 733;
					selectAlias();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertColumnsListContext : ParserRuleContext {
		public IdentifierContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public InsertColumnsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertColumnsList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertColumnsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertColumnsListContext insertColumnsList() {
		InsertColumnsListContext _localctx = new InsertColumnsListContext(Context, State);
		EnterRule(_localctx, 102, RULE_insertColumnsList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 738;
			Match(LEFT_PAREN);
			State = 739;
			_localctx.name = identifier();
			State = 744;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 740;
				Match(COMMA);
				State = 741;
				_localctx.name = identifier();
				}
				}
				State = 746;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 747;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertFromSourceContext : ParserRuleContext {
		public InsertFromSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertFromSource; } }
	 
		public InsertFromSourceContext() { }
		public virtual void CopyFrom(InsertFromSourceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InsertSourceQueryContext : InsertFromSourceContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		public InsertSourceQueryContext(InsertFromSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertSourceQuery(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InsertSourceTableContext : InsertFromSourceContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableValuesContext selectTableValues() {
			return GetRuleContext<SelectTableValuesContext>(0);
		}
		public InsertSourceTableContext(InsertFromSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertSourceTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertFromSourceContext insertFromSource() {
		InsertFromSourceContext _localctx = new InsertFromSourceContext(Context, State);
		EnterRule(_localctx, 104, RULE_insertFromSource);
		try {
			State = 751;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEFT_PAREN:
			case SELECT:
			case WITH:
				_localctx = new InsertSourceQueryContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 749;
				selectQueryExpression();
				}
				break;
			case VALUES:
				_localctx = new InsertSourceTableContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 750;
				selectTableValues();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(QueryCatParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(QueryCatParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeleteFromSourceContext deleteFromSource() {
			return GetRuleContext<DeleteFromSourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSearchConditionContext selectSearchCondition() {
			return GetRuleContext<SelectSearchConditionContext>(0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementContext deleteStatement() {
		DeleteStatementContext _localctx = new DeleteStatementContext(Context, State);
		EnterRule(_localctx, 106, RULE_deleteStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 753;
			Match(DELETE);
			State = 754;
			Match(FROM);
			State = 755;
			deleteFromSource();
			State = 757;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 756;
				selectSearchCondition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteFromSourceContext : ParserRuleContext {
		public DeleteFromSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteFromSource; } }
	 
		public DeleteFromSourceContext() { }
		public virtual void CopyFrom(DeleteFromSourceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeleteWithFormatContext : DeleteFromSourceContext {
		public IToken uri;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(QueryCatParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public DeleteWithFormatContext(DeleteFromSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteWithFormat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeleteNoFormatContext : DeleteFromSourceContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public DeleteNoFormatContext(DeleteFromSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteNoFormat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeleteFromVariableContext : DeleteFromSourceContext {
		public IdentifierContext name;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public DeleteFromVariableContext(DeleteFromSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteFromVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteFromSourceContext deleteFromSource() {
		DeleteFromSourceContext _localctx = new DeleteFromSourceContext(Context, State);
		EnterRule(_localctx, 108, RULE_deleteFromSource);
		int _la;
		try {
			State = 775;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				_localctx = new DeleteNoFormatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 759;
				functionCall();
				State = 761;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT_SIGN || _la==AS || ((((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & 35L) != 0)) {
					{
					State = 760;
					selectAlias();
					}
				}

				}
				break;
			case 2:
				_localctx = new DeleteWithFormatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 763;
				((DeleteWithFormatContext)_localctx).uri = Match(STRING_LITERAL);
				State = 766;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FORMAT) {
					{
					State = 764;
					Match(FORMAT);
					State = 765;
					functionCall();
					}
				}

				State = 769;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT_SIGN || _la==AS || ((((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & 35L) != 0)) {
					{
					State = 768;
					selectAlias();
					}
				}

				}
				break;
			case 3:
				_localctx = new DeleteFromVariableContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 771;
				((DeleteFromVariableContext)_localctx).name = identifier();
				State = 773;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT_SIGN || _la==AS || ((((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & 35L) != 0)) {
					{
					State = 772;
					selectAlias();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EchoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ECHO() { return GetToken(QueryCatParser.ECHO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EchoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_echoStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEchoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EchoStatementContext echoStatement() {
		EchoStatementContext _localctx = new EchoStatementContext(Context, State);
		EnterRule(_localctx, 110, RULE_echoStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 777;
			Match(ECHO);
			State = 778;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(QueryCatParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallStatementContext callStatement() {
		CallStatementContext _localctx = new CallStatementContext(Context, State);
		EnterRule(_localctx, 112, RULE_callStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 780;
			Match(CALL);
			State = 781;
			functionCall();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public IfConditionContext mainIf;
		public IfConditionContext elseIf;
		public BlockExpressionContext elseBlock;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(QueryCatParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfConditionContext[] ifCondition() {
			return GetRuleContexts<IfConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfConditionContext ifCondition(int i) {
			return GetRuleContext<IfConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSEIF() { return GetTokens(QueryCatParser.ELSEIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF(int i) {
			return GetToken(QueryCatParser.ELSEIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(QueryCatParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockExpressionContext blockExpression() {
			return GetRuleContext<BlockExpressionContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 114, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 783;
			Match(IF);
			State = 784;
			_localctx.mainIf = ifCondition();
			State = 789;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSEIF) {
				{
				{
				State = 785;
				Match(ELSEIF);
				State = 786;
				_localctx.elseIf = ifCondition();
				}
				}
				State = 791;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 794;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 792;
				Match(ELSE);
				State = 793;
				_localctx.elseBlock = blockExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfConditionContext : ParserRuleContext {
		public ExpressionContext condition;
		public BlockExpressionContext block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(QueryCatParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockExpressionContext blockExpression() {
			return GetRuleContext<BlockExpressionContext>(0);
		}
		public IfConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfConditionContext ifCondition() {
		IfConditionContext _localctx = new IfConditionContext(Context, State);
		EnterRule(_localctx, 116, RULE_ifCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 796;
			_localctx.condition = expression(0);
			State = 797;
			Match(THEN);
			State = 798;
			_localctx.block = blockExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierSimpleContext : ParserRuleContext {
		public IdentifierSimpleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierSimple; } }
	 
		public IdentifierSimpleContext() { }
		public virtual void CopyFrom(IdentifierSimpleContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierSimpleNoQuotesContext : IdentifierSimpleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_QUOTES_IDENTIFIER() { return GetToken(QueryCatParser.NO_QUOTES_IDENTIFIER, 0); }
		public IdentifierSimpleNoQuotesContext(IdentifierSimpleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierSimpleNoQuotes(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierSimpleCurrentContext : IdentifierSimpleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SIGN() { return GetToken(QueryCatParser.AT_SIGN, 0); }
		public IdentifierSimpleCurrentContext(IdentifierSimpleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierSimpleCurrent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierSimpleQuotesContext : IdentifierSimpleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTES_IDENTIFIER() { return GetToken(QueryCatParser.QUOTES_IDENTIFIER, 0); }
		public IdentifierSimpleQuotesContext(IdentifierSimpleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierSimpleQuotes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierSimpleContext identifierSimple() {
		IdentifierSimpleContext _localctx = new IdentifierSimpleContext(Context, State);
		EnterRule(_localctx, 118, RULE_identifierSimple);
		try {
			State = 803;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NO_QUOTES_IDENTIFIER:
				_localctx = new IdentifierSimpleNoQuotesContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 800;
				Match(NO_QUOTES_IDENTIFIER);
				}
				break;
			case QUOTES_IDENTIFIER:
				_localctx = new IdentifierSimpleQuotesContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 801;
				Match(QUOTES_IDENTIFIER);
				}
				break;
			case AT_SIGN:
				_localctx = new IdentifierSimpleCurrentContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 802;
				Match(AT_SIGN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	 
		public IdentifierContext() { }
		public virtual void CopyFrom(IdentifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierWithSelectorContext : IdentifierContext {
		public IdentifierSimpleContext name;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSimpleContext identifierSimple() {
			return GetRuleContext<IdentifierSimpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSelectorContext[] identifierSelector() {
			return GetRuleContexts<IdentifierSelectorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSelectorContext identifierSelector(int i) {
			return GetRuleContext<IdentifierSelectorContext>(i);
		}
		public IdentifierWithSelectorContext(IdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierWithSelector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierWithoutSourceContext : IdentifierContext {
		public IdentifierSimpleContext name;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSimpleContext identifierSimple() {
			return GetRuleContext<IdentifierSimpleContext>(0);
		}
		public IdentifierWithoutSourceContext(IdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierWithoutSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 120, RULE_identifier);
		try {
			int _alt;
			State = 813;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				_localctx = new IdentifierWithSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 805;
				((IdentifierWithSelectorContext)_localctx).name = identifierSimple();
				State = 809;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,115,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 806;
						identifierSelector();
						}
						} 
					}
					State = 811;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,115,Context);
				}
				}
				break;
			case 2:
				_localctx = new IdentifierWithoutSourceContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 812;
				((IdentifierWithoutSourceContext)_localctx).name = identifierSimple();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierSelectorContext : ParserRuleContext {
		public IdentifierSelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierSelector; } }
	 
		public IdentifierSelectorContext() { }
		public virtual void CopyFrom(IdentifierSelectorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierSelectorIndexContext : IdentifierSelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(QueryCatParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext[] simpleExpression() {
			return GetRuleContexts<SimpleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression(int i) {
			return GetRuleContext<SimpleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(QueryCatParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public IdentifierSelectorIndexContext(IdentifierSelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierSelectorIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierSelectorFilterExpressionContext : IdentifierSelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(QueryCatParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(QueryCatParser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(QueryCatParser.RIGHT_BRACKET, 0); }
		public IdentifierSelectorFilterExpressionContext(IdentifierSelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierSelectorFilterExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierSelectorPropertyContext : IdentifierSelectorContext {
		public IdentifierSimpleContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(QueryCatParser.PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSimpleContext identifierSimple() {
			return GetRuleContext<IdentifierSimpleContext>(0);
		}
		public IdentifierSelectorPropertyContext(IdentifierSelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierSelectorProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierSelectorContext identifierSelector() {
		IdentifierSelectorContext _localctx = new IdentifierSelectorContext(Context, State);
		EnterRule(_localctx, 122, RULE_identifierSelector);
		int _la;
		try {
			State = 833;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
			case 1:
				_localctx = new IdentifierSelectorPropertyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 815;
				Match(PERIOD);
				State = 816;
				((IdentifierSelectorPropertyContext)_localctx).name = identifierSimple();
				}
				break;
			case 2:
				_localctx = new IdentifierSelectorIndexContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 817;
				Match(LEFT_BRACKET);
				State = 818;
				simpleExpression(0);
				State = 823;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 819;
					Match(COMMA);
					State = 820;
					simpleExpression(0);
					}
					}
					State = 825;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 826;
				Match(RIGHT_BRACKET);
				}
				break;
			case 3:
				_localctx = new IdentifierSelectorFilterExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 828;
				Match(LEFT_BRACKET);
				State = 829;
				Match(QUESTION);
				State = 830;
				simpleExpression(0);
				State = 831;
				Match(RIGHT_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 124, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 835;
			Match(LEFT_PAREN);
			State = 836;
			expression(0);
			State = 841;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 837;
				Match(COMMA);
				State = 838;
				expression(0);
				}
				}
				State = 843;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 844;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalLiteralContext : ParserRuleContext {
		public IToken interval;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(QueryCatParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		public IntervalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalLiteralContext intervalLiteral() {
		IntervalLiteralContext _localctx = new IntervalLiteralContext(Context, State);
		EnterRule(_localctx, 126, RULE_intervalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 846;
			Match(INTERVAL);
			State = 847;
			_localctx.interval = Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(QueryCatParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(QueryCatParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(QueryCatParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(QueryCatParser.SEMICOLON, i);
		}
		public BlockExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockExpressionContext blockExpression() {
		BlockExpressionContext _localctx = new BlockExpressionContext(Context, State);
		EnterRule(_localctx, 128, RULE_blockExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 849;
			Match(BEGIN);
			State = 853;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 850;
				Match(SEMICOLON);
				}
				}
				State = 855;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 856;
			statement();
			State = 861;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,121,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 857;
					Match(SEMICOLON);
					State = 858;
					statement();
					}
					} 
				}
				State = 863;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,121,Context);
			}
			State = 867;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 864;
				Match(SEMICOLON);
				}
				}
				State = 869;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 870;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastOperandContext : ParserRuleContext {
		public SimpleExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(QueryCatParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(QueryCatParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public CastOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castOperand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastOperandContext castOperand() {
		CastOperandContext _localctx = new CastOperandContext(Context, State);
		EnterRule(_localctx, 130, RULE_castOperand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 872;
			Match(CAST);
			State = 873;
			Match(LEFT_PAREN);
			State = 874;
			_localctx.value = simpleExpression(0);
			State = 875;
			Match(AS);
			State = 876;
			type();
			State = 877;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtTimeZoneContext : ParserRuleContext {
		public SimpleExpressionContext tz;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(QueryCatParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(QueryCatParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(QueryCatParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(QueryCatParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public AtTimeZoneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atTimeZone; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtTimeZone(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtTimeZoneContext atTimeZone() {
		AtTimeZoneContext _localctx = new AtTimeZoneContext(Context, State);
		EnterRule(_localctx, 132, RULE_atTimeZone);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 879;
			Match(AT);
			State = 884;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LOCAL:
				{
				State = 880;
				Match(LOCAL);
				}
				break;
			case TIME:
				{
				State = 881;
				Match(TIME);
				State = 882;
				Match(ZONE);
				State = 883;
				_localctx.tz = simpleExpression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseExpressionContext : ParserRuleContext {
		public SimpleExpressionContext arg;
		public ExpressionContext @default;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(QueryCatParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(QueryCatParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseWhenContext[] caseWhen() {
			return GetRuleContexts<CaseWhenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseWhenContext caseWhen(int i) {
			return GetRuleContext<CaseWhenContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(QueryCatParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CaseExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseExpressionContext caseExpression() {
		CaseExpressionContext _localctx = new CaseExpressionContext(Context, State);
		EnterRule(_localctx, 134, RULE_caseExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 886;
			Match(CASE);
			State = 888;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9069123749616517118L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 531502260801L) != 0) || ((((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & 63L) != 0)) {
				{
				State = 887;
				_localctx.arg = simpleExpression(0);
				}
			}

			State = 893;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WHEN) {
				{
				{
				State = 890;
				caseWhen();
				}
				}
				State = 895;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 898;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 896;
				Match(ELSE);
				State = 897;
				_localctx.@default = expression(0);
				}
			}

			State = 900;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseWhenContext : ParserRuleContext {
		public ExpressionContext condition;
		public ExpressionContext result;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(QueryCatParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(QueryCatParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CaseWhenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseWhen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseWhen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseWhenContext caseWhen() {
		CaseWhenContext _localctx = new CaseWhenContext(Context, State);
		EnterRule(_localctx, 136, RULE_caseWhen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 902;
			Match(WHEN);
			State = 903;
			_localctx.condition = expression(0);
			State = 904;
			Match(THEN);
			State = 905;
			_localctx.result = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandardFunctionContext : ParserRuleContext {
		public StandardFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standardFunction; } }
	 
		public StandardFunctionContext() { }
		public virtual void CopyFrom(StandardFunctionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StandardFunctionTrimContext : StandardFunctionContext {
		public IToken spec;
		public IToken characters;
		public SimpleExpressionContext target;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIM() { return GetToken(QueryCatParser.TRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(QueryCatParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEADING() { return GetToken(QueryCatParser.LEADING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAILING() { return GetToken(QueryCatParser.TRAILING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOTH() { return GetToken(QueryCatParser.BOTH, 0); }
		public StandardFunctionTrimContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardFunctionTrim(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StandardPositionRegexContext : StandardFunctionContext {
		public IToken pattern;
		public SimpleExpressionContext @string;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION_REGEX() { return GetToken(QueryCatParser.POSITION_REGEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(QueryCatParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public StandardPositionRegexContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardPositionRegex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StandardFunctionCurrentDateContext : StandardFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE() { return GetToken(QueryCatParser.CURRENT_DATE, 0); }
		public StandardFunctionCurrentDateContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardFunctionCurrentDate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StandardFunctionExtractContext : StandardFunctionContext {
		public DateTimeFieldContext extractField;
		public SimpleExpressionContext source;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACT() { return GetToken(QueryCatParser.EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(QueryCatParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DateTimeFieldContext dateTimeField() {
			return GetRuleContext<DateTimeFieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public StandardFunctionExtractContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardFunctionExtract(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StandardOccurrencesRegexContext : StandardFunctionContext {
		public IToken pattern;
		public SimpleExpressionContext @string;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCCURRENCES_REGEX() { return GetToken(QueryCatParser.OCCURRENCES_REGEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(QueryCatParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public StandardOccurrencesRegexContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardOccurrencesRegex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StandardFunctionCoalesceContext : StandardFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(QueryCatParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public StandardFunctionCoalesceContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardFunctionCoalesce(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StandardFunctionPositionContext : StandardFunctionContext {
		public IToken substring;
		public SimpleExpressionContext @string;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(QueryCatParser.POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(QueryCatParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public StandardFunctionPositionContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardFunctionPosition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StandardSubstringRegexContext : StandardFunctionContext {
		public IToken pattern;
		public SimpleExpressionContext @string;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING_REGEX() { return GetToken(QueryCatParser.SUBSTRING_REGEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(QueryCatParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public StandardSubstringRegexContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardSubstringRegex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StandardTranslateRegexContext : StandardFunctionContext {
		public IToken pattern;
		public SimpleExpressionContext @string;
		public IToken replacement;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSLATE_REGEX() { return GetToken(QueryCatParser.TRANSLATE_REGEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(QueryCatParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(QueryCatParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(QueryCatParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(QueryCatParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public StandardTranslateRegexContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardTranslateRegex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StandardFunctionCurrentTimestampContext : StandardFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(QueryCatParser.CURRENT_TIMESTAMP, 0); }
		public StandardFunctionCurrentTimestampContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardFunctionCurrentTimestamp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StandardFunctionContext standardFunction() {
		StandardFunctionContext _localctx = new StandardFunctionContext(Context, State);
		EnterRule(_localctx, 138, RULE_standardFunction);
		int _la;
		try {
			State = 979;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT_DATE:
				_localctx = new StandardFunctionCurrentDateContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 907;
				Match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIMESTAMP:
				_localctx = new StandardFunctionCurrentTimestampContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 908;
				Match(CURRENT_TIMESTAMP);
				}
				break;
			case TRIM:
				_localctx = new StandardFunctionTrimContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 909;
				Match(TRIM);
				State = 910;
				Match(LEFT_PAREN);
				State = 912;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 7L) != 0)) {
					{
					State = 911;
					((StandardFunctionTrimContext)_localctx).spec = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & 7L) != 0)) ) {
						((StandardFunctionTrimContext)_localctx).spec = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 915;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
				case 1:
					{
					State = 914;
					((StandardFunctionTrimContext)_localctx).characters = Match(STRING_LITERAL);
					}
					break;
				}
				State = 918;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM) {
					{
					State = 917;
					Match(FROM);
					}
				}

				State = 920;
				((StandardFunctionTrimContext)_localctx).target = simpleExpression(0);
				State = 921;
				Match(RIGHT_PAREN);
				}
				break;
			case POSITION:
				_localctx = new StandardFunctionPositionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 923;
				Match(POSITION);
				State = 924;
				Match(LEFT_PAREN);
				State = 925;
				((StandardFunctionPositionContext)_localctx).substring = Match(STRING_LITERAL);
				State = 926;
				Match(IN);
				State = 927;
				((StandardFunctionPositionContext)_localctx).@string = simpleExpression(0);
				State = 928;
				Match(RIGHT_PAREN);
				}
				break;
			case EXTRACT:
				_localctx = new StandardFunctionExtractContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 930;
				Match(EXTRACT);
				State = 931;
				Match(LEFT_PAREN);
				State = 932;
				((StandardFunctionExtractContext)_localctx).extractField = dateTimeField();
				State = 933;
				Match(FROM);
				State = 934;
				((StandardFunctionExtractContext)_localctx).source = simpleExpression(0);
				State = 935;
				Match(RIGHT_PAREN);
				}
				break;
			case COALESCE:
				_localctx = new StandardFunctionCoalesceContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 937;
				Match(COALESCE);
				State = 938;
				Match(LEFT_PAREN);
				State = 939;
				expression(0);
				State = 944;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 940;
					Match(COMMA);
					State = 941;
					expression(0);
					}
					}
					State = 946;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 947;
				Match(RIGHT_PAREN);
				}
				break;
			case OCCURRENCES_REGEX:
				_localctx = new StandardOccurrencesRegexContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 949;
				Match(OCCURRENCES_REGEX);
				State = 950;
				Match(LEFT_PAREN);
				State = 951;
				((StandardOccurrencesRegexContext)_localctx).pattern = Match(STRING_LITERAL);
				State = 952;
				Match(IN);
				State = 953;
				((StandardOccurrencesRegexContext)_localctx).@string = simpleExpression(0);
				State = 954;
				Match(RIGHT_PAREN);
				}
				break;
			case SUBSTRING_REGEX:
				_localctx = new StandardSubstringRegexContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 956;
				Match(SUBSTRING_REGEX);
				State = 957;
				Match(LEFT_PAREN);
				State = 958;
				((StandardSubstringRegexContext)_localctx).pattern = Match(STRING_LITERAL);
				State = 959;
				Match(IN);
				State = 960;
				((StandardSubstringRegexContext)_localctx).@string = simpleExpression(0);
				State = 961;
				Match(RIGHT_PAREN);
				}
				break;
			case POSITION_REGEX:
				_localctx = new StandardPositionRegexContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 963;
				Match(POSITION_REGEX);
				State = 964;
				Match(LEFT_PAREN);
				State = 965;
				((StandardPositionRegexContext)_localctx).pattern = Match(STRING_LITERAL);
				State = 966;
				Match(IN);
				State = 967;
				((StandardPositionRegexContext)_localctx).@string = simpleExpression(0);
				State = 968;
				Match(RIGHT_PAREN);
				}
				break;
			case TRANSLATE_REGEX:
				_localctx = new StandardTranslateRegexContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 970;
				Match(TRANSLATE_REGEX);
				State = 971;
				Match(LEFT_PAREN);
				State = 972;
				((StandardTranslateRegexContext)_localctx).pattern = Match(STRING_LITERAL);
				State = 973;
				Match(IN);
				State = 974;
				((StandardTranslateRegexContext)_localctx).@string = simpleExpression(0);
				State = 975;
				Match(WITH);
				State = 976;
				((StandardTranslateRegexContext)_localctx).replacement = Match(STRING_LITERAL);
				State = 977;
				Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTimeFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(QueryCatParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOY() { return GetToken(QueryCatParser.DOY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAYOFYEAR() { return GetToken(QueryCatParser.DAYOFYEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(QueryCatParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOW() { return GetToken(QueryCatParser.DOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEKDAY() { return GetToken(QueryCatParser.WEEKDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(QueryCatParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(QueryCatParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(QueryCatParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(QueryCatParser.SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLISECOND() { return GetToken(QueryCatParser.MILLISECOND, 0); }
		public DateTimeFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTimeField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateTimeField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateTimeFieldContext dateTimeField() {
		DateTimeFieldContext _localctx = new DateTimeFieldContext(Context, State);
		EnterRule(_localctx, 140, RULE_dateTimeField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 981;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 2047L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(QueryCatParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(QueryCatParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT8() { return GetToken(QueryCatParser.INT8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(QueryCatParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(QueryCatParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(QueryCatParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(QueryCatParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(QueryCatParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(QueryCatParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOB() { return GetToken(QueryCatParser.BLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(QueryCatParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(QueryCatParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC() { return GetToken(QueryCatParser.NUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(QueryCatParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(QueryCatParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(QueryCatParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(QueryCatParser.VOID, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 142, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 983;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & 70918500024319L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionBinaryInSubqueryContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public SelectQueryExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(QueryCatParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(QueryCatParser.NOT, 0); }
		public ExpressionBinaryInSubqueryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionBinaryInSubquery(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionBinaryContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_LESS() { return GetToken(QueryCatParser.LESS_LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_GREATER() { return GetToken(QueryCatParser.GREATER_GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(QueryCatParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(QueryCatParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(QueryCatParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(QueryCatParser.CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(QueryCatParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(QueryCatParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(QueryCatParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(QueryCatParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(QueryCatParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUALS() { return GetToken(QueryCatParser.GREATER_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(QueryCatParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUALS() { return GetToken(QueryCatParser.LESS_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(QueryCatParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(QueryCatParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(QueryCatParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMILAR() { return GetToken(QueryCatParser.SIMILAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(QueryCatParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(QueryCatParser.OR, 0); }
		public ExpressionBinaryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStandardFunctionCallContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public StandardFunctionContext standardFunction() {
			return GetRuleContext<StandardFunctionContext>(0);
		}
		public ExpressionStandardFunctionCallContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStandardFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionBlockContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockExpressionContext blockExpression() {
			return GetRuleContext<BlockExpressionContext>(0);
		}
		public ExpressionBlockContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionInParensContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		public ExpressionInParensContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionInParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionAtTimeZoneContext : ExpressionContext {
		public ExpressionContext left;
		[System.Diagnostics.DebuggerNonUserCode] public AtTimeZoneContext atTimeZone() {
			return GetRuleContext<AtTimeZoneContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionAtTimeZoneContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionAtTimeZone(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionCaseContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseExpressionContext caseExpression() {
			return GetRuleContext<CaseExpressionContext>(0);
		}
		public ExpressionCaseContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionCase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionCastContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CastOperandContext castOperand() {
			return GetRuleContext<CastOperandContext>(0);
		}
		public ExpressionCastContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionCast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionBinaryInIdentifierContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public IdentifierSimpleContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(QueryCatParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSimpleContext identifierSimple() {
			return GetRuleContext<IdentifierSimpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(QueryCatParser.NOT, 0); }
		public ExpressionBinaryInIdentifierContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionBinaryInIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionBetweenContext : ExpressionContext {
		public ExpressionContext expr;
		public IToken op;
		public SimpleExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(QueryCatParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(QueryCatParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(QueryCatParser.NOT, 0); }
		public ExpressionBetweenContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionBetween(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionUnaryContext : ExpressionContext {
		public ExpressionContext right;
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(QueryCatParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(QueryCatParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(QueryCatParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(QueryCatParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(QueryCatParser.IS, 0); }
		public ExpressionUnaryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionUnary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionBinaryInArrayContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ArrayContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(QueryCatParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(QueryCatParser.NOT, 0); }
		public ExpressionBinaryInArrayContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionBinaryInArray(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionSubqueryContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public IToken condition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(QueryCatParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(QueryCatParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(QueryCatParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUALS() { return GetToken(QueryCatParser.GREATER_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(QueryCatParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUALS() { return GetToken(QueryCatParser.LESS_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(QueryCatParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(QueryCatParser.SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(QueryCatParser.ALL, 0); }
		public ExpressionSubqueryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionSubquery(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionBinaryCastContext : ExpressionContext {
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPECAST() { return GetToken(QueryCatParser.TYPECAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionBinaryCastContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionBinaryCast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionSelectContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		public ExpressionSelectContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionSelect(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionIdentifierContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionIdentifierContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionLiteralContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ExpressionLiteralContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionFunctionCallContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ExpressionFunctionCallContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionExistsContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(QueryCatParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		public ExpressionExistsContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionExists(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 144;
		EnterRecursionRule(_localctx, 144, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1008;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,132,Context) ) {
			case 1:
				{
				_localctx = new ExpressionLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 986;
				literal();
				}
				break;
			case 2:
				{
				_localctx = new ExpressionCastContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 987;
				castOperand();
				}
				break;
			case 3:
				{
				_localctx = new ExpressionStandardFunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 988;
				standardFunction();
				}
				break;
			case 4:
				{
				_localctx = new ExpressionFunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 989;
				functionCall();
				}
				break;
			case 5:
				{
				_localctx = new ExpressionIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 990;
				identifier();
				}
				break;
			case 6:
				{
				_localctx = new ExpressionInParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 991;
				Match(LEFT_PAREN);
				State = 992;
				expression(0);
				State = 993;
				Match(RIGHT_PAREN);
				}
				break;
			case 7:
				{
				_localctx = new ExpressionUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 995;
				((ExpressionUnaryContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -9223372036853989376L) != 0)) ) {
					((ExpressionUnaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 996;
				((ExpressionUnaryContext)_localctx).right = expression(20);
				}
				break;
			case 8:
				{
				_localctx = new ExpressionExistsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 997;
				Match(EXISTS);
				State = 998;
				Match(LEFT_PAREN);
				State = 999;
				selectQueryExpression();
				State = 1000;
				Match(RIGHT_PAREN);
				}
				break;
			case 9:
				{
				_localctx = new ExpressionSelectContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1002;
				Match(LEFT_PAREN);
				State = 1003;
				selectQueryExpression();
				State = 1004;
				Match(RIGHT_PAREN);
				}
				break;
			case 10:
				{
				_localctx = new ExpressionCaseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1006;
				caseExpression();
				}
				break;
			case 11:
				{
				_localctx = new ExpressionBlockContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1007;
				blockExpression();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1088;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,141,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1086;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,140,Context) ) {
					case 1:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1010;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 1011;
						((ExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==LESS_LESS || _la==GREATER_GREATER) ) {
							((ExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1012;
						((ExpressionBinaryContext)_localctx).right = expression(20);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1013;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 1014;
						((ExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7340032L) != 0)) ) {
							((ExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1015;
						((ExpressionBinaryContext)_localctx).right = expression(19);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1016;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 1017;
						((ExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 537657344L) != 0)) ) {
							((ExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1018;
						((ExpressionBinaryContext)_localctx).right = expression(18);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1019;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 1020;
						((ExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 528482304L) != 0)) ) {
							((ExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1021;
						((ExpressionBinaryContext)_localctx).right = expression(17);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1022;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 1024;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 1023;
							Match(NOT);
							}
						}

						State = 1026;
						((ExpressionBinaryContext)_localctx).op = Match(LIKE);
						State = 1027;
						((ExpressionBinaryContext)_localctx).right = expression(16);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1028;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1030;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 1029;
							Match(NOT);
							}
						}

						State = 1032;
						((ExpressionBinaryContext)_localctx).op = Match(SIMILAR);
						State = 1033;
						Match(TO);
						State = 1034;
						((ExpressionBinaryContext)_localctx).right = expression(15);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionBetweenContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBetweenContext)_localctx).expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1035;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 1037;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 1036;
							Match(NOT);
							}
						}

						State = 1039;
						((ExpressionBetweenContext)_localctx).op = Match(BETWEEN);
						State = 1040;
						((ExpressionBetweenContext)_localctx).left = simpleExpression(0);
						State = 1041;
						Match(AND);
						State = 1042;
						((ExpressionBetweenContext)_localctx).right = expression(11);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1044;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 1045;
						((ExpressionBinaryContext)_localctx).op = Match(AND);
						State = 1046;
						((ExpressionBinaryContext)_localctx).right = expression(7);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1047;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1048;
						((ExpressionBinaryContext)_localctx).op = Match(OR);
						State = 1049;
						((ExpressionBinaryContext)_localctx).right = expression(6);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionBinaryCastContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryCastContext)_localctx).right = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1050;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 1051;
						Match(TYPECAST);
						State = 1052;
						type();
						}
						break;
					case 11:
						{
						_localctx = new ExpressionBinaryInArrayContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryInArrayContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1053;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1055;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 1054;
							Match(NOT);
							}
						}

						State = 1057;
						((ExpressionBinaryInArrayContext)_localctx).op = Match(IN);
						State = 1058;
						((ExpressionBinaryInArrayContext)_localctx).right = array();
						}
						break;
					case 12:
						{
						_localctx = new ExpressionBinaryInIdentifierContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryInIdentifierContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1059;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 1061;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 1060;
							Match(NOT);
							}
						}

						State = 1063;
						((ExpressionBinaryInIdentifierContext)_localctx).op = Match(IN);
						State = 1064;
						((ExpressionBinaryInIdentifierContext)_localctx).right = identifierSimple();
						}
						break;
					case 13:
						{
						_localctx = new ExpressionBinaryInSubqueryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryInSubqueryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1065;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1067;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 1066;
							Match(NOT);
							}
						}

						State = 1069;
						((ExpressionBinaryInSubqueryContext)_localctx).op = Match(IN);
						State = 1070;
						((ExpressionBinaryInSubqueryContext)_localctx).right = selectQueryExpression();
						}
						break;
					case 14:
						{
						_localctx = new ExpressionSubqueryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionSubqueryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1071;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 1072;
						((ExpressionSubqueryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 528482304L) != 0)) ) {
							((ExpressionSubqueryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1073;
						((ExpressionSubqueryContext)_localctx).condition = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ANY || _la==SOME || _la==ALL) ) {
							((ExpressionSubqueryContext)_localctx).condition = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1074;
						Match(LEFT_PAREN);
						State = 1075;
						selectQueryExpression();
						State = 1076;
						Match(RIGHT_PAREN);
						}
						break;
					case 15:
						{
						_localctx = new ExpressionUnaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionUnaryContext)_localctx).right = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1078;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 1079;
						((ExpressionUnaryContext)_localctx).op = Match(IS);
						State = 1081;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 1080;
							Match(NOT);
							}
						}

						State = 1083;
						Match(NULL);
						}
						break;
					case 16:
						{
						_localctx = new ExpressionAtTimeZoneContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionAtTimeZoneContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1084;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1085;
						atTimeZone();
						}
						break;
					}
					} 
				}
				State = 1090;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,141,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SimpleExpressionContext : ParserRuleContext {
		public SimpleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpression; } }
	 
		public SimpleExpressionContext() { }
		public virtual void CopyFrom(SimpleExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleExpressionCaseContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseExpressionContext caseExpression() {
			return GetRuleContext<CaseExpressionContext>(0);
		}
		public SimpleExpressionCaseContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionCase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionLiteralContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public SimpleExpressionLiteralContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionCastContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CastOperandContext castOperand() {
			return GetRuleContext<CastOperandContext>(0);
		}
		public SimpleExpressionCastContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionCast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionAtTimeZoneContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtTimeZoneContext atTimeZone() {
			return GetRuleContext<AtTimeZoneContext>(0);
		}
		public SimpleExpressionAtTimeZoneContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionAtTimeZone(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionStandardFunctionCallContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public StandardFunctionContext standardFunction() {
			return GetRuleContext<StandardFunctionContext>(0);
		}
		public SimpleExpressionStandardFunctionCallContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionStandardFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionUnaryContext : SimpleExpressionContext {
		public IToken op;
		public SimpleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(QueryCatParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(QueryCatParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(QueryCatParser.NOT, 0); }
		public SimpleExpressionUnaryContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionUnary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionBinaryContext : SimpleExpressionContext {
		public SimpleExpressionContext left;
		public IToken op;
		public SimpleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext[] simpleExpression() {
			return GetRuleContexts<SimpleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression(int i) {
			return GetRuleContext<SimpleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(QueryCatParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(QueryCatParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(QueryCatParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(QueryCatParser.CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(QueryCatParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(QueryCatParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(QueryCatParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(QueryCatParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(QueryCatParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUALS() { return GetToken(QueryCatParser.GREATER_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(QueryCatParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUALS() { return GetToken(QueryCatParser.LESS_OR_EQUALS, 0); }
		public SimpleExpressionBinaryContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionBinaryCastContext : SimpleExpressionContext {
		public SimpleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPECAST() { return GetToken(QueryCatParser.TYPECAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public SimpleExpressionBinaryCastContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionBinaryCast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionFunctionCallContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public SimpleExpressionFunctionCallContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionInParensContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		public SimpleExpressionInParensContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionInParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionIdentifierContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SimpleExpressionIdentifierContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExpressionContext simpleExpression() {
		return simpleExpression(0);
	}

	private SimpleExpressionContext simpleExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SimpleExpressionContext _localctx = new SimpleExpressionContext(Context, _parentState);
		SimpleExpressionContext _prevctx = _localctx;
		int _startState = 146;
		EnterRecursionRule(_localctx, 146, RULE_simpleExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1105;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
			case 1:
				{
				_localctx = new SimpleExpressionLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1092;
				literal();
				}
				break;
			case 2:
				{
				_localctx = new SimpleExpressionCastContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1093;
				castOperand();
				}
				break;
			case 3:
				{
				_localctx = new SimpleExpressionStandardFunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1094;
				standardFunction();
				}
				break;
			case 4:
				{
				_localctx = new SimpleExpressionFunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1095;
				functionCall();
				}
				break;
			case 5:
				{
				_localctx = new SimpleExpressionIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1096;
				identifier();
				}
				break;
			case 6:
				{
				_localctx = new SimpleExpressionInParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1097;
				Match(LEFT_PAREN);
				State = 1098;
				simpleExpression(0);
				State = 1099;
				Match(RIGHT_PAREN);
				}
				break;
			case 7:
				{
				_localctx = new SimpleExpressionUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1101;
				((SimpleExpressionUnaryContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -9223372036853989376L) != 0)) ) {
					((SimpleExpressionUnaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1102;
				((SimpleExpressionUnaryContext)_localctx).right = simpleExpression(6);
				}
				break;
			case 8:
				{
				_localctx = new SimpleExpressionCaseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1103;
				caseExpression();
				}
				break;
			case 9:
				{
				_localctx = new SimpleExpressionAtTimeZoneContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1104;
				atTimeZone();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1121;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,144,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1119;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
					case 1:
						{
						_localctx = new SimpleExpressionBinaryContext(new SimpleExpressionContext(_parentctx, _parentState));
						((SimpleExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpression);
						State = 1107;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1108;
						((SimpleExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7340032L) != 0)) ) {
							((SimpleExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1109;
						((SimpleExpressionBinaryContext)_localctx).right = simpleExpression(6);
						}
						break;
					case 2:
						{
						_localctx = new SimpleExpressionBinaryContext(new SimpleExpressionContext(_parentctx, _parentState));
						((SimpleExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpression);
						State = 1110;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 1111;
						((SimpleExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 537657344L) != 0)) ) {
							((SimpleExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1112;
						((SimpleExpressionBinaryContext)_localctx).right = simpleExpression(5);
						}
						break;
					case 3:
						{
						_localctx = new SimpleExpressionBinaryContext(new SimpleExpressionContext(_parentctx, _parentState));
						((SimpleExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpression);
						State = 1113;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1114;
						((SimpleExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 528482304L) != 0)) ) {
							((SimpleExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1115;
						((SimpleExpressionBinaryContext)_localctx).right = simpleExpression(4);
						}
						break;
					case 4:
						{
						_localctx = new SimpleExpressionBinaryCastContext(new SimpleExpressionContext(_parentctx, _parentState));
						((SimpleExpressionBinaryCastContext)_localctx).right = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpression);
						State = 1116;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1117;
						Match(TYPECAST);
						State = 1118;
						type();
						}
						break;
					}
					} 
				}
				State = 1123;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,144,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LiteralIntervalContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntervalLiteralContext intervalLiteral() {
			return GetRuleContext<IntervalLiteralContext>(0);
		}
		public LiteralIntervalContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralInterval(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralPlainContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(QueryCatParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_LITERAL() { return GetToken(QueryCatParser.FLOAT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_LITERAL() { return GetToken(QueryCatParser.NUMERIC_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(QueryCatParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(QueryCatParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(QueryCatParser.NULL, 0); }
		public LiteralPlainContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralPlain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 148, RULE_literal);
		try {
			State = 1132;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER_LITERAL:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1124;
				Match(INTEGER_LITERAL);
				}
				break;
			case STRING_LITERAL:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1125;
				Match(STRING_LITERAL);
				}
				break;
			case FLOAT_LITERAL:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1126;
				Match(FLOAT_LITERAL);
				}
				break;
			case NUMERIC_LITERAL:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1127;
				Match(NUMERIC_LITERAL);
				}
				break;
			case TRUE:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1128;
				Match(TRUE);
				}
				break;
			case FALSE:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1129;
				Match(FALSE);
				}
				break;
			case NULL:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1130;
				Match(NULL);
				}
				break;
			case INTERVAL:
				_localctx = new LiteralIntervalContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1131;
				intervalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return selectQueryExpressionBody_sempred((SelectQueryExpressionBodyContext)_localctx, predIndex);
		case 72: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 73: return simpleExpression_sempred((SimpleExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool selectQueryExpressionBody_sempred(SelectQueryExpressionBodyContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 19);
		case 3: return Precpred(Context, 18);
		case 4: return Precpred(Context, 17);
		case 5: return Precpred(Context, 16);
		case 6: return Precpred(Context, 15);
		case 7: return Precpred(Context, 14);
		case 8: return Precpred(Context, 10);
		case 9: return Precpred(Context, 6);
		case 10: return Precpred(Context, 5);
		case 11: return Precpred(Context, 25);
		case 12: return Precpred(Context, 13);
		case 13: return Precpred(Context, 12);
		case 14: return Precpred(Context, 11);
		case 15: return Precpred(Context, 9);
		case 16: return Precpred(Context, 4);
		case 17: return Precpred(Context, 3);
		}
		return true;
	}
	private bool simpleExpression_sempred(SimpleExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18: return Precpred(Context, 5);
		case 19: return Precpred(Context, 4);
		case 20: return Precpred(Context, 3);
		case 21: return Precpred(Context, 11);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,170,1135,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,1,0,5,0,152,8,0,10,0,12,0,155,
		9,0,1,0,1,0,1,0,5,0,160,8,0,10,0,12,0,163,9,0,1,0,5,0,166,8,0,10,0,12,
		0,169,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,184,
		8,1,1,2,1,2,1,2,1,2,1,2,5,2,191,8,2,10,2,12,2,194,9,2,3,2,196,8,2,1,2,
		1,2,1,2,3,2,201,8,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,3,3,210,8,3,1,4,3,4,213,
		8,4,1,4,1,4,3,4,217,8,4,1,4,1,4,1,4,3,4,222,8,4,1,4,1,4,3,4,226,8,4,1,
		5,1,5,1,5,1,5,1,5,5,5,233,8,5,10,5,12,5,236,9,5,3,5,238,8,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,3,5,247,8,5,1,6,1,6,1,6,3,6,252,8,6,1,6,1,6,1,7,1,7,
		1,7,1,7,1,7,3,7,261,8,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,
		1,10,5,10,275,8,10,10,10,12,10,278,9,10,1,11,1,11,3,11,282,8,11,1,11,1,
		11,1,11,1,11,3,11,288,8,11,1,12,3,12,291,8,12,1,12,1,12,3,12,295,8,12,
		1,13,3,13,298,8,13,1,13,1,13,3,13,302,8,13,1,13,3,13,305,8,13,1,13,3,13,
		308,8,13,1,13,3,13,311,8,13,1,14,1,14,1,14,1,14,1,14,1,14,3,14,319,8,14,
		1,14,1,14,1,14,1,14,3,14,325,8,14,1,14,5,14,328,8,14,10,14,12,14,331,9,
		14,1,15,1,15,1,15,1,15,1,15,3,15,338,8,15,1,16,3,16,341,8,16,1,16,1,16,
		3,16,345,8,16,1,16,3,16,348,8,16,1,16,1,16,3,16,352,8,16,1,16,3,16,355,
		8,16,1,16,3,16,358,8,16,1,16,3,16,361,8,16,1,17,1,17,1,17,5,17,366,8,17,
		10,17,12,17,369,9,17,1,18,1,18,1,18,1,18,5,18,375,8,18,10,18,12,18,378,
		9,18,1,19,1,19,1,19,3,19,383,8,19,1,20,1,20,1,20,1,20,1,20,1,20,5,20,391,
		8,20,10,20,12,20,394,9,20,1,20,1,20,1,21,1,21,3,21,400,8,21,1,21,1,21,
		1,21,5,21,405,8,21,10,21,12,21,408,9,21,1,22,1,22,1,22,1,22,1,22,3,22,
		415,8,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,5,23,425,8,23,10,23,12,
		23,428,9,23,1,24,1,24,1,24,3,24,433,8,24,1,24,1,24,1,24,1,24,1,24,3,24,
		440,8,24,1,24,3,24,443,8,24,1,24,1,24,3,24,447,8,24,3,24,449,8,24,1,25,
		1,25,1,25,3,25,454,8,25,1,25,1,25,3,25,458,8,25,1,26,1,26,3,26,462,8,26,
		1,26,3,26,465,8,26,1,26,3,26,468,8,26,1,27,1,27,1,27,1,27,5,27,474,8,27,
		10,27,12,27,477,9,27,1,28,1,28,5,28,481,8,28,10,28,12,28,484,9,28,1,29,
		1,29,1,29,1,29,5,29,490,8,29,10,29,12,29,493,9,29,1,29,1,29,1,30,1,30,
		1,30,1,30,5,30,501,8,30,10,30,12,30,504,9,30,1,31,1,31,1,31,3,31,509,8,
		31,1,31,3,31,512,8,31,1,31,1,31,1,31,3,31,517,8,31,1,31,3,31,520,8,31,
		1,31,1,31,1,31,3,31,525,8,31,1,31,3,31,528,8,31,1,31,1,31,1,31,1,31,3,
		31,534,8,31,1,31,1,31,1,31,3,31,539,8,31,1,31,3,31,542,8,31,1,31,1,31,
		1,31,1,31,3,31,548,8,31,1,31,1,31,1,31,3,31,553,8,31,1,31,3,31,556,8,31,
		3,31,558,8,31,1,32,3,32,561,8,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,569,
		8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,5,32,578,8,32,10,32,12,32,581,
		9,32,1,32,1,32,3,32,585,8,32,1,33,1,33,1,33,3,33,590,8,33,3,33,592,8,33,
		1,34,1,34,1,34,1,34,1,34,5,34,599,8,34,10,34,12,34,602,9,34,1,35,1,35,
		1,35,1,36,1,36,1,36,1,37,1,37,3,37,612,8,37,1,37,3,37,615,8,37,1,37,3,
		37,618,8,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,5,38,627,8,38,10,38,12,
		38,630,9,38,1,39,1,39,1,39,1,39,1,39,5,39,637,8,39,10,39,12,39,640,9,39,
		1,40,1,40,1,40,1,40,5,40,646,8,40,10,40,12,40,649,9,40,1,41,1,41,1,41,
		1,41,1,42,1,42,1,42,3,42,658,8,42,1,43,1,43,3,43,662,8,43,1,43,1,43,3,
		43,666,8,43,1,43,3,43,669,8,43,1,44,1,44,1,44,1,45,1,45,1,45,1,46,1,46,
		1,46,1,46,1,46,1,46,5,46,683,8,46,10,46,12,46,686,9,46,1,46,3,46,689,8,
		46,1,47,1,47,3,47,693,8,47,1,47,1,47,1,47,3,47,698,8,47,1,47,3,47,701,
		8,47,1,47,1,47,3,47,705,8,47,3,47,707,8,47,1,48,1,48,1,48,1,48,1,49,1,
		49,1,49,1,49,3,49,717,8,49,1,49,1,49,1,50,1,50,3,50,723,8,50,1,50,1,50,
		1,50,3,50,728,8,50,1,50,3,50,731,8,50,1,50,1,50,3,50,735,8,50,3,50,737,
		8,50,1,51,1,51,1,51,1,51,5,51,743,8,51,10,51,12,51,746,9,51,1,51,1,51,
		1,52,1,52,3,52,752,8,52,1,53,1,53,1,53,1,53,3,53,758,8,53,1,54,1,54,3,
		54,762,8,54,1,54,1,54,1,54,3,54,767,8,54,1,54,3,54,770,8,54,1,54,1,54,
		3,54,774,8,54,3,54,776,8,54,1,55,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,
		57,1,57,5,57,788,8,57,10,57,12,57,791,9,57,1,57,1,57,3,57,795,8,57,1,58,
		1,58,1,58,1,58,1,59,1,59,1,59,3,59,804,8,59,1,60,1,60,5,60,808,8,60,10,
		60,12,60,811,9,60,1,60,3,60,814,8,60,1,61,1,61,1,61,1,61,1,61,1,61,5,61,
		822,8,61,10,61,12,61,825,9,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,
		834,8,61,1,62,1,62,1,62,1,62,5,62,840,8,62,10,62,12,62,843,9,62,1,62,1,
		62,1,63,1,63,1,63,1,64,1,64,5,64,852,8,64,10,64,12,64,855,9,64,1,64,1,
		64,1,64,5,64,860,8,64,10,64,12,64,863,9,64,1,64,5,64,866,8,64,10,64,12,
		64,869,9,64,1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,66,
		1,66,1,66,3,66,885,8,66,1,67,1,67,3,67,889,8,67,1,67,5,67,892,8,67,10,
		67,12,67,895,9,67,1,67,1,67,3,67,899,8,67,1,67,1,67,1,68,1,68,1,68,1,68,
		1,68,1,69,1,69,1,69,1,69,1,69,3,69,913,8,69,1,69,3,69,916,8,69,1,69,3,
		69,919,8,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
		1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,5,69,943,8,69,10,69,
		12,69,946,9,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
		1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
		1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,980,8,69,1,70,1,70,1,71,1,71,1,
		72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,
		72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,1009,8,72,1,72,1,72,1,
		72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,1025,8,
		72,1,72,1,72,1,72,1,72,3,72,1031,8,72,1,72,1,72,1,72,1,72,1,72,3,72,1038,
		8,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
		1,72,1,72,1,72,3,72,1056,8,72,1,72,1,72,1,72,1,72,3,72,1062,8,72,1,72,
		1,72,1,72,1,72,3,72,1068,8,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
		1,72,1,72,1,72,1,72,3,72,1082,8,72,1,72,1,72,1,72,5,72,1087,8,72,10,72,
		12,72,1090,9,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
		1,73,1,73,1,73,3,73,1106,8,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
		1,73,1,73,1,73,1,73,5,73,1120,8,73,10,73,12,73,1123,9,73,1,74,1,74,1,74,
		1,74,1,74,1,74,1,74,1,74,3,74,1133,8,74,1,74,0,3,28,144,146,75,0,2,4,6,
		8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
		56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
		102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
		138,140,142,144,146,148,0,18,3,0,3,3,23,23,54,54,2,0,105,105,108,108,2,
		0,104,104,109,109,2,0,110,110,141,141,3,0,115,115,123,123,134,134,1,0,
		135,136,2,0,111,111,124,124,2,0,112,112,125,125,1,0,66,66,1,0,74,76,1,
		0,80,90,3,0,33,47,72,72,79,79,2,0,18,19,63,63,1,0,30,31,1,0,20,22,2,0,
		18,19,29,29,1,0,23,28,3,0,33,33,68,68,104,104,1273,0,153,1,0,0,0,2,183,
		1,0,0,0,4,185,1,0,0,0,6,204,1,0,0,0,8,212,1,0,0,0,10,246,1,0,0,0,12,251,
		1,0,0,0,14,255,1,0,0,0,16,262,1,0,0,0,18,267,1,0,0,0,20,269,1,0,0,0,22,
		279,1,0,0,0,24,290,1,0,0,0,26,297,1,0,0,0,28,312,1,0,0,0,30,337,1,0,0,
		0,32,340,1,0,0,0,34,362,1,0,0,0,36,370,1,0,0,0,38,382,1,0,0,0,40,384,1,
		0,0,0,42,397,1,0,0,0,44,409,1,0,0,0,46,421,1,0,0,0,48,448,1,0,0,0,50,450,
		1,0,0,0,52,459,1,0,0,0,54,469,1,0,0,0,56,478,1,0,0,0,58,485,1,0,0,0,60,
		496,1,0,0,0,62,557,1,0,0,0,64,584,1,0,0,0,66,591,1,0,0,0,68,593,1,0,0,
		0,70,603,1,0,0,0,72,606,1,0,0,0,74,609,1,0,0,0,76,621,1,0,0,0,78,631,1,
		0,0,0,80,641,1,0,0,0,82,650,1,0,0,0,84,654,1,0,0,0,86,659,1,0,0,0,88,670,
		1,0,0,0,90,673,1,0,0,0,92,676,1,0,0,0,94,706,1,0,0,0,96,708,1,0,0,0,98,
		712,1,0,0,0,100,736,1,0,0,0,102,738,1,0,0,0,104,751,1,0,0,0,106,753,1,
		0,0,0,108,775,1,0,0,0,110,777,1,0,0,0,112,780,1,0,0,0,114,783,1,0,0,0,
		116,796,1,0,0,0,118,803,1,0,0,0,120,813,1,0,0,0,122,833,1,0,0,0,124,835,
		1,0,0,0,126,846,1,0,0,0,128,849,1,0,0,0,130,872,1,0,0,0,132,879,1,0,0,
		0,134,886,1,0,0,0,136,902,1,0,0,0,138,979,1,0,0,0,140,981,1,0,0,0,142,
		983,1,0,0,0,144,1008,1,0,0,0,146,1105,1,0,0,0,148,1132,1,0,0,0,150,152,
		5,9,0,0,151,150,1,0,0,0,152,155,1,0,0,0,153,151,1,0,0,0,153,154,1,0,0,
		0,154,156,1,0,0,0,155,153,1,0,0,0,156,161,3,2,1,0,157,158,5,9,0,0,158,
		160,3,2,1,0,159,157,1,0,0,0,160,163,1,0,0,0,161,159,1,0,0,0,161,162,1,
		0,0,0,162,167,1,0,0,0,163,161,1,0,0,0,164,166,5,9,0,0,165,164,1,0,0,0,
		166,169,1,0,0,0,167,165,1,0,0,0,167,168,1,0,0,0,168,170,1,0,0,0,169,167,
		1,0,0,0,170,171,5,0,0,1,171,1,1,0,0,0,172,184,3,10,5,0,173,184,3,14,7,
		0,174,184,3,16,8,0,175,184,3,18,9,0,176,184,3,92,46,0,177,184,3,98,49,
		0,178,184,3,106,53,0,179,184,3,110,55,0,180,184,3,112,56,0,181,184,3,114,
		57,0,182,184,3,144,72,0,183,172,1,0,0,0,183,173,1,0,0,0,183,174,1,0,0,
		0,183,175,1,0,0,0,183,176,1,0,0,0,183,177,1,0,0,0,183,178,1,0,0,0,183,
		179,1,0,0,0,183,180,1,0,0,0,183,181,1,0,0,0,183,182,1,0,0,0,184,3,1,0,
		0,0,185,186,3,118,59,0,186,195,5,1,0,0,187,192,3,8,4,0,188,189,5,6,0,0,
		189,191,3,8,4,0,190,188,1,0,0,0,191,194,1,0,0,0,192,190,1,0,0,0,192,193,
		1,0,0,0,193,196,1,0,0,0,194,192,1,0,0,0,195,187,1,0,0,0,195,196,1,0,0,
		0,196,197,1,0,0,0,197,200,5,2,0,0,198,199,5,5,0,0,199,201,3,6,3,0,200,
		198,1,0,0,0,200,201,1,0,0,0,201,202,1,0,0,0,202,203,5,0,0,1,203,5,1,0,
		0,0,204,209,3,142,71,0,205,206,5,27,0,0,206,207,3,118,59,0,207,208,5,25,
		0,0,208,210,1,0,0,0,209,205,1,0,0,0,209,210,1,0,0,0,210,7,1,0,0,0,211,
		213,5,8,0,0,212,211,1,0,0,0,212,213,1,0,0,0,213,214,1,0,0,0,214,216,3,
		118,59,0,215,217,5,10,0,0,216,215,1,0,0,0,216,217,1,0,0,0,217,218,1,0,
		0,0,218,219,5,5,0,0,219,221,3,6,3,0,220,222,5,13,0,0,221,220,1,0,0,0,221,
		222,1,0,0,0,222,225,1,0,0,0,223,224,7,0,0,0,224,226,3,148,74,0,225,223,
		1,0,0,0,225,226,1,0,0,0,226,9,1,0,0,0,227,228,3,118,59,0,228,237,5,1,0,
		0,229,234,3,12,6,0,230,231,5,6,0,0,231,233,3,12,6,0,232,230,1,0,0,0,233,
		236,1,0,0,0,234,232,1,0,0,0,234,235,1,0,0,0,235,238,1,0,0,0,236,234,1,
		0,0,0,237,229,1,0,0,0,237,238,1,0,0,0,238,239,1,0,0,0,239,240,5,2,0,0,
		240,247,1,0,0,0,241,242,3,118,59,0,242,243,5,1,0,0,243,244,5,20,0,0,244,
		245,5,2,0,0,245,247,1,0,0,0,246,227,1,0,0,0,246,241,1,0,0,0,247,11,1,0,
		0,0,248,249,3,118,59,0,249,250,5,4,0,0,250,252,1,0,0,0,251,248,1,0,0,0,
		251,252,1,0,0,0,252,253,1,0,0,0,253,254,3,144,72,0,254,13,1,0,0,0,255,
		256,5,149,0,0,256,257,3,118,59,0,257,260,3,142,71,0,258,259,5,3,0,0,259,
		261,3,2,1,0,260,258,1,0,0,0,260,261,1,0,0,0,261,15,1,0,0,0,262,263,5,150,
		0,0,263,264,3,120,60,0,264,265,5,3,0,0,265,266,3,2,1,0,266,17,1,0,0,0,
		267,268,3,26,13,0,268,19,1,0,0,0,269,270,5,128,0,0,270,271,5,52,0,0,271,
		276,3,22,11,0,272,273,5,6,0,0,273,275,3,22,11,0,274,272,1,0,0,0,275,278,
		1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,21,1,0,0,0,278,276,1,0,0,0,
		279,281,3,144,72,0,280,282,7,1,0,0,281,280,1,0,0,0,281,282,1,0,0,0,282,
		287,1,0,0,0,283,284,5,126,0,0,284,288,5,112,0,0,285,286,5,126,0,0,286,
		288,5,122,0,0,287,283,1,0,0,0,287,285,1,0,0,0,287,288,1,0,0,0,288,23,1,
		0,0,0,289,291,5,49,0,0,290,289,1,0,0,0,290,291,1,0,0,0,291,294,1,0,0,0,
		292,295,3,118,59,0,293,295,5,166,0,0,294,292,1,0,0,0,294,293,1,0,0,0,295,
		25,1,0,0,0,296,298,3,42,21,0,297,296,1,0,0,0,297,298,1,0,0,0,298,299,1,
		0,0,0,299,301,3,28,14,0,300,302,3,20,10,0,301,300,1,0,0,0,301,302,1,0,
		0,0,302,304,1,0,0,0,303,305,3,90,45,0,304,303,1,0,0,0,304,305,1,0,0,0,
		305,307,1,0,0,0,306,308,3,84,42,0,307,306,1,0,0,0,307,308,1,0,0,0,308,
		310,1,0,0,0,309,311,3,86,43,0,310,309,1,0,0,0,310,311,1,0,0,0,311,27,1,
		0,0,0,312,313,6,14,-1,0,313,314,3,30,15,0,314,329,1,0,0,0,315,316,10,2,
		0,0,316,318,5,119,0,0,317,319,7,2,0,0,318,317,1,0,0,0,318,319,1,0,0,0,
		319,320,1,0,0,0,320,328,3,28,14,3,321,322,10,1,0,0,322,324,7,3,0,0,323,
		325,7,2,0,0,324,323,1,0,0,0,324,325,1,0,0,0,325,326,1,0,0,0,326,328,3,
		28,14,2,327,315,1,0,0,0,327,321,1,0,0,0,328,331,1,0,0,0,329,327,1,0,0,
		0,329,330,1,0,0,0,330,29,1,0,0,0,331,329,1,0,0,0,332,338,3,32,16,0,333,
		334,5,1,0,0,334,335,3,26,13,0,335,336,5,2,0,0,336,338,1,0,0,0,337,332,
		1,0,0,0,337,333,1,0,0,0,338,31,1,0,0,0,339,341,3,42,21,0,340,339,1,0,0,
		0,340,341,1,0,0,0,341,342,1,0,0,0,342,344,5,137,0,0,343,345,3,88,44,0,
		344,343,1,0,0,0,344,345,1,0,0,0,345,347,1,0,0,0,346,348,3,38,19,0,347,
		346,1,0,0,0,347,348,1,0,0,0,348,349,1,0,0,0,349,351,3,34,17,0,350,352,
		3,36,18,0,351,350,1,0,0,0,351,352,1,0,0,0,352,354,1,0,0,0,353,355,3,50,
		25,0,354,353,1,0,0,0,354,355,1,0,0,0,355,357,1,0,0,0,356,358,3,52,26,0,
		357,356,1,0,0,0,357,358,1,0,0,0,358,360,1,0,0,0,359,361,3,80,40,0,360,
		359,1,0,0,0,360,361,1,0,0,0,361,33,1,0,0,0,362,367,3,48,24,0,363,364,5,
		6,0,0,364,366,3,48,24,0,365,363,1,0,0,0,366,369,1,0,0,0,367,365,1,0,0,
		0,367,368,1,0,0,0,368,35,1,0,0,0,369,367,1,0,0,0,370,371,5,110,0,0,371,
		376,3,120,60,0,372,373,5,6,0,0,373,375,3,120,60,0,374,372,1,0,0,0,375,
		378,1,0,0,0,376,374,1,0,0,0,376,377,1,0,0,0,377,37,1,0,0,0,378,376,1,0,
		0,0,379,383,5,104,0,0,380,383,5,109,0,0,381,383,3,40,20,0,382,379,1,0,
		0,0,382,380,1,0,0,0,382,381,1,0,0,0,383,39,1,0,0,0,384,385,5,109,0,0,385,
		386,5,65,0,0,386,387,5,1,0,0,387,392,3,146,73,0,388,389,5,6,0,0,389,391,
		3,146,73,0,390,388,1,0,0,0,391,394,1,0,0,0,392,390,1,0,0,0,392,393,1,0,
		0,0,393,395,1,0,0,0,394,392,1,0,0,0,395,396,5,2,0,0,396,41,1,0,0,0,397,
		399,5,145,0,0,398,400,5,133,0,0,399,398,1,0,0,0,399,400,1,0,0,0,400,401,
		1,0,0,0,401,406,3,44,22,0,402,403,5,6,0,0,403,405,3,44,22,0,404,402,1,
		0,0,0,405,408,1,0,0,0,406,404,1,0,0,0,406,407,1,0,0,0,407,43,1,0,0,0,408,
		406,1,0,0,0,409,414,3,118,59,0,410,411,5,1,0,0,411,412,3,46,23,0,412,413,
		5,2,0,0,413,415,1,0,0,0,414,410,1,0,0,0,414,415,1,0,0,0,415,416,1,0,0,
		0,416,417,5,49,0,0,417,418,5,1,0,0,418,419,3,26,13,0,419,420,5,2,0,0,420,
		45,1,0,0,0,421,426,3,120,60,0,422,423,5,6,0,0,423,425,3,120,60,0,424,422,
		1,0,0,0,425,428,1,0,0,0,426,424,1,0,0,0,426,427,1,0,0,0,427,47,1,0,0,0,
		428,426,1,0,0,0,429,430,3,118,59,0,430,431,5,7,0,0,431,433,1,0,0,0,432,
		429,1,0,0,0,432,433,1,0,0,0,433,434,1,0,0,0,434,449,5,20,0,0,435,436,3,
		10,5,0,436,439,5,130,0,0,437,440,3,118,59,0,438,440,3,74,37,0,439,437,
		1,0,0,0,439,438,1,0,0,0,440,442,1,0,0,0,441,443,3,24,12,0,442,441,1,0,
		0,0,442,443,1,0,0,0,443,449,1,0,0,0,444,446,3,144,72,0,445,447,3,24,12,
		0,446,445,1,0,0,0,446,447,1,0,0,0,447,449,1,0,0,0,448,432,1,0,0,0,448,
		435,1,0,0,0,448,444,1,0,0,0,449,49,1,0,0,0,450,453,5,120,0,0,451,454,3,
		10,5,0,452,454,5,166,0,0,453,451,1,0,0,0,453,452,1,0,0,0,454,457,1,0,0,
		0,455,456,5,114,0,0,456,458,3,10,5,0,457,455,1,0,0,0,457,458,1,0,0,0,458,
		51,1,0,0,0,459,461,3,54,27,0,460,462,3,72,36,0,461,460,1,0,0,0,461,462,
		1,0,0,0,462,464,1,0,0,0,463,465,3,68,34,0,464,463,1,0,0,0,464,465,1,0,
		0,0,465,467,1,0,0,0,466,468,3,70,35,0,467,466,1,0,0,0,467,468,1,0,0,0,
		468,53,1,0,0,0,469,470,5,58,0,0,470,475,3,56,28,0,471,472,5,6,0,0,472,
		474,3,56,28,0,473,471,1,0,0,0,474,477,1,0,0,0,475,473,1,0,0,0,475,476,
		1,0,0,0,476,55,1,0,0,0,477,475,1,0,0,0,478,482,3,62,31,0,479,481,3,64,
		32,0,480,479,1,0,0,0,481,484,1,0,0,0,482,480,1,0,0,0,482,483,1,0,0,0,483,
		57,1,0,0,0,484,482,1,0,0,0,485,486,5,1,0,0,486,491,3,146,73,0,487,488,
		5,6,0,0,488,490,3,146,73,0,489,487,1,0,0,0,490,493,1,0,0,0,491,489,1,0,
		0,0,491,492,1,0,0,0,492,494,1,0,0,0,493,491,1,0,0,0,494,495,5,2,0,0,495,
		59,1,0,0,0,496,497,5,142,0,0,497,502,3,58,29,0,498,499,5,6,0,0,499,501,
		3,58,29,0,500,498,1,0,0,0,501,504,1,0,0,0,502,500,1,0,0,0,502,503,1,0,
		0,0,503,61,1,0,0,0,504,502,1,0,0,0,505,508,3,10,5,0,506,507,5,114,0,0,
		507,509,3,10,5,0,508,506,1,0,0,0,508,509,1,0,0,0,509,511,1,0,0,0,510,512,
		3,24,12,0,511,510,1,0,0,0,511,512,1,0,0,0,512,558,1,0,0,0,513,516,5,19,
		0,0,514,515,5,114,0,0,515,517,3,10,5,0,516,514,1,0,0,0,516,517,1,0,0,0,
		517,519,1,0,0,0,518,520,3,24,12,0,519,518,1,0,0,0,519,520,1,0,0,0,520,
		558,1,0,0,0,521,524,5,166,0,0,522,523,5,114,0,0,523,525,3,10,5,0,524,522,
		1,0,0,0,524,525,1,0,0,0,525,527,1,0,0,0,526,528,3,24,12,0,527,526,1,0,
		0,0,527,528,1,0,0,0,528,558,1,0,0,0,529,530,5,1,0,0,530,531,3,26,13,0,
		531,533,5,2,0,0,532,534,3,24,12,0,533,532,1,0,0,0,533,534,1,0,0,0,534,
		558,1,0,0,0,535,538,3,120,60,0,536,537,5,114,0,0,537,539,3,10,5,0,538,
		536,1,0,0,0,538,539,1,0,0,0,539,541,1,0,0,0,540,542,3,24,12,0,541,540,
		1,0,0,0,541,542,1,0,0,0,542,558,1,0,0,0,543,544,5,1,0,0,544,545,3,60,30,
		0,545,547,5,2,0,0,546,548,3,24,12,0,547,546,1,0,0,0,547,548,1,0,0,0,548,
		558,1,0,0,0,549,552,3,146,73,0,550,551,5,114,0,0,551,553,3,10,5,0,552,
		550,1,0,0,0,552,553,1,0,0,0,553,555,1,0,0,0,554,556,3,24,12,0,555,554,
		1,0,0,0,555,556,1,0,0,0,556,558,1,0,0,0,557,505,1,0,0,0,557,513,1,0,0,
		0,557,521,1,0,0,0,557,529,1,0,0,0,557,535,1,0,0,0,557,543,1,0,0,0,557,
		549,1,0,0,0,558,63,1,0,0,0,559,561,3,66,33,0,560,559,1,0,0,0,560,561,1,
		0,0,0,561,562,1,0,0,0,562,563,5,121,0,0,563,564,3,62,31,0,564,565,5,65,
		0,0,565,566,3,144,72,0,566,585,1,0,0,0,567,569,3,66,33,0,568,567,1,0,0,
		0,568,569,1,0,0,0,569,570,1,0,0,0,570,571,5,121,0,0,571,572,3,62,31,0,
		572,573,5,71,0,0,573,574,5,1,0,0,574,579,3,120,60,0,575,576,5,6,0,0,576,
		578,3,120,60,0,577,575,1,0,0,0,578,581,1,0,0,0,579,577,1,0,0,0,579,580,
		1,0,0,0,580,582,1,0,0,0,581,579,1,0,0,0,582,583,5,2,0,0,583,585,1,0,0,
		0,584,560,1,0,0,0,584,568,1,0,0,0,585,65,1,0,0,0,586,592,5,118,0,0,587,
		589,7,4,0,0,588,590,5,129,0,0,589,588,1,0,0,0,589,590,1,0,0,0,590,592,
		1,0,0,0,591,586,1,0,0,0,591,587,1,0,0,0,592,67,1,0,0,0,593,594,5,116,0,
		0,594,595,5,52,0,0,595,600,3,144,72,0,596,597,5,6,0,0,597,599,3,144,72,
		0,598,596,1,0,0,0,599,602,1,0,0,0,600,598,1,0,0,0,600,601,1,0,0,0,601,
		69,1,0,0,0,602,600,1,0,0,0,603,604,5,117,0,0,604,605,3,144,72,0,605,71,
		1,0,0,0,606,607,5,143,0,0,607,608,3,144,72,0,608,73,1,0,0,0,609,611,5,
		1,0,0,610,612,3,118,59,0,611,610,1,0,0,0,611,612,1,0,0,0,612,614,1,0,0,
		0,613,615,3,76,38,0,614,613,1,0,0,0,614,615,1,0,0,0,615,617,1,0,0,0,616,
		618,3,78,39,0,617,616,1,0,0,0,617,618,1,0,0,0,618,619,1,0,0,0,619,620,
		5,2,0,0,620,75,1,0,0,0,621,622,5,131,0,0,622,623,5,52,0,0,623,628,3,144,
		72,0,624,625,5,6,0,0,625,627,3,144,72,0,626,624,1,0,0,0,627,630,1,0,0,
		0,628,626,1,0,0,0,628,629,1,0,0,0,629,77,1,0,0,0,630,628,1,0,0,0,631,632,
		5,128,0,0,632,633,5,52,0,0,633,638,3,22,11,0,634,635,5,6,0,0,635,637,3,
		22,11,0,636,634,1,0,0,0,637,640,1,0,0,0,638,636,1,0,0,0,638,639,1,0,0,
		0,639,79,1,0,0,0,640,638,1,0,0,0,641,642,5,144,0,0,642,647,3,82,41,0,643,
		644,5,6,0,0,644,646,3,82,41,0,645,643,1,0,0,0,646,649,1,0,0,0,647,645,
		1,0,0,0,647,648,1,0,0,0,648,81,1,0,0,0,649,647,1,0,0,0,650,651,3,120,60,
		0,651,652,5,49,0,0,652,653,3,74,37,0,653,83,1,0,0,0,654,655,5,127,0,0,
		655,657,3,144,72,0,656,658,7,5,0,0,657,656,1,0,0,0,657,658,1,0,0,0,658,
		85,1,0,0,0,659,661,7,6,0,0,660,662,7,7,0,0,661,660,1,0,0,0,661,662,1,0,
		0,0,662,663,1,0,0,0,663,665,3,144,72,0,664,666,7,5,0,0,665,664,1,0,0,0,
		665,666,1,0,0,0,666,668,1,0,0,0,667,669,7,8,0,0,668,667,1,0,0,0,668,669,
		1,0,0,0,669,87,1,0,0,0,670,671,5,139,0,0,671,672,5,163,0,0,672,89,1,0,
		0,0,673,674,5,124,0,0,674,675,3,144,72,0,675,91,1,0,0,0,676,677,5,146,
		0,0,677,678,3,94,47,0,678,679,5,150,0,0,679,684,3,96,48,0,680,681,5,6,
		0,0,681,683,3,96,48,0,682,680,1,0,0,0,683,686,1,0,0,0,684,682,1,0,0,0,
		684,685,1,0,0,0,685,688,1,0,0,0,686,684,1,0,0,0,687,689,3,72,36,0,688,
		687,1,0,0,0,688,689,1,0,0,0,689,93,1,0,0,0,690,692,3,10,5,0,691,693,3,
		24,12,0,692,691,1,0,0,0,692,693,1,0,0,0,693,707,1,0,0,0,694,697,5,166,
		0,0,695,696,5,114,0,0,696,698,3,10,5,0,697,695,1,0,0,0,697,698,1,0,0,0,
		698,700,1,0,0,0,699,701,3,24,12,0,700,699,1,0,0,0,700,701,1,0,0,0,701,
		707,1,0,0,0,702,704,3,120,60,0,703,705,3,24,12,0,704,703,1,0,0,0,704,705,
		1,0,0,0,705,707,1,0,0,0,706,690,1,0,0,0,706,694,1,0,0,0,706,702,1,0,0,
		0,707,95,1,0,0,0,708,709,3,120,60,0,709,710,5,23,0,0,710,711,3,144,72,
		0,711,97,1,0,0,0,712,713,5,147,0,0,713,714,5,120,0,0,714,716,3,100,50,
		0,715,717,3,102,51,0,716,715,1,0,0,0,716,717,1,0,0,0,717,718,1,0,0,0,718,
		719,3,104,52,0,719,99,1,0,0,0,720,722,3,10,5,0,721,723,3,24,12,0,722,721,
		1,0,0,0,722,723,1,0,0,0,723,737,1,0,0,0,724,727,5,166,0,0,725,726,5,114,
		0,0,726,728,3,10,5,0,727,725,1,0,0,0,727,728,1,0,0,0,728,730,1,0,0,0,729,
		731,3,24,12,0,730,729,1,0,0,0,730,731,1,0,0,0,731,737,1,0,0,0,732,734,
		3,120,60,0,733,735,3,24,12,0,734,733,1,0,0,0,734,735,1,0,0,0,735,737,1,
		0,0,0,736,720,1,0,0,0,736,724,1,0,0,0,736,732,1,0,0,0,737,101,1,0,0,0,
		738,739,5,1,0,0,739,744,3,120,60,0,740,741,5,6,0,0,741,743,3,120,60,0,
		742,740,1,0,0,0,743,746,1,0,0,0,744,742,1,0,0,0,744,745,1,0,0,0,745,747,
		1,0,0,0,746,744,1,0,0,0,747,748,5,2,0,0,748,103,1,0,0,0,749,752,3,26,13,
		0,750,752,3,60,30,0,751,749,1,0,0,0,751,750,1,0,0,0,752,105,1,0,0,0,753,
		754,5,148,0,0,754,755,5,58,0,0,755,757,3,108,54,0,756,758,3,72,36,0,757,
		756,1,0,0,0,757,758,1,0,0,0,758,107,1,0,0,0,759,761,3,10,5,0,760,762,3,
		24,12,0,761,760,1,0,0,0,761,762,1,0,0,0,762,776,1,0,0,0,763,766,5,166,
		0,0,764,765,5,114,0,0,765,767,3,10,5,0,766,764,1,0,0,0,766,767,1,0,0,0,
		767,769,1,0,0,0,768,770,3,24,12,0,769,768,1,0,0,0,769,770,1,0,0,0,770,
		776,1,0,0,0,771,773,3,120,60,0,772,774,3,24,12,0,773,772,1,0,0,0,773,774,
		1,0,0,0,774,776,1,0,0,0,775,759,1,0,0,0,775,763,1,0,0,0,775,771,1,0,0,
		0,776,109,1,0,0,0,777,778,5,103,0,0,778,779,3,144,72,0,779,111,1,0,0,0,
		780,781,5,151,0,0,781,782,3,10,5,0,782,113,1,0,0,0,783,784,5,152,0,0,784,
		789,3,116,58,0,785,786,5,155,0,0,786,788,3,116,58,0,787,785,1,0,0,0,788,
		791,1,0,0,0,789,787,1,0,0,0,789,790,1,0,0,0,790,794,1,0,0,0,791,789,1,
		0,0,0,792,793,5,154,0,0,793,795,3,128,64,0,794,792,1,0,0,0,794,795,1,0,
		0,0,795,115,1,0,0,0,796,797,3,144,72,0,797,798,5,153,0,0,798,799,3,128,
		64,0,799,117,1,0,0,0,800,804,5,161,0,0,801,804,5,162,0,0,802,804,5,15,
		0,0,803,800,1,0,0,0,803,801,1,0,0,0,803,802,1,0,0,0,804,119,1,0,0,0,805,
		809,3,118,59,0,806,808,3,122,61,0,807,806,1,0,0,0,808,811,1,0,0,0,809,
		807,1,0,0,0,809,810,1,0,0,0,810,814,1,0,0,0,811,809,1,0,0,0,812,814,3,
		118,59,0,813,805,1,0,0,0,813,812,1,0,0,0,814,121,1,0,0,0,815,816,5,7,0,
		0,816,834,3,118,59,0,817,818,5,11,0,0,818,823,3,146,73,0,819,820,5,6,0,
		0,820,822,3,146,73,0,821,819,1,0,0,0,822,825,1,0,0,0,823,821,1,0,0,0,823,
		824,1,0,0,0,824,826,1,0,0,0,825,823,1,0,0,0,826,827,5,12,0,0,827,834,1,
		0,0,0,828,829,5,11,0,0,829,830,5,10,0,0,830,831,3,146,73,0,831,832,5,12,
		0,0,832,834,1,0,0,0,833,815,1,0,0,0,833,817,1,0,0,0,833,828,1,0,0,0,834,
		123,1,0,0,0,835,836,5,1,0,0,836,841,3,144,72,0,837,838,5,6,0,0,838,840,
		3,144,72,0,839,837,1,0,0,0,840,843,1,0,0,0,841,839,1,0,0,0,841,842,1,0,
		0,0,842,844,1,0,0,0,843,841,1,0,0,0,844,845,5,2,0,0,845,125,1,0,0,0,846,
		847,5,79,0,0,847,848,5,166,0,0,848,127,1,0,0,0,849,853,5,51,0,0,850,852,
		5,9,0,0,851,850,1,0,0,0,852,855,1,0,0,0,853,851,1,0,0,0,853,854,1,0,0,
		0,854,856,1,0,0,0,855,853,1,0,0,0,856,861,3,2,1,0,857,858,5,9,0,0,858,
		860,3,2,1,0,859,857,1,0,0,0,860,863,1,0,0,0,861,859,1,0,0,0,861,862,1,
		0,0,0,862,867,1,0,0,0,863,861,1,0,0,0,864,866,5,9,0,0,865,864,1,0,0,0,
		866,869,1,0,0,0,867,865,1,0,0,0,867,868,1,0,0,0,868,870,1,0,0,0,869,867,
		1,0,0,0,870,871,5,55,0,0,871,129,1,0,0,0,872,873,5,53,0,0,873,874,5,1,
		0,0,874,875,3,146,73,0,875,876,5,49,0,0,876,877,3,142,71,0,877,878,5,2,
		0,0,878,131,1,0,0,0,879,884,5,50,0,0,880,885,5,91,0,0,881,882,5,92,0,0,
		882,883,5,93,0,0,883,885,3,146,73,0,884,880,1,0,0,0,884,881,1,0,0,0,885,
		133,1,0,0,0,886,888,5,94,0,0,887,889,3,146,73,0,888,887,1,0,0,0,888,889,
		1,0,0,0,889,893,1,0,0,0,890,892,3,136,68,0,891,890,1,0,0,0,892,895,1,0,
		0,0,893,891,1,0,0,0,893,894,1,0,0,0,894,898,1,0,0,0,895,893,1,0,0,0,896,
		897,5,154,0,0,897,899,3,144,72,0,898,896,1,0,0,0,898,899,1,0,0,0,899,900,
		1,0,0,0,900,901,5,55,0,0,901,135,1,0,0,0,902,903,5,98,0,0,903,904,3,144,
		72,0,904,905,5,153,0,0,905,906,3,144,72,0,906,137,1,0,0,0,907,980,5,77,
		0,0,908,980,5,78,0,0,909,910,5,73,0,0,910,912,5,1,0,0,911,913,7,9,0,0,
		912,911,1,0,0,0,912,913,1,0,0,0,913,915,1,0,0,0,914,916,5,166,0,0,915,
		914,1,0,0,0,915,916,1,0,0,0,916,918,1,0,0,0,917,919,5,58,0,0,918,917,1,
		0,0,0,918,919,1,0,0,0,919,920,1,0,0,0,920,921,3,146,73,0,921,922,5,2,0,
		0,922,980,1,0,0,0,923,924,5,97,0,0,924,925,5,1,0,0,925,926,5,166,0,0,926,
		927,5,59,0,0,927,928,3,146,73,0,928,929,5,2,0,0,929,980,1,0,0,0,930,931,
		5,96,0,0,931,932,5,1,0,0,932,933,3,140,70,0,933,934,5,58,0,0,934,935,3,
		146,73,0,935,936,5,2,0,0,936,980,1,0,0,0,937,938,5,95,0,0,938,939,5,1,
		0,0,939,944,3,144,72,0,940,941,5,6,0,0,941,943,3,144,72,0,942,940,1,0,
		0,0,943,946,1,0,0,0,944,942,1,0,0,0,944,945,1,0,0,0,945,947,1,0,0,0,946,
		944,1,0,0,0,947,948,5,2,0,0,948,980,1,0,0,0,949,950,5,99,0,0,950,951,5,
		1,0,0,951,952,5,166,0,0,952,953,5,59,0,0,953,954,3,146,73,0,954,955,5,
		2,0,0,955,980,1,0,0,0,956,957,5,100,0,0,957,958,5,1,0,0,958,959,5,166,
		0,0,959,960,5,59,0,0,960,961,3,146,73,0,961,962,5,2,0,0,962,980,1,0,0,
		0,963,964,5,101,0,0,964,965,5,1,0,0,965,966,5,166,0,0,966,967,5,59,0,0,
		967,968,3,146,73,0,968,969,5,2,0,0,969,980,1,0,0,0,970,971,5,102,0,0,971,
		972,5,1,0,0,972,973,5,166,0,0,973,974,5,59,0,0,974,975,3,146,73,0,975,
		976,5,145,0,0,976,977,5,166,0,0,977,978,5,2,0,0,978,980,1,0,0,0,979,907,
		1,0,0,0,979,908,1,0,0,0,979,909,1,0,0,0,979,923,1,0,0,0,979,930,1,0,0,
		0,979,937,1,0,0,0,979,949,1,0,0,0,979,956,1,0,0,0,979,963,1,0,0,0,979,
		970,1,0,0,0,980,139,1,0,0,0,981,982,7,10,0,0,982,141,1,0,0,0,983,984,7,
		11,0,0,984,143,1,0,0,0,985,986,6,72,-1,0,986,1009,3,148,74,0,987,1009,
		3,130,65,0,988,1009,3,138,69,0,989,1009,3,10,5,0,990,1009,3,120,60,0,991,
		992,5,1,0,0,992,993,3,144,72,0,993,994,5,2,0,0,994,1009,1,0,0,0,995,996,
		7,12,0,0,996,1009,3,144,72,20,997,998,5,56,0,0,998,999,5,1,0,0,999,1000,
		3,26,13,0,1000,1001,5,2,0,0,1001,1009,1,0,0,0,1002,1003,5,1,0,0,1003,1004,
		3,26,13,0,1004,1005,5,2,0,0,1005,1009,1,0,0,0,1006,1009,3,134,67,0,1007,
		1009,3,128,64,0,1008,985,1,0,0,0,1008,987,1,0,0,0,1008,988,1,0,0,0,1008,
		989,1,0,0,0,1008,990,1,0,0,0,1008,991,1,0,0,0,1008,995,1,0,0,0,1008,997,
		1,0,0,0,1008,1002,1,0,0,0,1008,1006,1,0,0,0,1008,1007,1,0,0,0,1009,1088,
		1,0,0,0,1010,1011,10,19,0,0,1011,1012,7,13,0,0,1012,1087,3,144,72,20,1013,
		1014,10,18,0,0,1014,1015,7,14,0,0,1015,1087,3,144,72,19,1016,1017,10,17,
		0,0,1017,1018,7,15,0,0,1018,1087,3,144,72,18,1019,1020,10,16,0,0,1020,
		1021,7,16,0,0,1021,1087,3,144,72,17,1022,1024,10,15,0,0,1023,1025,5,63,
		0,0,1024,1023,1,0,0,0,1024,1025,1,0,0,0,1025,1026,1,0,0,0,1026,1027,5,
		61,0,0,1027,1087,3,144,72,16,1028,1030,10,14,0,0,1029,1031,5,63,0,0,1030,
		1029,1,0,0,0,1030,1031,1,0,0,0,1031,1032,1,0,0,0,1032,1033,5,138,0,0,1033,
		1034,5,69,0,0,1034,1087,3,144,72,15,1035,1037,10,10,0,0,1036,1038,5,63,
		0,0,1037,1036,1,0,0,0,1037,1038,1,0,0,0,1038,1039,1,0,0,0,1039,1040,5,
		106,0,0,1040,1041,3,146,73,0,1041,1042,5,48,0,0,1042,1043,3,144,72,11,
		1043,1087,1,0,0,0,1044,1045,10,6,0,0,1045,1046,5,48,0,0,1046,1087,3,144,
		72,7,1047,1048,10,5,0,0,1048,1049,5,67,0,0,1049,1087,3,144,72,6,1050,1051,
		10,25,0,0,1051,1052,5,32,0,0,1052,1087,3,142,71,0,1053,1055,10,13,0,0,
		1054,1056,5,63,0,0,1055,1054,1,0,0,0,1055,1056,1,0,0,0,1056,1057,1,0,0,
		0,1057,1058,5,59,0,0,1058,1087,3,124,62,0,1059,1061,10,12,0,0,1060,1062,
		5,63,0,0,1061,1060,1,0,0,0,1061,1062,1,0,0,0,1062,1063,1,0,0,0,1063,1064,
		5,59,0,0,1064,1087,3,118,59,0,1065,1067,10,11,0,0,1066,1068,5,63,0,0,1067,
		1066,1,0,0,0,1067,1068,1,0,0,0,1068,1069,1,0,0,0,1069,1070,5,59,0,0,1070,
		1087,3,26,13,0,1071,1072,10,9,0,0,1072,1073,7,16,0,0,1073,1074,7,17,0,
		0,1074,1075,5,1,0,0,1075,1076,3,26,13,0,1076,1077,5,2,0,0,1077,1087,1,
		0,0,0,1078,1079,10,4,0,0,1079,1081,5,60,0,0,1080,1082,5,63,0,0,1081,1080,
		1,0,0,0,1081,1082,1,0,0,0,1082,1083,1,0,0,0,1083,1087,5,64,0,0,1084,1085,
		10,3,0,0,1085,1087,3,132,66,0,1086,1010,1,0,0,0,1086,1013,1,0,0,0,1086,
		1016,1,0,0,0,1086,1019,1,0,0,0,1086,1022,1,0,0,0,1086,1028,1,0,0,0,1086,
		1035,1,0,0,0,1086,1044,1,0,0,0,1086,1047,1,0,0,0,1086,1050,1,0,0,0,1086,
		1053,1,0,0,0,1086,1059,1,0,0,0,1086,1065,1,0,0,0,1086,1071,1,0,0,0,1086,
		1078,1,0,0,0,1086,1084,1,0,0,0,1087,1090,1,0,0,0,1088,1086,1,0,0,0,1088,
		1089,1,0,0,0,1089,145,1,0,0,0,1090,1088,1,0,0,0,1091,1092,6,73,-1,0,1092,
		1106,3,148,74,0,1093,1106,3,130,65,0,1094,1106,3,138,69,0,1095,1106,3,
		10,5,0,1096,1106,3,120,60,0,1097,1098,5,1,0,0,1098,1099,3,146,73,0,1099,
		1100,5,2,0,0,1100,1106,1,0,0,0,1101,1102,7,12,0,0,1102,1106,3,146,73,6,
		1103,1106,3,134,67,0,1104,1106,3,132,66,0,1105,1091,1,0,0,0,1105,1093,
		1,0,0,0,1105,1094,1,0,0,0,1105,1095,1,0,0,0,1105,1096,1,0,0,0,1105,1097,
		1,0,0,0,1105,1101,1,0,0,0,1105,1103,1,0,0,0,1105,1104,1,0,0,0,1106,1121,
		1,0,0,0,1107,1108,10,5,0,0,1108,1109,7,14,0,0,1109,1120,3,146,73,6,1110,
		1111,10,4,0,0,1111,1112,7,15,0,0,1112,1120,3,146,73,5,1113,1114,10,3,0,
		0,1114,1115,7,16,0,0,1115,1120,3,146,73,4,1116,1117,10,11,0,0,1117,1118,
		5,32,0,0,1118,1120,3,142,71,0,1119,1107,1,0,0,0,1119,1110,1,0,0,0,1119,
		1113,1,0,0,0,1119,1116,1,0,0,0,1120,1123,1,0,0,0,1121,1119,1,0,0,0,1121,
		1122,1,0,0,0,1122,147,1,0,0,0,1123,1121,1,0,0,0,1124,1133,5,163,0,0,1125,
		1133,5,166,0,0,1126,1133,5,164,0,0,1127,1133,5,165,0,0,1128,1133,5,70,
		0,0,1129,1133,5,57,0,0,1130,1133,5,64,0,0,1131,1133,3,126,63,0,1132,1124,
		1,0,0,0,1132,1125,1,0,0,0,1132,1126,1,0,0,0,1132,1127,1,0,0,0,1132,1128,
		1,0,0,0,1132,1129,1,0,0,0,1132,1130,1,0,0,0,1132,1131,1,0,0,0,1133,149,
		1,0,0,0,146,153,161,167,183,192,195,200,209,212,216,221,225,234,237,246,
		251,260,276,281,287,290,294,297,301,304,307,310,318,324,327,329,337,340,
		344,347,351,354,357,360,367,376,382,392,399,406,414,426,432,439,442,446,
		448,453,457,461,464,467,475,482,491,502,508,511,516,519,524,527,533,538,
		541,547,552,555,557,560,568,579,584,589,591,600,611,614,617,628,638,647,
		657,661,665,668,684,688,692,697,700,704,706,716,722,727,730,734,736,744,
		751,757,761,766,769,773,775,789,794,803,809,813,823,833,841,853,861,867,
		884,888,893,898,912,915,918,944,979,1008,1024,1030,1037,1055,1061,1067,
		1081,1086,1088,1105,1119,1121,1132
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace QueryCat.Backend.Parser
