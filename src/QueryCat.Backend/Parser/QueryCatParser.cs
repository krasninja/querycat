//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../QueryCat.Backend/Parser/QueryCatParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace QueryCat.Backend.Parser {
 #pragma warning disable 3021 
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class QueryCatParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LEFT_PAREN=1, RIGHT_PAREN=2, ASSIGN=3, ASSOCIATION=4, COLON=5, COMMA=6, 
		PERIOD=7, ELLIPSIS=8, SEMICOLON=9, QUESTION=10, LEFT_BRACKET=11, RIGHT_BRACKET=12, 
		LEFT_RIGHT_BRACKET=13, PIPE=14, PLUS=15, MINUS=16, STAR=17, DIV=18, MOD=19, 
		EQUALS=20, NOT_EQUALS=21, GREATER=22, GREATER_OR_EQUALS=23, LESS=24, LESS_OR_EQUALS=25, 
		CONCAT=26, LESS_LESS=27, GREATER_GREATER=28, TYPECAST=29, INTEGER=30, 
		STRING=31, FLOAT=32, TIMESTAMP=33, BOOLEAN=34, NUMERIC=35, OBJECT=36, 
		ANY=37, AND=38, AS=39, AT=40, BY=41, CAST=42, DEFAULT=43, ELSE=44, END=45, 
		EXISTS=46, FALSE=47, FROM=48, IF=49, IN=50, IS=51, LIKE=52, NOT=53, NULL=54, 
		ON=55, ONLY=56, OR=57, SOME=58, THEN=59, TO=60, TRUE=61, USING=62, VOID=63, 
		TRIM=64, LEADING=65, TRAILING=66, BOTH=67, CURRENT_DATE=68, CURRENT_TIMESTAMP=69, 
		INTERVAL=70, YEAR=71, DOY=72, DAYOFYEAR=73, MONTH=74, DOW=75, WEEKDAY=76, 
		DAY=77, HOUR=78, MINUTE=79, SECOND=80, MILLISECOND=81, LOCAL=82, TIME=83, 
		ZONE=84, CASE=85, COALESCE=86, EXTRACT=87, POSITION=88, WHEN=89, ECHO=90, 
		ALL=91, ASC=92, BETWEEN=93, CURRENT=94, DESC=95, DISTINCT=96, EXCEPT=97, 
		FETCH=98, FIRST=99, FOLLOWING=100, FORMAT=101, FULL=102, GROUP=103, HAVING=104, 
		INNER=105, INTERSECT=106, INTO=107, JOIN=108, LAST=109, LEFT=110, LIMIT=111, 
		NEXT=112, NULLS=113, OFFSET=114, ORDER=115, OUTER=116, OVER=117, PARTITION=118, 
		PRECEDING=119, RECURSIVE=120, RIGHT=121, ROW=122, ROWS=123, SELECT=124, 
		SIMILAR=125, TOP=126, UNBOUNDED=127, UNION=128, VALUES=129, WHERE=130, 
		WINDOW=131, WITH=132, UPDATE=133, INSERT=134, DECLARE=135, SET=136, TYPE=137, 
		IDENTIFIER=138, INTEGER_LITERAL=139, FLOAT_LITERAL=140, NUMERIC_LITERAL=141, 
		STRING_LITERAL=142, BOOLEAN_LITERAL=143, SINGLE_LINE_COMMENT=144, MULTILINE_COMMENT=145, 
		SPACES=146;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_functionSignature = 2, RULE_functionType = 3, 
		RULE_functionArg = 4, RULE_functionCall = 5, RULE_functionCallArg = 6, 
		RULE_declareVariable = 7, RULE_setVariable = 8, RULE_selectStatement = 9, 
		RULE_selectOrderByClause = 10, RULE_selectSortSpecification = 11, RULE_selectAlias = 12, 
		RULE_selectQueryExpression = 13, RULE_selectQueryExpressionBody = 14, 
		RULE_selectQueryPrimary = 15, RULE_selectQuerySpecification = 16, RULE_selectList = 17, 
		RULE_selectDistinctClause = 18, RULE_selectDistinctOnClause = 19, RULE_selectWithClause = 20, 
		RULE_selectWithElement = 21, RULE_selectWithColumnList = 22, RULE_selectSublist = 23, 
		RULE_selectTarget = 24, RULE_selectFromClause = 25, RULE_selectTableReferenceList = 26, 
		RULE_selectTableReference = 27, RULE_selectTableRow = 28, RULE_selectTable = 29, 
		RULE_selectTablePrimary = 30, RULE_selectTableJoined = 31, RULE_selectJoinType = 32, 
		RULE_selectGroupBy = 33, RULE_selectHaving = 34, RULE_selectSearchCondition = 35, 
		RULE_selectWindowSpecification = 36, RULE_selectWindowPartitionClause = 37, 
		RULE_selectWindowOrderClause = 38, RULE_selectWindow = 39, RULE_selectWindowDefinitionList = 40, 
		RULE_selectOffsetClause = 41, RULE_selectFetchFirstClause = 42, RULE_selectTopClause = 43, 
		RULE_selectLimitClause = 44, RULE_updateStatement = 45, RULE_updateSet = 46, 
		RULE_insertStatement = 47, RULE_insertToSource = 48, RULE_insertColumnsList = 49, 
		RULE_insertFromSource = 50, RULE_echoStatement = 51, RULE_identifierChain = 52, 
		RULE_array = 53, RULE_intervalLiteral = 54, RULE_castOperand = 55, RULE_atTimeZone = 56, 
		RULE_caseExpression = 57, RULE_caseWhen = 58, RULE_standardFunction = 59, 
		RULE_dateTimeField = 60, RULE_type = 61, RULE_expression = 62, RULE_simpleExpression = 63, 
		RULE_literal = 64;
	public static readonly string[] ruleNames = {
		"program", "statement", "functionSignature", "functionType", "functionArg", 
		"functionCall", "functionCallArg", "declareVariable", "setVariable", "selectStatement", 
		"selectOrderByClause", "selectSortSpecification", "selectAlias", "selectQueryExpression", 
		"selectQueryExpressionBody", "selectQueryPrimary", "selectQuerySpecification", 
		"selectList", "selectDistinctClause", "selectDistinctOnClause", "selectWithClause", 
		"selectWithElement", "selectWithColumnList", "selectSublist", "selectTarget", 
		"selectFromClause", "selectTableReferenceList", "selectTableReference", 
		"selectTableRow", "selectTable", "selectTablePrimary", "selectTableJoined", 
		"selectJoinType", "selectGroupBy", "selectHaving", "selectSearchCondition", 
		"selectWindowSpecification", "selectWindowPartitionClause", "selectWindowOrderClause", 
		"selectWindow", "selectWindowDefinitionList", "selectOffsetClause", "selectFetchFirstClause", 
		"selectTopClause", "selectLimitClause", "updateStatement", "updateSet", 
		"insertStatement", "insertToSource", "insertColumnsList", "insertFromSource", 
		"echoStatement", "identifierChain", "array", "intervalLiteral", "castOperand", 
		"atTimeZone", "caseExpression", "caseWhen", "standardFunction", "dateTimeField", 
		"type", "expression", "simpleExpression", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "':='", "'=>'", "':'", "','", "'.'", "'...'", "';'", 
		"'?'", "'['", "']'", "'[]'", "'&>'", "'+'", "'-'", "'*'", "'/'", "'%'", 
		"'='", "'<>'", "'>'", "'>='", "'<'", "'<='", "'||'", "'<<'", "'>>'", "'::'", 
		"'INTEGER'", "'STRING'", "'FLOAT'", "'TIMESTAMP'", "'BOOLEAN'", "'NUMERIC'", 
		"'OBJECT'", "'ANY'", "'AND'", "'AS'", "'AT'", "'BY'", "'CAST'", "'DEFAULT'", 
		"'ELSE'", "'END'", "'EXISTS'", "'FALSE'", "'FROM'", "'IF'", "'IN'", "'IS'", 
		"'LIKE'", "'NOT'", "'NULL'", "'ON'", "'ONLY'", "'OR'", "'SOME'", "'THEN'", 
		"'TO'", "'TRUE'", "'USING'", "'VOID'", "'TRIM'", "'LEADING'", "'TRAILING'", 
		"'BOTH'", "'CURRENT_DATE'", "'CURRENT_TIMESTAMP'", "'INTERVAL'", "'YEAR'", 
		"'DOY'", "'DAYOFYEAR'", "'MONTH'", "'DOW'", "'WEEKDAY'", "'DAY'", "'HOUR'", 
		"'MINUTE'", "'SECOND'", "'MILLISECOND'", "'LOCAL'", "'TIME'", "'ZONE'", 
		"'CASE'", "'COALESCE'", "'EXTRACT'", "'POSITION'", "'WHEN'", "'ECHO'", 
		"'ALL'", "'ASC'", "'BETWEEN'", "'CURRENT'", "'DESC'", "'DISTINCT'", "'EXCEPT'", 
		"'FETCH'", "'FIRST'", "'FOLLOWING'", "'FORMAT'", "'FULL'", "'GROUP'", 
		"'HAVING'", "'INNER'", "'INTERSECT'", "'INTO'", "'JOIN'", "'LAST'", "'LEFT'", 
		"'LIMIT'", "'NEXT'", "'NULLS'", "'OFFSET'", "'ORDER'", "'OUTER'", "'OVER'", 
		"'PARTITION'", "'PRECEDING'", "'RECURSIVE'", "'RIGHT'", "'ROW'", "'ROWS'", 
		"'SELECT'", "'SIMILAR'", "'TOP'", "'UNBOUNDED'", "'UNION'", "'VALUES'", 
		"'WHERE'", "'WINDOW'", "'WITH'", "'UPDATE'", "'INSERT'", "'DECLARE'", 
		"'SET'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LEFT_PAREN", "RIGHT_PAREN", "ASSIGN", "ASSOCIATION", "COLON", "COMMA", 
		"PERIOD", "ELLIPSIS", "SEMICOLON", "QUESTION", "LEFT_BRACKET", "RIGHT_BRACKET", 
		"LEFT_RIGHT_BRACKET", "PIPE", "PLUS", "MINUS", "STAR", "DIV", "MOD", "EQUALS", 
		"NOT_EQUALS", "GREATER", "GREATER_OR_EQUALS", "LESS", "LESS_OR_EQUALS", 
		"CONCAT", "LESS_LESS", "GREATER_GREATER", "TYPECAST", "INTEGER", "STRING", 
		"FLOAT", "TIMESTAMP", "BOOLEAN", "NUMERIC", "OBJECT", "ANY", "AND", "AS", 
		"AT", "BY", "CAST", "DEFAULT", "ELSE", "END", "EXISTS", "FALSE", "FROM", 
		"IF", "IN", "IS", "LIKE", "NOT", "NULL", "ON", "ONLY", "OR", "SOME", "THEN", 
		"TO", "TRUE", "USING", "VOID", "TRIM", "LEADING", "TRAILING", "BOTH", 
		"CURRENT_DATE", "CURRENT_TIMESTAMP", "INTERVAL", "YEAR", "DOY", "DAYOFYEAR", 
		"MONTH", "DOW", "WEEKDAY", "DAY", "HOUR", "MINUTE", "SECOND", "MILLISECOND", 
		"LOCAL", "TIME", "ZONE", "CASE", "COALESCE", "EXTRACT", "POSITION", "WHEN", 
		"ECHO", "ALL", "ASC", "BETWEEN", "CURRENT", "DESC", "DISTINCT", "EXCEPT", 
		"FETCH", "FIRST", "FOLLOWING", "FORMAT", "FULL", "GROUP", "HAVING", "INNER", 
		"INTERSECT", "INTO", "JOIN", "LAST", "LEFT", "LIMIT", "NEXT", "NULLS", 
		"OFFSET", "ORDER", "OUTER", "OVER", "PARTITION", "PRECEDING", "RECURSIVE", 
		"RIGHT", "ROW", "ROWS", "SELECT", "SIMILAR", "TOP", "UNBOUNDED", "UNION", 
		"VALUES", "WHERE", "WINDOW", "WITH", "UPDATE", "INSERT", "DECLARE", "SET", 
		"TYPE", "IDENTIFIER", "INTEGER_LITERAL", "FLOAT_LITERAL", "NUMERIC_LITERAL", 
		"STRING_LITERAL", "BOOLEAN_LITERAL", "SINGLE_LINE_COMMENT", "MULTILINE_COMMENT", 
		"SPACES"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "QueryCatParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static QueryCatParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public QueryCatParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public QueryCatParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(QueryCatParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(QueryCatParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(QueryCatParser.SEMICOLON, i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 130;
				Match(SEMICOLON);
				}
				}
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 136;
			statement();
			State = 141;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 137;
					Match(SEMICOLON);
					State = 138;
					statement();
					}
					} 
				}
				State = 143;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 144;
				Match(SEMICOLON);
				}
				}
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 150;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StatementSelectExpressionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public StatementSelectExpressionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementSelectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementEchoContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public EchoStatementContext echoStatement() {
			return GetRuleContext<EchoStatementContext>(0);
		}
		public StatementEchoContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementEcho(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementExpressionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementExpressionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementDeclareVariableContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclareVariableContext declareVariable() {
			return GetRuleContext<DeclareVariableContext>(0);
		}
		public StatementDeclareVariableContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementDeclareVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementFunctionCallContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public StatementFunctionCallContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementSetVariableContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetVariableContext setVariable() {
			return GetRuleContext<SetVariableContext>(0);
		}
		public StatementSetVariableContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementSetVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementUpdateExpressionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public UpdateStatementContext updateStatement() {
			return GetRuleContext<UpdateStatementContext>(0);
		}
		public StatementUpdateExpressionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementUpdateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementInsertExpressionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public InsertStatementContext insertStatement() {
			return GetRuleContext<InsertStatementContext>(0);
		}
		public StatementInsertExpressionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementInsertExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 160;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new StatementFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 152;
				functionCall();
				}
				break;
			case 2:
				_localctx = new StatementSelectExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 153;
				selectStatement();
				}
				break;
			case 3:
				_localctx = new StatementUpdateExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 154;
				updateStatement();
				}
				break;
			case 4:
				_localctx = new StatementInsertExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 155;
				insertStatement();
				}
				break;
			case 5:
				_localctx = new StatementEchoContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 156;
				echoStatement();
				}
				break;
			case 6:
				_localctx = new StatementDeclareVariableContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 157;
				declareVariable();
				}
				break;
			case 7:
				_localctx = new StatementSetVariableContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 158;
				setVariable();
				}
				break;
			case 8:
				_localctx = new StatementExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 159;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSignatureContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(QueryCatParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext[] functionArg() {
			return GetRuleContexts<FunctionArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext functionArg(int i) {
			return GetRuleContext<FunctionArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(QueryCatParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public FunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSignatureContext functionSignature() {
		FunctionSignatureContext _localctx = new FunctionSignatureContext(Context, State);
		EnterRule(_localctx, 4, RULE_functionSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			_localctx.name = Match(IDENTIFIER);
			State = 163;
			Match(LEFT_PAREN);
			State = 172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELLIPSIS || _la==IDENTIFIER) {
				{
				State = 164;
				functionArg();
				State = 169;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 165;
					Match(COMMA);
					State = 166;
					functionArg();
					}
					}
					State = 171;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 174;
			Match(RIGHT_PAREN);
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 175;
				Match(COLON);
				State = 176;
				functionType();
				}
			}

			State = 179;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(QueryCatParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(QueryCatParser.GREATER, 0); }
		public FunctionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeContext functionType() {
		FunctionTypeContext _localctx = new FunctionTypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_functionType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			type();
			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LESS) {
				{
				State = 182;
				Match(LESS);
				State = 183;
				Match(IDENTIFIER);
				State = 184;
				Match(GREATER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgContext : ParserRuleContext {
		public IToken variadic;
		public IToken optional;
		public IToken isArray;
		public LiteralContext @default;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(QueryCatParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSIS() { return GetToken(QueryCatParser.ELLIPSIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(QueryCatParser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_RIGHT_BRACKET() { return GetToken(QueryCatParser.LEFT_RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(QueryCatParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(QueryCatParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(QueryCatParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgContext functionArg() {
		FunctionArgContext _localctx = new FunctionArgContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELLIPSIS) {
				{
				State = 187;
				_localctx.variadic = Match(ELLIPSIS);
				}
			}

			State = 190;
			Match(IDENTIFIER);
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUESTION) {
				{
				State = 191;
				_localctx.optional = Match(QUESTION);
				}
			}

			State = 194;
			Match(COLON);
			State = 195;
			functionType();
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_RIGHT_BRACKET) {
				{
				State = 196;
				_localctx.isArray = Match(LEFT_RIGHT_BRACKET);
				}
			}

			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 8796094070792L) != 0) {
				{
				State = 199;
				_la = TokenStream.LA(1);
				if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 8796094070792L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 200;
				_localctx.@default = literal();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallArgContext[] functionCallArg() {
			return GetRuleContexts<FunctionCallArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallArgContext functionCallArg(int i) {
			return GetRuleContext<FunctionCallArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(QueryCatParser.STAR, 0); }
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 10, RULE_functionCall);
		int _la;
		try {
			State = 220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 203;
				Match(IDENTIFIER);
				State = 204;
				Match(LEFT_PAREN);
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2333081210768687106L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 31457393L) != 0 || (((_la - 138)) & ~0x3f) == 0 && ((1L << (_la - 138)) & 63L) != 0) {
					{
					State = 205;
					functionCallArg();
					State = 210;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 206;
						Match(COMMA);
						State = 207;
						functionCallArg();
						}
						}
						State = 212;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 215;
				Match(RIGHT_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 216;
				Match(IDENTIFIER);
				State = 217;
				Match(LEFT_PAREN);
				State = 218;
				Match(STAR);
				State = 219;
				Match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSOCIATION() { return GetToken(QueryCatParser.ASSOCIATION, 0); }
		public FunctionCallArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallArgContext functionCallArg() {
		FunctionCallArgContext _localctx = new FunctionCallArgContext(Context, State);
		EnterRule(_localctx, 12, RULE_functionCallArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 222;
				Match(IDENTIFIER);
				State = 223;
				Match(ASSOCIATION);
				}
				break;
			}
			State = 226;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(QueryCatParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(QueryCatParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public DeclareVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareVariableContext declareVariable() {
		DeclareVariableContext _localctx = new DeclareVariableContext(Context, State);
		EnterRule(_localctx, 14, RULE_declareVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			Match(DECLARE);
			State = 229;
			Match(IDENTIFIER);
			State = 230;
			type();
			State = 233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 231;
				Match(ASSIGN);
				State = 232;
				statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(QueryCatParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(QueryCatParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public SetVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetVariableContext setVariable() {
		SetVariableContext _localctx = new SetVariableContext(Context, State);
		EnterRule(_localctx, 16, RULE_setVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			Match(SET);
			State = 236;
			Match(IDENTIFIER);
			State = 237;
			Match(ASSIGN);
			State = 238;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementContext selectStatement() {
		SelectStatementContext _localctx = new SelectStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_selectStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			selectQueryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectOrderByClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(QueryCatParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(QueryCatParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectSortSpecificationContext[] selectSortSpecification() {
			return GetRuleContexts<SelectSortSpecificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSortSpecificationContext selectSortSpecification(int i) {
			return GetRuleContext<SelectSortSpecificationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectOrderByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectOrderByClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectOrderByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectOrderByClauseContext selectOrderByClause() {
		SelectOrderByClauseContext _localctx = new SelectOrderByClauseContext(Context, State);
		EnterRule(_localctx, 20, RULE_selectOrderByClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			Match(ORDER);
			State = 243;
			Match(BY);
			State = 244;
			selectSortSpecification();
			State = 249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 245;
				Match(COMMA);
				State = 246;
				selectSortSpecification();
				}
				}
				State = 251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectSortSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(QueryCatParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(QueryCatParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS() { return GetToken(QueryCatParser.NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(QueryCatParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(QueryCatParser.LAST, 0); }
		public SelectSortSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectSortSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSortSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectSortSpecificationContext selectSortSpecification() {
		SelectSortSpecificationContext _localctx = new SelectSortSpecificationContext(Context, State);
		EnterRule(_localctx, 22, RULE_selectSortSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			expression(0);
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 253;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 260;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				{
				State = 256;
				Match(NULLS);
				State = 257;
				Match(FIRST);
				}
				}
				break;
			case 2:
				{
				{
				State = 258;
				Match(NULLS);
				State = 259;
				Match(LAST);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectAliasContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(QueryCatParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		public SelectAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectAliasContext selectAlias() {
		SelectAliasContext _localctx = new SelectAliasContext(Context, State);
		EnterRule(_localctx, 24, RULE_selectAlias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 262;
				Match(AS);
				}
			}

			{
			State = 265;
			_localctx.name = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIER || _la==STRING_LITERAL) ) {
				_localctx.name = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectQueryExpressionContext : ParserRuleContext {
		public SelectQueryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectQueryExpression; } }
	 
		public SelectQueryExpressionContext() { }
		public virtual void CopyFrom(SelectQueryExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectQueryExpressionSimpleContext : SelectQueryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(QueryCatParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectListContext selectList() {
			return GetRuleContext<SelectListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectFromClauseContext selectFromClause() {
			return GetRuleContext<SelectFromClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectWithClauseContext selectWithClause() {
			return GetRuleContext<SelectWithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTopClauseContext selectTopClause() {
			return GetRuleContext<SelectTopClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectDistinctClauseContext selectDistinctClause() {
			return GetRuleContext<SelectDistinctClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTargetContext selectTarget() {
			return GetRuleContext<SelectTargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectWindowContext selectWindow() {
			return GetRuleContext<SelectWindowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectOrderByClauseContext selectOrderByClause() {
			return GetRuleContext<SelectOrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectLimitClauseContext selectLimitClause() {
			return GetRuleContext<SelectLimitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectOffsetClauseContext selectOffsetClause() {
			return GetRuleContext<SelectOffsetClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectFetchFirstClauseContext selectFetchFirstClause() {
			return GetRuleContext<SelectFetchFirstClauseContext>(0);
		}
		public SelectQueryExpressionSimpleContext(SelectQueryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQueryExpressionSimple(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectQueryExpressionFullContext : SelectQueryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionBodyContext selectQueryExpressionBody() {
			return GetRuleContext<SelectQueryExpressionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectWithClauseContext selectWithClause() {
			return GetRuleContext<SelectWithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectOrderByClauseContext selectOrderByClause() {
			return GetRuleContext<SelectOrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectLimitClauseContext selectLimitClause() {
			return GetRuleContext<SelectLimitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectOffsetClauseContext selectOffsetClause() {
			return GetRuleContext<SelectOffsetClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectFetchFirstClauseContext selectFetchFirstClause() {
			return GetRuleContext<SelectFetchFirstClauseContext>(0);
		}
		public SelectQueryExpressionFullContext(SelectQueryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQueryExpressionFull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectQueryExpressionContext selectQueryExpression() {
		SelectQueryExpressionContext _localctx = new SelectQueryExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_selectQueryExpression);
		int _la;
		try {
			State = 313;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				_localctx = new SelectQueryExpressionSimpleContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 267;
					selectWithClause();
					}
				}

				State = 270;
				Match(SELECT);
				State = 272;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TOP) {
					{
					State = 271;
					selectTopClause();
					}
				}

				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					State = 274;
					selectDistinctClause();
					}
				}

				State = 277;
				selectList();
				State = 279;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTO) {
					{
					State = 278;
					selectTarget();
					}
				}

				State = 281;
				selectFromClause();
				State = 283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WINDOW) {
					{
					State = 282;
					selectWindow();
					}
				}

				State = 286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 285;
					selectOrderByClause();
					}
				}

				State = 289;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 288;
					selectLimitClause();
					}
					break;
				}
				State = 292;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OFFSET) {
					{
					State = 291;
					selectOffsetClause();
					}
				}

				State = 295;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FETCH || _la==LIMIT) {
					{
					State = 294;
					selectFetchFirstClause();
					}
				}

				}
				break;
			case 2:
				_localctx = new SelectQueryExpressionFullContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 298;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 297;
					selectWithClause();
					}
					break;
				}
				State = 300;
				selectQueryExpressionBody(0);
				State = 302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 301;
					selectOrderByClause();
					}
				}

				State = 305;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 304;
					selectLimitClause();
					}
					break;
				}
				State = 308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OFFSET) {
					{
					State = 307;
					selectOffsetClause();
					}
				}

				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FETCH || _la==LIMIT) {
					{
					State = 310;
					selectFetchFirstClause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectQueryExpressionBodyContext : ParserRuleContext {
		public SelectQueryExpressionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectQueryExpressionBody; } }
	 
		public SelectQueryExpressionBodyContext() { }
		public virtual void CopyFrom(SelectQueryExpressionBodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectQueryExpressionBodyUnionExceptContext : SelectQueryExpressionBodyContext {
		public SelectQueryExpressionBodyContext left;
		public SelectQueryExpressionBodyContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionBodyContext[] selectQueryExpressionBody() {
			return GetRuleContexts<SelectQueryExpressionBodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionBodyContext selectQueryExpressionBody(int i) {
			return GetRuleContext<SelectQueryExpressionBodyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(QueryCatParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(QueryCatParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(QueryCatParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(QueryCatParser.ALL, 0); }
		public SelectQueryExpressionBodyUnionExceptContext(SelectQueryExpressionBodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQueryExpressionBodyUnionExcept(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectQueryExpressionBodyIntersectContext : SelectQueryExpressionBodyContext {
		public SelectQueryExpressionBodyContext left;
		public SelectQueryExpressionBodyContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT() { return GetToken(QueryCatParser.INTERSECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionBodyContext[] selectQueryExpressionBody() {
			return GetRuleContexts<SelectQueryExpressionBodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionBodyContext selectQueryExpressionBody(int i) {
			return GetRuleContext<SelectQueryExpressionBodyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(QueryCatParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(QueryCatParser.ALL, 0); }
		public SelectQueryExpressionBodyIntersectContext(SelectQueryExpressionBodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQueryExpressionBodyIntersect(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectQueryExpressionBodyPrimaryContext : SelectQueryExpressionBodyContext {
		public SelectQueryPrimaryContext left;
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryPrimaryContext selectQueryPrimary() {
			return GetRuleContext<SelectQueryPrimaryContext>(0);
		}
		public SelectQueryExpressionBodyPrimaryContext(SelectQueryExpressionBodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQueryExpressionBodyPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectQueryExpressionBodyContext selectQueryExpressionBody() {
		return selectQueryExpressionBody(0);
	}

	private SelectQueryExpressionBodyContext selectQueryExpressionBody(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SelectQueryExpressionBodyContext _localctx = new SelectQueryExpressionBodyContext(Context, _parentState);
		SelectQueryExpressionBodyContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_selectQueryExpressionBody, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SelectQueryExpressionBodyPrimaryContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 316;
			((SelectQueryExpressionBodyPrimaryContext)_localctx).left = selectQueryPrimary();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 332;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 330;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
					case 1:
						{
						_localctx = new SelectQueryExpressionBodyIntersectContext(new SelectQueryExpressionBodyContext(_parentctx, _parentState));
						((SelectQueryExpressionBodyIntersectContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_selectQueryExpressionBody);
						State = 318;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 319;
						Match(INTERSECT);
						State = 321;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==ALL || _la==DISTINCT) {
							{
							State = 320;
							_la = TokenStream.LA(1);
							if ( !(_la==ALL || _la==DISTINCT) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
						}

						State = 323;
						((SelectQueryExpressionBodyIntersectContext)_localctx).right = selectQueryExpressionBody(3);
						}
						break;
					case 2:
						{
						_localctx = new SelectQueryExpressionBodyUnionExceptContext(new SelectQueryExpressionBodyContext(_parentctx, _parentState));
						((SelectQueryExpressionBodyUnionExceptContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_selectQueryExpressionBody);
						State = 324;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 325;
						_la = TokenStream.LA(1);
						if ( !(_la==EXCEPT || _la==UNION) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 327;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==ALL || _la==DISTINCT) {
							{
							State = 326;
							_la = TokenStream.LA(1);
							if ( !(_la==ALL || _la==DISTINCT) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
						}

						State = 329;
						((SelectQueryExpressionBodyUnionExceptContext)_localctx).right = selectQueryExpressionBody(2);
						}
						break;
					}
					} 
				}
				State = 334;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SelectQueryPrimaryContext : ParserRuleContext {
		public SelectQueryPrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectQueryPrimary; } }
	 
		public SelectQueryPrimaryContext() { }
		public virtual void CopyFrom(SelectQueryPrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectQueryPrimaryNoParensContext : SelectQueryPrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectQuerySpecificationContext selectQuerySpecification() {
			return GetRuleContext<SelectQuerySpecificationContext>(0);
		}
		public SelectQueryPrimaryNoParensContext(SelectQueryPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQueryPrimaryNoParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectQueryPrimaryParensContext : SelectQueryPrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		public SelectQueryPrimaryParensContext(SelectQueryPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQueryPrimaryParens(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectQueryPrimaryContext selectQueryPrimary() {
		SelectQueryPrimaryContext _localctx = new SelectQueryPrimaryContext(Context, State);
		EnterRule(_localctx, 30, RULE_selectQueryPrimary);
		try {
			State = 340;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
			case WITH:
				_localctx = new SelectQueryPrimaryNoParensContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 335;
				selectQuerySpecification();
				}
				break;
			case LEFT_PAREN:
				_localctx = new SelectQueryPrimaryParensContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 336;
				Match(LEFT_PAREN);
				State = 337;
				selectQueryExpression();
				State = 338;
				Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectQuerySpecificationContext : ParserRuleContext {
		public SelectQuerySpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectQuerySpecification; } }
	 
		public SelectQuerySpecificationContext() { }
		public virtual void CopyFrom(SelectQuerySpecificationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectQuerySpecificationSingleContext : SelectQuerySpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(QueryCatParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectSublistContext[] selectSublist() {
			return GetRuleContexts<SelectSublistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSublistContext selectSublist(int i) {
			return GetRuleContext<SelectSublistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTargetContext selectTarget() {
			return GetRuleContext<SelectTargetContext>(0);
		}
		public SelectQuerySpecificationSingleContext(SelectQuerySpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQuerySpecificationSingle(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectQuerySpecificationFullContext : SelectQuerySpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(QueryCatParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectListContext selectList() {
			return GetRuleContext<SelectListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectFromClauseContext selectFromClause() {
			return GetRuleContext<SelectFromClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectWithClauseContext selectWithClause() {
			return GetRuleContext<SelectWithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTopClauseContext selectTopClause() {
			return GetRuleContext<SelectTopClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectDistinctClauseContext selectDistinctClause() {
			return GetRuleContext<SelectDistinctClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTargetContext selectTarget() {
			return GetRuleContext<SelectTargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectWindowContext selectWindow() {
			return GetRuleContext<SelectWindowContext>(0);
		}
		public SelectQuerySpecificationFullContext(SelectQuerySpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQuerySpecificationFull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectQuerySpecificationContext selectQuerySpecification() {
		SelectQuerySpecificationContext _localctx = new SelectQuerySpecificationContext(Context, State);
		EnterRule(_localctx, 32, RULE_selectQuerySpecification);
		int _la;
		try {
			int _alt;
			State = 372;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				_localctx = new SelectQuerySpecificationFullContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 342;
					selectWithClause();
					}
				}

				State = 345;
				Match(SELECT);
				State = 347;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TOP) {
					{
					State = 346;
					selectTopClause();
					}
				}

				State = 350;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					State = 349;
					selectDistinctClause();
					}
				}

				State = 352;
				selectList();
				State = 354;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTO) {
					{
					State = 353;
					selectTarget();
					}
				}

				State = 356;
				selectFromClause();
				State = 358;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
				case 1:
					{
					State = 357;
					selectWindow();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new SelectQuerySpecificationSingleContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 360;
				Match(SELECT);
				State = 361;
				selectSublist();
				State = 366;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 362;
						Match(COMMA);
						State = 363;
						selectSublist();
						}
						} 
					}
					State = 368;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
				}
				State = 370;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
				case 1:
					{
					State = 369;
					selectTarget();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectSublistContext[] selectSublist() {
			return GetRuleContexts<SelectSublistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSublistContext selectSublist(int i) {
			return GetRuleContext<SelectSublistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectListContext selectList() {
		SelectListContext _localctx = new SelectListContext(Context, State);
		EnterRule(_localctx, 34, RULE_selectList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			selectSublist();
			State = 379;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 375;
				Match(COMMA);
				State = 376;
				selectSublist();
				}
				}
				State = 381;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectDistinctClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(QueryCatParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(QueryCatParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectDistinctOnClauseContext selectDistinctOnClause() {
			return GetRuleContext<SelectDistinctOnClauseContext>(0);
		}
		public SelectDistinctClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectDistinctClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectDistinctClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectDistinctClauseContext selectDistinctClause() {
		SelectDistinctClauseContext _localctx = new SelectDistinctClauseContext(Context, State);
		EnterRule(_localctx, 36, RULE_selectDistinctClause);
		try {
			State = 385;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 382;
				Match(ALL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 383;
				Match(DISTINCT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 384;
				selectDistinctOnClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectDistinctOnClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(QueryCatParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(QueryCatParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext[] simpleExpression() {
			return GetRuleContexts<SimpleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression(int i) {
			return GetRuleContext<SimpleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectDistinctOnClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectDistinctOnClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectDistinctOnClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectDistinctOnClauseContext selectDistinctOnClause() {
		SelectDistinctOnClauseContext _localctx = new SelectDistinctOnClauseContext(Context, State);
		EnterRule(_localctx, 38, RULE_selectDistinctOnClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			Match(DISTINCT);
			State = 388;
			Match(ON);
			State = 389;
			Match(LEFT_PAREN);
			State = 390;
			simpleExpression(0);
			State = 395;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 391;
				Match(COMMA);
				State = 392;
				simpleExpression(0);
				}
				}
				State = 397;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 398;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectWithClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(QueryCatParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectWithElementContext[] selectWithElement() {
			return GetRuleContexts<SelectWithElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectWithElementContext selectWithElement(int i) {
			return GetRuleContext<SelectWithElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(QueryCatParser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectWithClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectWithClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectWithClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectWithClauseContext selectWithClause() {
		SelectWithClauseContext _localctx = new SelectWithClauseContext(Context, State);
		EnterRule(_localctx, 40, RULE_selectWithClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			Match(WITH);
			State = 402;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RECURSIVE) {
				{
				State = 401;
				Match(RECURSIVE);
				}
			}

			State = 404;
			selectWithElement();
			State = 409;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 405;
				Match(COMMA);
				State = 406;
				selectWithElement();
				}
				}
				State = 411;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectWithElementContext : ParserRuleContext {
		public IToken name;
		public SelectQueryExpressionContext query;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(QueryCatParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LEFT_PAREN() { return GetTokens(QueryCatParser.LEFT_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN(int i) {
			return GetToken(QueryCatParser.LEFT_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RIGHT_PAREN() { return GetTokens(QueryCatParser.RIGHT_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN(int i) {
			return GetToken(QueryCatParser.RIGHT_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectWithColumnListContext selectWithColumnList() {
			return GetRuleContext<SelectWithColumnListContext>(0);
		}
		public SelectWithElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectWithElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectWithElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectWithElementContext selectWithElement() {
		SelectWithElementContext _localctx = new SelectWithElementContext(Context, State);
		EnterRule(_localctx, 42, RULE_selectWithElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			_localctx.name = Match(IDENTIFIER);
			State = 417;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 413;
				Match(LEFT_PAREN);
				State = 414;
				selectWithColumnList();
				State = 415;
				Match(RIGHT_PAREN);
				}
			}

			State = 419;
			Match(AS);
			State = 420;
			Match(LEFT_PAREN);
			State = 421;
			_localctx.query = selectQueryExpression();
			State = 422;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectWithColumnListContext : ParserRuleContext {
		public IdentifierChainContext name;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierChainContext[] identifierChain() {
			return GetRuleContexts<IdentifierChainContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierChainContext identifierChain(int i) {
			return GetRuleContext<IdentifierChainContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectWithColumnListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectWithColumnList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectWithColumnList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectWithColumnListContext selectWithColumnList() {
		SelectWithColumnListContext _localctx = new SelectWithColumnListContext(Context, State);
		EnterRule(_localctx, 44, RULE_selectWithColumnList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424;
			_localctx.name = identifierChain();
			State = 429;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 425;
				Match(COMMA);
				State = 426;
				_localctx.name = identifierChain();
				}
				}
				State = 431;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectSublistContext : ParserRuleContext {
		public SelectSublistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectSublist; } }
	 
		public SelectSublistContext() { }
		public virtual void CopyFrom(SelectSublistContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectSublistExpressionContext : SelectSublistContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public SelectSublistExpressionContext(SelectSublistContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSublistExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectSublistWindowContext : SelectSublistContext {
		public IToken windowName;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(QueryCatParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectWindowSpecificationContext selectWindowSpecification() {
			return GetRuleContext<SelectWindowSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public SelectSublistWindowContext(SelectSublistContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSublistWindow(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectSublistAllContext : SelectSublistContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(QueryCatParser.STAR, 0); }
		public SelectSublistAllContext(SelectSublistContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSublistAll(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectSublistContext selectSublist() {
		SelectSublistContext _localctx = new SelectSublistContext(Context, State);
		EnterRule(_localctx, 46, RULE_selectSublist);
		try {
			State = 446;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				_localctx = new SelectSublistAllContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 432;
				Match(STAR);
				}
				break;
			case 2:
				_localctx = new SelectSublistWindowContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 433;
				functionCall();
				State = 434;
				Match(OVER);
				State = 437;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IDENTIFIER:
					{
					State = 435;
					((SelectSublistWindowContext)_localctx).windowName = Match(IDENTIFIER);
					}
					break;
				case LEFT_PAREN:
					{
					State = 436;
					selectWindowSpecification();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 440;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
				case 1:
					{
					State = 439;
					selectAlias();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new SelectSublistExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 442;
				expression(0);
				State = 444;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
				case 1:
					{
					State = 443;
					selectAlias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTargetContext : ParserRuleContext {
		public IToken uri;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(QueryCatParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		public SelectTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTarget; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTarget(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTargetContext selectTarget() {
		SelectTargetContext _localctx = new SelectTargetContext(Context, State);
		EnterRule(_localctx, 48, RULE_selectTarget);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448;
			Match(INTO);
			State = 451;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 449;
				functionCall();
				}
				break;
			case STRING_LITERAL:
				{
				State = 450;
				_localctx.uri = Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectFromClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableReferenceListContext selectTableReferenceList() {
			return GetRuleContext<SelectTableReferenceListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSearchConditionContext selectSearchCondition() {
			return GetRuleContext<SelectSearchConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectGroupByContext selectGroupBy() {
			return GetRuleContext<SelectGroupByContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectHavingContext selectHaving() {
			return GetRuleContext<SelectHavingContext>(0);
		}
		public SelectFromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectFromClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectFromClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectFromClauseContext selectFromClause() {
		SelectFromClauseContext _localctx = new SelectFromClauseContext(Context, State);
		EnterRule(_localctx, 50, RULE_selectFromClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453;
			selectTableReferenceList();
			State = 455;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				{
				State = 454;
				selectSearchCondition();
				}
				break;
			}
			State = 458;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				State = 457;
				selectGroupBy();
				}
				break;
			}
			State = 461;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 460;
				selectHaving();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTableReferenceListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(QueryCatParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableReferenceContext[] selectTableReference() {
			return GetRuleContexts<SelectTableReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableReferenceContext selectTableReference(int i) {
			return GetRuleContext<SelectTableReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectTableReferenceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTableReferenceList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTableReferenceList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTableReferenceListContext selectTableReferenceList() {
		SelectTableReferenceListContext _localctx = new SelectTableReferenceListContext(Context, State);
		EnterRule(_localctx, 52, RULE_selectTableReferenceList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			Match(FROM);
			State = 464;
			selectTableReference();
			State = 469;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 465;
					Match(COMMA);
					State = 466;
					selectTableReference();
					}
					} 
				}
				State = 471;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTableReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectTablePrimaryContext selectTablePrimary() {
			return GetRuleContext<SelectTablePrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableJoinedContext[] selectTableJoined() {
			return GetRuleContexts<SelectTableJoinedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableJoinedContext selectTableJoined(int i) {
			return GetRuleContext<SelectTableJoinedContext>(i);
		}
		public SelectTableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTableReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTableReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTableReferenceContext selectTableReference() {
		SelectTableReferenceContext _localctx = new SelectTableReferenceContext(Context, State);
		EnterRule(_localctx, 54, RULE_selectTableReference);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 472;
			selectTablePrimary();
			State = 476;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 473;
					selectTableJoined();
					}
					} 
				}
				State = 478;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTableRowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext[] simpleExpression() {
			return GetRuleContexts<SimpleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression(int i) {
			return GetRuleContext<SimpleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectTableRowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTableRow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTableRow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTableRowContext selectTableRow() {
		SelectTableRowContext _localctx = new SelectTableRowContext(Context, State);
		EnterRule(_localctx, 56, RULE_selectTableRow);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479;
			Match(LEFT_PAREN);
			State = 480;
			simpleExpression(0);
			State = 485;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 481;
				Match(COMMA);
				State = 482;
				simpleExpression(0);
				}
				}
				State = 487;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 488;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(QueryCatParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableRowContext[] selectTableRow() {
			return GetRuleContexts<SelectTableRowContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableRowContext selectTableRow(int i) {
			return GetRuleContext<SelectTableRowContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTableContext selectTable() {
		SelectTableContext _localctx = new SelectTableContext(Context, State);
		EnterRule(_localctx, 58, RULE_selectTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490;
			Match(VALUES);
			State = 491;
			selectTableRow();
			State = 496;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 492;
				Match(COMMA);
				State = 493;
				selectTableRow();
				}
				}
				State = 498;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTablePrimaryContext : ParserRuleContext {
		public SelectTablePrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTablePrimary; } }
	 
		public SelectTablePrimaryContext() { }
		public virtual void CopyFrom(SelectTablePrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectTablePrimaryNoFormatContext : SelectTablePrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public SelectTablePrimaryNoFormatContext(SelectTablePrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTablePrimaryNoFormat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectTablePrimarySubqueryContext : SelectTablePrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public SelectTablePrimarySubqueryContext(SelectTablePrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTablePrimarySubquery(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectTablePrimaryWithFormatContext : SelectTablePrimaryContext {
		public IToken uri;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(QueryCatParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public SelectTablePrimaryWithFormatContext(SelectTablePrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTablePrimaryWithFormat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectTablePrimaryTableContext : SelectTablePrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableContext selectTable() {
			return GetRuleContext<SelectTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public SelectTablePrimaryTableContext(SelectTablePrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTablePrimaryTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectTablePrimaryStdinContext : SelectTablePrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(QueryCatParser.MINUS, 0); }
		public SelectTablePrimaryStdinContext(SelectTablePrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTablePrimaryStdin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectTablePrimaryIdentifierContext : SelectTablePrimaryContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public SelectTablePrimaryIdentifierContext(SelectTablePrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTablePrimaryIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTablePrimaryContext selectTablePrimary() {
		SelectTablePrimaryContext _localctx = new SelectTablePrimaryContext(Context, State);
		EnterRule(_localctx, 60, RULE_selectTablePrimary);
		try {
			State = 528;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				_localctx = new SelectTablePrimaryNoFormatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 499;
				functionCall();
				State = 501;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
				case 1:
					{
					State = 500;
					selectAlias();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new SelectTablePrimaryStdinContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 503;
				Match(MINUS);
				}
				break;
			case 3:
				_localctx = new SelectTablePrimaryWithFormatContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 504;
				((SelectTablePrimaryWithFormatContext)_localctx).uri = Match(STRING_LITERAL);
				State = 507;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
				case 1:
					{
					State = 505;
					Match(FORMAT);
					State = 506;
					functionCall();
					}
					break;
				}
				State = 510;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
				case 1:
					{
					State = 509;
					selectAlias();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SelectTablePrimarySubqueryContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 512;
				Match(LEFT_PAREN);
				State = 513;
				selectQueryExpression();
				State = 514;
				Match(RIGHT_PAREN);
				State = 516;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
				case 1:
					{
					State = 515;
					selectAlias();
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new SelectTablePrimaryIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 518;
				((SelectTablePrimaryIdentifierContext)_localctx).name = Match(IDENTIFIER);
				State = 520;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
				case 1:
					{
					State = 519;
					selectAlias();
					}
					break;
				}
				}
				break;
			case 6:
				_localctx = new SelectTablePrimaryTableContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 522;
				Match(LEFT_PAREN);
				State = 523;
				selectTable();
				State = 524;
				Match(RIGHT_PAREN);
				State = 526;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
				case 1:
					{
					State = 525;
					selectAlias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTableJoinedContext : ParserRuleContext {
		public SelectTableJoinedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTableJoined; } }
	 
		public SelectTableJoinedContext() { }
		public virtual void CopyFrom(SelectTableJoinedContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectTableJoinedUsingContext : SelectTableJoinedContext {
		public SelectTablePrimaryContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(QueryCatParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(QueryCatParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(QueryCatParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(QueryCatParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectTablePrimaryContext selectTablePrimary() {
			return GetRuleContext<SelectTablePrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectJoinTypeContext selectJoinType() {
			return GetRuleContext<SelectJoinTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectTableJoinedUsingContext(SelectTableJoinedContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTableJoinedUsing(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectTableJoinedOnContext : SelectTableJoinedContext {
		public SelectTablePrimaryContext right;
		public ExpressionContext condition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(QueryCatParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(QueryCatParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectTablePrimaryContext selectTablePrimary() {
			return GetRuleContext<SelectTablePrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectJoinTypeContext selectJoinType() {
			return GetRuleContext<SelectJoinTypeContext>(0);
		}
		public SelectTableJoinedOnContext(SelectTableJoinedContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTableJoinedOn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTableJoinedContext selectTableJoined() {
		SelectTableJoinedContext _localctx = new SelectTableJoinedContext(Context, State);
		EnterRule(_localctx, 62, RULE_selectTableJoined);
		int _la;
		try {
			State = 555;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				_localctx = new SelectTableJoinedOnContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 531;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & 524553L) != 0) {
					{
					State = 530;
					selectJoinType();
					}
				}

				State = 533;
				Match(JOIN);
				State = 534;
				((SelectTableJoinedOnContext)_localctx).right = selectTablePrimary();
				State = 535;
				Match(ON);
				State = 536;
				((SelectTableJoinedOnContext)_localctx).condition = expression(0);
				}
				break;
			case 2:
				_localctx = new SelectTableJoinedUsingContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 539;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & 524553L) != 0) {
					{
					State = 538;
					selectJoinType();
					}
				}

				State = 541;
				Match(JOIN);
				State = 542;
				((SelectTableJoinedUsingContext)_localctx).right = selectTablePrimary();
				State = 543;
				Match(USING);
				State = 544;
				Match(LEFT_PAREN);
				State = 545;
				Match(IDENTIFIER);
				State = 550;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 546;
					Match(COMMA);
					State = 547;
					Match(IDENTIFIER);
					}
					}
					State = 552;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 553;
				Match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectJoinTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(QueryCatParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(QueryCatParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(QueryCatParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(QueryCatParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(QueryCatParser.OUTER, 0); }
		public SelectJoinTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectJoinType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectJoinType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectJoinTypeContext selectJoinType() {
		SelectJoinTypeContext _localctx = new SelectJoinTypeContext(Context, State);
		EnterRule(_localctx, 64, RULE_selectJoinType);
		int _la;
		try {
			State = 562;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INNER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 557;
				Match(INNER);
				}
				break;
			case FULL:
			case LEFT:
			case RIGHT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 558;
				_la = TokenStream.LA(1);
				if ( !((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & 524545L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 560;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 559;
					Match(OUTER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectGroupByContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(QueryCatParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(QueryCatParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectGroupByContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectGroupBy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectGroupBy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectGroupByContext selectGroupBy() {
		SelectGroupByContext _localctx = new SelectGroupByContext(Context, State);
		EnterRule(_localctx, 66, RULE_selectGroupBy);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 564;
			Match(GROUP);
			State = 565;
			Match(BY);
			State = 566;
			expression(0);
			State = 571;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 567;
					Match(COMMA);
					State = 568;
					expression(0);
					}
					} 
				}
				State = 573;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectHavingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(QueryCatParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectHavingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectHaving; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectHaving(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectHavingContext selectHaving() {
		SelectHavingContext _localctx = new SelectHavingContext(Context, State);
		EnterRule(_localctx, 68, RULE_selectHaving);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 574;
			Match(HAVING);
			State = 575;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectSearchConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(QueryCatParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectSearchConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectSearchCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSearchCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectSearchConditionContext selectSearchCondition() {
		SelectSearchConditionContext _localctx = new SelectSearchConditionContext(Context, State);
		EnterRule(_localctx, 70, RULE_selectSearchCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 577;
			Match(WHERE);
			State = 578;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectWindowSpecificationContext : ParserRuleContext {
		public IToken existingWindowName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectWindowPartitionClauseContext selectWindowPartitionClause() {
			return GetRuleContext<SelectWindowPartitionClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectWindowOrderClauseContext selectWindowOrderClause() {
			return GetRuleContext<SelectWindowOrderClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		public SelectWindowSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectWindowSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectWindowSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectWindowSpecificationContext selectWindowSpecification() {
		SelectWindowSpecificationContext _localctx = new SelectWindowSpecificationContext(Context, State);
		EnterRule(_localctx, 72, RULE_selectWindowSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580;
			Match(LEFT_PAREN);
			State = 582;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 581;
				_localctx.existingWindowName = Match(IDENTIFIER);
				}
			}

			State = 585;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 584;
				selectWindowPartitionClause();
				}
			}

			State = 588;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 587;
				selectWindowOrderClause();
				}
			}

			State = 590;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectWindowPartitionClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(QueryCatParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(QueryCatParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectWindowPartitionClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectWindowPartitionClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectWindowPartitionClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectWindowPartitionClauseContext selectWindowPartitionClause() {
		SelectWindowPartitionClauseContext _localctx = new SelectWindowPartitionClauseContext(Context, State);
		EnterRule(_localctx, 74, RULE_selectWindowPartitionClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 592;
			Match(PARTITION);
			State = 593;
			Match(BY);
			State = 594;
			expression(0);
			State = 599;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 595;
				Match(COMMA);
				State = 596;
				expression(0);
				}
				}
				State = 601;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectWindowOrderClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(QueryCatParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(QueryCatParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectSortSpecificationContext[] selectSortSpecification() {
			return GetRuleContexts<SelectSortSpecificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSortSpecificationContext selectSortSpecification(int i) {
			return GetRuleContext<SelectSortSpecificationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectWindowOrderClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectWindowOrderClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectWindowOrderClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectWindowOrderClauseContext selectWindowOrderClause() {
		SelectWindowOrderClauseContext _localctx = new SelectWindowOrderClauseContext(Context, State);
		EnterRule(_localctx, 76, RULE_selectWindowOrderClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 602;
			Match(ORDER);
			State = 603;
			Match(BY);
			State = 604;
			selectSortSpecification();
			State = 609;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 605;
				Match(COMMA);
				State = 606;
				selectSortSpecification();
				}
				}
				State = 611;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectWindowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(QueryCatParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectWindowDefinitionListContext[] selectWindowDefinitionList() {
			return GetRuleContexts<SelectWindowDefinitionListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectWindowDefinitionListContext selectWindowDefinitionList(int i) {
			return GetRuleContext<SelectWindowDefinitionListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectWindowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectWindow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectWindow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectWindowContext selectWindow() {
		SelectWindowContext _localctx = new SelectWindowContext(Context, State);
		EnterRule(_localctx, 78, RULE_selectWindow);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 612;
			Match(WINDOW);
			State = 613;
			selectWindowDefinitionList();
			State = 618;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 614;
					Match(COMMA);
					State = 615;
					selectWindowDefinitionList();
					}
					} 
				}
				State = 620;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectWindowDefinitionListContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(QueryCatParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectWindowSpecificationContext selectWindowSpecification() {
			return GetRuleContext<SelectWindowSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		public SelectWindowDefinitionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectWindowDefinitionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectWindowDefinitionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectWindowDefinitionListContext selectWindowDefinitionList() {
		SelectWindowDefinitionListContext _localctx = new SelectWindowDefinitionListContext(Context, State);
		EnterRule(_localctx, 80, RULE_selectWindowDefinitionList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 621;
			_localctx.name = Match(IDENTIFIER);
			State = 622;
			Match(AS);
			State = 623;
			selectWindowSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectOffsetClauseContext : ParserRuleContext {
		public ExpressionContext offset;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(QueryCatParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(QueryCatParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(QueryCatParser.ROWS, 0); }
		public SelectOffsetClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectOffsetClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectOffsetClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectOffsetClauseContext selectOffsetClause() {
		SelectOffsetClauseContext _localctx = new SelectOffsetClauseContext(Context, State);
		EnterRule(_localctx, 82, RULE_selectOffsetClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 625;
			Match(OFFSET);
			{
			State = 626;
			_localctx.offset = expression(0);
			}
			State = 628;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ROW || _la==ROWS) {
				{
				State = 627;
				_la = TokenStream.LA(1);
				if ( !(_la==ROW || _la==ROWS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectFetchFirstClauseContext : ParserRuleContext {
		public ExpressionContext limit;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(QueryCatParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(QueryCatParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(QueryCatParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(QueryCatParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(QueryCatParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(QueryCatParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(QueryCatParser.ONLY, 0); }
		public SelectFetchFirstClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectFetchFirstClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectFetchFirstClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectFetchFirstClauseContext selectFetchFirstClause() {
		SelectFetchFirstClauseContext _localctx = new SelectFetchFirstClauseContext(Context, State);
		EnterRule(_localctx, 84, RULE_selectFetchFirstClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 630;
			_la = TokenStream.LA(1);
			if ( !(_la==FETCH || _la==LIMIT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 632;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FIRST || _la==NEXT) {
				{
				State = 631;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST || _la==NEXT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			{
			State = 634;
			_localctx.limit = expression(0);
			}
			State = 636;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ROW || _la==ROWS) {
				{
				State = 635;
				_la = TokenStream.LA(1);
				if ( !(_la==ROW || _la==ROWS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 639;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ONLY) {
				{
				State = 638;
				_la = TokenStream.LA(1);
				if ( !(_la==ONLY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTopClauseContext : ParserRuleContext {
		public IToken limit;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOP() { return GetToken(QueryCatParser.TOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(QueryCatParser.INTEGER_LITERAL, 0); }
		public SelectTopClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTopClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTopClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTopClauseContext selectTopClause() {
		SelectTopClauseContext _localctx = new SelectTopClauseContext(Context, State);
		EnterRule(_localctx, 86, RULE_selectTopClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 641;
			Match(TOP);
			State = 642;
			_localctx.limit = Match(INTEGER_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectLimitClauseContext : ParserRuleContext {
		public ExpressionContext limit;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(QueryCatParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectLimitClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectLimitClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectLimitClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectLimitClauseContext selectLimitClause() {
		SelectLimitClauseContext _localctx = new SelectLimitClauseContext(Context, State);
		EnterRule(_localctx, 88, RULE_selectLimitClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 644;
			Match(LIMIT);
			State = 645;
			_localctx.limit = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(QueryCatParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(QueryCatParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdateSetContext[] updateSet() {
			return GetRuleContexts<UpdateSetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateSetContext updateSet(int i) {
			return GetRuleContext<UpdateSetContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSearchConditionContext selectSearchCondition() {
			return GetRuleContext<SelectSearchConditionContext>(0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateStatementContext updateStatement() {
		UpdateStatementContext _localctx = new UpdateStatementContext(Context, State);
		EnterRule(_localctx, 90, RULE_updateStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 647;
			Match(UPDATE);
			State = 648;
			functionCall();
			State = 650;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS || _la==IDENTIFIER || _la==STRING_LITERAL) {
				{
				State = 649;
				selectAlias();
				}
			}

			State = 652;
			Match(SET);
			State = 653;
			updateSet();
			State = 658;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 654;
				Match(COMMA);
				State = 655;
				updateSet();
				}
				}
				State = 660;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 662;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 661;
				selectSearchCondition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(QueryCatParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UpdateSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateSetContext updateSet() {
		UpdateSetContext _localctx = new UpdateSetContext(Context, State);
		EnterRule(_localctx, 92, RULE_updateSet);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 664;
			Match(IDENTIFIER);
			State = 665;
			Match(EQUALS);
			State = 666;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(QueryCatParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(QueryCatParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InsertToSourceContext insertToSource() {
			return GetRuleContext<InsertToSourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertFromSourceContext insertFromSource() {
			return GetRuleContext<InsertFromSourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertColumnsListContext insertColumnsList() {
			return GetRuleContext<InsertColumnsListContext>(0);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertStatementContext insertStatement() {
		InsertStatementContext _localctx = new InsertStatementContext(Context, State);
		EnterRule(_localctx, 94, RULE_insertStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 668;
			Match(INSERT);
			State = 669;
			Match(INTO);
			State = 670;
			insertToSource();
			State = 672;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				{
				State = 671;
				insertColumnsList();
				}
				break;
			}
			State = 674;
			insertFromSource();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertToSourceContext : ParserRuleContext {
		public InsertToSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertToSource; } }
	 
		public InsertToSourceContext() { }
		public virtual void CopyFrom(InsertToSourceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InsertWithFormatContext : InsertToSourceContext {
		public IToken uri;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(QueryCatParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public InsertWithFormatContext(InsertToSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertWithFormat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InsertNoFormatContext : InsertToSourceContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public InsertNoFormatContext(InsertToSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertNoFormat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertToSourceContext insertToSource() {
		InsertToSourceContext _localctx = new InsertToSourceContext(Context, State);
		EnterRule(_localctx, 96, RULE_insertToSource);
		int _la;
		try {
			State = 682;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				_localctx = new InsertNoFormatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 676;
				functionCall();
				}
				break;
			case STRING_LITERAL:
				_localctx = new InsertWithFormatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 677;
				((InsertWithFormatContext)_localctx).uri = Match(STRING_LITERAL);
				State = 680;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FORMAT) {
					{
					State = 678;
					Match(FORMAT);
					State = 679;
					functionCall();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertColumnsListContext : ParserRuleContext {
		public IdentifierChainContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierChainContext[] identifierChain() {
			return GetRuleContexts<IdentifierChainContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierChainContext identifierChain(int i) {
			return GetRuleContext<IdentifierChainContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public InsertColumnsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertColumnsList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertColumnsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertColumnsListContext insertColumnsList() {
		InsertColumnsListContext _localctx = new InsertColumnsListContext(Context, State);
		EnterRule(_localctx, 98, RULE_insertColumnsList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 684;
			Match(LEFT_PAREN);
			State = 685;
			_localctx.name = identifierChain();
			State = 690;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 686;
				Match(COMMA);
				State = 687;
				_localctx.name = identifierChain();
				}
				}
				State = 692;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 693;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertFromSourceContext : ParserRuleContext {
		public InsertFromSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertFromSource; } }
	 
		public InsertFromSourceContext() { }
		public virtual void CopyFrom(InsertFromSourceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InsertSourceQueryContext : InsertFromSourceContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		public InsertSourceQueryContext(InsertFromSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertSourceQuery(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InsertSourceTableContext : InsertFromSourceContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableContext selectTable() {
			return GetRuleContext<SelectTableContext>(0);
		}
		public InsertSourceTableContext(InsertFromSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertSourceTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertFromSourceContext insertFromSource() {
		InsertFromSourceContext _localctx = new InsertFromSourceContext(Context, State);
		EnterRule(_localctx, 100, RULE_insertFromSource);
		try {
			State = 697;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEFT_PAREN:
			case SELECT:
			case WITH:
				_localctx = new InsertSourceQueryContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 695;
				selectQueryExpression();
				}
				break;
			case VALUES:
				_localctx = new InsertSourceTableContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 696;
				selectTable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EchoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ECHO() { return GetToken(QueryCatParser.ECHO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EchoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_echoStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEchoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EchoStatementContext echoStatement() {
		EchoStatementContext _localctx = new EchoStatementContext(Context, State);
		EnterRule(_localctx, 102, RULE_echoStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 699;
			Match(ECHO);
			State = 700;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierChainContext : ParserRuleContext {
		public IdentifierChainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierChain; } }
	 
		public IdentifierChainContext() { }
		public virtual void CopyFrom(IdentifierChainContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierChainSimpleContext : IdentifierChainContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		public IdentifierChainSimpleContext(IdentifierChainContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierChainSimple(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierChainFullContext : IdentifierChainContext {
		public IToken source;
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(QueryCatParser.PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(QueryCatParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(QueryCatParser.IDENTIFIER, i);
		}
		public IdentifierChainFullContext(IdentifierChainContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierChainFull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierChainContext identifierChain() {
		IdentifierChainContext _localctx = new IdentifierChainContext(Context, State);
		EnterRule(_localctx, 104, RULE_identifierChain);
		try {
			State = 708;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				_localctx = new IdentifierChainFullContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 702;
				((IdentifierChainFullContext)_localctx).source = Match(IDENTIFIER);
				State = 703;
				Match(PERIOD);
				State = 705;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
				case 1:
					{
					State = 704;
					((IdentifierChainFullContext)_localctx).name = Match(IDENTIFIER);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new IdentifierChainSimpleContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 707;
				((IdentifierChainSimpleContext)_localctx).name = Match(IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 106, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 710;
			Match(LEFT_PAREN);
			State = 711;
			expression(0);
			State = 716;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 712;
				Match(COMMA);
				State = 713;
				expression(0);
				}
				}
				State = 718;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 719;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalLiteralContext : ParserRuleContext {
		public IToken interval;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(QueryCatParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		public IntervalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalLiteralContext intervalLiteral() {
		IntervalLiteralContext _localctx = new IntervalLiteralContext(Context, State);
		EnterRule(_localctx, 108, RULE_intervalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 721;
			Match(INTERVAL);
			State = 722;
			_localctx.interval = Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastOperandContext : ParserRuleContext {
		public SimpleExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(QueryCatParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(QueryCatParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public CastOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castOperand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastOperandContext castOperand() {
		CastOperandContext _localctx = new CastOperandContext(Context, State);
		EnterRule(_localctx, 110, RULE_castOperand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 724;
			Match(CAST);
			State = 725;
			Match(LEFT_PAREN);
			State = 726;
			_localctx.value = simpleExpression(0);
			State = 727;
			Match(AS);
			State = 728;
			type();
			State = 729;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtTimeZoneContext : ParserRuleContext {
		public SimpleExpressionContext tz;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(QueryCatParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(QueryCatParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(QueryCatParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(QueryCatParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public AtTimeZoneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atTimeZone; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtTimeZone(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtTimeZoneContext atTimeZone() {
		AtTimeZoneContext _localctx = new AtTimeZoneContext(Context, State);
		EnterRule(_localctx, 112, RULE_atTimeZone);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 731;
			Match(AT);
			State = 736;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LOCAL:
				{
				State = 732;
				Match(LOCAL);
				}
				break;
			case TIME:
				{
				State = 733;
				Match(TIME);
				State = 734;
				Match(ZONE);
				State = 735;
				_localctx.tz = simpleExpression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseExpressionContext : ParserRuleContext {
		public SimpleExpressionContext arg;
		public ExpressionContext @default;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(QueryCatParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(QueryCatParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseWhenContext[] caseWhen() {
			return GetRuleContexts<CaseWhenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseWhenContext caseWhen(int i) {
			return GetRuleContext<CaseWhenContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(QueryCatParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CaseExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseExpressionContext caseExpression() {
		CaseExpressionContext _localctx = new CaseExpressionContext(Context, State);
		EnterRule(_localctx, 114, RULE_caseExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 738;
			Match(CASE);
			State = 740;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 2324003642769768450L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 31457393L) != 0 || (((_la - 138)) & ~0x3f) == 0 && ((1L << (_la - 138)) & 63L) != 0) {
				{
				State = 739;
				_localctx.arg = simpleExpression(0);
				}
			}

			State = 745;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WHEN) {
				{
				{
				State = 742;
				caseWhen();
				}
				}
				State = 747;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 750;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 748;
				Match(ELSE);
				State = 749;
				_localctx.@default = expression(0);
				}
			}

			State = 752;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseWhenContext : ParserRuleContext {
		public ExpressionContext condition;
		public ExpressionContext result;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(QueryCatParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(QueryCatParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CaseWhenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseWhen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseWhen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseWhenContext caseWhen() {
		CaseWhenContext _localctx = new CaseWhenContext(Context, State);
		EnterRule(_localctx, 116, RULE_caseWhen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 754;
			Match(WHEN);
			State = 755;
			_localctx.condition = expression(0);
			State = 756;
			Match(THEN);
			State = 757;
			_localctx.result = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandardFunctionContext : ParserRuleContext {
		public StandardFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standardFunction; } }
	 
		public StandardFunctionContext() { }
		public virtual void CopyFrom(StandardFunctionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StandardFunctionCurrentDateContext : StandardFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE() { return GetToken(QueryCatParser.CURRENT_DATE, 0); }
		public StandardFunctionCurrentDateContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardFunctionCurrentDate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StandardFunctionExtractContext : StandardFunctionContext {
		public DateTimeFieldContext extractField;
		public SimpleExpressionContext source;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACT() { return GetToken(QueryCatParser.EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(QueryCatParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DateTimeFieldContext dateTimeField() {
			return GetRuleContext<DateTimeFieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public StandardFunctionExtractContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardFunctionExtract(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StandardFunctionCurrentTimestampContext : StandardFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(QueryCatParser.CURRENT_TIMESTAMP, 0); }
		public StandardFunctionCurrentTimestampContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardFunctionCurrentTimestamp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StandardFunctionTrimContext : StandardFunctionContext {
		public IToken spec;
		public IToken characters;
		public SimpleExpressionContext target;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIM() { return GetToken(QueryCatParser.TRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(QueryCatParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEADING() { return GetToken(QueryCatParser.LEADING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAILING() { return GetToken(QueryCatParser.TRAILING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOTH() { return GetToken(QueryCatParser.BOTH, 0); }
		public StandardFunctionTrimContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardFunctionTrim(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StandardFunctionPositionContext : StandardFunctionContext {
		public IToken substring;
		public SimpleExpressionContext @string;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(QueryCatParser.POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(QueryCatParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public StandardFunctionPositionContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardFunctionPosition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StandardFunctionCoalesceContext : StandardFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(QueryCatParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public StandardFunctionCoalesceContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardFunctionCoalesce(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StandardFunctionContext standardFunction() {
		StandardFunctionContext _localctx = new StandardFunctionContext(Context, State);
		EnterRule(_localctx, 118, RULE_standardFunction);
		int _la;
		try {
			State = 801;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT_DATE:
				_localctx = new StandardFunctionCurrentDateContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 759;
				Match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIMESTAMP:
				_localctx = new StandardFunctionCurrentTimestampContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 760;
				Match(CURRENT_TIMESTAMP);
				}
				break;
			case TRIM:
				_localctx = new StandardFunctionTrimContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 761;
				Match(TRIM);
				State = 762;
				Match(LEFT_PAREN);
				State = 764;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7L) != 0) {
					{
					State = 763;
					((StandardFunctionTrimContext)_localctx).spec = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7L) != 0) ) {
						((StandardFunctionTrimContext)_localctx).spec = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 767;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
				case 1:
					{
					State = 766;
					((StandardFunctionTrimContext)_localctx).characters = Match(STRING_LITERAL);
					}
					break;
				}
				State = 770;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM) {
					{
					State = 769;
					Match(FROM);
					}
				}

				State = 772;
				((StandardFunctionTrimContext)_localctx).target = simpleExpression(0);
				State = 773;
				Match(RIGHT_PAREN);
				}
				break;
			case POSITION:
				_localctx = new StandardFunctionPositionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 775;
				Match(POSITION);
				State = 776;
				Match(LEFT_PAREN);
				State = 777;
				((StandardFunctionPositionContext)_localctx).substring = Match(STRING_LITERAL);
				State = 778;
				Match(IN);
				State = 779;
				((StandardFunctionPositionContext)_localctx).@string = simpleExpression(0);
				State = 780;
				Match(RIGHT_PAREN);
				}
				break;
			case EXTRACT:
				_localctx = new StandardFunctionExtractContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 782;
				Match(EXTRACT);
				State = 783;
				Match(LEFT_PAREN);
				State = 784;
				((StandardFunctionExtractContext)_localctx).extractField = dateTimeField();
				State = 785;
				Match(FROM);
				State = 786;
				((StandardFunctionExtractContext)_localctx).source = simpleExpression(0);
				State = 787;
				Match(RIGHT_PAREN);
				}
				break;
			case COALESCE:
				_localctx = new StandardFunctionCoalesceContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 789;
				Match(COALESCE);
				State = 790;
				Match(LEFT_PAREN);
				State = 791;
				expression(0);
				State = 796;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 792;
					Match(COMMA);
					State = 793;
					expression(0);
					}
					}
					State = 798;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 799;
				Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTimeFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(QueryCatParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOY() { return GetToken(QueryCatParser.DOY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAYOFYEAR() { return GetToken(QueryCatParser.DAYOFYEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(QueryCatParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOW() { return GetToken(QueryCatParser.DOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEKDAY() { return GetToken(QueryCatParser.WEEKDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(QueryCatParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(QueryCatParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(QueryCatParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(QueryCatParser.SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLISECOND() { return GetToken(QueryCatParser.MILLISECOND, 0); }
		public DateTimeFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTimeField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateTimeField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateTimeFieldContext dateTimeField() {
		DateTimeFieldContext _localctx = new DateTimeFieldContext(Context, State);
		EnterRule(_localctx, 120, RULE_dateTimeField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 803;
			_la = TokenStream.LA(1);
			if ( !((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 2047L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(QueryCatParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(QueryCatParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(QueryCatParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(QueryCatParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(QueryCatParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(QueryCatParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC() { return GetToken(QueryCatParser.NUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(QueryCatParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(QueryCatParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(QueryCatParser.VOID, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 122, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 805;
			_la = TokenStream.LA(1);
			if ( !((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 1108101562623L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionBinaryContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(QueryCatParser.CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_LESS() { return GetToken(QueryCatParser.LESS_LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_GREATER() { return GetToken(QueryCatParser.GREATER_GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(QueryCatParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(QueryCatParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(QueryCatParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(QueryCatParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(QueryCatParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(QueryCatParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(QueryCatParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(QueryCatParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUALS() { return GetToken(QueryCatParser.GREATER_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(QueryCatParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUALS() { return GetToken(QueryCatParser.LESS_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(QueryCatParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(QueryCatParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(QueryCatParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMILAR() { return GetToken(QueryCatParser.SIMILAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(QueryCatParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(QueryCatParser.OR, 0); }
		public ExpressionBinaryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStandardFunctionCallContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public StandardFunctionContext standardFunction() {
			return GetRuleContext<StandardFunctionContext>(0);
		}
		public ExpressionStandardFunctionCallContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStandardFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionInParensContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		public ExpressionInParensContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionInParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionAtTimeZoneContext : ExpressionContext {
		public ExpressionContext left;
		[System.Diagnostics.DebuggerNonUserCode] public AtTimeZoneContext atTimeZone() {
			return GetRuleContext<AtTimeZoneContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionAtTimeZoneContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionAtTimeZone(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionCaseContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseExpressionContext caseExpression() {
			return GetRuleContext<CaseExpressionContext>(0);
		}
		public ExpressionCaseContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionCase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionCastContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CastOperandContext castOperand() {
			return GetRuleContext<CastOperandContext>(0);
		}
		public ExpressionCastContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionCast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionBetweenContext : ExpressionContext {
		public ExpressionContext expr;
		public IToken op;
		public SimpleExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(QueryCatParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(QueryCatParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(QueryCatParser.NOT, 0); }
		public ExpressionBetweenContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionBetween(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionBinaryInContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ArrayContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(QueryCatParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(QueryCatParser.NOT, 0); }
		public ExpressionBinaryInContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionBinaryIn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionUnaryContext : ExpressionContext {
		public ExpressionContext right;
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(QueryCatParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(QueryCatParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(QueryCatParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(QueryCatParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(QueryCatParser.IS, 0); }
		public ExpressionUnaryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionUnary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionSubqueryContext : ExpressionContext {
		public SimpleExpressionContext left;
		public IToken op;
		public IToken condition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(QueryCatParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(QueryCatParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(QueryCatParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUALS() { return GetToken(QueryCatParser.GREATER_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(QueryCatParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUALS() { return GetToken(QueryCatParser.LESS_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(QueryCatParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(QueryCatParser.SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(QueryCatParser.ALL, 0); }
		public ExpressionSubqueryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionSubquery(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionBinaryCastContext : ExpressionContext {
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPECAST() { return GetToken(QueryCatParser.TYPECAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionBinaryCastContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionBinaryCast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionSelectContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		public ExpressionSelectContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionSelect(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionIdentifierContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierChainContext identifierChain() {
			return GetRuleContext<IdentifierChainContext>(0);
		}
		public ExpressionIdentifierContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionLiteralContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ExpressionLiteralContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionFunctionCallContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ExpressionFunctionCallContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionExistsContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(QueryCatParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		public ExpressionExistsContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionExists(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 124;
		EnterRecursionRule(_localctx, 124, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 838;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
			case 1:
				{
				_localctx = new ExpressionLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 808;
				literal();
				}
				break;
			case 2:
				{
				_localctx = new ExpressionCastContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 809;
				castOperand();
				}
				break;
			case 3:
				{
				_localctx = new ExpressionStandardFunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 810;
				standardFunction();
				}
				break;
			case 4:
				{
				_localctx = new ExpressionFunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 811;
				functionCall();
				}
				break;
			case 5:
				{
				_localctx = new ExpressionCaseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 812;
				caseExpression();
				}
				break;
			case 6:
				{
				_localctx = new ExpressionIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 813;
				identifierChain();
				}
				break;
			case 7:
				{
				_localctx = new ExpressionInParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 814;
				Match(LEFT_PAREN);
				State = 815;
				expression(0);
				State = 816;
				Match(RIGHT_PAREN);
				}
				break;
			case 8:
				{
				_localctx = new ExpressionSelectContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 818;
				Match(LEFT_PAREN);
				State = 819;
				selectQueryExpression();
				State = 820;
				Match(RIGHT_PAREN);
				}
				break;
			case 9:
				{
				_localctx = new ExpressionUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 822;
				((ExpressionUnaryContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					((ExpressionUnaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 823;
				((ExpressionUnaryContext)_localctx).right = expression(15);
				}
				break;
			case 10:
				{
				_localctx = new ExpressionExistsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 824;
				Match(EXISTS);
				State = 825;
				Match(LEFT_PAREN);
				State = 826;
				selectQueryExpression();
				State = 827;
				Match(RIGHT_PAREN);
				}
				break;
			case 11:
				{
				_localctx = new ExpressionSubqueryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 829;
				((ExpressionSubqueryContext)_localctx).left = simpleExpression(0);
				State = 830;
				((ExpressionSubqueryContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 66060288L) != 0) ) {
					((ExpressionSubqueryContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 831;
				((ExpressionSubqueryContext)_localctx).condition = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la - 37)) & ~0x3f) == 0 && ((1L << (_la - 37)) & 18014398511579137L) != 0) ) {
					((ExpressionSubqueryContext)_localctx).condition = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 832;
				Match(LEFT_PAREN);
				State = 833;
				selectQueryExpression();
				State = 834;
				Match(RIGHT_PAREN);
				}
				break;
			case 12:
				{
				_localctx = new ExpressionUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 836;
				((ExpressionUnaryContext)_localctx).op = Match(NOT);
				State = 837;
				((ExpressionUnaryContext)_localctx).right = expression(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 902;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,119,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 900;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
					case 1:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 840;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 841;
						((ExpressionBinaryContext)_localctx).op = Match(CONCAT);
						State = 842;
						((ExpressionBinaryContext)_localctx).right = expression(18);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 843;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 844;
						((ExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==LESS_LESS || _la==GREATER_GREATER) ) {
							((ExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 845;
						((ExpressionBinaryContext)_localctx).right = expression(15);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 846;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 847;
						((ExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 917504L) != 0) ) {
							((ExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 848;
						((ExpressionBinaryContext)_localctx).right = expression(14);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 849;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 850;
						((ExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((ExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 851;
						((ExpressionBinaryContext)_localctx).right = expression(13);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 852;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 853;
						((ExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 66060288L) != 0) ) {
							((ExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 854;
						((ExpressionBinaryContext)_localctx).right = expression(12);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 855;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 857;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 856;
							Match(NOT);
							}
						}

						State = 859;
						((ExpressionBinaryContext)_localctx).op = Match(LIKE);
						State = 860;
						((ExpressionBinaryContext)_localctx).right = expression(11);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 861;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 863;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 862;
							Match(NOT);
							}
						}

						State = 865;
						((ExpressionBinaryContext)_localctx).op = Match(SIMILAR);
						State = 866;
						Match(TO);
						State = 867;
						((ExpressionBinaryContext)_localctx).right = expression(10);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionBetweenContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBetweenContext)_localctx).expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 868;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 870;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 869;
							Match(NOT);
							}
						}

						State = 872;
						((ExpressionBetweenContext)_localctx).op = Match(BETWEEN);
						State = 873;
						((ExpressionBetweenContext)_localctx).left = simpleExpression(0);
						State = 874;
						Match(AND);
						State = 875;
						((ExpressionBetweenContext)_localctx).right = expression(8);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 877;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 878;
						((ExpressionBinaryContext)_localctx).op = Match(AND);
						State = 879;
						((ExpressionBinaryContext)_localctx).right = expression(5);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 880;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 881;
						((ExpressionBinaryContext)_localctx).op = Match(OR);
						State = 882;
						((ExpressionBinaryContext)_localctx).right = expression(4);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionAtTimeZoneContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionAtTimeZoneContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 883;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 884;
						atTimeZone();
						}
						break;
					case 12:
						{
						_localctx = new ExpressionBinaryCastContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryCastContext)_localctx).right = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 885;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 886;
						Match(TYPECAST);
						State = 887;
						type();
						}
						break;
					case 13:
						{
						_localctx = new ExpressionBinaryInContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryInContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 888;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 890;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 889;
							Match(NOT);
							}
						}

						State = 892;
						((ExpressionBinaryInContext)_localctx).op = Match(IN);
						State = 893;
						((ExpressionBinaryInContext)_localctx).right = array();
						}
						break;
					case 14:
						{
						_localctx = new ExpressionUnaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionUnaryContext)_localctx).right = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 894;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 895;
						((ExpressionUnaryContext)_localctx).op = Match(IS);
						State = 897;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 896;
							Match(NOT);
							}
						}

						State = 899;
						Match(NULL);
						}
						break;
					}
					} 
				}
				State = 904;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,119,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SimpleExpressionContext : ParserRuleContext {
		public SimpleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpression; } }
	 
		public SimpleExpressionContext() { }
		public virtual void CopyFrom(SimpleExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleExpressionCaseContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseExpressionContext caseExpression() {
			return GetRuleContext<CaseExpressionContext>(0);
		}
		public SimpleExpressionCaseContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionCase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionLiteralContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public SimpleExpressionLiteralContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionCastContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CastOperandContext castOperand() {
			return GetRuleContext<CastOperandContext>(0);
		}
		public SimpleExpressionCastContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionCast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionAtTimeZoneContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtTimeZoneContext atTimeZone() {
			return GetRuleContext<AtTimeZoneContext>(0);
		}
		public SimpleExpressionAtTimeZoneContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionAtTimeZone(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionStandardFunctionCallContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public StandardFunctionContext standardFunction() {
			return GetRuleContext<StandardFunctionContext>(0);
		}
		public SimpleExpressionStandardFunctionCallContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionStandardFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionUnaryContext : SimpleExpressionContext {
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(QueryCatParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(QueryCatParser.MINUS, 0); }
		public SimpleExpressionUnaryContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionUnary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionBinaryContext : SimpleExpressionContext {
		public SimpleExpressionContext left;
		public IToken op;
		public SimpleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext[] simpleExpression() {
			return GetRuleContexts<SimpleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression(int i) {
			return GetRuleContext<SimpleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(QueryCatParser.CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(QueryCatParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(QueryCatParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(QueryCatParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(QueryCatParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(QueryCatParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(QueryCatParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(QueryCatParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(QueryCatParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUALS() { return GetToken(QueryCatParser.GREATER_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(QueryCatParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUALS() { return GetToken(QueryCatParser.LESS_OR_EQUALS, 0); }
		public SimpleExpressionBinaryContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionBinaryCastContext : SimpleExpressionContext {
		public SimpleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPECAST() { return GetToken(QueryCatParser.TYPECAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public SimpleExpressionBinaryCastContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionBinaryCast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionFunctionCallContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public SimpleExpressionFunctionCallContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionInParensContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		public SimpleExpressionInParensContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionInParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionIdentifierContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierChainContext identifierChain() {
			return GetRuleContext<IdentifierChainContext>(0);
		}
		public SimpleExpressionIdentifierContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExpressionContext simpleExpression() {
		return simpleExpression(0);
	}

	private SimpleExpressionContext simpleExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SimpleExpressionContext _localctx = new SimpleExpressionContext(Context, _parentState);
		SimpleExpressionContext _prevctx = _localctx;
		int _startState = 126;
		EnterRecursionRule(_localctx, 126, RULE_simpleExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 919;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
			case 1:
				{
				_localctx = new SimpleExpressionLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 906;
				literal();
				}
				break;
			case 2:
				{
				_localctx = new SimpleExpressionCastContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 907;
				castOperand();
				}
				break;
			case 3:
				{
				_localctx = new SimpleExpressionAtTimeZoneContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 908;
				atTimeZone();
				}
				break;
			case 4:
				{
				_localctx = new SimpleExpressionStandardFunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 909;
				standardFunction();
				}
				break;
			case 5:
				{
				_localctx = new SimpleExpressionFunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 910;
				functionCall();
				}
				break;
			case 6:
				{
				_localctx = new SimpleExpressionCaseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 911;
				caseExpression();
				}
				break;
			case 7:
				{
				_localctx = new SimpleExpressionIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 912;
				identifierChain();
				}
				break;
			case 8:
				{
				_localctx = new SimpleExpressionInParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 913;
				Match(LEFT_PAREN);
				State = 914;
				simpleExpression(0);
				State = 915;
				Match(RIGHT_PAREN);
				}
				break;
			case 9:
				{
				_localctx = new SimpleExpressionUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 917;
				((SimpleExpressionUnaryContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					((SimpleExpressionUnaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 918;
				((SimpleExpressionUnaryContext)_localctx).right = expression(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 938;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,122,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 936;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
					case 1:
						{
						_localctx = new SimpleExpressionBinaryContext(new SimpleExpressionContext(_parentctx, _parentState));
						((SimpleExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpression);
						State = 921;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 922;
						((SimpleExpressionBinaryContext)_localctx).op = Match(CONCAT);
						State = 923;
						((SimpleExpressionBinaryContext)_localctx).right = simpleExpression(6);
						}
						break;
					case 2:
						{
						_localctx = new SimpleExpressionBinaryContext(new SimpleExpressionContext(_parentctx, _parentState));
						((SimpleExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpression);
						State = 924;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 925;
						((SimpleExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 917504L) != 0) ) {
							((SimpleExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 926;
						((SimpleExpressionBinaryContext)_localctx).right = simpleExpression(4);
						}
						break;
					case 3:
						{
						_localctx = new SimpleExpressionBinaryContext(new SimpleExpressionContext(_parentctx, _parentState));
						((SimpleExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpression);
						State = 927;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 928;
						((SimpleExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((SimpleExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 929;
						((SimpleExpressionBinaryContext)_localctx).right = simpleExpression(3);
						}
						break;
					case 4:
						{
						_localctx = new SimpleExpressionBinaryContext(new SimpleExpressionContext(_parentctx, _parentState));
						((SimpleExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpression);
						State = 930;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 931;
						((SimpleExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 66060288L) != 0) ) {
							((SimpleExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 932;
						((SimpleExpressionBinaryContext)_localctx).right = simpleExpression(2);
						}
						break;
					case 5:
						{
						_localctx = new SimpleExpressionBinaryCastContext(new SimpleExpressionContext(_parentctx, _parentState));
						((SimpleExpressionBinaryCastContext)_localctx).right = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpression);
						State = 933;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 934;
						Match(TYPECAST);
						State = 935;
						type();
						}
						break;
					}
					} 
				}
				State = 940;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,122,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LiteralPlainContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(QueryCatParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_LITERAL() { return GetToken(QueryCatParser.FLOAT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_LITERAL() { return GetToken(QueryCatParser.NUMERIC_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_LITERAL() { return GetToken(QueryCatParser.BOOLEAN_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(QueryCatParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(QueryCatParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(QueryCatParser.NULL, 0); }
		public LiteralPlainContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralPlain(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralIntervalContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntervalLiteralContext intervalLiteral() {
			return GetRuleContext<IntervalLiteralContext>(0);
		}
		public LiteralIntervalContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralInterval(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 128, RULE_literal);
		try {
			State = 950;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER_LITERAL:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 941;
				Match(INTEGER_LITERAL);
				}
				break;
			case FLOAT_LITERAL:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 942;
				Match(FLOAT_LITERAL);
				}
				break;
			case NUMERIC_LITERAL:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 943;
				Match(NUMERIC_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 944;
				Match(BOOLEAN_LITERAL);
				}
				break;
			case STRING_LITERAL:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 945;
				Match(STRING_LITERAL);
				}
				break;
			case TRUE:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 946;
				Match(TRUE);
				}
				break;
			case FALSE:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 947;
				Match(FALSE);
				}
				break;
			case NULL:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 948;
				Match(NULL);
				}
				break;
			case INTERVAL:
				_localctx = new LiteralIntervalContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 949;
				intervalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return selectQueryExpressionBody_sempred((SelectQueryExpressionBodyContext)_localctx, predIndex);
		case 62: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 63: return simpleExpression_sempred((SimpleExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool selectQueryExpressionBody_sempred(SelectQueryExpressionBodyContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 17);
		case 3: return Precpred(Context, 14);
		case 4: return Precpred(Context, 13);
		case 5: return Precpred(Context, 12);
		case 6: return Precpred(Context, 11);
		case 7: return Precpred(Context, 10);
		case 8: return Precpred(Context, 9);
		case 9: return Precpred(Context, 7);
		case 10: return Precpred(Context, 4);
		case 11: return Precpred(Context, 3);
		case 12: return Precpred(Context, 24);
		case 13: return Precpred(Context, 16);
		case 14: return Precpred(Context, 8);
		case 15: return Precpred(Context, 2);
		}
		return true;
	}
	private bool simpleExpression_sempred(SimpleExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return Precpred(Context, 5);
		case 17: return Precpred(Context, 3);
		case 18: return Precpred(Context, 2);
		case 19: return Precpred(Context, 1);
		case 20: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,146,953,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,1,0,5,0,132,8,0,10,0,12,0,135,9,0,1,0,1,0,1,0,5,0,140,8,0,10,
		0,12,0,143,9,0,1,0,5,0,146,8,0,10,0,12,0,149,9,0,1,0,1,0,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,3,1,161,8,1,1,2,1,2,1,2,1,2,1,2,5,2,168,8,2,10,2,12,
		2,171,9,2,3,2,173,8,2,1,2,1,2,1,2,3,2,178,8,2,1,2,1,2,1,3,1,3,1,3,1,3,
		3,3,186,8,3,1,4,3,4,189,8,4,1,4,1,4,3,4,193,8,4,1,4,1,4,1,4,3,4,198,8,
		4,1,4,1,4,3,4,202,8,4,1,5,1,5,1,5,1,5,1,5,5,5,209,8,5,10,5,12,5,212,9,
		5,3,5,214,8,5,1,5,1,5,1,5,1,5,1,5,3,5,221,8,5,1,6,1,6,3,6,225,8,6,1,6,
		1,6,1,7,1,7,1,7,1,7,1,7,3,7,234,8,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,
		10,1,10,1,10,1,10,5,10,248,8,10,10,10,12,10,251,9,10,1,11,1,11,3,11,255,
		8,11,1,11,1,11,1,11,1,11,3,11,261,8,11,1,12,3,12,264,8,12,1,12,1,12,1,
		13,3,13,269,8,13,1,13,1,13,3,13,273,8,13,1,13,3,13,276,8,13,1,13,1,13,
		3,13,280,8,13,1,13,1,13,3,13,284,8,13,1,13,3,13,287,8,13,1,13,3,13,290,
		8,13,1,13,3,13,293,8,13,1,13,3,13,296,8,13,1,13,3,13,299,8,13,1,13,1,13,
		3,13,303,8,13,1,13,3,13,306,8,13,1,13,3,13,309,8,13,1,13,3,13,312,8,13,
		3,13,314,8,13,1,14,1,14,1,14,1,14,1,14,1,14,3,14,322,8,14,1,14,1,14,1,
		14,1,14,3,14,328,8,14,1,14,5,14,331,8,14,10,14,12,14,334,9,14,1,15,1,15,
		1,15,1,15,1,15,3,15,341,8,15,1,16,3,16,344,8,16,1,16,1,16,3,16,348,8,16,
		1,16,3,16,351,8,16,1,16,1,16,3,16,355,8,16,1,16,1,16,3,16,359,8,16,1,16,
		1,16,1,16,1,16,5,16,365,8,16,10,16,12,16,368,9,16,1,16,3,16,371,8,16,3,
		16,373,8,16,1,17,1,17,1,17,5,17,378,8,17,10,17,12,17,381,9,17,1,18,1,18,
		1,18,3,18,386,8,18,1,19,1,19,1,19,1,19,1,19,1,19,5,19,394,8,19,10,19,12,
		19,397,9,19,1,19,1,19,1,20,1,20,3,20,403,8,20,1,20,1,20,1,20,5,20,408,
		8,20,10,20,12,20,411,9,20,1,21,1,21,1,21,1,21,1,21,3,21,418,8,21,1,21,
		1,21,1,21,1,21,1,21,1,22,1,22,1,22,5,22,428,8,22,10,22,12,22,431,9,22,
		1,23,1,23,1,23,1,23,1,23,3,23,438,8,23,1,23,3,23,441,8,23,1,23,1,23,3,
		23,445,8,23,3,23,447,8,23,1,24,1,24,1,24,3,24,452,8,24,1,25,1,25,3,25,
		456,8,25,1,25,3,25,459,8,25,1,25,3,25,462,8,25,1,26,1,26,1,26,1,26,5,26,
		468,8,26,10,26,12,26,471,9,26,1,27,1,27,5,27,475,8,27,10,27,12,27,478,
		9,27,1,28,1,28,1,28,1,28,5,28,484,8,28,10,28,12,28,487,9,28,1,28,1,28,
		1,29,1,29,1,29,1,29,5,29,495,8,29,10,29,12,29,498,9,29,1,30,1,30,3,30,
		502,8,30,1,30,1,30,1,30,1,30,3,30,508,8,30,1,30,3,30,511,8,30,1,30,1,30,
		1,30,1,30,3,30,517,8,30,1,30,1,30,3,30,521,8,30,1,30,1,30,1,30,1,30,3,
		30,527,8,30,3,30,529,8,30,1,31,3,31,532,8,31,1,31,1,31,1,31,1,31,1,31,
		1,31,3,31,540,8,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,5,31,549,8,31,10,
		31,12,31,552,9,31,1,31,1,31,3,31,556,8,31,1,32,1,32,1,32,3,32,561,8,32,
		3,32,563,8,32,1,33,1,33,1,33,1,33,1,33,5,33,570,8,33,10,33,12,33,573,9,
		33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,3,36,583,8,36,1,36,3,36,586,
		8,36,1,36,3,36,589,8,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,5,37,598,8,
		37,10,37,12,37,601,9,37,1,38,1,38,1,38,1,38,1,38,5,38,608,8,38,10,38,12,
		38,611,9,38,1,39,1,39,1,39,1,39,5,39,617,8,39,10,39,12,39,620,9,39,1,40,
		1,40,1,40,1,40,1,41,1,41,1,41,3,41,629,8,41,1,42,1,42,3,42,633,8,42,1,
		42,1,42,3,42,637,8,42,1,42,3,42,640,8,42,1,43,1,43,1,43,1,44,1,44,1,44,
		1,45,1,45,1,45,3,45,651,8,45,1,45,1,45,1,45,1,45,5,45,657,8,45,10,45,12,
		45,660,9,45,1,45,3,45,663,8,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,
		3,47,673,8,47,1,47,1,47,1,48,1,48,1,48,1,48,3,48,681,8,48,3,48,683,8,48,
		1,49,1,49,1,49,1,49,5,49,689,8,49,10,49,12,49,692,9,49,1,49,1,49,1,50,
		1,50,3,50,698,8,50,1,51,1,51,1,51,1,52,1,52,1,52,3,52,706,8,52,1,52,3,
		52,709,8,52,1,53,1,53,1,53,1,53,5,53,715,8,53,10,53,12,53,718,9,53,1,53,
		1,53,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,
		1,56,1,56,3,56,737,8,56,1,57,1,57,3,57,741,8,57,1,57,5,57,744,8,57,10,
		57,12,57,747,9,57,1,57,1,57,3,57,751,8,57,1,57,1,57,1,58,1,58,1,58,1,58,
		1,58,1,59,1,59,1,59,1,59,1,59,3,59,765,8,59,1,59,3,59,768,8,59,1,59,3,
		59,771,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
		1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,5,59,795,8,59,10,59,
		12,59,798,9,59,1,59,1,59,3,59,802,8,59,1,60,1,60,1,61,1,61,1,62,1,62,1,
		62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
		62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
		62,3,62,839,8,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
		1,62,1,62,1,62,1,62,1,62,1,62,3,62,858,8,62,1,62,1,62,1,62,1,62,3,62,864,
		8,62,1,62,1,62,1,62,1,62,1,62,3,62,871,8,62,1,62,1,62,1,62,1,62,1,62,1,
		62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,891,
		8,62,1,62,1,62,1,62,1,62,1,62,3,62,898,8,62,1,62,5,62,901,8,62,10,62,12,
		62,904,9,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,
		1,63,1,63,3,63,920,8,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,
		63,1,63,1,63,1,63,1,63,1,63,5,63,937,8,63,10,63,12,63,940,9,63,1,64,1,
		64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,951,8,64,1,64,0,3,28,124,126,
		65,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
		48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,
		96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,0,18,
		3,0,3,3,20,20,43,43,2,0,92,92,95,95,2,0,138,138,142,142,2,0,91,91,96,96,
		2,0,97,97,128,128,3,0,102,102,110,110,121,121,1,0,122,123,2,0,98,98,111,
		111,2,0,99,99,112,112,1,0,56,56,1,0,65,67,1,0,71,81,3,0,30,37,63,63,70,
		70,1,0,15,16,1,0,20,25,3,0,37,37,58,58,91,91,1,0,27,28,1,0,17,19,1067,
		0,133,1,0,0,0,2,160,1,0,0,0,4,162,1,0,0,0,6,181,1,0,0,0,8,188,1,0,0,0,
		10,220,1,0,0,0,12,224,1,0,0,0,14,228,1,0,0,0,16,235,1,0,0,0,18,240,1,0,
		0,0,20,242,1,0,0,0,22,252,1,0,0,0,24,263,1,0,0,0,26,313,1,0,0,0,28,315,
		1,0,0,0,30,340,1,0,0,0,32,372,1,0,0,0,34,374,1,0,0,0,36,385,1,0,0,0,38,
		387,1,0,0,0,40,400,1,0,0,0,42,412,1,0,0,0,44,424,1,0,0,0,46,446,1,0,0,
		0,48,448,1,0,0,0,50,453,1,0,0,0,52,463,1,0,0,0,54,472,1,0,0,0,56,479,1,
		0,0,0,58,490,1,0,0,0,60,528,1,0,0,0,62,555,1,0,0,0,64,562,1,0,0,0,66,564,
		1,0,0,0,68,574,1,0,0,0,70,577,1,0,0,0,72,580,1,0,0,0,74,592,1,0,0,0,76,
		602,1,0,0,0,78,612,1,0,0,0,80,621,1,0,0,0,82,625,1,0,0,0,84,630,1,0,0,
		0,86,641,1,0,0,0,88,644,1,0,0,0,90,647,1,0,0,0,92,664,1,0,0,0,94,668,1,
		0,0,0,96,682,1,0,0,0,98,684,1,0,0,0,100,697,1,0,0,0,102,699,1,0,0,0,104,
		708,1,0,0,0,106,710,1,0,0,0,108,721,1,0,0,0,110,724,1,0,0,0,112,731,1,
		0,0,0,114,738,1,0,0,0,116,754,1,0,0,0,118,801,1,0,0,0,120,803,1,0,0,0,
		122,805,1,0,0,0,124,838,1,0,0,0,126,919,1,0,0,0,128,950,1,0,0,0,130,132,
		5,9,0,0,131,130,1,0,0,0,132,135,1,0,0,0,133,131,1,0,0,0,133,134,1,0,0,
		0,134,136,1,0,0,0,135,133,1,0,0,0,136,141,3,2,1,0,137,138,5,9,0,0,138,
		140,3,2,1,0,139,137,1,0,0,0,140,143,1,0,0,0,141,139,1,0,0,0,141,142,1,
		0,0,0,142,147,1,0,0,0,143,141,1,0,0,0,144,146,5,9,0,0,145,144,1,0,0,0,
		146,149,1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,148,150,1,0,0,0,149,147,
		1,0,0,0,150,151,5,0,0,1,151,1,1,0,0,0,152,161,3,10,5,0,153,161,3,18,9,
		0,154,161,3,90,45,0,155,161,3,94,47,0,156,161,3,102,51,0,157,161,3,14,
		7,0,158,161,3,16,8,0,159,161,3,124,62,0,160,152,1,0,0,0,160,153,1,0,0,
		0,160,154,1,0,0,0,160,155,1,0,0,0,160,156,1,0,0,0,160,157,1,0,0,0,160,
		158,1,0,0,0,160,159,1,0,0,0,161,3,1,0,0,0,162,163,5,138,0,0,163,172,5,
		1,0,0,164,169,3,8,4,0,165,166,5,6,0,0,166,168,3,8,4,0,167,165,1,0,0,0,
		168,171,1,0,0,0,169,167,1,0,0,0,169,170,1,0,0,0,170,173,1,0,0,0,171,169,
		1,0,0,0,172,164,1,0,0,0,172,173,1,0,0,0,173,174,1,0,0,0,174,177,5,2,0,
		0,175,176,5,5,0,0,176,178,3,6,3,0,177,175,1,0,0,0,177,178,1,0,0,0,178,
		179,1,0,0,0,179,180,5,0,0,1,180,5,1,0,0,0,181,185,3,122,61,0,182,183,5,
		24,0,0,183,184,5,138,0,0,184,186,5,22,0,0,185,182,1,0,0,0,185,186,1,0,
		0,0,186,7,1,0,0,0,187,189,5,8,0,0,188,187,1,0,0,0,188,189,1,0,0,0,189,
		190,1,0,0,0,190,192,5,138,0,0,191,193,5,10,0,0,192,191,1,0,0,0,192,193,
		1,0,0,0,193,194,1,0,0,0,194,195,5,5,0,0,195,197,3,6,3,0,196,198,5,13,0,
		0,197,196,1,0,0,0,197,198,1,0,0,0,198,201,1,0,0,0,199,200,7,0,0,0,200,
		202,3,128,64,0,201,199,1,0,0,0,201,202,1,0,0,0,202,9,1,0,0,0,203,204,5,
		138,0,0,204,213,5,1,0,0,205,210,3,12,6,0,206,207,5,6,0,0,207,209,3,12,
		6,0,208,206,1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,0,211,
		214,1,0,0,0,212,210,1,0,0,0,213,205,1,0,0,0,213,214,1,0,0,0,214,215,1,
		0,0,0,215,221,5,2,0,0,216,217,5,138,0,0,217,218,5,1,0,0,218,219,5,17,0,
		0,219,221,5,2,0,0,220,203,1,0,0,0,220,216,1,0,0,0,221,11,1,0,0,0,222,223,
		5,138,0,0,223,225,5,4,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,226,1,0,
		0,0,226,227,3,124,62,0,227,13,1,0,0,0,228,229,5,135,0,0,229,230,5,138,
		0,0,230,233,3,122,61,0,231,232,5,3,0,0,232,234,3,2,1,0,233,231,1,0,0,0,
		233,234,1,0,0,0,234,15,1,0,0,0,235,236,5,136,0,0,236,237,5,138,0,0,237,
		238,5,3,0,0,238,239,3,2,1,0,239,17,1,0,0,0,240,241,3,26,13,0,241,19,1,
		0,0,0,242,243,5,115,0,0,243,244,5,41,0,0,244,249,3,22,11,0,245,246,5,6,
		0,0,246,248,3,22,11,0,247,245,1,0,0,0,248,251,1,0,0,0,249,247,1,0,0,0,
		249,250,1,0,0,0,250,21,1,0,0,0,251,249,1,0,0,0,252,254,3,124,62,0,253,
		255,7,1,0,0,254,253,1,0,0,0,254,255,1,0,0,0,255,260,1,0,0,0,256,257,5,
		113,0,0,257,261,5,99,0,0,258,259,5,113,0,0,259,261,5,109,0,0,260,256,1,
		0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,23,1,0,0,0,262,264,5,39,0,0,
		263,262,1,0,0,0,263,264,1,0,0,0,264,265,1,0,0,0,265,266,7,2,0,0,266,25,
		1,0,0,0,267,269,3,40,20,0,268,267,1,0,0,0,268,269,1,0,0,0,269,270,1,0,
		0,0,270,272,5,124,0,0,271,273,3,86,43,0,272,271,1,0,0,0,272,273,1,0,0,
		0,273,275,1,0,0,0,274,276,3,36,18,0,275,274,1,0,0,0,275,276,1,0,0,0,276,
		277,1,0,0,0,277,279,3,34,17,0,278,280,3,48,24,0,279,278,1,0,0,0,279,280,
		1,0,0,0,280,281,1,0,0,0,281,283,3,50,25,0,282,284,3,78,39,0,283,282,1,
		0,0,0,283,284,1,0,0,0,284,286,1,0,0,0,285,287,3,20,10,0,286,285,1,0,0,
		0,286,287,1,0,0,0,287,289,1,0,0,0,288,290,3,88,44,0,289,288,1,0,0,0,289,
		290,1,0,0,0,290,292,1,0,0,0,291,293,3,82,41,0,292,291,1,0,0,0,292,293,
		1,0,0,0,293,295,1,0,0,0,294,296,3,84,42,0,295,294,1,0,0,0,295,296,1,0,
		0,0,296,314,1,0,0,0,297,299,3,40,20,0,298,297,1,0,0,0,298,299,1,0,0,0,
		299,300,1,0,0,0,300,302,3,28,14,0,301,303,3,20,10,0,302,301,1,0,0,0,302,
		303,1,0,0,0,303,305,1,0,0,0,304,306,3,88,44,0,305,304,1,0,0,0,305,306,
		1,0,0,0,306,308,1,0,0,0,307,309,3,82,41,0,308,307,1,0,0,0,308,309,1,0,
		0,0,309,311,1,0,0,0,310,312,3,84,42,0,311,310,1,0,0,0,311,312,1,0,0,0,
		312,314,1,0,0,0,313,268,1,0,0,0,313,298,1,0,0,0,314,27,1,0,0,0,315,316,
		6,14,-1,0,316,317,3,30,15,0,317,332,1,0,0,0,318,319,10,2,0,0,319,321,5,
		106,0,0,320,322,7,3,0,0,321,320,1,0,0,0,321,322,1,0,0,0,322,323,1,0,0,
		0,323,331,3,28,14,3,324,325,10,1,0,0,325,327,7,4,0,0,326,328,7,3,0,0,327,
		326,1,0,0,0,327,328,1,0,0,0,328,329,1,0,0,0,329,331,3,28,14,2,330,318,
		1,0,0,0,330,324,1,0,0,0,331,334,1,0,0,0,332,330,1,0,0,0,332,333,1,0,0,
		0,333,29,1,0,0,0,334,332,1,0,0,0,335,341,3,32,16,0,336,337,5,1,0,0,337,
		338,3,26,13,0,338,339,5,2,0,0,339,341,1,0,0,0,340,335,1,0,0,0,340,336,
		1,0,0,0,341,31,1,0,0,0,342,344,3,40,20,0,343,342,1,0,0,0,343,344,1,0,0,
		0,344,345,1,0,0,0,345,347,5,124,0,0,346,348,3,86,43,0,347,346,1,0,0,0,
		347,348,1,0,0,0,348,350,1,0,0,0,349,351,3,36,18,0,350,349,1,0,0,0,350,
		351,1,0,0,0,351,352,1,0,0,0,352,354,3,34,17,0,353,355,3,48,24,0,354,353,
		1,0,0,0,354,355,1,0,0,0,355,356,1,0,0,0,356,358,3,50,25,0,357,359,3,78,
		39,0,358,357,1,0,0,0,358,359,1,0,0,0,359,373,1,0,0,0,360,361,5,124,0,0,
		361,366,3,46,23,0,362,363,5,6,0,0,363,365,3,46,23,0,364,362,1,0,0,0,365,
		368,1,0,0,0,366,364,1,0,0,0,366,367,1,0,0,0,367,370,1,0,0,0,368,366,1,
		0,0,0,369,371,3,48,24,0,370,369,1,0,0,0,370,371,1,0,0,0,371,373,1,0,0,
		0,372,343,1,0,0,0,372,360,1,0,0,0,373,33,1,0,0,0,374,379,3,46,23,0,375,
		376,5,6,0,0,376,378,3,46,23,0,377,375,1,0,0,0,378,381,1,0,0,0,379,377,
		1,0,0,0,379,380,1,0,0,0,380,35,1,0,0,0,381,379,1,0,0,0,382,386,5,91,0,
		0,383,386,5,96,0,0,384,386,3,38,19,0,385,382,1,0,0,0,385,383,1,0,0,0,385,
		384,1,0,0,0,386,37,1,0,0,0,387,388,5,96,0,0,388,389,5,55,0,0,389,390,5,
		1,0,0,390,395,3,126,63,0,391,392,5,6,0,0,392,394,3,126,63,0,393,391,1,
		0,0,0,394,397,1,0,0,0,395,393,1,0,0,0,395,396,1,0,0,0,396,398,1,0,0,0,
		397,395,1,0,0,0,398,399,5,2,0,0,399,39,1,0,0,0,400,402,5,132,0,0,401,403,
		5,120,0,0,402,401,1,0,0,0,402,403,1,0,0,0,403,404,1,0,0,0,404,409,3,42,
		21,0,405,406,5,6,0,0,406,408,3,42,21,0,407,405,1,0,0,0,408,411,1,0,0,0,
		409,407,1,0,0,0,409,410,1,0,0,0,410,41,1,0,0,0,411,409,1,0,0,0,412,417,
		5,138,0,0,413,414,5,1,0,0,414,415,3,44,22,0,415,416,5,2,0,0,416,418,1,
		0,0,0,417,413,1,0,0,0,417,418,1,0,0,0,418,419,1,0,0,0,419,420,5,39,0,0,
		420,421,5,1,0,0,421,422,3,26,13,0,422,423,5,2,0,0,423,43,1,0,0,0,424,429,
		3,104,52,0,425,426,5,6,0,0,426,428,3,104,52,0,427,425,1,0,0,0,428,431,
		1,0,0,0,429,427,1,0,0,0,429,430,1,0,0,0,430,45,1,0,0,0,431,429,1,0,0,0,
		432,447,5,17,0,0,433,434,3,10,5,0,434,437,5,117,0,0,435,438,5,138,0,0,
		436,438,3,72,36,0,437,435,1,0,0,0,437,436,1,0,0,0,438,440,1,0,0,0,439,
		441,3,24,12,0,440,439,1,0,0,0,440,441,1,0,0,0,441,447,1,0,0,0,442,444,
		3,124,62,0,443,445,3,24,12,0,444,443,1,0,0,0,444,445,1,0,0,0,445,447,1,
		0,0,0,446,432,1,0,0,0,446,433,1,0,0,0,446,442,1,0,0,0,447,47,1,0,0,0,448,
		451,5,107,0,0,449,452,3,10,5,0,450,452,5,142,0,0,451,449,1,0,0,0,451,450,
		1,0,0,0,452,49,1,0,0,0,453,455,3,52,26,0,454,456,3,70,35,0,455,454,1,0,
		0,0,455,456,1,0,0,0,456,458,1,0,0,0,457,459,3,66,33,0,458,457,1,0,0,0,
		458,459,1,0,0,0,459,461,1,0,0,0,460,462,3,68,34,0,461,460,1,0,0,0,461,
		462,1,0,0,0,462,51,1,0,0,0,463,464,5,48,0,0,464,469,3,54,27,0,465,466,
		5,6,0,0,466,468,3,54,27,0,467,465,1,0,0,0,468,471,1,0,0,0,469,467,1,0,
		0,0,469,470,1,0,0,0,470,53,1,0,0,0,471,469,1,0,0,0,472,476,3,60,30,0,473,
		475,3,62,31,0,474,473,1,0,0,0,475,478,1,0,0,0,476,474,1,0,0,0,476,477,
		1,0,0,0,477,55,1,0,0,0,478,476,1,0,0,0,479,480,5,1,0,0,480,485,3,126,63,
		0,481,482,5,6,0,0,482,484,3,126,63,0,483,481,1,0,0,0,484,487,1,0,0,0,485,
		483,1,0,0,0,485,486,1,0,0,0,486,488,1,0,0,0,487,485,1,0,0,0,488,489,5,
		2,0,0,489,57,1,0,0,0,490,491,5,129,0,0,491,496,3,56,28,0,492,493,5,6,0,
		0,493,495,3,56,28,0,494,492,1,0,0,0,495,498,1,0,0,0,496,494,1,0,0,0,496,
		497,1,0,0,0,497,59,1,0,0,0,498,496,1,0,0,0,499,501,3,10,5,0,500,502,3,
		24,12,0,501,500,1,0,0,0,501,502,1,0,0,0,502,529,1,0,0,0,503,529,5,16,0,
		0,504,507,5,142,0,0,505,506,5,101,0,0,506,508,3,10,5,0,507,505,1,0,0,0,
		507,508,1,0,0,0,508,510,1,0,0,0,509,511,3,24,12,0,510,509,1,0,0,0,510,
		511,1,0,0,0,511,529,1,0,0,0,512,513,5,1,0,0,513,514,3,26,13,0,514,516,
		5,2,0,0,515,517,3,24,12,0,516,515,1,0,0,0,516,517,1,0,0,0,517,529,1,0,
		0,0,518,520,5,138,0,0,519,521,3,24,12,0,520,519,1,0,0,0,520,521,1,0,0,
		0,521,529,1,0,0,0,522,523,5,1,0,0,523,524,3,58,29,0,524,526,5,2,0,0,525,
		527,3,24,12,0,526,525,1,0,0,0,526,527,1,0,0,0,527,529,1,0,0,0,528,499,
		1,0,0,0,528,503,1,0,0,0,528,504,1,0,0,0,528,512,1,0,0,0,528,518,1,0,0,
		0,528,522,1,0,0,0,529,61,1,0,0,0,530,532,3,64,32,0,531,530,1,0,0,0,531,
		532,1,0,0,0,532,533,1,0,0,0,533,534,5,108,0,0,534,535,3,60,30,0,535,536,
		5,55,0,0,536,537,3,124,62,0,537,556,1,0,0,0,538,540,3,64,32,0,539,538,
		1,0,0,0,539,540,1,0,0,0,540,541,1,0,0,0,541,542,5,108,0,0,542,543,3,60,
		30,0,543,544,5,62,0,0,544,545,5,1,0,0,545,550,5,138,0,0,546,547,5,6,0,
		0,547,549,5,138,0,0,548,546,1,0,0,0,549,552,1,0,0,0,550,548,1,0,0,0,550,
		551,1,0,0,0,551,553,1,0,0,0,552,550,1,0,0,0,553,554,5,2,0,0,554,556,1,
		0,0,0,555,531,1,0,0,0,555,539,1,0,0,0,556,63,1,0,0,0,557,563,5,105,0,0,
		558,560,7,5,0,0,559,561,5,116,0,0,560,559,1,0,0,0,560,561,1,0,0,0,561,
		563,1,0,0,0,562,557,1,0,0,0,562,558,1,0,0,0,563,65,1,0,0,0,564,565,5,103,
		0,0,565,566,5,41,0,0,566,571,3,124,62,0,567,568,5,6,0,0,568,570,3,124,
		62,0,569,567,1,0,0,0,570,573,1,0,0,0,571,569,1,0,0,0,571,572,1,0,0,0,572,
		67,1,0,0,0,573,571,1,0,0,0,574,575,5,104,0,0,575,576,3,124,62,0,576,69,
		1,0,0,0,577,578,5,130,0,0,578,579,3,124,62,0,579,71,1,0,0,0,580,582,5,
		1,0,0,581,583,5,138,0,0,582,581,1,0,0,0,582,583,1,0,0,0,583,585,1,0,0,
		0,584,586,3,74,37,0,585,584,1,0,0,0,585,586,1,0,0,0,586,588,1,0,0,0,587,
		589,3,76,38,0,588,587,1,0,0,0,588,589,1,0,0,0,589,590,1,0,0,0,590,591,
		5,2,0,0,591,73,1,0,0,0,592,593,5,118,0,0,593,594,5,41,0,0,594,599,3,124,
		62,0,595,596,5,6,0,0,596,598,3,124,62,0,597,595,1,0,0,0,598,601,1,0,0,
		0,599,597,1,0,0,0,599,600,1,0,0,0,600,75,1,0,0,0,601,599,1,0,0,0,602,603,
		5,115,0,0,603,604,5,41,0,0,604,609,3,22,11,0,605,606,5,6,0,0,606,608,3,
		22,11,0,607,605,1,0,0,0,608,611,1,0,0,0,609,607,1,0,0,0,609,610,1,0,0,
		0,610,77,1,0,0,0,611,609,1,0,0,0,612,613,5,131,0,0,613,618,3,80,40,0,614,
		615,5,6,0,0,615,617,3,80,40,0,616,614,1,0,0,0,617,620,1,0,0,0,618,616,
		1,0,0,0,618,619,1,0,0,0,619,79,1,0,0,0,620,618,1,0,0,0,621,622,5,138,0,
		0,622,623,5,39,0,0,623,624,3,72,36,0,624,81,1,0,0,0,625,626,5,114,0,0,
		626,628,3,124,62,0,627,629,7,6,0,0,628,627,1,0,0,0,628,629,1,0,0,0,629,
		83,1,0,0,0,630,632,7,7,0,0,631,633,7,8,0,0,632,631,1,0,0,0,632,633,1,0,
		0,0,633,634,1,0,0,0,634,636,3,124,62,0,635,637,7,6,0,0,636,635,1,0,0,0,
		636,637,1,0,0,0,637,639,1,0,0,0,638,640,7,9,0,0,639,638,1,0,0,0,639,640,
		1,0,0,0,640,85,1,0,0,0,641,642,5,126,0,0,642,643,5,139,0,0,643,87,1,0,
		0,0,644,645,5,111,0,0,645,646,3,124,62,0,646,89,1,0,0,0,647,648,5,133,
		0,0,648,650,3,10,5,0,649,651,3,24,12,0,650,649,1,0,0,0,650,651,1,0,0,0,
		651,652,1,0,0,0,652,653,5,136,0,0,653,658,3,92,46,0,654,655,5,6,0,0,655,
		657,3,92,46,0,656,654,1,0,0,0,657,660,1,0,0,0,658,656,1,0,0,0,658,659,
		1,0,0,0,659,662,1,0,0,0,660,658,1,0,0,0,661,663,3,70,35,0,662,661,1,0,
		0,0,662,663,1,0,0,0,663,91,1,0,0,0,664,665,5,138,0,0,665,666,5,20,0,0,
		666,667,3,124,62,0,667,93,1,0,0,0,668,669,5,134,0,0,669,670,5,107,0,0,
		670,672,3,96,48,0,671,673,3,98,49,0,672,671,1,0,0,0,672,673,1,0,0,0,673,
		674,1,0,0,0,674,675,3,100,50,0,675,95,1,0,0,0,676,683,3,10,5,0,677,680,
		5,142,0,0,678,679,5,101,0,0,679,681,3,10,5,0,680,678,1,0,0,0,680,681,1,
		0,0,0,681,683,1,0,0,0,682,676,1,0,0,0,682,677,1,0,0,0,683,97,1,0,0,0,684,
		685,5,1,0,0,685,690,3,104,52,0,686,687,5,6,0,0,687,689,3,104,52,0,688,
		686,1,0,0,0,689,692,1,0,0,0,690,688,1,0,0,0,690,691,1,0,0,0,691,693,1,
		0,0,0,692,690,1,0,0,0,693,694,5,2,0,0,694,99,1,0,0,0,695,698,3,26,13,0,
		696,698,3,58,29,0,697,695,1,0,0,0,697,696,1,0,0,0,698,101,1,0,0,0,699,
		700,5,90,0,0,700,701,3,124,62,0,701,103,1,0,0,0,702,703,5,138,0,0,703,
		705,5,7,0,0,704,706,5,138,0,0,705,704,1,0,0,0,705,706,1,0,0,0,706,709,
		1,0,0,0,707,709,5,138,0,0,708,702,1,0,0,0,708,707,1,0,0,0,709,105,1,0,
		0,0,710,711,5,1,0,0,711,716,3,124,62,0,712,713,5,6,0,0,713,715,3,124,62,
		0,714,712,1,0,0,0,715,718,1,0,0,0,716,714,1,0,0,0,716,717,1,0,0,0,717,
		719,1,0,0,0,718,716,1,0,0,0,719,720,5,2,0,0,720,107,1,0,0,0,721,722,5,
		70,0,0,722,723,5,142,0,0,723,109,1,0,0,0,724,725,5,42,0,0,725,726,5,1,
		0,0,726,727,3,126,63,0,727,728,5,39,0,0,728,729,3,122,61,0,729,730,5,2,
		0,0,730,111,1,0,0,0,731,736,5,40,0,0,732,737,5,82,0,0,733,734,5,83,0,0,
		734,735,5,84,0,0,735,737,3,126,63,0,736,732,1,0,0,0,736,733,1,0,0,0,737,
		113,1,0,0,0,738,740,5,85,0,0,739,741,3,126,63,0,740,739,1,0,0,0,740,741,
		1,0,0,0,741,745,1,0,0,0,742,744,3,116,58,0,743,742,1,0,0,0,744,747,1,0,
		0,0,745,743,1,0,0,0,745,746,1,0,0,0,746,750,1,0,0,0,747,745,1,0,0,0,748,
		749,5,44,0,0,749,751,3,124,62,0,750,748,1,0,0,0,750,751,1,0,0,0,751,752,
		1,0,0,0,752,753,5,45,0,0,753,115,1,0,0,0,754,755,5,89,0,0,755,756,3,124,
		62,0,756,757,5,59,0,0,757,758,3,124,62,0,758,117,1,0,0,0,759,802,5,68,
		0,0,760,802,5,69,0,0,761,762,5,64,0,0,762,764,5,1,0,0,763,765,7,10,0,0,
		764,763,1,0,0,0,764,765,1,0,0,0,765,767,1,0,0,0,766,768,5,142,0,0,767,
		766,1,0,0,0,767,768,1,0,0,0,768,770,1,0,0,0,769,771,5,48,0,0,770,769,1,
		0,0,0,770,771,1,0,0,0,771,772,1,0,0,0,772,773,3,126,63,0,773,774,5,2,0,
		0,774,802,1,0,0,0,775,776,5,88,0,0,776,777,5,1,0,0,777,778,5,142,0,0,778,
		779,5,50,0,0,779,780,3,126,63,0,780,781,5,2,0,0,781,802,1,0,0,0,782,783,
		5,87,0,0,783,784,5,1,0,0,784,785,3,120,60,0,785,786,5,48,0,0,786,787,3,
		126,63,0,787,788,5,2,0,0,788,802,1,0,0,0,789,790,5,86,0,0,790,791,5,1,
		0,0,791,796,3,124,62,0,792,793,5,6,0,0,793,795,3,124,62,0,794,792,1,0,
		0,0,795,798,1,0,0,0,796,794,1,0,0,0,796,797,1,0,0,0,797,799,1,0,0,0,798,
		796,1,0,0,0,799,800,5,2,0,0,800,802,1,0,0,0,801,759,1,0,0,0,801,760,1,
		0,0,0,801,761,1,0,0,0,801,775,1,0,0,0,801,782,1,0,0,0,801,789,1,0,0,0,
		802,119,1,0,0,0,803,804,7,11,0,0,804,121,1,0,0,0,805,806,7,12,0,0,806,
		123,1,0,0,0,807,808,6,62,-1,0,808,839,3,128,64,0,809,839,3,110,55,0,810,
		839,3,118,59,0,811,839,3,10,5,0,812,839,3,114,57,0,813,839,3,104,52,0,
		814,815,5,1,0,0,815,816,3,124,62,0,816,817,5,2,0,0,817,839,1,0,0,0,818,
		819,5,1,0,0,819,820,3,26,13,0,820,821,5,2,0,0,821,839,1,0,0,0,822,823,
		7,13,0,0,823,839,3,124,62,15,824,825,5,46,0,0,825,826,5,1,0,0,826,827,
		3,26,13,0,827,828,5,2,0,0,828,839,1,0,0,0,829,830,3,126,63,0,830,831,7,
		14,0,0,831,832,7,15,0,0,832,833,5,1,0,0,833,834,3,26,13,0,834,835,5,2,
		0,0,835,839,1,0,0,0,836,837,5,53,0,0,837,839,3,124,62,1,838,807,1,0,0,
		0,838,809,1,0,0,0,838,810,1,0,0,0,838,811,1,0,0,0,838,812,1,0,0,0,838,
		813,1,0,0,0,838,814,1,0,0,0,838,818,1,0,0,0,838,822,1,0,0,0,838,824,1,
		0,0,0,838,829,1,0,0,0,838,836,1,0,0,0,839,902,1,0,0,0,840,841,10,17,0,
		0,841,842,5,26,0,0,842,901,3,124,62,18,843,844,10,14,0,0,844,845,7,16,
		0,0,845,901,3,124,62,15,846,847,10,13,0,0,847,848,7,17,0,0,848,901,3,124,
		62,14,849,850,10,12,0,0,850,851,7,13,0,0,851,901,3,124,62,13,852,853,10,
		11,0,0,853,854,7,14,0,0,854,901,3,124,62,12,855,857,10,10,0,0,856,858,
		5,53,0,0,857,856,1,0,0,0,857,858,1,0,0,0,858,859,1,0,0,0,859,860,5,52,
		0,0,860,901,3,124,62,11,861,863,10,9,0,0,862,864,5,53,0,0,863,862,1,0,
		0,0,863,864,1,0,0,0,864,865,1,0,0,0,865,866,5,125,0,0,866,867,5,60,0,0,
		867,901,3,124,62,10,868,870,10,7,0,0,869,871,5,53,0,0,870,869,1,0,0,0,
		870,871,1,0,0,0,871,872,1,0,0,0,872,873,5,93,0,0,873,874,3,126,63,0,874,
		875,5,38,0,0,875,876,3,124,62,8,876,901,1,0,0,0,877,878,10,4,0,0,878,879,
		5,38,0,0,879,901,3,124,62,5,880,881,10,3,0,0,881,882,5,57,0,0,882,901,
		3,124,62,4,883,884,10,24,0,0,884,901,3,112,56,0,885,886,10,16,0,0,886,
		887,5,29,0,0,887,901,3,122,61,0,888,890,10,8,0,0,889,891,5,53,0,0,890,
		889,1,0,0,0,890,891,1,0,0,0,891,892,1,0,0,0,892,893,5,50,0,0,893,901,3,
		106,53,0,894,895,10,2,0,0,895,897,5,51,0,0,896,898,5,53,0,0,897,896,1,
		0,0,0,897,898,1,0,0,0,898,899,1,0,0,0,899,901,5,54,0,0,900,840,1,0,0,0,
		900,843,1,0,0,0,900,846,1,0,0,0,900,849,1,0,0,0,900,852,1,0,0,0,900,855,
		1,0,0,0,900,861,1,0,0,0,900,868,1,0,0,0,900,877,1,0,0,0,900,880,1,0,0,
		0,900,883,1,0,0,0,900,885,1,0,0,0,900,888,1,0,0,0,900,894,1,0,0,0,901,
		904,1,0,0,0,902,900,1,0,0,0,902,903,1,0,0,0,903,125,1,0,0,0,904,902,1,
		0,0,0,905,906,6,63,-1,0,906,920,3,128,64,0,907,920,3,110,55,0,908,920,
		3,112,56,0,909,920,3,118,59,0,910,920,3,10,5,0,911,920,3,114,57,0,912,
		920,3,104,52,0,913,914,5,1,0,0,914,915,3,126,63,0,915,916,5,2,0,0,916,
		920,1,0,0,0,917,918,7,13,0,0,918,920,3,124,62,0,919,905,1,0,0,0,919,907,
		1,0,0,0,919,908,1,0,0,0,919,909,1,0,0,0,919,910,1,0,0,0,919,911,1,0,0,
		0,919,912,1,0,0,0,919,913,1,0,0,0,919,917,1,0,0,0,920,938,1,0,0,0,921,
		922,10,5,0,0,922,923,5,26,0,0,923,937,3,126,63,6,924,925,10,3,0,0,925,
		926,7,17,0,0,926,937,3,126,63,4,927,928,10,2,0,0,928,929,7,13,0,0,929,
		937,3,126,63,3,930,931,10,1,0,0,931,932,7,14,0,0,932,937,3,126,63,2,933,
		934,10,4,0,0,934,935,5,29,0,0,935,937,3,122,61,0,936,921,1,0,0,0,936,924,
		1,0,0,0,936,927,1,0,0,0,936,930,1,0,0,0,936,933,1,0,0,0,937,940,1,0,0,
		0,938,936,1,0,0,0,938,939,1,0,0,0,939,127,1,0,0,0,940,938,1,0,0,0,941,
		951,5,139,0,0,942,951,5,140,0,0,943,951,5,141,0,0,944,951,5,143,0,0,945,
		951,5,142,0,0,946,951,5,61,0,0,947,951,5,47,0,0,948,951,5,54,0,0,949,951,
		3,108,54,0,950,941,1,0,0,0,950,942,1,0,0,0,950,943,1,0,0,0,950,944,1,0,
		0,0,950,945,1,0,0,0,950,946,1,0,0,0,950,947,1,0,0,0,950,948,1,0,0,0,950,
		949,1,0,0,0,951,129,1,0,0,0,124,133,141,147,160,169,172,177,185,188,192,
		197,201,210,213,220,224,233,249,254,260,263,268,272,275,279,283,286,289,
		292,295,298,302,305,308,311,313,321,327,330,332,340,343,347,350,354,358,
		366,370,372,379,385,395,402,409,417,429,437,440,444,446,451,455,458,461,
		469,476,485,496,501,507,510,516,520,526,528,531,539,550,555,560,562,571,
		582,585,588,599,609,618,628,632,636,639,650,658,662,672,680,682,690,697,
		705,708,716,736,740,745,750,764,767,770,796,801,838,857,863,870,890,897,
		900,902,919,936,938,950
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace QueryCat.Backend.Parser
