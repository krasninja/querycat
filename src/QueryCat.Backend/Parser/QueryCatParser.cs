//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../QueryCat.Backend/Parser/QueryCatParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace QueryCat.Backend.Parser {
 #pragma warning disable 3021 
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class QueryCatParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LEFT_PAREN=1, RIGHT_PAREN=2, ASSIGN=3, ASSOCIATION=4, COLON=5, COMMA=6, 
		PERIOD=7, ELLIPSIS=8, SEMICOLON=9, QUESTION=10, LEFT_BRACKET=11, RIGHT_BRACKET=12, 
		LEFT_RIGHT_BRACKET=13, PIPE=14, AT_SIGN=15, EXCLAMATION_SIGN=16, DOLLAR_SIGN=17, 
		PLUS=18, MINUS=19, STAR=20, DIV=21, MOD=22, EQUALS=23, NOT_EQUALS=24, 
		GREATER=25, GREATER_OR_EQUALS=26, LESS=27, LESS_OR_EQUALS=28, CONCAT=29, 
		LESS_LESS=30, GREATER_GREATER=31, TYPECAST=32, ANY=33, BLOB=34, BOOL=35, 
		BOOLEAN=36, DECIMAL=37, FLOAT=38, INT=39, INT8=40, INTEGER=41, NUMERIC=42, 
		OBJECT=43, REAL=44, STRING=45, TEXT=46, TIMESTAMP=47, AND=48, AS=49, AT=50, 
		BEGIN=51, BY=52, CAST=53, DEFAULT=54, END=55, EXISTS=56, FALSE=57, FROM=58, 
		IN=59, IS=60, LIKE=61, LIKE_REGEX=62, LOOP=63, NOT=64, NULL=65, ON=66, 
		ONLY=67, OR=68, SOME=69, TO=70, TRUE=71, USING=72, VOID=73, TRIM=74, LEADING=75, 
		TRAILING=76, BOTH=77, CURRENT_DATE=78, CURRENT_TIMESTAMP=79, INTERVAL=80, 
		YEAR=81, DOY=82, DAYOFYEAR=83, MONTH=84, DOW=85, WEEKDAY=86, DAY=87, HOUR=88, 
		MINUTE=89, SECOND=90, MILLISECOND=91, LOCAL=92, TIME=93, ZONE=94, CASE=95, 
		COALESCE=96, EXTRACT=97, POSITION=98, WHEN=99, OCCURRENCES_REGEX=100, 
		SUBSTRING_REGEX=101, POSITION_REGEX=102, TRANSLATE_REGEX=103, ECHO=104, 
		ALL=105, ASC=106, BETWEEN=107, CURRENT=108, DESC=109, DISTINCT=110, EXCEPT=111, 
		FETCH=112, FIRST=113, FOLLOWING=114, FORMAT=115, FULL=116, GROUP=117, 
		HAVING=118, INNER=119, INTERSECT=120, INTO=121, JOIN=122, LAST=123, LEFT=124, 
		LIMIT=125, NEXT=126, NULLS=127, OFFSET=128, ORDER=129, OUTER=130, OVER=131, 
		PARTITION=132, PRECEDING=133, RECURSIVE=134, RIGHT=135, ROW=136, ROWS=137, 
		SELECT=138, SIMILAR=139, TOP=140, UNBOUNDED=141, UNION=142, VALUES=143, 
		WHERE=144, WINDOW=145, WITH=146, UPDATE=147, INSERT=148, DELETE=149, DECLARE=150, 
		SET=151, CALL=152, IF=153, THEN=154, ELSE=155, ELSEIF=156, WHILE=157, 
		FOR=158, BREAK=159, CONTINUE=160, TYPE=161, NO_QUOTES_IDENTIFIER=162, 
		QUOTES_IDENTIFIER=163, INTEGER_LITERAL=164, FLOAT_LITERAL=165, NUMERIC_LITERAL=166, 
		STRING_LITERAL=167, BOOLEAN_LITERAL=168, SINGLE_LINE_COMMENT=169, MULTILINE_COMMENT=170, 
		SPACES=171;
	public const int
		RULE_program = 0, RULE_programBody = 1, RULE_statement = 2, RULE_functionSignature = 3, 
		RULE_functionType = 4, RULE_functionArg = 5, RULE_functionCall = 6, RULE_functionCallArg = 7, 
		RULE_declareVariable = 8, RULE_setVariable = 9, RULE_selectStatement = 10, 
		RULE_selectOrderByClause = 11, RULE_selectSortSpecification = 12, RULE_selectAlias = 13, 
		RULE_selectQueryExpression = 14, RULE_selectQueryExpressionBody = 15, 
		RULE_selectQueryPrimary = 16, RULE_selectQuerySpecification = 17, RULE_selectList = 18, 
		RULE_selectExcept = 19, RULE_selectDistinctClause = 20, RULE_selectDistinctOnClause = 21, 
		RULE_selectWithClause = 22, RULE_selectWithElement = 23, RULE_selectWithColumnList = 24, 
		RULE_selectSublist = 25, RULE_selectTarget = 26, RULE_selectFromClause = 27, 
		RULE_selectTableReferenceList = 28, RULE_selectTableReference = 29, RULE_selectTableValuesRow = 30, 
		RULE_selectTableValues = 31, RULE_selectTablePrimary = 32, RULE_selectTableJoined = 33, 
		RULE_selectJoinType = 34, RULE_selectGroupBy = 35, RULE_selectHaving = 36, 
		RULE_selectSearchCondition = 37, RULE_selectWindowSpecification = 38, 
		RULE_selectWindowPartitionClause = 39, RULE_selectWindowOrderClause = 40, 
		RULE_selectWindow = 41, RULE_selectWindowDefinitionList = 42, RULE_selectOffsetClause = 43, 
		RULE_selectFetchFirstClause = 44, RULE_selectTopClause = 45, RULE_selectLimitClause = 46, 
		RULE_updateStatement = 47, RULE_updateSource = 48, RULE_updateSetClause = 49, 
		RULE_insertStatement = 50, RULE_insertToSource = 51, RULE_insertColumnsList = 52, 
		RULE_insertFromSource = 53, RULE_deleteStatement = 54, RULE_deleteFromSource = 55, 
		RULE_echoStatement = 56, RULE_callStatement = 57, RULE_ifStatement = 58, 
		RULE_ifCondition = 59, RULE_whileStatement = 60, RULE_forStatement = 61, 
		RULE_breakStatement = 62, RULE_continueStatement = 63, RULE_identifierSimple = 64, 
		RULE_identifier = 65, RULE_identifierSelector = 66, RULE_array = 67, RULE_intervalLiteral = 68, 
		RULE_blockExpression = 69, RULE_castOperand = 70, RULE_atTimeZone = 71, 
		RULE_caseExpression = 72, RULE_caseWhen = 73, RULE_standardFunction = 74, 
		RULE_dateTimeField = 75, RULE_type = 76, RULE_expression = 77, RULE_simpleExpression = 78, 
		RULE_literal = 79;
	public static readonly string[] ruleNames = {
		"program", "programBody", "statement", "functionSignature", "functionType", 
		"functionArg", "functionCall", "functionCallArg", "declareVariable", "setVariable", 
		"selectStatement", "selectOrderByClause", "selectSortSpecification", "selectAlias", 
		"selectQueryExpression", "selectQueryExpressionBody", "selectQueryPrimary", 
		"selectQuerySpecification", "selectList", "selectExcept", "selectDistinctClause", 
		"selectDistinctOnClause", "selectWithClause", "selectWithElement", "selectWithColumnList", 
		"selectSublist", "selectTarget", "selectFromClause", "selectTableReferenceList", 
		"selectTableReference", "selectTableValuesRow", "selectTableValues", "selectTablePrimary", 
		"selectTableJoined", "selectJoinType", "selectGroupBy", "selectHaving", 
		"selectSearchCondition", "selectWindowSpecification", "selectWindowPartitionClause", 
		"selectWindowOrderClause", "selectWindow", "selectWindowDefinitionList", 
		"selectOffsetClause", "selectFetchFirstClause", "selectTopClause", "selectLimitClause", 
		"updateStatement", "updateSource", "updateSetClause", "insertStatement", 
		"insertToSource", "insertColumnsList", "insertFromSource", "deleteStatement", 
		"deleteFromSource", "echoStatement", "callStatement", "ifStatement", "ifCondition", 
		"whileStatement", "forStatement", "breakStatement", "continueStatement", 
		"identifierSimple", "identifier", "identifierSelector", "array", "intervalLiteral", 
		"blockExpression", "castOperand", "atTimeZone", "caseExpression", "caseWhen", 
		"standardFunction", "dateTimeField", "type", "expression", "simpleExpression", 
		"literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "':='", "'=>'", "':'", "','", "'.'", "'...'", "';'", 
		"'?'", "'['", "']'", "'[]'", "'&>'", "'@'", "'!'", "'$'", "'+'", "'-'", 
		"'*'", "'/'", "'%'", "'='", "'<>'", "'>'", "'>='", "'<'", "'<='", "'||'", 
		"'<<'", "'>>'", "'::'", "'ANY'", "'BLOB'", "'BOOL'", "'BOOLEAN'", "'DECIMAL'", 
		"'FLOAT'", "'INT'", "'INT8'", "'INTEGER'", "'NUMERIC'", "'OBJECT'", "'REAL'", 
		"'STRING'", "'TEXT'", "'TIMESTAMP'", "'AND'", "'AS'", "'AT'", "'BEGIN'", 
		"'BY'", "'CAST'", "'DEFAULT'", "'END'", "'EXISTS'", "'FALSE'", "'FROM'", 
		"'IN'", "'IS'", "'LIKE'", "'LIKE_REGEX'", "'LOOP'", "'NOT'", "'NULL'", 
		"'ON'", "'ONLY'", "'OR'", "'SOME'", "'TO'", "'TRUE'", "'USING'", "'VOID'", 
		"'TRIM'", "'LEADING'", "'TRAILING'", "'BOTH'", "'CURRENT_DATE'", "'CURRENT_TIMESTAMP'", 
		"'INTERVAL'", "'YEAR'", "'DOY'", "'DAYOFYEAR'", "'MONTH'", "'DOW'", "'WEEKDAY'", 
		"'DAY'", "'HOUR'", "'MINUTE'", "'SECOND'", "'MILLISECOND'", "'LOCAL'", 
		"'TIME'", "'ZONE'", "'CASE'", "'COALESCE'", "'EXTRACT'", "'POSITION'", 
		"'WHEN'", "'OCCURRENCES_REGEX'", "'SUBSTRING_REGEX'", "'POSITION_REGEX'", 
		"'TRANSLATE_REGEX'", "'ECHO'", "'ALL'", "'ASC'", "'BETWEEN'", "'CURRENT'", 
		"'DESC'", "'DISTINCT'", "'EXCEPT'", "'FETCH'", "'FIRST'", "'FOLLOWING'", 
		"'FORMAT'", "'FULL'", "'GROUP'", "'HAVING'", "'INNER'", "'INTERSECT'", 
		"'INTO'", "'JOIN'", "'LAST'", "'LEFT'", "'LIMIT'", "'NEXT'", "'NULLS'", 
		"'OFFSET'", "'ORDER'", "'OUTER'", "'OVER'", "'PARTITION'", "'PRECEDING'", 
		"'RECURSIVE'", "'RIGHT'", "'ROW'", "'ROWS'", "'SELECT'", "'SIMILAR'", 
		"'TOP'", "'UNBOUNDED'", "'UNION'", "'VALUES'", "'WHERE'", "'WINDOW'", 
		"'WITH'", "'UPDATE'", "'INSERT'", "'DELETE'", "'DECLARE'", "'SET'", "'CALL'", 
		"'IF'", "'THEN'", "'ELSE'", "'ELSEIF'", "'WHILE'", "'FOR'", "'BREAK'", 
		"'CONTINUE'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LEFT_PAREN", "RIGHT_PAREN", "ASSIGN", "ASSOCIATION", "COLON", "COMMA", 
		"PERIOD", "ELLIPSIS", "SEMICOLON", "QUESTION", "LEFT_BRACKET", "RIGHT_BRACKET", 
		"LEFT_RIGHT_BRACKET", "PIPE", "AT_SIGN", "EXCLAMATION_SIGN", "DOLLAR_SIGN", 
		"PLUS", "MINUS", "STAR", "DIV", "MOD", "EQUALS", "NOT_EQUALS", "GREATER", 
		"GREATER_OR_EQUALS", "LESS", "LESS_OR_EQUALS", "CONCAT", "LESS_LESS", 
		"GREATER_GREATER", "TYPECAST", "ANY", "BLOB", "BOOL", "BOOLEAN", "DECIMAL", 
		"FLOAT", "INT", "INT8", "INTEGER", "NUMERIC", "OBJECT", "REAL", "STRING", 
		"TEXT", "TIMESTAMP", "AND", "AS", "AT", "BEGIN", "BY", "CAST", "DEFAULT", 
		"END", "EXISTS", "FALSE", "FROM", "IN", "IS", "LIKE", "LIKE_REGEX", "LOOP", 
		"NOT", "NULL", "ON", "ONLY", "OR", "SOME", "TO", "TRUE", "USING", "VOID", 
		"TRIM", "LEADING", "TRAILING", "BOTH", "CURRENT_DATE", "CURRENT_TIMESTAMP", 
		"INTERVAL", "YEAR", "DOY", "DAYOFYEAR", "MONTH", "DOW", "WEEKDAY", "DAY", 
		"HOUR", "MINUTE", "SECOND", "MILLISECOND", "LOCAL", "TIME", "ZONE", "CASE", 
		"COALESCE", "EXTRACT", "POSITION", "WHEN", "OCCURRENCES_REGEX", "SUBSTRING_REGEX", 
		"POSITION_REGEX", "TRANSLATE_REGEX", "ECHO", "ALL", "ASC", "BETWEEN", 
		"CURRENT", "DESC", "DISTINCT", "EXCEPT", "FETCH", "FIRST", "FOLLOWING", 
		"FORMAT", "FULL", "GROUP", "HAVING", "INNER", "INTERSECT", "INTO", "JOIN", 
		"LAST", "LEFT", "LIMIT", "NEXT", "NULLS", "OFFSET", "ORDER", "OUTER", 
		"OVER", "PARTITION", "PRECEDING", "RECURSIVE", "RIGHT", "ROW", "ROWS", 
		"SELECT", "SIMILAR", "TOP", "UNBOUNDED", "UNION", "VALUES", "WHERE", "WINDOW", 
		"WITH", "UPDATE", "INSERT", "DELETE", "DECLARE", "SET", "CALL", "IF", 
		"THEN", "ELSE", "ELSEIF", "WHILE", "FOR", "BREAK", "CONTINUE", "TYPE", 
		"NO_QUOTES_IDENTIFIER", "QUOTES_IDENTIFIER", "INTEGER_LITERAL", "FLOAT_LITERAL", 
		"NUMERIC_LITERAL", "STRING_LITERAL", "BOOLEAN_LITERAL", "SINGLE_LINE_COMMENT", 
		"MULTILINE_COMMENT", "SPACES"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "QueryCatParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static QueryCatParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public QueryCatParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public QueryCatParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProgramBodyContext programBody() {
			return GetRuleContext<ProgramBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(QueryCatParser.Eof, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			programBody();
			State = 161;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(QueryCatParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(QueryCatParser.SEMICOLON, i);
		}
		public ProgramBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramBodyContext programBody() {
		ProgramBodyContext _localctx = new ProgramBodyContext(Context, State);
		EnterRule(_localctx, 2, RULE_programBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 163;
				Match(SEMICOLON);
				}
				}
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 169;
			statement();
			State = 174;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 170;
					Match(SEMICOLON);
					State = 171;
					statement();
					}
					} 
				}
				State = 176;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 177;
				Match(SEMICOLON);
				}
				}
				State = 182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StatementSelectExpressionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public StatementSelectExpressionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementSelectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementEchoContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public EchoStatementContext echoStatement() {
			return GetRuleContext<EchoStatementContext>(0);
		}
		public StatementEchoContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementEcho(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementWhileContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public StatementWhileContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementExpressionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementExpressionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementContinueContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		public StatementContinueContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementContinue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementDeleteExpressionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		public StatementDeleteExpressionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementDeleteExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementUpdateExpressionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public UpdateStatementContext updateStatement() {
			return GetRuleContext<UpdateStatementContext>(0);
		}
		public StatementUpdateExpressionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementUpdateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementIfContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public StatementIfContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementIf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementForContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public StatementForContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementFor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementBreakContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		public StatementBreakContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBreak(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementDeclareVariableContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclareVariableContext declareVariable() {
			return GetRuleContext<DeclareVariableContext>(0);
		}
		public StatementDeclareVariableContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementDeclareVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementCallContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallStatementContext callStatement() {
			return GetRuleContext<CallStatementContext>(0);
		}
		public StatementCallContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementFunctionCallContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public StatementFunctionCallContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementSetVariableContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetVariableContext setVariable() {
			return GetRuleContext<SetVariableContext>(0);
		}
		public StatementSetVariableContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementSetVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementInsertExpressionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public InsertStatementContext insertStatement() {
			return GetRuleContext<InsertStatementContext>(0);
		}
		public StatementInsertExpressionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementInsertExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 198;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new StatementFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 183;
				functionCall();
				}
				break;
			case 2:
				_localctx = new StatementDeclareVariableContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 184;
				declareVariable();
				}
				break;
			case 3:
				_localctx = new StatementSetVariableContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 185;
				setVariable();
				}
				break;
			case 4:
				_localctx = new StatementSelectExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 186;
				selectStatement();
				}
				break;
			case 5:
				_localctx = new StatementUpdateExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 187;
				updateStatement();
				}
				break;
			case 6:
				_localctx = new StatementInsertExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 188;
				insertStatement();
				}
				break;
			case 7:
				_localctx = new StatementDeleteExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 189;
				deleteStatement();
				}
				break;
			case 8:
				_localctx = new StatementEchoContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 190;
				echoStatement();
				}
				break;
			case 9:
				_localctx = new StatementCallContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 191;
				callStatement();
				}
				break;
			case 10:
				_localctx = new StatementIfContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 192;
				ifStatement();
				}
				break;
			case 11:
				_localctx = new StatementWhileContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 193;
				whileStatement();
				}
				break;
			case 12:
				_localctx = new StatementForContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 194;
				forStatement();
				}
				break;
			case 13:
				_localctx = new StatementBreakContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 195;
				breakStatement();
				}
				break;
			case 14:
				_localctx = new StatementContinueContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 196;
				continueStatement();
				}
				break;
			case 15:
				_localctx = new StatementExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 197;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSignatureContext : ParserRuleContext {
		public IdentifierSimpleContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(QueryCatParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSimpleContext identifierSimple() {
			return GetRuleContext<IdentifierSimpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext[] functionArg() {
			return GetRuleContexts<FunctionArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext functionArg(int i) {
			return GetRuleContext<FunctionArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(QueryCatParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public FunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSignatureContext functionSignature() {
		FunctionSignatureContext _localctx = new FunctionSignatureContext(Context, State);
		EnterRule(_localctx, 6, RULE_functionSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			_localctx.name = identifierSimple();
			State = 201;
			Match(LEFT_PAREN);
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELLIPSIS || _la==AT_SIGN || _la==NO_QUOTES_IDENTIFIER || _la==QUOTES_IDENTIFIER) {
				{
				State = 202;
				functionArg();
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 203;
					Match(COMMA);
					State = 204;
					functionArg();
					}
					}
					State = 209;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 212;
			Match(RIGHT_PAREN);
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 213;
				Match(COLON);
				State = 214;
				functionType();
				}
			}

			State = 217;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(QueryCatParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSimpleContext identifierSimple() {
			return GetRuleContext<IdentifierSimpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(QueryCatParser.GREATER, 0); }
		public FunctionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeContext functionType() {
		FunctionTypeContext _localctx = new FunctionTypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			type();
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LESS) {
				{
				State = 220;
				Match(LESS);
				State = 221;
				identifierSimple();
				State = 222;
				Match(GREATER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgContext : ParserRuleContext {
		public IToken variadic;
		public IToken optional;
		public IToken isArray;
		public LiteralContext @default;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSimpleContext identifierSimple() {
			return GetRuleContext<IdentifierSimpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(QueryCatParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSIS() { return GetToken(QueryCatParser.ELLIPSIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(QueryCatParser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_RIGHT_BRACKET() { return GetToken(QueryCatParser.LEFT_RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(QueryCatParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(QueryCatParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(QueryCatParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgContext functionArg() {
		FunctionArgContext _localctx = new FunctionArgContext(Context, State);
		EnterRule(_localctx, 10, RULE_functionArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELLIPSIS) {
				{
				State = 226;
				_localctx.variadic = Match(ELLIPSIS);
				}
			}

			State = 229;
			identifierSimple();
			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUESTION) {
				{
				State = 230;
				_localctx.optional = Match(QUESTION);
				}
			}

			State = 233;
			Match(COLON);
			State = 234;
			functionType();
			State = 236;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_RIGHT_BRACKET) {
				{
				State = 235;
				_localctx.isArray = Match(LEFT_RIGHT_BRACKET);
				}
			}

			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18014398517870600L) != 0)) {
				{
				State = 238;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 18014398517870600L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 239;
				_localctx.@default = literal();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSimpleContext identifierSimple() {
			return GetRuleContext<IdentifierSimpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallArgContext[] functionCallArg() {
			return GetRuleContexts<FunctionCallArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallArgContext functionCallArg(int i) {
			return GetRuleContext<FunctionCallArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(QueryCatParser.STAR, 0); }
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 12, RULE_functionCall);
		int _la;
		try {
			State = 261;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 242;
				identifierSimple();
				State = 243;
				Match(LEFT_PAREN);
				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 227431781183029250L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 1063004521603L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & 63L) != 0)) {
					{
					State = 244;
					functionCallArg();
					State = 249;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 245;
						Match(COMMA);
						State = 246;
						functionCallArg();
						}
						}
						State = 251;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 254;
				Match(RIGHT_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 256;
				identifierSimple();
				State = 257;
				Match(LEFT_PAREN);
				State = 258;
				Match(STAR);
				State = 259;
				Match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSimpleContext identifierSimple() {
			return GetRuleContext<IdentifierSimpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSOCIATION() { return GetToken(QueryCatParser.ASSOCIATION, 0); }
		public FunctionCallArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallArgContext functionCallArg() {
		FunctionCallArgContext _localctx = new FunctionCallArgContext(Context, State);
		EnterRule(_localctx, 14, RULE_functionCallArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 263;
				identifierSimple();
				State = 264;
				Match(ASSOCIATION);
				}
				break;
			}
			State = 268;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(QueryCatParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSimpleContext identifierSimple() {
			return GetRuleContext<IdentifierSimpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(QueryCatParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public DeclareVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareVariableContext declareVariable() {
		DeclareVariableContext _localctx = new DeclareVariableContext(Context, State);
		EnterRule(_localctx, 16, RULE_declareVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			Match(DECLARE);
			State = 271;
			identifierSimple();
			State = 274;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 272;
				Match(ASSIGN);
				State = 273;
				statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(QueryCatParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(QueryCatParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public SetVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetVariableContext setVariable() {
		SetVariableContext _localctx = new SetVariableContext(Context, State);
		EnterRule(_localctx, 18, RULE_setVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			Match(SET);
			State = 277;
			identifier();
			State = 278;
			Match(ASSIGN);
			State = 279;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementContext selectStatement() {
		SelectStatementContext _localctx = new SelectStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_selectStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			selectQueryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectOrderByClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(QueryCatParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(QueryCatParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectSortSpecificationContext[] selectSortSpecification() {
			return GetRuleContexts<SelectSortSpecificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSortSpecificationContext selectSortSpecification(int i) {
			return GetRuleContext<SelectSortSpecificationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectOrderByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectOrderByClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectOrderByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectOrderByClauseContext selectOrderByClause() {
		SelectOrderByClauseContext _localctx = new SelectOrderByClauseContext(Context, State);
		EnterRule(_localctx, 22, RULE_selectOrderByClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			Match(ORDER);
			State = 284;
			Match(BY);
			State = 285;
			selectSortSpecification();
			State = 290;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 286;
					Match(COMMA);
					State = 287;
					selectSortSpecification();
					}
					} 
				}
				State = 292;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectSortSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(QueryCatParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(QueryCatParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS() { return GetToken(QueryCatParser.NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(QueryCatParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(QueryCatParser.LAST, 0); }
		public SelectSortSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectSortSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSortSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectSortSpecificationContext selectSortSpecification() {
		SelectSortSpecificationContext _localctx = new SelectSortSpecificationContext(Context, State);
		EnterRule(_localctx, 24, RULE_selectSortSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			expression(0);
			State = 295;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 294;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 301;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				{
				State = 297;
				Match(NULLS);
				State = 298;
				Match(FIRST);
				}
				}
				break;
			case 2:
				{
				{
				State = 299;
				Match(NULLS);
				State = 300;
				Match(LAST);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectAliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSimpleContext identifierSimple() {
			return GetRuleContext<IdentifierSimpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(QueryCatParser.AS, 0); }
		public SelectAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectAliasContext selectAlias() {
		SelectAliasContext _localctx = new SelectAliasContext(Context, State);
		EnterRule(_localctx, 26, RULE_selectAlias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 303;
				Match(AS);
				}
			}

			State = 308;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT_SIGN:
			case NO_QUOTES_IDENTIFIER:
			case QUOTES_IDENTIFIER:
				{
				State = 306;
				identifierSimple();
				}
				break;
			case STRING_LITERAL:
				{
				State = 307;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectQueryExpressionContext : ParserRuleContext {
		public SelectQueryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectQueryExpression; } }
	 
		public SelectQueryExpressionContext() { }
		public virtual void CopyFrom(SelectQueryExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectQueryExpressionFullContext : SelectQueryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionBodyContext selectQueryExpressionBody() {
			return GetRuleContext<SelectQueryExpressionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectWithClauseContext selectWithClause() {
			return GetRuleContext<SelectWithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectOrderByClauseContext selectOrderByClause() {
			return GetRuleContext<SelectOrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectLimitClauseContext selectLimitClause() {
			return GetRuleContext<SelectLimitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectOffsetClauseContext selectOffsetClause() {
			return GetRuleContext<SelectOffsetClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectFetchFirstClauseContext selectFetchFirstClause() {
			return GetRuleContext<SelectFetchFirstClauseContext>(0);
		}
		public SelectQueryExpressionFullContext(SelectQueryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQueryExpressionFull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectQueryExpressionContext selectQueryExpression() {
		SelectQueryExpressionContext _localctx = new SelectQueryExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_selectQueryExpression);
		try {
			_localctx = new SelectQueryExpressionFullContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 310;
				selectWithClause();
				}
				break;
			}
			State = 313;
			selectQueryExpressionBody(0);
			State = 315;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 314;
				selectOrderByClause();
				}
				break;
			}
			State = 318;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 317;
				selectLimitClause();
				}
				break;
			}
			State = 321;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 320;
				selectOffsetClause();
				}
				break;
			}
			State = 324;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 323;
				selectFetchFirstClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectQueryExpressionBodyContext : ParserRuleContext {
		public SelectQueryExpressionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectQueryExpressionBody; } }
	 
		public SelectQueryExpressionBodyContext() { }
		public virtual void CopyFrom(SelectQueryExpressionBodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectQueryExpressionBodyUnionExceptContext : SelectQueryExpressionBodyContext {
		public SelectQueryExpressionBodyContext left;
		public SelectQueryExpressionBodyContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionBodyContext[] selectQueryExpressionBody() {
			return GetRuleContexts<SelectQueryExpressionBodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionBodyContext selectQueryExpressionBody(int i) {
			return GetRuleContext<SelectQueryExpressionBodyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(QueryCatParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(QueryCatParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(QueryCatParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(QueryCatParser.ALL, 0); }
		public SelectQueryExpressionBodyUnionExceptContext(SelectQueryExpressionBodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQueryExpressionBodyUnionExcept(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectQueryExpressionBodyIntersectContext : SelectQueryExpressionBodyContext {
		public SelectQueryExpressionBodyContext left;
		public SelectQueryExpressionBodyContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT() { return GetToken(QueryCatParser.INTERSECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionBodyContext[] selectQueryExpressionBody() {
			return GetRuleContexts<SelectQueryExpressionBodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionBodyContext selectQueryExpressionBody(int i) {
			return GetRuleContext<SelectQueryExpressionBodyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(QueryCatParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(QueryCatParser.ALL, 0); }
		public SelectQueryExpressionBodyIntersectContext(SelectQueryExpressionBodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQueryExpressionBodyIntersect(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectQueryExpressionBodyPrimaryContext : SelectQueryExpressionBodyContext {
		public SelectQueryPrimaryContext left;
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryPrimaryContext selectQueryPrimary() {
			return GetRuleContext<SelectQueryPrimaryContext>(0);
		}
		public SelectQueryExpressionBodyPrimaryContext(SelectQueryExpressionBodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQueryExpressionBodyPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectQueryExpressionBodyContext selectQueryExpressionBody() {
		return selectQueryExpressionBody(0);
	}

	private SelectQueryExpressionBodyContext selectQueryExpressionBody(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SelectQueryExpressionBodyContext _localctx = new SelectQueryExpressionBodyContext(Context, _parentState);
		SelectQueryExpressionBodyContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_selectQueryExpressionBody, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SelectQueryExpressionBodyPrimaryContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 327;
			((SelectQueryExpressionBodyPrimaryContext)_localctx).left = selectQueryPrimary();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 343;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 341;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
					case 1:
						{
						_localctx = new SelectQueryExpressionBodyIntersectContext(new SelectQueryExpressionBodyContext(_parentctx, _parentState));
						((SelectQueryExpressionBodyIntersectContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_selectQueryExpressionBody);
						State = 329;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 330;
						Match(INTERSECT);
						State = 332;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==ALL || _la==DISTINCT) {
							{
							State = 331;
							_la = TokenStream.LA(1);
							if ( !(_la==ALL || _la==DISTINCT) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
						}

						State = 334;
						((SelectQueryExpressionBodyIntersectContext)_localctx).right = selectQueryExpressionBody(3);
						}
						break;
					case 2:
						{
						_localctx = new SelectQueryExpressionBodyUnionExceptContext(new SelectQueryExpressionBodyContext(_parentctx, _parentState));
						((SelectQueryExpressionBodyUnionExceptContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_selectQueryExpressionBody);
						State = 335;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 336;
						_la = TokenStream.LA(1);
						if ( !(_la==EXCEPT || _la==UNION) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 338;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==ALL || _la==DISTINCT) {
							{
							State = 337;
							_la = TokenStream.LA(1);
							if ( !(_la==ALL || _la==DISTINCT) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
						}

						State = 340;
						((SelectQueryExpressionBodyUnionExceptContext)_localctx).right = selectQueryExpressionBody(2);
						}
						break;
					}
					} 
				}
				State = 345;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SelectQueryPrimaryContext : ParserRuleContext {
		public SelectQueryPrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectQueryPrimary; } }
	 
		public SelectQueryPrimaryContext() { }
		public virtual void CopyFrom(SelectQueryPrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectQueryPrimaryNoParensContext : SelectQueryPrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectQuerySpecificationContext selectQuerySpecification() {
			return GetRuleContext<SelectQuerySpecificationContext>(0);
		}
		public SelectQueryPrimaryNoParensContext(SelectQueryPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQueryPrimaryNoParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectQueryPrimaryParensContext : SelectQueryPrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		public SelectQueryPrimaryParensContext(SelectQueryPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQueryPrimaryParens(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectQueryPrimaryContext selectQueryPrimary() {
		SelectQueryPrimaryContext _localctx = new SelectQueryPrimaryContext(Context, State);
		EnterRule(_localctx, 32, RULE_selectQueryPrimary);
		try {
			State = 351;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
			case WITH:
				_localctx = new SelectQueryPrimaryNoParensContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 346;
				selectQuerySpecification();
				}
				break;
			case LEFT_PAREN:
				_localctx = new SelectQueryPrimaryParensContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 347;
				Match(LEFT_PAREN);
				State = 348;
				selectQueryExpression();
				State = 349;
				Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectQuerySpecificationContext : ParserRuleContext {
		public SelectQuerySpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectQuerySpecification; } }
	 
		public SelectQuerySpecificationContext() { }
		public virtual void CopyFrom(SelectQuerySpecificationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectQuerySpecificationFullContext : SelectQuerySpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(QueryCatParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectListContext selectList() {
			return GetRuleContext<SelectListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectWithClauseContext selectWithClause() {
			return GetRuleContext<SelectWithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTopClauseContext selectTopClause() {
			return GetRuleContext<SelectTopClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectDistinctClauseContext selectDistinctClause() {
			return GetRuleContext<SelectDistinctClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectExceptContext selectExcept() {
			return GetRuleContext<SelectExceptContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTargetContext selectTarget() {
			return GetRuleContext<SelectTargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectFromClauseContext selectFromClause() {
			return GetRuleContext<SelectFromClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectWindowContext selectWindow() {
			return GetRuleContext<SelectWindowContext>(0);
		}
		public SelectQuerySpecificationFullContext(SelectQuerySpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQuerySpecificationFull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectQuerySpecificationContext selectQuerySpecification() {
		SelectQuerySpecificationContext _localctx = new SelectQuerySpecificationContext(Context, State);
		EnterRule(_localctx, 34, RULE_selectQuerySpecification);
		int _la;
		try {
			_localctx = new SelectQuerySpecificationFullContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 353;
				selectWithClause();
				}
			}

			State = 356;
			Match(SELECT);
			State = 358;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TOP) {
				{
				State = 357;
				selectTopClause();
				}
			}

			State = 361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				State = 360;
				selectDistinctClause();
				}
			}

			State = 363;
			selectList();
			State = 365;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 364;
				selectExcept();
				}
				break;
			}
			State = 368;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 367;
				selectTarget();
				}
				break;
			}
			State = 371;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 370;
				selectFromClause();
				}
				break;
			}
			State = 374;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 373;
				selectWindow();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectSublistContext[] selectSublist() {
			return GetRuleContexts<SelectSublistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSublistContext selectSublist(int i) {
			return GetRuleContext<SelectSublistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectListContext selectList() {
		SelectListContext _localctx = new SelectListContext(Context, State);
		EnterRule(_localctx, 36, RULE_selectList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			selectSublist();
			State = 381;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 377;
					Match(COMMA);
					State = 378;
					selectSublist();
					}
					} 
				}
				State = 383;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectExceptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(QueryCatParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectExceptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectExcept; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectExcept(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectExceptContext selectExcept() {
		SelectExceptContext _localctx = new SelectExceptContext(Context, State);
		EnterRule(_localctx, 38, RULE_selectExcept);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 384;
			Match(EXCEPT);
			State = 385;
			identifier();
			State = 390;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 386;
					Match(COMMA);
					State = 387;
					identifier();
					}
					} 
				}
				State = 392;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectDistinctClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(QueryCatParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(QueryCatParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectDistinctOnClauseContext selectDistinctOnClause() {
			return GetRuleContext<SelectDistinctOnClauseContext>(0);
		}
		public SelectDistinctClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectDistinctClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectDistinctClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectDistinctClauseContext selectDistinctClause() {
		SelectDistinctClauseContext _localctx = new SelectDistinctClauseContext(Context, State);
		EnterRule(_localctx, 40, RULE_selectDistinctClause);
		try {
			State = 396;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 393;
				Match(ALL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 394;
				Match(DISTINCT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 395;
				selectDistinctOnClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectDistinctOnClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(QueryCatParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(QueryCatParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext[] simpleExpression() {
			return GetRuleContexts<SimpleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression(int i) {
			return GetRuleContext<SimpleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectDistinctOnClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectDistinctOnClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectDistinctOnClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectDistinctOnClauseContext selectDistinctOnClause() {
		SelectDistinctOnClauseContext _localctx = new SelectDistinctOnClauseContext(Context, State);
		EnterRule(_localctx, 42, RULE_selectDistinctOnClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398;
			Match(DISTINCT);
			State = 399;
			Match(ON);
			State = 400;
			Match(LEFT_PAREN);
			State = 401;
			simpleExpression(0);
			State = 406;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 402;
				Match(COMMA);
				State = 403;
				simpleExpression(0);
				}
				}
				State = 408;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 409;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectWithClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(QueryCatParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectWithElementContext[] selectWithElement() {
			return GetRuleContexts<SelectWithElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectWithElementContext selectWithElement(int i) {
			return GetRuleContext<SelectWithElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(QueryCatParser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectWithClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectWithClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectWithClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectWithClauseContext selectWithClause() {
		SelectWithClauseContext _localctx = new SelectWithClauseContext(Context, State);
		EnterRule(_localctx, 44, RULE_selectWithClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 411;
			Match(WITH);
			State = 413;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RECURSIVE) {
				{
				State = 412;
				Match(RECURSIVE);
				}
			}

			State = 415;
			selectWithElement();
			State = 420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 416;
				Match(COMMA);
				State = 417;
				selectWithElement();
				}
				}
				State = 422;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectWithElementContext : ParserRuleContext {
		public IdentifierSimpleContext name;
		public SelectQueryExpressionContext query;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(QueryCatParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LEFT_PAREN() { return GetTokens(QueryCatParser.LEFT_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN(int i) {
			return GetToken(QueryCatParser.LEFT_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RIGHT_PAREN() { return GetTokens(QueryCatParser.RIGHT_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN(int i) {
			return GetToken(QueryCatParser.RIGHT_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSimpleContext identifierSimple() {
			return GetRuleContext<IdentifierSimpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectWithColumnListContext selectWithColumnList() {
			return GetRuleContext<SelectWithColumnListContext>(0);
		}
		public SelectWithElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectWithElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectWithElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectWithElementContext selectWithElement() {
		SelectWithElementContext _localctx = new SelectWithElementContext(Context, State);
		EnterRule(_localctx, 46, RULE_selectWithElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423;
			_localctx.name = identifierSimple();
			State = 428;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 424;
				Match(LEFT_PAREN);
				State = 425;
				selectWithColumnList();
				State = 426;
				Match(RIGHT_PAREN);
				}
			}

			State = 430;
			Match(AS);
			State = 431;
			Match(LEFT_PAREN);
			State = 432;
			_localctx.query = selectQueryExpression();
			State = 433;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectWithColumnListContext : ParserRuleContext {
		public IdentifierContext name;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectWithColumnListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectWithColumnList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectWithColumnList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectWithColumnListContext selectWithColumnList() {
		SelectWithColumnListContext _localctx = new SelectWithColumnListContext(Context, State);
		EnterRule(_localctx, 48, RULE_selectWithColumnList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435;
			_localctx.name = identifier();
			State = 440;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 436;
				Match(COMMA);
				State = 437;
				_localctx.name = identifier();
				}
				}
				State = 442;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectSublistContext : ParserRuleContext {
		public SelectSublistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectSublist; } }
	 
		public SelectSublistContext() { }
		public virtual void CopyFrom(SelectSublistContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectSublistExpressionContext : SelectSublistContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public SelectSublistExpressionContext(SelectSublistContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSublistExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectSublistWindowContext : SelectSublistContext {
		public IdentifierSimpleContext windowName;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(QueryCatParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectWindowSpecificationContext selectWindowSpecification() {
			return GetRuleContext<SelectWindowSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSimpleContext identifierSimple() {
			return GetRuleContext<IdentifierSimpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public SelectSublistWindowContext(SelectSublistContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSublistWindow(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectSublistAllContext : SelectSublistContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(QueryCatParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSimpleContext identifierSimple() {
			return GetRuleContext<IdentifierSimpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(QueryCatParser.PERIOD, 0); }
		public SelectSublistAllContext(SelectSublistContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSublistAll(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectSublistContext selectSublist() {
		SelectSublistContext _localctx = new SelectSublistContext(Context, State);
		EnterRule(_localctx, 50, RULE_selectSublist);
		int _la;
		try {
			State = 462;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				_localctx = new SelectSublistAllContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 446;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT_SIGN || _la==NO_QUOTES_IDENTIFIER || _la==QUOTES_IDENTIFIER) {
					{
					State = 443;
					identifierSimple();
					State = 444;
					Match(PERIOD);
					}
				}

				State = 448;
				Match(STAR);
				}
				break;
			case 2:
				_localctx = new SelectSublistWindowContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 449;
				functionCall();
				State = 450;
				Match(OVER);
				State = 453;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AT_SIGN:
				case NO_QUOTES_IDENTIFIER:
				case QUOTES_IDENTIFIER:
					{
					State = 451;
					((SelectSublistWindowContext)_localctx).windowName = identifierSimple();
					}
					break;
				case LEFT_PAREN:
					{
					State = 452;
					selectWindowSpecification();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 456;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
				case 1:
					{
					State = 455;
					selectAlias();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new SelectSublistExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 458;
				expression(0);
				State = 460;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
				case 1:
					{
					State = 459;
					selectAlias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTargetContext : ParserRuleContext {
		public FunctionCallContext into;
		public IToken uri;
		public IToken dash;
		public FunctionCallContext format;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(QueryCatParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext[] functionCall() {
			return GetRuleContexts<FunctionCallContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall(int i) {
			return GetRuleContext<FunctionCallContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(QueryCatParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(QueryCatParser.FORMAT, 0); }
		public SelectTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTarget; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTarget(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTargetContext selectTarget() {
		SelectTargetContext _localctx = new SelectTargetContext(Context, State);
		EnterRule(_localctx, 52, RULE_selectTarget);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			Match(INTO);
			State = 468;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT_SIGN:
			case NO_QUOTES_IDENTIFIER:
			case QUOTES_IDENTIFIER:
				{
				State = 465;
				_localctx.into = functionCall();
				}
				break;
			case STRING_LITERAL:
				{
				State = 466;
				_localctx.uri = Match(STRING_LITERAL);
				}
				break;
			case MINUS:
				{
				State = 467;
				_localctx.dash = Match(MINUS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 472;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 470;
				Match(FORMAT);
				State = 471;
				_localctx.format = functionCall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectFromClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableReferenceListContext selectTableReferenceList() {
			return GetRuleContext<SelectTableReferenceListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSearchConditionContext selectSearchCondition() {
			return GetRuleContext<SelectSearchConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectGroupByContext selectGroupBy() {
			return GetRuleContext<SelectGroupByContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectHavingContext selectHaving() {
			return GetRuleContext<SelectHavingContext>(0);
		}
		public SelectFromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectFromClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectFromClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectFromClauseContext selectFromClause() {
		SelectFromClauseContext _localctx = new SelectFromClauseContext(Context, State);
		EnterRule(_localctx, 54, RULE_selectFromClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 474;
			selectTableReferenceList();
			State = 476;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 475;
				selectSearchCondition();
				}
				break;
			}
			State = 479;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				State = 478;
				selectGroupBy();
				}
				break;
			}
			State = 482;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 481;
				selectHaving();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTableReferenceListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(QueryCatParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableReferenceContext[] selectTableReference() {
			return GetRuleContexts<SelectTableReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableReferenceContext selectTableReference(int i) {
			return GetRuleContext<SelectTableReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectTableReferenceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTableReferenceList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTableReferenceList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTableReferenceListContext selectTableReferenceList() {
		SelectTableReferenceListContext _localctx = new SelectTableReferenceListContext(Context, State);
		EnterRule(_localctx, 56, RULE_selectTableReferenceList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 484;
			Match(FROM);
			State = 485;
			selectTableReference();
			State = 490;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 486;
					Match(COMMA);
					State = 487;
					selectTableReference();
					}
					} 
				}
				State = 492;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTableReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectTablePrimaryContext selectTablePrimary() {
			return GetRuleContext<SelectTablePrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableJoinedContext[] selectTableJoined() {
			return GetRuleContexts<SelectTableJoinedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableJoinedContext selectTableJoined(int i) {
			return GetRuleContext<SelectTableJoinedContext>(i);
		}
		public SelectTableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTableReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTableReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTableReferenceContext selectTableReference() {
		SelectTableReferenceContext _localctx = new SelectTableReferenceContext(Context, State);
		EnterRule(_localctx, 58, RULE_selectTableReference);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 493;
			selectTablePrimary();
			State = 497;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 494;
					selectTableJoined();
					}
					} 
				}
				State = 499;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTableValuesRowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext[] simpleExpression() {
			return GetRuleContexts<SimpleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression(int i) {
			return GetRuleContext<SimpleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectTableValuesRowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTableValuesRow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTableValuesRow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTableValuesRowContext selectTableValuesRow() {
		SelectTableValuesRowContext _localctx = new SelectTableValuesRowContext(Context, State);
		EnterRule(_localctx, 60, RULE_selectTableValuesRow);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 500;
			Match(LEFT_PAREN);
			State = 501;
			simpleExpression(0);
			State = 506;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 502;
				Match(COMMA);
				State = 503;
				simpleExpression(0);
				}
				}
				State = 508;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 509;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTableValuesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(QueryCatParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableValuesRowContext[] selectTableValuesRow() {
			return GetRuleContexts<SelectTableValuesRowContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableValuesRowContext selectTableValuesRow(int i) {
			return GetRuleContext<SelectTableValuesRowContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectTableValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTableValues; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTableValues(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTableValuesContext selectTableValues() {
		SelectTableValuesContext _localctx = new SelectTableValuesContext(Context, State);
		EnterRule(_localctx, 62, RULE_selectTableValues);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 511;
			Match(VALUES);
			State = 512;
			selectTableValuesRow();
			State = 517;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 513;
				Match(COMMA);
				State = 514;
				selectTableValuesRow();
				}
				}
				State = 519;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTablePrimaryContext : ParserRuleContext {
		public SelectTablePrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTablePrimary; } }
	 
		public SelectTablePrimaryContext() { }
		public virtual void CopyFrom(SelectTablePrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectTablePrimaryExpressionContext : SelectTablePrimaryContext {
		public FunctionCallContext format;
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(QueryCatParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public SelectTablePrimaryExpressionContext(SelectTablePrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTablePrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectTablePrimaryNoFormatContext : SelectTablePrimaryContext {
		public FunctionCallContext func;
		public FunctionCallContext format;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext[] functionCall() {
			return GetRuleContexts<FunctionCallContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall(int i) {
			return GetRuleContext<FunctionCallContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(QueryCatParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public SelectTablePrimaryNoFormatContext(SelectTablePrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTablePrimaryNoFormat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectTablePrimarySubqueryContext : SelectTablePrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public SelectTablePrimarySubqueryContext(SelectTablePrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTablePrimarySubquery(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectTablePrimaryWithFormatContext : SelectTablePrimaryContext {
		public IToken uri;
		public FunctionCallContext format;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(QueryCatParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public SelectTablePrimaryWithFormatContext(SelectTablePrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTablePrimaryWithFormat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectTablePrimaryTableValuesContext : SelectTablePrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableValuesContext selectTableValues() {
			return GetRuleContext<SelectTableValuesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public SelectTablePrimaryTableValuesContext(SelectTablePrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTablePrimaryTableValues(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectTablePrimaryStdinContext : SelectTablePrimaryContext {
		public FunctionCallContext format;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(QueryCatParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(QueryCatParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public SelectTablePrimaryStdinContext(SelectTablePrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTablePrimaryStdin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectTablePrimaryIdentifierContext : SelectTablePrimaryContext {
		public IdentifierContext name;
		public FunctionCallContext format;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(QueryCatParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public SelectTablePrimaryIdentifierContext(SelectTablePrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTablePrimaryIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTablePrimaryContext selectTablePrimary() {
		SelectTablePrimaryContext _localctx = new SelectTablePrimaryContext(Context, State);
		EnterRule(_localctx, 64, RULE_selectTablePrimary);
		try {
			State = 572;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				_localctx = new SelectTablePrimaryNoFormatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 520;
				((SelectTablePrimaryNoFormatContext)_localctx).func = functionCall();
				State = 523;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
				case 1:
					{
					State = 521;
					Match(FORMAT);
					State = 522;
					((SelectTablePrimaryNoFormatContext)_localctx).format = functionCall();
					}
					break;
				}
				State = 526;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
				case 1:
					{
					State = 525;
					selectAlias();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new SelectTablePrimaryStdinContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 528;
				Match(MINUS);
				State = 531;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
				case 1:
					{
					State = 529;
					Match(FORMAT);
					State = 530;
					((SelectTablePrimaryStdinContext)_localctx).format = functionCall();
					}
					break;
				}
				State = 534;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
				case 1:
					{
					State = 533;
					selectAlias();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new SelectTablePrimaryWithFormatContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 536;
				((SelectTablePrimaryWithFormatContext)_localctx).uri = Match(STRING_LITERAL);
				State = 539;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
				case 1:
					{
					State = 537;
					Match(FORMAT);
					State = 538;
					((SelectTablePrimaryWithFormatContext)_localctx).format = functionCall();
					}
					break;
				}
				State = 542;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
				case 1:
					{
					State = 541;
					selectAlias();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SelectTablePrimarySubqueryContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 544;
				Match(LEFT_PAREN);
				State = 545;
				selectQueryExpression();
				State = 546;
				Match(RIGHT_PAREN);
				State = 548;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
				case 1:
					{
					State = 547;
					selectAlias();
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new SelectTablePrimaryIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 550;
				((SelectTablePrimaryIdentifierContext)_localctx).name = identifier();
				State = 553;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
				case 1:
					{
					State = 551;
					Match(FORMAT);
					State = 552;
					((SelectTablePrimaryIdentifierContext)_localctx).format = functionCall();
					}
					break;
				}
				State = 556;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
				case 1:
					{
					State = 555;
					selectAlias();
					}
					break;
				}
				}
				break;
			case 6:
				_localctx = new SelectTablePrimaryTableValuesContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 558;
				Match(LEFT_PAREN);
				State = 559;
				selectTableValues();
				State = 560;
				Match(RIGHT_PAREN);
				State = 562;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
				case 1:
					{
					State = 561;
					selectAlias();
					}
					break;
				}
				}
				break;
			case 7:
				_localctx = new SelectTablePrimaryExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 564;
				simpleExpression(0);
				State = 567;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
				case 1:
					{
					State = 565;
					Match(FORMAT);
					State = 566;
					((SelectTablePrimaryExpressionContext)_localctx).format = functionCall();
					}
					break;
				}
				State = 570;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
				case 1:
					{
					State = 569;
					selectAlias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTableJoinedContext : ParserRuleContext {
		public SelectTableJoinedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTableJoined; } }
	 
		public SelectTableJoinedContext() { }
		public virtual void CopyFrom(SelectTableJoinedContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectTableJoinedUsingContext : SelectTableJoinedContext {
		public SelectTablePrimaryContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(QueryCatParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(QueryCatParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectTablePrimaryContext selectTablePrimary() {
			return GetRuleContext<SelectTablePrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectJoinTypeContext selectJoinType() {
			return GetRuleContext<SelectJoinTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectTableJoinedUsingContext(SelectTableJoinedContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTableJoinedUsing(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectTableJoinedOnContext : SelectTableJoinedContext {
		public SelectTablePrimaryContext right;
		public ExpressionContext condition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(QueryCatParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(QueryCatParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectTablePrimaryContext selectTablePrimary() {
			return GetRuleContext<SelectTablePrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectJoinTypeContext selectJoinType() {
			return GetRuleContext<SelectJoinTypeContext>(0);
		}
		public SelectTableJoinedOnContext(SelectTableJoinedContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTableJoinedOn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTableJoinedContext selectTableJoined() {
		SelectTableJoinedContext _localctx = new SelectTableJoinedContext(Context, State);
		EnterRule(_localctx, 66, RULE_selectTableJoined);
		int _la;
		try {
			State = 599;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				_localctx = new SelectTableJoinedOnContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 575;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 524553L) != 0)) {
					{
					State = 574;
					selectJoinType();
					}
				}

				State = 577;
				Match(JOIN);
				State = 578;
				((SelectTableJoinedOnContext)_localctx).right = selectTablePrimary();
				State = 579;
				Match(ON);
				State = 580;
				((SelectTableJoinedOnContext)_localctx).condition = expression(0);
				}
				break;
			case 2:
				_localctx = new SelectTableJoinedUsingContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 583;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 524553L) != 0)) {
					{
					State = 582;
					selectJoinType();
					}
				}

				State = 585;
				Match(JOIN);
				State = 586;
				((SelectTableJoinedUsingContext)_localctx).right = selectTablePrimary();
				State = 587;
				Match(USING);
				State = 588;
				Match(LEFT_PAREN);
				State = 589;
				identifier();
				State = 594;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 590;
					Match(COMMA);
					State = 591;
					identifier();
					}
					}
					State = 596;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 597;
				Match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectJoinTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(QueryCatParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(QueryCatParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(QueryCatParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(QueryCatParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(QueryCatParser.OUTER, 0); }
		public SelectJoinTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectJoinType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectJoinType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectJoinTypeContext selectJoinType() {
		SelectJoinTypeContext _localctx = new SelectJoinTypeContext(Context, State);
		EnterRule(_localctx, 68, RULE_selectJoinType);
		int _la;
		try {
			State = 606;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INNER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 601;
				Match(INNER);
				}
				break;
			case FULL:
			case LEFT:
			case RIGHT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 602;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & 524545L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 604;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 603;
					Match(OUTER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectGroupByContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(QueryCatParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(QueryCatParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectGroupByContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectGroupBy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectGroupBy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectGroupByContext selectGroupBy() {
		SelectGroupByContext _localctx = new SelectGroupByContext(Context, State);
		EnterRule(_localctx, 70, RULE_selectGroupBy);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 608;
			Match(GROUP);
			State = 609;
			Match(BY);
			State = 610;
			expression(0);
			State = 615;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 611;
					Match(COMMA);
					State = 612;
					expression(0);
					}
					} 
				}
				State = 617;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,80,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectHavingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(QueryCatParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectHavingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectHaving; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectHaving(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectHavingContext selectHaving() {
		SelectHavingContext _localctx = new SelectHavingContext(Context, State);
		EnterRule(_localctx, 72, RULE_selectHaving);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 618;
			Match(HAVING);
			State = 619;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectSearchConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(QueryCatParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectSearchConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectSearchCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSearchCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectSearchConditionContext selectSearchCondition() {
		SelectSearchConditionContext _localctx = new SelectSearchConditionContext(Context, State);
		EnterRule(_localctx, 74, RULE_selectSearchCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 621;
			Match(WHERE);
			State = 622;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectWindowSpecificationContext : ParserRuleContext {
		public IdentifierSimpleContext existingWindowName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectWindowPartitionClauseContext selectWindowPartitionClause() {
			return GetRuleContext<SelectWindowPartitionClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectWindowOrderClauseContext selectWindowOrderClause() {
			return GetRuleContext<SelectWindowOrderClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSimpleContext identifierSimple() {
			return GetRuleContext<IdentifierSimpleContext>(0);
		}
		public SelectWindowSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectWindowSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectWindowSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectWindowSpecificationContext selectWindowSpecification() {
		SelectWindowSpecificationContext _localctx = new SelectWindowSpecificationContext(Context, State);
		EnterRule(_localctx, 76, RULE_selectWindowSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 624;
			Match(LEFT_PAREN);
			State = 626;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT_SIGN || _la==NO_QUOTES_IDENTIFIER || _la==QUOTES_IDENTIFIER) {
				{
				State = 625;
				_localctx.existingWindowName = identifierSimple();
				}
			}

			State = 629;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 628;
				selectWindowPartitionClause();
				}
			}

			State = 632;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 631;
				selectWindowOrderClause();
				}
			}

			State = 634;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectWindowPartitionClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(QueryCatParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(QueryCatParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectWindowPartitionClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectWindowPartitionClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectWindowPartitionClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectWindowPartitionClauseContext selectWindowPartitionClause() {
		SelectWindowPartitionClauseContext _localctx = new SelectWindowPartitionClauseContext(Context, State);
		EnterRule(_localctx, 78, RULE_selectWindowPartitionClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 636;
			Match(PARTITION);
			State = 637;
			Match(BY);
			State = 638;
			expression(0);
			State = 643;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 639;
				Match(COMMA);
				State = 640;
				expression(0);
				}
				}
				State = 645;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectWindowOrderClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(QueryCatParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(QueryCatParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectSortSpecificationContext[] selectSortSpecification() {
			return GetRuleContexts<SelectSortSpecificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSortSpecificationContext selectSortSpecification(int i) {
			return GetRuleContext<SelectSortSpecificationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectWindowOrderClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectWindowOrderClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectWindowOrderClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectWindowOrderClauseContext selectWindowOrderClause() {
		SelectWindowOrderClauseContext _localctx = new SelectWindowOrderClauseContext(Context, State);
		EnterRule(_localctx, 80, RULE_selectWindowOrderClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 646;
			Match(ORDER);
			State = 647;
			Match(BY);
			State = 648;
			selectSortSpecification();
			State = 653;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 649;
				Match(COMMA);
				State = 650;
				selectSortSpecification();
				}
				}
				State = 655;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectWindowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(QueryCatParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectWindowDefinitionListContext[] selectWindowDefinitionList() {
			return GetRuleContexts<SelectWindowDefinitionListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectWindowDefinitionListContext selectWindowDefinitionList(int i) {
			return GetRuleContext<SelectWindowDefinitionListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectWindowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectWindow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectWindow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectWindowContext selectWindow() {
		SelectWindowContext _localctx = new SelectWindowContext(Context, State);
		EnterRule(_localctx, 82, RULE_selectWindow);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 656;
			Match(WINDOW);
			State = 657;
			selectWindowDefinitionList();
			State = 662;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 658;
					Match(COMMA);
					State = 659;
					selectWindowDefinitionList();
					}
					} 
				}
				State = 664;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectWindowDefinitionListContext : ParserRuleContext {
		public IdentifierContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(QueryCatParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectWindowSpecificationContext selectWindowSpecification() {
			return GetRuleContext<SelectWindowSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SelectWindowDefinitionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectWindowDefinitionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectWindowDefinitionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectWindowDefinitionListContext selectWindowDefinitionList() {
		SelectWindowDefinitionListContext _localctx = new SelectWindowDefinitionListContext(Context, State);
		EnterRule(_localctx, 84, RULE_selectWindowDefinitionList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 665;
			_localctx.name = identifier();
			State = 666;
			Match(AS);
			State = 667;
			selectWindowSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectOffsetClauseContext : ParserRuleContext {
		public ExpressionContext offset;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(QueryCatParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(QueryCatParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(QueryCatParser.ROWS, 0); }
		public SelectOffsetClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectOffsetClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectOffsetClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectOffsetClauseContext selectOffsetClause() {
		SelectOffsetClauseContext _localctx = new SelectOffsetClauseContext(Context, State);
		EnterRule(_localctx, 86, RULE_selectOffsetClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 669;
			Match(OFFSET);
			{
			State = 670;
			_localctx.offset = expression(0);
			}
			State = 672;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				{
				State = 671;
				_la = TokenStream.LA(1);
				if ( !(_la==ROW || _la==ROWS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectFetchFirstClauseContext : ParserRuleContext {
		public ExpressionContext limit;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(QueryCatParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(QueryCatParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(QueryCatParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(QueryCatParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(QueryCatParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(QueryCatParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(QueryCatParser.ONLY, 0); }
		public SelectFetchFirstClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectFetchFirstClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectFetchFirstClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectFetchFirstClauseContext selectFetchFirstClause() {
		SelectFetchFirstClauseContext _localctx = new SelectFetchFirstClauseContext(Context, State);
		EnterRule(_localctx, 88, RULE_selectFetchFirstClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 674;
			_la = TokenStream.LA(1);
			if ( !(_la==FETCH || _la==LIMIT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 676;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FIRST || _la==NEXT) {
				{
				State = 675;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST || _la==NEXT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			{
			State = 678;
			_localctx.limit = expression(0);
			}
			State = 680;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				{
				State = 679;
				_la = TokenStream.LA(1);
				if ( !(_la==ROW || _la==ROWS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 683;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				{
				State = 682;
				_la = TokenStream.LA(1);
				if ( !(_la==ONLY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTopClauseContext : ParserRuleContext {
		public IToken limit;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOP() { return GetToken(QueryCatParser.TOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(QueryCatParser.INTEGER_LITERAL, 0); }
		public SelectTopClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTopClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTopClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTopClauseContext selectTopClause() {
		SelectTopClauseContext _localctx = new SelectTopClauseContext(Context, State);
		EnterRule(_localctx, 90, RULE_selectTopClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 685;
			Match(TOP);
			State = 686;
			_localctx.limit = Match(INTEGER_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectLimitClauseContext : ParserRuleContext {
		public ExpressionContext limit;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(QueryCatParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectLimitClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectLimitClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectLimitClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectLimitClauseContext selectLimitClause() {
		SelectLimitClauseContext _localctx = new SelectLimitClauseContext(Context, State);
		EnterRule(_localctx, 92, RULE_selectLimitClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 688;
			Match(LIMIT);
			State = 689;
			_localctx.limit = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(QueryCatParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdateSourceContext updateSource() {
			return GetRuleContext<UpdateSourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(QueryCatParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdateSetClauseContext[] updateSetClause() {
			return GetRuleContexts<UpdateSetClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateSetClauseContext updateSetClause(int i) {
			return GetRuleContext<UpdateSetClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSearchConditionContext selectSearchCondition() {
			return GetRuleContext<SelectSearchConditionContext>(0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateStatementContext updateStatement() {
		UpdateStatementContext _localctx = new UpdateStatementContext(Context, State);
		EnterRule(_localctx, 94, RULE_updateStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 691;
			Match(UPDATE);
			State = 692;
			updateSource();
			State = 693;
			Match(SET);
			State = 694;
			updateSetClause();
			State = 699;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 695;
				Match(COMMA);
				State = 696;
				updateSetClause();
				}
				}
				State = 701;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 703;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 702;
				selectSearchCondition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateSourceContext : ParserRuleContext {
		public UpdateSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateSource; } }
	 
		public UpdateSourceContext() { }
		public virtual void CopyFrom(UpdateSourceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UpdateFromVariableContext : UpdateSourceContext {
		public IdentifierContext name;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public UpdateFromVariableContext(UpdateSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateFromVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UpdateWithFormatContext : UpdateSourceContext {
		public IToken uri;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(QueryCatParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public UpdateWithFormatContext(UpdateSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateWithFormat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UpdateNoFormatContext : UpdateSourceContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public UpdateNoFormatContext(UpdateSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateNoFormat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateSourceContext updateSource() {
		UpdateSourceContext _localctx = new UpdateSourceContext(Context, State);
		EnterRule(_localctx, 96, RULE_updateSource);
		int _la;
		try {
			State = 721;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
			case 1:
				_localctx = new UpdateNoFormatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 705;
				functionCall();
				State = 707;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT_SIGN || _la==AS || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & 35L) != 0)) {
					{
					State = 706;
					selectAlias();
					}
				}

				}
				break;
			case 2:
				_localctx = new UpdateWithFormatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 709;
				((UpdateWithFormatContext)_localctx).uri = Match(STRING_LITERAL);
				State = 712;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FORMAT) {
					{
					State = 710;
					Match(FORMAT);
					State = 711;
					functionCall();
					}
				}

				State = 715;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT_SIGN || _la==AS || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & 35L) != 0)) {
					{
					State = 714;
					selectAlias();
					}
				}

				}
				break;
			case 3:
				_localctx = new UpdateFromVariableContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 717;
				((UpdateFromVariableContext)_localctx).name = identifier();
				State = 719;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT_SIGN || _la==AS || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & 35L) != 0)) {
					{
					State = 718;
					selectAlias();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateSetClauseContext : ParserRuleContext {
		public IdentifierContext source;
		public ExpressionContext target;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(QueryCatParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UpdateSetClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateSetClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateSetClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateSetClauseContext updateSetClause() {
		UpdateSetClauseContext _localctx = new UpdateSetClauseContext(Context, State);
		EnterRule(_localctx, 98, RULE_updateSetClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 723;
			_localctx.source = identifier();
			State = 724;
			Match(EQUALS);
			State = 725;
			_localctx.target = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(QueryCatParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(QueryCatParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InsertToSourceContext insertToSource() {
			return GetRuleContext<InsertToSourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertFromSourceContext insertFromSource() {
			return GetRuleContext<InsertFromSourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertColumnsListContext insertColumnsList() {
			return GetRuleContext<InsertColumnsListContext>(0);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertStatementContext insertStatement() {
		InsertStatementContext _localctx = new InsertStatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_insertStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 727;
			Match(INSERT);
			State = 728;
			Match(INTO);
			State = 729;
			insertToSource();
			State = 731;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				{
				State = 730;
				insertColumnsList();
				}
				break;
			}
			State = 733;
			insertFromSource();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertToSourceContext : ParserRuleContext {
		public InsertToSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertToSource; } }
	 
		public InsertToSourceContext() { }
		public virtual void CopyFrom(InsertToSourceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InsertStdoutContext : InsertToSourceContext {
		public FunctionCallContext format;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(QueryCatParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(QueryCatParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public InsertStdoutContext(InsertToSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertStdout(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InsertFromVariableContext : InsertToSourceContext {
		public IdentifierContext name;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public InsertFromVariableContext(InsertToSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertFromVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InsertWithFormatContext : InsertToSourceContext {
		public IToken uri;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(QueryCatParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public InsertWithFormatContext(InsertToSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertWithFormat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InsertNoFormatContext : InsertToSourceContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public InsertNoFormatContext(InsertToSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertNoFormat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertToSourceContext insertToSource() {
		InsertToSourceContext _localctx = new InsertToSourceContext(Context, State);
		EnterRule(_localctx, 102, RULE_insertToSource);
		int _la;
		try {
			State = 759;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				_localctx = new InsertNoFormatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 735;
				functionCall();
				State = 737;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT_SIGN || _la==AS || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & 35L) != 0)) {
					{
					State = 736;
					selectAlias();
					}
				}

				}
				break;
			case 2:
				_localctx = new InsertWithFormatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 739;
				((InsertWithFormatContext)_localctx).uri = Match(STRING_LITERAL);
				State = 742;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FORMAT) {
					{
					State = 740;
					Match(FORMAT);
					State = 741;
					functionCall();
					}
				}

				State = 745;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT_SIGN || _la==AS || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & 35L) != 0)) {
					{
					State = 744;
					selectAlias();
					}
				}

				}
				break;
			case 3:
				_localctx = new InsertStdoutContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 747;
				Match(MINUS);
				State = 750;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FORMAT) {
					{
					State = 748;
					Match(FORMAT);
					State = 749;
					((InsertStdoutContext)_localctx).format = functionCall();
					}
				}

				State = 753;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT_SIGN || _la==AS || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & 35L) != 0)) {
					{
					State = 752;
					selectAlias();
					}
				}

				}
				break;
			case 4:
				_localctx = new InsertFromVariableContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 755;
				((InsertFromVariableContext)_localctx).name = identifier();
				State = 757;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT_SIGN || _la==AS || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & 35L) != 0)) {
					{
					State = 756;
					selectAlias();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertColumnsListContext : ParserRuleContext {
		public IdentifierContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public InsertColumnsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertColumnsList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertColumnsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertColumnsListContext insertColumnsList() {
		InsertColumnsListContext _localctx = new InsertColumnsListContext(Context, State);
		EnterRule(_localctx, 104, RULE_insertColumnsList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 761;
			Match(LEFT_PAREN);
			State = 762;
			_localctx.name = identifier();
			State = 767;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 763;
				Match(COMMA);
				State = 764;
				_localctx.name = identifier();
				}
				}
				State = 769;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 770;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertFromSourceContext : ParserRuleContext {
		public InsertFromSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertFromSource; } }
	 
		public InsertFromSourceContext() { }
		public virtual void CopyFrom(InsertFromSourceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InsertSourceQueryContext : InsertFromSourceContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		public InsertSourceQueryContext(InsertFromSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertSourceQuery(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InsertSourceTableContext : InsertFromSourceContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableValuesContext selectTableValues() {
			return GetRuleContext<SelectTableValuesContext>(0);
		}
		public InsertSourceTableContext(InsertFromSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertSourceTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertFromSourceContext insertFromSource() {
		InsertFromSourceContext _localctx = new InsertFromSourceContext(Context, State);
		EnterRule(_localctx, 106, RULE_insertFromSource);
		try {
			State = 774;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEFT_PAREN:
			case SELECT:
			case WITH:
				_localctx = new InsertSourceQueryContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 772;
				selectQueryExpression();
				}
				break;
			case VALUES:
				_localctx = new InsertSourceTableContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 773;
				selectTableValues();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(QueryCatParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(QueryCatParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeleteFromSourceContext deleteFromSource() {
			return GetRuleContext<DeleteFromSourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSearchConditionContext selectSearchCondition() {
			return GetRuleContext<SelectSearchConditionContext>(0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementContext deleteStatement() {
		DeleteStatementContext _localctx = new DeleteStatementContext(Context, State);
		EnterRule(_localctx, 108, RULE_deleteStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 776;
			Match(DELETE);
			State = 777;
			Match(FROM);
			State = 778;
			deleteFromSource();
			State = 780;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 779;
				selectSearchCondition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteFromSourceContext : ParserRuleContext {
		public DeleteFromSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteFromSource; } }
	 
		public DeleteFromSourceContext() { }
		public virtual void CopyFrom(DeleteFromSourceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeleteWithFormatContext : DeleteFromSourceContext {
		public IToken uri;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(QueryCatParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public DeleteWithFormatContext(DeleteFromSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteWithFormat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeleteNoFormatContext : DeleteFromSourceContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public DeleteNoFormatContext(DeleteFromSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteNoFormat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeleteFromVariableContext : DeleteFromSourceContext {
		public IdentifierContext name;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public DeleteFromVariableContext(DeleteFromSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteFromVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteFromSourceContext deleteFromSource() {
		DeleteFromSourceContext _localctx = new DeleteFromSourceContext(Context, State);
		EnterRule(_localctx, 110, RULE_deleteFromSource);
		int _la;
		try {
			State = 798;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
			case 1:
				_localctx = new DeleteNoFormatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 782;
				functionCall();
				State = 784;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT_SIGN || _la==AS || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & 35L) != 0)) {
					{
					State = 783;
					selectAlias();
					}
				}

				}
				break;
			case 2:
				_localctx = new DeleteWithFormatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 786;
				((DeleteWithFormatContext)_localctx).uri = Match(STRING_LITERAL);
				State = 789;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FORMAT) {
					{
					State = 787;
					Match(FORMAT);
					State = 788;
					functionCall();
					}
				}

				State = 792;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT_SIGN || _la==AS || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & 35L) != 0)) {
					{
					State = 791;
					selectAlias();
					}
				}

				}
				break;
			case 3:
				_localctx = new DeleteFromVariableContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 794;
				((DeleteFromVariableContext)_localctx).name = identifier();
				State = 796;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT_SIGN || _la==AS || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & 35L) != 0)) {
					{
					State = 795;
					selectAlias();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EchoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ECHO() { return GetToken(QueryCatParser.ECHO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EchoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_echoStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEchoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EchoStatementContext echoStatement() {
		EchoStatementContext _localctx = new EchoStatementContext(Context, State);
		EnterRule(_localctx, 112, RULE_echoStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 800;
			Match(ECHO);
			State = 801;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(QueryCatParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallStatementContext callStatement() {
		CallStatementContext _localctx = new CallStatementContext(Context, State);
		EnterRule(_localctx, 114, RULE_callStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 803;
			Match(CALL);
			State = 804;
			functionCall();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public IfConditionContext mainIf;
		public IfConditionContext elseIf;
		public BlockExpressionContext elseBlock;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(QueryCatParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfConditionContext[] ifCondition() {
			return GetRuleContexts<IfConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfConditionContext ifCondition(int i) {
			return GetRuleContext<IfConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSEIF() { return GetTokens(QueryCatParser.ELSEIF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF(int i) {
			return GetToken(QueryCatParser.ELSEIF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(QueryCatParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockExpressionContext blockExpression() {
			return GetRuleContext<BlockExpressionContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 116, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 806;
			Match(IF);
			State = 807;
			_localctx.mainIf = ifCondition();
			State = 812;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSEIF) {
				{
				{
				State = 808;
				Match(ELSEIF);
				State = 809;
				_localctx.elseIf = ifCondition();
				}
				}
				State = 814;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 817;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 815;
				Match(ELSE);
				State = 816;
				_localctx.elseBlock = blockExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfConditionContext : ParserRuleContext {
		public ExpressionContext condition;
		public BlockExpressionContext block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(QueryCatParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockExpressionContext blockExpression() {
			return GetRuleContext<BlockExpressionContext>(0);
		}
		public IfConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfConditionContext ifCondition() {
		IfConditionContext _localctx = new IfConditionContext(Context, State);
		EnterRule(_localctx, 118, RULE_ifCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 819;
			_localctx.condition = expression(0);
			State = 820;
			Match(THEN);
			State = 821;
			_localctx.block = blockExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(QueryCatParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOOP() { return GetTokens(QueryCatParser.LOOP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP(int i) {
			return GetToken(QueryCatParser.LOOP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramBodyContext programBody() {
			return GetRuleContext<ProgramBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(QueryCatParser.END, 0); }
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 120, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823;
			Match(WHILE);
			State = 824;
			expression(0);
			State = 825;
			Match(LOOP);
			State = 826;
			programBody();
			State = 827;
			Match(END);
			State = 828;
			Match(LOOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public IdentifierSimpleContext target;
		public ExpressionContext query;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(QueryCatParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(QueryCatParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOOP() { return GetTokens(QueryCatParser.LOOP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP(int i) {
			return GetToken(QueryCatParser.LOOP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProgramBodyContext programBody() {
			return GetRuleContext<ProgramBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(QueryCatParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSimpleContext identifierSimple() {
			return GetRuleContext<IdentifierSimpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 122, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 830;
			Match(FOR);
			State = 831;
			_localctx.target = identifierSimple();
			State = 832;
			Match(IN);
			State = 833;
			_localctx.query = expression(0);
			State = 834;
			Match(LOOP);
			State = 835;
			programBody();
			State = 836;
			Match(END);
			State = 837;
			Match(LOOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BREAK() { return GetToken(QueryCatParser.BREAK, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreakStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 124, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 839;
			Match(BREAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(QueryCatParser.CONTINUE, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinueStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 126, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 841;
			Match(CONTINUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierSimpleContext : ParserRuleContext {
		public IdentifierSimpleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierSimple; } }
	 
		public IdentifierSimpleContext() { }
		public virtual void CopyFrom(IdentifierSimpleContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierSimpleNoQuotesContext : IdentifierSimpleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_QUOTES_IDENTIFIER() { return GetToken(QueryCatParser.NO_QUOTES_IDENTIFIER, 0); }
		public IdentifierSimpleNoQuotesContext(IdentifierSimpleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierSimpleNoQuotes(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierSimpleCurrentContext : IdentifierSimpleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SIGN() { return GetToken(QueryCatParser.AT_SIGN, 0); }
		public IdentifierSimpleCurrentContext(IdentifierSimpleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierSimpleCurrent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierSimpleQuotesContext : IdentifierSimpleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTES_IDENTIFIER() { return GetToken(QueryCatParser.QUOTES_IDENTIFIER, 0); }
		public IdentifierSimpleQuotesContext(IdentifierSimpleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierSimpleQuotes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierSimpleContext identifierSimple() {
		IdentifierSimpleContext _localctx = new IdentifierSimpleContext(Context, State);
		EnterRule(_localctx, 128, RULE_identifierSimple);
		try {
			State = 846;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NO_QUOTES_IDENTIFIER:
				_localctx = new IdentifierSimpleNoQuotesContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 843;
				Match(NO_QUOTES_IDENTIFIER);
				}
				break;
			case QUOTES_IDENTIFIER:
				_localctx = new IdentifierSimpleQuotesContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 844;
				Match(QUOTES_IDENTIFIER);
				}
				break;
			case AT_SIGN:
				_localctx = new IdentifierSimpleCurrentContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 845;
				Match(AT_SIGN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	 
		public IdentifierContext() { }
		public virtual void CopyFrom(IdentifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierWithSelectorContext : IdentifierContext {
		public IdentifierSimpleContext name;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSimpleContext identifierSimple() {
			return GetRuleContext<IdentifierSimpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSelectorContext[] identifierSelector() {
			return GetRuleContexts<IdentifierSelectorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSelectorContext identifierSelector(int i) {
			return GetRuleContext<IdentifierSelectorContext>(i);
		}
		public IdentifierWithSelectorContext(IdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierWithSelector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierWithoutSourceContext : IdentifierContext {
		public IdentifierSimpleContext name;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSimpleContext identifierSimple() {
			return GetRuleContext<IdentifierSimpleContext>(0);
		}
		public IdentifierWithoutSourceContext(IdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierWithoutSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 130, RULE_identifier);
		try {
			int _alt;
			State = 856;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
			case 1:
				_localctx = new IdentifierWithSelectorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 848;
				((IdentifierWithSelectorContext)_localctx).name = identifierSimple();
				State = 852;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,117,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 849;
						identifierSelector();
						}
						} 
					}
					State = 854;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,117,Context);
				}
				}
				break;
			case 2:
				_localctx = new IdentifierWithoutSourceContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 855;
				((IdentifierWithoutSourceContext)_localctx).name = identifierSimple();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierSelectorContext : ParserRuleContext {
		public IdentifierSelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierSelector; } }
	 
		public IdentifierSelectorContext() { }
		public virtual void CopyFrom(IdentifierSelectorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierSelectorIndexContext : IdentifierSelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(QueryCatParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext[] simpleExpression() {
			return GetRuleContexts<SimpleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression(int i) {
			return GetRuleContext<SimpleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(QueryCatParser.RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public IdentifierSelectorIndexContext(IdentifierSelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierSelectorIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierSelectorFilterExpressionContext : IdentifierSelectorContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_BRACKET() { return GetToken(QueryCatParser.LEFT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(QueryCatParser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_BRACKET() { return GetToken(QueryCatParser.RIGHT_BRACKET, 0); }
		public IdentifierSelectorFilterExpressionContext(IdentifierSelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierSelectorFilterExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierSelectorPropertyContext : IdentifierSelectorContext {
		public IdentifierSimpleContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(QueryCatParser.PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSimpleContext identifierSimple() {
			return GetRuleContext<IdentifierSimpleContext>(0);
		}
		public IdentifierSelectorPropertyContext(IdentifierSelectorContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierSelectorProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierSelectorContext identifierSelector() {
		IdentifierSelectorContext _localctx = new IdentifierSelectorContext(Context, State);
		EnterRule(_localctx, 132, RULE_identifierSelector);
		int _la;
		try {
			State = 876;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
			case 1:
				_localctx = new IdentifierSelectorPropertyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 858;
				Match(PERIOD);
				State = 859;
				((IdentifierSelectorPropertyContext)_localctx).name = identifierSimple();
				}
				break;
			case 2:
				_localctx = new IdentifierSelectorIndexContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 860;
				Match(LEFT_BRACKET);
				State = 861;
				simpleExpression(0);
				State = 866;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 862;
					Match(COMMA);
					State = 863;
					simpleExpression(0);
					}
					}
					State = 868;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 869;
				Match(RIGHT_BRACKET);
				}
				break;
			case 3:
				_localctx = new IdentifierSelectorFilterExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 871;
				Match(LEFT_BRACKET);
				State = 872;
				Match(QUESTION);
				State = 873;
				simpleExpression(0);
				State = 874;
				Match(RIGHT_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 134, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 878;
			Match(LEFT_PAREN);
			State = 879;
			expression(0);
			State = 884;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 880;
				Match(COMMA);
				State = 881;
				expression(0);
				}
				}
				State = 886;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 887;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalLiteralContext : ParserRuleContext {
		public IToken interval;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(QueryCatParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		public IntervalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalLiteralContext intervalLiteral() {
		IntervalLiteralContext _localctx = new IntervalLiteralContext(Context, State);
		EnterRule(_localctx, 136, RULE_intervalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 889;
			Match(INTERVAL);
			State = 890;
			_localctx.interval = Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(QueryCatParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(QueryCatParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(QueryCatParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(QueryCatParser.SEMICOLON, i);
		}
		public BlockExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockExpressionContext blockExpression() {
		BlockExpressionContext _localctx = new BlockExpressionContext(Context, State);
		EnterRule(_localctx, 138, RULE_blockExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 892;
			Match(BEGIN);
			State = 896;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 893;
				Match(SEMICOLON);
				}
				}
				State = 898;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 899;
			statement();
			State = 904;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,123,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 900;
					Match(SEMICOLON);
					State = 901;
					statement();
					}
					} 
				}
				State = 906;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,123,Context);
			}
			State = 910;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 907;
				Match(SEMICOLON);
				}
				}
				State = 912;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 913;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastOperandContext : ParserRuleContext {
		public SimpleExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(QueryCatParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(QueryCatParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public CastOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castOperand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastOperandContext castOperand() {
		CastOperandContext _localctx = new CastOperandContext(Context, State);
		EnterRule(_localctx, 140, RULE_castOperand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 915;
			Match(CAST);
			State = 916;
			Match(LEFT_PAREN);
			State = 917;
			_localctx.value = simpleExpression(0);
			State = 918;
			Match(AS);
			State = 919;
			type();
			State = 920;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtTimeZoneContext : ParserRuleContext {
		public SimpleExpressionContext tz;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(QueryCatParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(QueryCatParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(QueryCatParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(QueryCatParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public AtTimeZoneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atTimeZone; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtTimeZone(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtTimeZoneContext atTimeZone() {
		AtTimeZoneContext _localctx = new AtTimeZoneContext(Context, State);
		EnterRule(_localctx, 142, RULE_atTimeZone);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 922;
			Match(AT);
			State = 927;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LOCAL:
				{
				State = 923;
				Match(LOCAL);
				}
				break;
			case TIME:
				{
				State = 924;
				Match(TIME);
				State = 925;
				Match(ZONE);
				State = 926;
				_localctx.tz = simpleExpression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseExpressionContext : ParserRuleContext {
		public SimpleExpressionContext arg;
		public ExpressionContext @default;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(QueryCatParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(QueryCatParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseWhenContext[] caseWhen() {
			return GetRuleContexts<CaseWhenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseWhenContext caseWhen(int i) {
			return GetRuleContext<CaseWhenContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(QueryCatParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CaseExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseExpressionContext caseExpression() {
		CaseExpressionContext _localctx = new CaseExpressionContext(Context, State);
		EnterRule(_localctx, 144, RULE_caseExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 929;
			Match(CASE);
			State = 931;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 154248287238258690L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 1063004521603L) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & 63L) != 0)) {
				{
				State = 930;
				_localctx.arg = simpleExpression(0);
				}
			}

			State = 936;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WHEN) {
				{
				{
				State = 933;
				caseWhen();
				}
				}
				State = 938;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 941;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 939;
				Match(ELSE);
				State = 940;
				_localctx.@default = expression(0);
				}
			}

			State = 943;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseWhenContext : ParserRuleContext {
		public ExpressionContext condition;
		public ExpressionContext result;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(QueryCatParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(QueryCatParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CaseWhenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseWhen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseWhen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseWhenContext caseWhen() {
		CaseWhenContext _localctx = new CaseWhenContext(Context, State);
		EnterRule(_localctx, 146, RULE_caseWhen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 945;
			Match(WHEN);
			State = 946;
			_localctx.condition = expression(0);
			State = 947;
			Match(THEN);
			State = 948;
			_localctx.result = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandardFunctionContext : ParserRuleContext {
		public StandardFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standardFunction; } }
	 
		public StandardFunctionContext() { }
		public virtual void CopyFrom(StandardFunctionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StandardFunctionTrimContext : StandardFunctionContext {
		public IToken spec;
		public IToken characters;
		public SimpleExpressionContext target;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIM() { return GetToken(QueryCatParser.TRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(QueryCatParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEADING() { return GetToken(QueryCatParser.LEADING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAILING() { return GetToken(QueryCatParser.TRAILING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOTH() { return GetToken(QueryCatParser.BOTH, 0); }
		public StandardFunctionTrimContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardFunctionTrim(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StandardPositionRegexContext : StandardFunctionContext {
		public IToken pattern;
		public SimpleExpressionContext @string;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION_REGEX() { return GetToken(QueryCatParser.POSITION_REGEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(QueryCatParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public StandardPositionRegexContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardPositionRegex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StandardFunctionCurrentDateContext : StandardFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE() { return GetToken(QueryCatParser.CURRENT_DATE, 0); }
		public StandardFunctionCurrentDateContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardFunctionCurrentDate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StandardFunctionExtractContext : StandardFunctionContext {
		public DateTimeFieldContext extractField;
		public SimpleExpressionContext source;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACT() { return GetToken(QueryCatParser.EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(QueryCatParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DateTimeFieldContext dateTimeField() {
			return GetRuleContext<DateTimeFieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public StandardFunctionExtractContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardFunctionExtract(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StandardOccurrencesRegexContext : StandardFunctionContext {
		public IToken pattern;
		public SimpleExpressionContext @string;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCCURRENCES_REGEX() { return GetToken(QueryCatParser.OCCURRENCES_REGEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(QueryCatParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public StandardOccurrencesRegexContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardOccurrencesRegex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StandardFunctionCoalesceContext : StandardFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(QueryCatParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public StandardFunctionCoalesceContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardFunctionCoalesce(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StandardFunctionPositionContext : StandardFunctionContext {
		public IToken substring;
		public SimpleExpressionContext @string;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(QueryCatParser.POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(QueryCatParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public StandardFunctionPositionContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardFunctionPosition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StandardSubstringRegexContext : StandardFunctionContext {
		public IToken pattern;
		public SimpleExpressionContext @string;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING_REGEX() { return GetToken(QueryCatParser.SUBSTRING_REGEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(QueryCatParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public StandardSubstringRegexContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardSubstringRegex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StandardTranslateRegexContext : StandardFunctionContext {
		public IToken pattern;
		public SimpleExpressionContext @string;
		public IToken replacement;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSLATE_REGEX() { return GetToken(QueryCatParser.TRANSLATE_REGEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(QueryCatParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(QueryCatParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(QueryCatParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(QueryCatParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public StandardTranslateRegexContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardTranslateRegex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StandardFunctionCurrentTimestampContext : StandardFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(QueryCatParser.CURRENT_TIMESTAMP, 0); }
		public StandardFunctionCurrentTimestampContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardFunctionCurrentTimestamp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StandardFunctionContext standardFunction() {
		StandardFunctionContext _localctx = new StandardFunctionContext(Context, State);
		EnterRule(_localctx, 148, RULE_standardFunction);
		int _la;
		try {
			State = 1022;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT_DATE:
				_localctx = new StandardFunctionCurrentDateContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 950;
				Match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIMESTAMP:
				_localctx = new StandardFunctionCurrentTimestampContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 951;
				Match(CURRENT_TIMESTAMP);
				}
				break;
			case TRIM:
				_localctx = new StandardFunctionTrimContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 952;
				Match(TRIM);
				State = 953;
				Match(LEFT_PAREN);
				State = 955;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 7L) != 0)) {
					{
					State = 954;
					((StandardFunctionTrimContext)_localctx).spec = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & 7L) != 0)) ) {
						((StandardFunctionTrimContext)_localctx).spec = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 958;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,130,Context) ) {
				case 1:
					{
					State = 957;
					((StandardFunctionTrimContext)_localctx).characters = Match(STRING_LITERAL);
					}
					break;
				}
				State = 961;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM) {
					{
					State = 960;
					Match(FROM);
					}
				}

				State = 963;
				((StandardFunctionTrimContext)_localctx).target = simpleExpression(0);
				State = 964;
				Match(RIGHT_PAREN);
				}
				break;
			case POSITION:
				_localctx = new StandardFunctionPositionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 966;
				Match(POSITION);
				State = 967;
				Match(LEFT_PAREN);
				State = 968;
				((StandardFunctionPositionContext)_localctx).substring = Match(STRING_LITERAL);
				State = 969;
				Match(IN);
				State = 970;
				((StandardFunctionPositionContext)_localctx).@string = simpleExpression(0);
				State = 971;
				Match(RIGHT_PAREN);
				}
				break;
			case EXTRACT:
				_localctx = new StandardFunctionExtractContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 973;
				Match(EXTRACT);
				State = 974;
				Match(LEFT_PAREN);
				State = 975;
				((StandardFunctionExtractContext)_localctx).extractField = dateTimeField();
				State = 976;
				Match(FROM);
				State = 977;
				((StandardFunctionExtractContext)_localctx).source = simpleExpression(0);
				State = 978;
				Match(RIGHT_PAREN);
				}
				break;
			case COALESCE:
				_localctx = new StandardFunctionCoalesceContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 980;
				Match(COALESCE);
				State = 981;
				Match(LEFT_PAREN);
				State = 982;
				expression(0);
				State = 987;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 983;
					Match(COMMA);
					State = 984;
					expression(0);
					}
					}
					State = 989;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 990;
				Match(RIGHT_PAREN);
				}
				break;
			case OCCURRENCES_REGEX:
				_localctx = new StandardOccurrencesRegexContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 992;
				Match(OCCURRENCES_REGEX);
				State = 993;
				Match(LEFT_PAREN);
				State = 994;
				((StandardOccurrencesRegexContext)_localctx).pattern = Match(STRING_LITERAL);
				State = 995;
				Match(IN);
				State = 996;
				((StandardOccurrencesRegexContext)_localctx).@string = simpleExpression(0);
				State = 997;
				Match(RIGHT_PAREN);
				}
				break;
			case SUBSTRING_REGEX:
				_localctx = new StandardSubstringRegexContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 999;
				Match(SUBSTRING_REGEX);
				State = 1000;
				Match(LEFT_PAREN);
				State = 1001;
				((StandardSubstringRegexContext)_localctx).pattern = Match(STRING_LITERAL);
				State = 1002;
				Match(IN);
				State = 1003;
				((StandardSubstringRegexContext)_localctx).@string = simpleExpression(0);
				State = 1004;
				Match(RIGHT_PAREN);
				}
				break;
			case POSITION_REGEX:
				_localctx = new StandardPositionRegexContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1006;
				Match(POSITION_REGEX);
				State = 1007;
				Match(LEFT_PAREN);
				State = 1008;
				((StandardPositionRegexContext)_localctx).pattern = Match(STRING_LITERAL);
				State = 1009;
				Match(IN);
				State = 1010;
				((StandardPositionRegexContext)_localctx).@string = simpleExpression(0);
				State = 1011;
				Match(RIGHT_PAREN);
				}
				break;
			case TRANSLATE_REGEX:
				_localctx = new StandardTranslateRegexContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1013;
				Match(TRANSLATE_REGEX);
				State = 1014;
				Match(LEFT_PAREN);
				State = 1015;
				((StandardTranslateRegexContext)_localctx).pattern = Match(STRING_LITERAL);
				State = 1016;
				Match(IN);
				State = 1017;
				((StandardTranslateRegexContext)_localctx).@string = simpleExpression(0);
				State = 1018;
				Match(WITH);
				State = 1019;
				((StandardTranslateRegexContext)_localctx).replacement = Match(STRING_LITERAL);
				State = 1020;
				Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTimeFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(QueryCatParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOY() { return GetToken(QueryCatParser.DOY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAYOFYEAR() { return GetToken(QueryCatParser.DAYOFYEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(QueryCatParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOW() { return GetToken(QueryCatParser.DOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEKDAY() { return GetToken(QueryCatParser.WEEKDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(QueryCatParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(QueryCatParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(QueryCatParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(QueryCatParser.SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLISECOND() { return GetToken(QueryCatParser.MILLISECOND, 0); }
		public DateTimeFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTimeField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateTimeField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateTimeFieldContext dateTimeField() {
		DateTimeFieldContext _localctx = new DateTimeFieldContext(Context, State);
		EnterRule(_localctx, 150, RULE_dateTimeField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1024;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 2047L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(QueryCatParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(QueryCatParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT8() { return GetToken(QueryCatParser.INT8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(QueryCatParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(QueryCatParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(QueryCatParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(QueryCatParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(QueryCatParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(QueryCatParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOB() { return GetToken(QueryCatParser.BLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(QueryCatParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(QueryCatParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC() { return GetToken(QueryCatParser.NUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(QueryCatParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(QueryCatParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(QueryCatParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(QueryCatParser.VOID, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 152, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1026;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & 141837000015871L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionBinaryInSubqueryContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public SelectQueryExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(QueryCatParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(QueryCatParser.NOT, 0); }
		public ExpressionBinaryInSubqueryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionBinaryInSubquery(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionBinaryContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_LESS() { return GetToken(QueryCatParser.LESS_LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_GREATER() { return GetToken(QueryCatParser.GREATER_GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(QueryCatParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(QueryCatParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(QueryCatParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(QueryCatParser.CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(QueryCatParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(QueryCatParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(QueryCatParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(QueryCatParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(QueryCatParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUALS() { return GetToken(QueryCatParser.GREATER_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(QueryCatParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUALS() { return GetToken(QueryCatParser.LESS_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(QueryCatParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(QueryCatParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(QueryCatParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMILAR() { return GetToken(QueryCatParser.SIMILAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(QueryCatParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(QueryCatParser.OR, 0); }
		public ExpressionBinaryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStandardFunctionCallContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public StandardFunctionContext standardFunction() {
			return GetRuleContext<StandardFunctionContext>(0);
		}
		public ExpressionStandardFunctionCallContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStandardFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionBlockContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockExpressionContext blockExpression() {
			return GetRuleContext<BlockExpressionContext>(0);
		}
		public ExpressionBlockContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionInParensContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		public ExpressionInParensContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionInParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionAtTimeZoneContext : ExpressionContext {
		public ExpressionContext left;
		[System.Diagnostics.DebuggerNonUserCode] public AtTimeZoneContext atTimeZone() {
			return GetRuleContext<AtTimeZoneContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionAtTimeZoneContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionAtTimeZone(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionCaseContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseExpressionContext caseExpression() {
			return GetRuleContext<CaseExpressionContext>(0);
		}
		public ExpressionCaseContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionCase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionCastContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CastOperandContext castOperand() {
			return GetRuleContext<CastOperandContext>(0);
		}
		public ExpressionCastContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionCast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionBinaryInIdentifierContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public IdentifierSimpleContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(QueryCatParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierSimpleContext identifierSimple() {
			return GetRuleContext<IdentifierSimpleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(QueryCatParser.NOT, 0); }
		public ExpressionBinaryInIdentifierContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionBinaryInIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionBetweenContext : ExpressionContext {
		public ExpressionContext expr;
		public IToken op;
		public SimpleExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(QueryCatParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(QueryCatParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(QueryCatParser.NOT, 0); }
		public ExpressionBetweenContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionBetween(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionUnaryContext : ExpressionContext {
		public ExpressionContext right;
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(QueryCatParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(QueryCatParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(QueryCatParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(QueryCatParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(QueryCatParser.IS, 0); }
		public ExpressionUnaryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionUnary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionBinaryInArrayContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ArrayContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(QueryCatParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(QueryCatParser.NOT, 0); }
		public ExpressionBinaryInArrayContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionBinaryInArray(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionSubqueryContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public IToken condition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(QueryCatParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(QueryCatParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(QueryCatParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUALS() { return GetToken(QueryCatParser.GREATER_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(QueryCatParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUALS() { return GetToken(QueryCatParser.LESS_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(QueryCatParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(QueryCatParser.SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(QueryCatParser.ALL, 0); }
		public ExpressionSubqueryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionSubquery(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionBinaryCastContext : ExpressionContext {
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPECAST() { return GetToken(QueryCatParser.TYPECAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionBinaryCastContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionBinaryCast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionSelectContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		public ExpressionSelectContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionSelect(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionIdentifierContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionIdentifierContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionLiteralContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ExpressionLiteralContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionFunctionCallContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ExpressionFunctionCallContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionExistsContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(QueryCatParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		public ExpressionExistsContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionExists(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 154;
		EnterRecursionRule(_localctx, 154, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1051;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,134,Context) ) {
			case 1:
				{
				_localctx = new ExpressionLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1029;
				literal();
				}
				break;
			case 2:
				{
				_localctx = new ExpressionCastContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1030;
				castOperand();
				}
				break;
			case 3:
				{
				_localctx = new ExpressionStandardFunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1031;
				standardFunction();
				}
				break;
			case 4:
				{
				_localctx = new ExpressionFunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1032;
				functionCall();
				}
				break;
			case 5:
				{
				_localctx = new ExpressionIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1033;
				identifier();
				}
				break;
			case 6:
				{
				_localctx = new ExpressionInParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1034;
				Match(LEFT_PAREN);
				State = 1035;
				expression(0);
				State = 1036;
				Match(RIGHT_PAREN);
				}
				break;
			case 7:
				{
				_localctx = new ExpressionUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1038;
				((ExpressionUnaryContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 18)) & ~0x3f) == 0 && ((1L << (_la - 18)) & 70368744177667L) != 0)) ) {
					((ExpressionUnaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1039;
				((ExpressionUnaryContext)_localctx).right = expression(20);
				}
				break;
			case 8:
				{
				_localctx = new ExpressionExistsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1040;
				Match(EXISTS);
				State = 1041;
				Match(LEFT_PAREN);
				State = 1042;
				selectQueryExpression();
				State = 1043;
				Match(RIGHT_PAREN);
				}
				break;
			case 9:
				{
				_localctx = new ExpressionSelectContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1045;
				Match(LEFT_PAREN);
				State = 1046;
				selectQueryExpression();
				State = 1047;
				Match(RIGHT_PAREN);
				}
				break;
			case 10:
				{
				_localctx = new ExpressionCaseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1049;
				caseExpression();
				}
				break;
			case 11:
				{
				_localctx = new ExpressionBlockContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1050;
				blockExpression();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1131;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,143,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1129;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
					case 1:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1053;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 1054;
						((ExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==LESS_LESS || _la==GREATER_GREATER) ) {
							((ExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1055;
						((ExpressionBinaryContext)_localctx).right = expression(20);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1056;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 1057;
						((ExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7340032L) != 0)) ) {
							((ExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1058;
						((ExpressionBinaryContext)_localctx).right = expression(19);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1059;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 1060;
						((ExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 537657344L) != 0)) ) {
							((ExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1061;
						((ExpressionBinaryContext)_localctx).right = expression(18);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1062;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 1063;
						((ExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 528482304L) != 0)) ) {
							((ExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1064;
						((ExpressionBinaryContext)_localctx).right = expression(17);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1065;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 1067;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 1066;
							Match(NOT);
							}
						}

						State = 1069;
						((ExpressionBinaryContext)_localctx).op = Match(LIKE);
						State = 1070;
						((ExpressionBinaryContext)_localctx).right = expression(16);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1071;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1073;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 1072;
							Match(NOT);
							}
						}

						State = 1075;
						((ExpressionBinaryContext)_localctx).op = Match(SIMILAR);
						State = 1076;
						Match(TO);
						State = 1077;
						((ExpressionBinaryContext)_localctx).right = expression(15);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionBetweenContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBetweenContext)_localctx).expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1078;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 1080;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 1079;
							Match(NOT);
							}
						}

						State = 1082;
						((ExpressionBetweenContext)_localctx).op = Match(BETWEEN);
						State = 1083;
						((ExpressionBetweenContext)_localctx).left = simpleExpression(0);
						State = 1084;
						Match(AND);
						State = 1085;
						((ExpressionBetweenContext)_localctx).right = expression(11);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1087;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 1088;
						((ExpressionBinaryContext)_localctx).op = Match(AND);
						State = 1089;
						((ExpressionBinaryContext)_localctx).right = expression(7);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1090;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1091;
						((ExpressionBinaryContext)_localctx).op = Match(OR);
						State = 1092;
						((ExpressionBinaryContext)_localctx).right = expression(6);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionBinaryCastContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryCastContext)_localctx).right = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1093;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 1094;
						Match(TYPECAST);
						State = 1095;
						type();
						}
						break;
					case 11:
						{
						_localctx = new ExpressionBinaryInArrayContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryInArrayContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1096;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1098;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 1097;
							Match(NOT);
							}
						}

						State = 1100;
						((ExpressionBinaryInArrayContext)_localctx).op = Match(IN);
						State = 1101;
						((ExpressionBinaryInArrayContext)_localctx).right = array();
						}
						break;
					case 12:
						{
						_localctx = new ExpressionBinaryInIdentifierContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryInIdentifierContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1102;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 1104;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 1103;
							Match(NOT);
							}
						}

						State = 1106;
						((ExpressionBinaryInIdentifierContext)_localctx).op = Match(IN);
						State = 1107;
						((ExpressionBinaryInIdentifierContext)_localctx).right = identifierSimple();
						}
						break;
					case 13:
						{
						_localctx = new ExpressionBinaryInSubqueryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryInSubqueryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1108;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1110;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 1109;
							Match(NOT);
							}
						}

						State = 1112;
						((ExpressionBinaryInSubqueryContext)_localctx).op = Match(IN);
						State = 1113;
						((ExpressionBinaryInSubqueryContext)_localctx).right = selectQueryExpression();
						}
						break;
					case 14:
						{
						_localctx = new ExpressionSubqueryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionSubqueryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1114;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 1115;
						((ExpressionSubqueryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 528482304L) != 0)) ) {
							((ExpressionSubqueryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1116;
						((ExpressionSubqueryContext)_localctx).condition = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ANY || _la==SOME || _la==ALL) ) {
							((ExpressionSubqueryContext)_localctx).condition = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1117;
						Match(LEFT_PAREN);
						State = 1118;
						selectQueryExpression();
						State = 1119;
						Match(RIGHT_PAREN);
						}
						break;
					case 15:
						{
						_localctx = new ExpressionUnaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionUnaryContext)_localctx).right = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1121;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 1122;
						((ExpressionUnaryContext)_localctx).op = Match(IS);
						State = 1124;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 1123;
							Match(NOT);
							}
						}

						State = 1126;
						Match(NULL);
						}
						break;
					case 16:
						{
						_localctx = new ExpressionAtTimeZoneContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionAtTimeZoneContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1127;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1128;
						atTimeZone();
						}
						break;
					}
					} 
				}
				State = 1133;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,143,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SimpleExpressionContext : ParserRuleContext {
		public SimpleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpression; } }
	 
		public SimpleExpressionContext() { }
		public virtual void CopyFrom(SimpleExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleExpressionCaseContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseExpressionContext caseExpression() {
			return GetRuleContext<CaseExpressionContext>(0);
		}
		public SimpleExpressionCaseContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionCase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionLiteralContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public SimpleExpressionLiteralContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionCastContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CastOperandContext castOperand() {
			return GetRuleContext<CastOperandContext>(0);
		}
		public SimpleExpressionCastContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionCast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionAtTimeZoneContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtTimeZoneContext atTimeZone() {
			return GetRuleContext<AtTimeZoneContext>(0);
		}
		public SimpleExpressionAtTimeZoneContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionAtTimeZone(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionStandardFunctionCallContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public StandardFunctionContext standardFunction() {
			return GetRuleContext<StandardFunctionContext>(0);
		}
		public SimpleExpressionStandardFunctionCallContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionStandardFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionUnaryContext : SimpleExpressionContext {
		public IToken op;
		public SimpleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(QueryCatParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(QueryCatParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(QueryCatParser.NOT, 0); }
		public SimpleExpressionUnaryContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionUnary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionBinaryContext : SimpleExpressionContext {
		public SimpleExpressionContext left;
		public IToken op;
		public SimpleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext[] simpleExpression() {
			return GetRuleContexts<SimpleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression(int i) {
			return GetRuleContext<SimpleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(QueryCatParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(QueryCatParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(QueryCatParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(QueryCatParser.CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(QueryCatParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(QueryCatParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(QueryCatParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(QueryCatParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(QueryCatParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUALS() { return GetToken(QueryCatParser.GREATER_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(QueryCatParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUALS() { return GetToken(QueryCatParser.LESS_OR_EQUALS, 0); }
		public SimpleExpressionBinaryContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionBinaryCastContext : SimpleExpressionContext {
		public SimpleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPECAST() { return GetToken(QueryCatParser.TYPECAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public SimpleExpressionBinaryCastContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionBinaryCast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionFunctionCallContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public SimpleExpressionFunctionCallContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionInParensContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		public SimpleExpressionInParensContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionInParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionIdentifierContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SimpleExpressionIdentifierContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExpressionContext simpleExpression() {
		return simpleExpression(0);
	}

	private SimpleExpressionContext simpleExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SimpleExpressionContext _localctx = new SimpleExpressionContext(Context, _parentState);
		SimpleExpressionContext _prevctx = _localctx;
		int _startState = 156;
		EnterRecursionRule(_localctx, 156, RULE_simpleExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1148;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,144,Context) ) {
			case 1:
				{
				_localctx = new SimpleExpressionLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1135;
				literal();
				}
				break;
			case 2:
				{
				_localctx = new SimpleExpressionCastContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1136;
				castOperand();
				}
				break;
			case 3:
				{
				_localctx = new SimpleExpressionStandardFunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1137;
				standardFunction();
				}
				break;
			case 4:
				{
				_localctx = new SimpleExpressionFunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1138;
				functionCall();
				}
				break;
			case 5:
				{
				_localctx = new SimpleExpressionIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1139;
				identifier();
				}
				break;
			case 6:
				{
				_localctx = new SimpleExpressionInParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1140;
				Match(LEFT_PAREN);
				State = 1141;
				simpleExpression(0);
				State = 1142;
				Match(RIGHT_PAREN);
				}
				break;
			case 7:
				{
				_localctx = new SimpleExpressionUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1144;
				((SimpleExpressionUnaryContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 18)) & ~0x3f) == 0 && ((1L << (_la - 18)) & 70368744177667L) != 0)) ) {
					((SimpleExpressionUnaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1145;
				((SimpleExpressionUnaryContext)_localctx).right = simpleExpression(6);
				}
				break;
			case 8:
				{
				_localctx = new SimpleExpressionCaseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1146;
				caseExpression();
				}
				break;
			case 9:
				{
				_localctx = new SimpleExpressionAtTimeZoneContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1147;
				atTimeZone();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1164;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,146,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1162;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
					case 1:
						{
						_localctx = new SimpleExpressionBinaryContext(new SimpleExpressionContext(_parentctx, _parentState));
						((SimpleExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpression);
						State = 1150;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1151;
						((SimpleExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7340032L) != 0)) ) {
							((SimpleExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1152;
						((SimpleExpressionBinaryContext)_localctx).right = simpleExpression(6);
						}
						break;
					case 2:
						{
						_localctx = new SimpleExpressionBinaryContext(new SimpleExpressionContext(_parentctx, _parentState));
						((SimpleExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpression);
						State = 1153;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 1154;
						((SimpleExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 537657344L) != 0)) ) {
							((SimpleExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1155;
						((SimpleExpressionBinaryContext)_localctx).right = simpleExpression(5);
						}
						break;
					case 3:
						{
						_localctx = new SimpleExpressionBinaryContext(new SimpleExpressionContext(_parentctx, _parentState));
						((SimpleExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpression);
						State = 1156;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1157;
						((SimpleExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 528482304L) != 0)) ) {
							((SimpleExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1158;
						((SimpleExpressionBinaryContext)_localctx).right = simpleExpression(4);
						}
						break;
					case 4:
						{
						_localctx = new SimpleExpressionBinaryCastContext(new SimpleExpressionContext(_parentctx, _parentState));
						((SimpleExpressionBinaryCastContext)_localctx).right = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpression);
						State = 1159;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1160;
						Match(TYPECAST);
						State = 1161;
						type();
						}
						break;
					}
					} 
				}
				State = 1166;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,146,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LiteralIntervalContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntervalLiteralContext intervalLiteral() {
			return GetRuleContext<IntervalLiteralContext>(0);
		}
		public LiteralIntervalContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralInterval(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralPlainContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(QueryCatParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_LITERAL() { return GetToken(QueryCatParser.FLOAT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_LITERAL() { return GetToken(QueryCatParser.NUMERIC_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(QueryCatParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(QueryCatParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(QueryCatParser.NULL, 0); }
		public LiteralPlainContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralPlain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 158, RULE_literal);
		try {
			State = 1175;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER_LITERAL:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1167;
				Match(INTEGER_LITERAL);
				}
				break;
			case STRING_LITERAL:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1168;
				Match(STRING_LITERAL);
				}
				break;
			case FLOAT_LITERAL:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1169;
				Match(FLOAT_LITERAL);
				}
				break;
			case NUMERIC_LITERAL:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1170;
				Match(NUMERIC_LITERAL);
				}
				break;
			case TRUE:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1171;
				Match(TRUE);
				}
				break;
			case FALSE:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1172;
				Match(FALSE);
				}
				break;
			case NULL:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1173;
				Match(NULL);
				}
				break;
			case INTERVAL:
				_localctx = new LiteralIntervalContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1174;
				intervalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 15: return selectQueryExpressionBody_sempred((SelectQueryExpressionBodyContext)_localctx, predIndex);
		case 77: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 78: return simpleExpression_sempred((SimpleExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool selectQueryExpressionBody_sempred(SelectQueryExpressionBodyContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 19);
		case 3: return Precpred(Context, 18);
		case 4: return Precpred(Context, 17);
		case 5: return Precpred(Context, 16);
		case 6: return Precpred(Context, 15);
		case 7: return Precpred(Context, 14);
		case 8: return Precpred(Context, 10);
		case 9: return Precpred(Context, 6);
		case 10: return Precpred(Context, 5);
		case 11: return Precpred(Context, 25);
		case 12: return Precpred(Context, 13);
		case 13: return Precpred(Context, 12);
		case 14: return Precpred(Context, 11);
		case 15: return Precpred(Context, 9);
		case 16: return Precpred(Context, 4);
		case 17: return Precpred(Context, 3);
		}
		return true;
	}
	private bool simpleExpression_sempred(SimpleExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18: return Precpred(Context, 5);
		case 19: return Precpred(Context, 4);
		case 20: return Precpred(Context, 3);
		case 21: return Precpred(Context, 11);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,171,1178,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,1,0,1,0,1,0,1,1,5,1,165,8,1,10,1,12,1,168,9,1,1,1,
		1,1,1,1,5,1,173,8,1,10,1,12,1,176,9,1,1,1,5,1,179,8,1,10,1,12,1,182,9,
		1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,199,
		8,2,1,3,1,3,1,3,1,3,1,3,5,3,206,8,3,10,3,12,3,209,9,3,3,3,211,8,3,1,3,
		1,3,1,3,3,3,216,8,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,3,4,225,8,4,1,5,3,5,228,
		8,5,1,5,1,5,3,5,232,8,5,1,5,1,5,1,5,3,5,237,8,5,1,5,1,5,3,5,241,8,5,1,
		6,1,6,1,6,1,6,1,6,5,6,248,8,6,10,6,12,6,251,9,6,3,6,253,8,6,1,6,1,6,1,
		6,1,6,1,6,1,6,1,6,3,6,262,8,6,1,7,1,7,1,7,3,7,267,8,7,1,7,1,7,1,8,1,8,
		1,8,1,8,3,8,275,8,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,
		1,11,5,11,289,8,11,10,11,12,11,292,9,11,1,12,1,12,3,12,296,8,12,1,12,1,
		12,1,12,1,12,3,12,302,8,12,1,13,3,13,305,8,13,1,13,1,13,3,13,309,8,13,
		1,14,3,14,312,8,14,1,14,1,14,3,14,316,8,14,1,14,3,14,319,8,14,1,14,3,14,
		322,8,14,1,14,3,14,325,8,14,1,15,1,15,1,15,1,15,1,15,1,15,3,15,333,8,15,
		1,15,1,15,1,15,1,15,3,15,339,8,15,1,15,5,15,342,8,15,10,15,12,15,345,9,
		15,1,16,1,16,1,16,1,16,1,16,3,16,352,8,16,1,17,3,17,355,8,17,1,17,1,17,
		3,17,359,8,17,1,17,3,17,362,8,17,1,17,1,17,3,17,366,8,17,1,17,3,17,369,
		8,17,1,17,3,17,372,8,17,1,17,3,17,375,8,17,1,18,1,18,1,18,5,18,380,8,18,
		10,18,12,18,383,9,18,1,19,1,19,1,19,1,19,5,19,389,8,19,10,19,12,19,392,
		9,19,1,20,1,20,1,20,3,20,397,8,20,1,21,1,21,1,21,1,21,1,21,1,21,5,21,405,
		8,21,10,21,12,21,408,9,21,1,21,1,21,1,22,1,22,3,22,414,8,22,1,22,1,22,
		1,22,5,22,419,8,22,10,22,12,22,422,9,22,1,23,1,23,1,23,1,23,1,23,3,23,
		429,8,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,5,24,439,8,24,10,24,12,
		24,442,9,24,1,25,1,25,1,25,3,25,447,8,25,1,25,1,25,1,25,1,25,1,25,3,25,
		454,8,25,1,25,3,25,457,8,25,1,25,1,25,3,25,461,8,25,3,25,463,8,25,1,26,
		1,26,1,26,1,26,3,26,469,8,26,1,26,1,26,3,26,473,8,26,1,27,1,27,3,27,477,
		8,27,1,27,3,27,480,8,27,1,27,3,27,483,8,27,1,28,1,28,1,28,1,28,5,28,489,
		8,28,10,28,12,28,492,9,28,1,29,1,29,5,29,496,8,29,10,29,12,29,499,9,29,
		1,30,1,30,1,30,1,30,5,30,505,8,30,10,30,12,30,508,9,30,1,30,1,30,1,31,
		1,31,1,31,1,31,5,31,516,8,31,10,31,12,31,519,9,31,1,32,1,32,1,32,3,32,
		524,8,32,1,32,3,32,527,8,32,1,32,1,32,1,32,3,32,532,8,32,1,32,3,32,535,
		8,32,1,32,1,32,1,32,3,32,540,8,32,1,32,3,32,543,8,32,1,32,1,32,1,32,1,
		32,3,32,549,8,32,1,32,1,32,1,32,3,32,554,8,32,1,32,3,32,557,8,32,1,32,
		1,32,1,32,1,32,3,32,563,8,32,1,32,1,32,1,32,3,32,568,8,32,1,32,3,32,571,
		8,32,3,32,573,8,32,1,33,3,33,576,8,33,1,33,1,33,1,33,1,33,1,33,1,33,3,
		33,584,8,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,5,33,593,8,33,10,33,12,
		33,596,9,33,1,33,1,33,3,33,600,8,33,1,34,1,34,1,34,3,34,605,8,34,3,34,
		607,8,34,1,35,1,35,1,35,1,35,1,35,5,35,614,8,35,10,35,12,35,617,9,35,1,
		36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,3,38,627,8,38,1,38,3,38,630,8,38,
		1,38,3,38,633,8,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,5,39,642,8,39,10,
		39,12,39,645,9,39,1,40,1,40,1,40,1,40,1,40,5,40,652,8,40,10,40,12,40,655,
		9,40,1,41,1,41,1,41,1,41,5,41,661,8,41,10,41,12,41,664,9,41,1,42,1,42,
		1,42,1,42,1,43,1,43,1,43,3,43,673,8,43,1,44,1,44,3,44,677,8,44,1,44,1,
		44,3,44,681,8,44,1,44,3,44,684,8,44,1,45,1,45,1,45,1,46,1,46,1,46,1,47,
		1,47,1,47,1,47,1,47,1,47,5,47,698,8,47,10,47,12,47,701,9,47,1,47,3,47,
		704,8,47,1,48,1,48,3,48,708,8,48,1,48,1,48,1,48,3,48,713,8,48,1,48,3,48,
		716,8,48,1,48,1,48,3,48,720,8,48,3,48,722,8,48,1,49,1,49,1,49,1,49,1,50,
		1,50,1,50,1,50,3,50,732,8,50,1,50,1,50,1,51,1,51,3,51,738,8,51,1,51,1,
		51,1,51,3,51,743,8,51,1,51,3,51,746,8,51,1,51,1,51,1,51,3,51,751,8,51,
		1,51,3,51,754,8,51,1,51,1,51,3,51,758,8,51,3,51,760,8,51,1,52,1,52,1,52,
		1,52,5,52,766,8,52,10,52,12,52,769,9,52,1,52,1,52,1,53,1,53,3,53,775,8,
		53,1,54,1,54,1,54,1,54,3,54,781,8,54,1,55,1,55,3,55,785,8,55,1,55,1,55,
		1,55,3,55,790,8,55,1,55,3,55,793,8,55,1,55,1,55,3,55,797,8,55,3,55,799,
		8,55,1,56,1,56,1,56,1,57,1,57,1,57,1,58,1,58,1,58,1,58,5,58,811,8,58,10,
		58,12,58,814,9,58,1,58,1,58,3,58,818,8,58,1,59,1,59,1,59,1,59,1,60,1,60,
		1,60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
		1,62,1,62,1,63,1,63,1,64,1,64,1,64,3,64,847,8,64,1,65,1,65,5,65,851,8,
		65,10,65,12,65,854,9,65,1,65,3,65,857,8,65,1,66,1,66,1,66,1,66,1,66,1,
		66,5,66,865,8,66,10,66,12,66,868,9,66,1,66,1,66,1,66,1,66,1,66,1,66,1,
		66,3,66,877,8,66,1,67,1,67,1,67,1,67,5,67,883,8,67,10,67,12,67,886,9,67,
		1,67,1,67,1,68,1,68,1,68,1,69,1,69,5,69,895,8,69,10,69,12,69,898,9,69,
		1,69,1,69,1,69,5,69,903,8,69,10,69,12,69,906,9,69,1,69,5,69,909,8,69,10,
		69,12,69,912,9,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,71,1,
		71,1,71,1,71,1,71,3,71,928,8,71,1,72,1,72,3,72,932,8,72,1,72,5,72,935,
		8,72,10,72,12,72,938,9,72,1,72,1,72,3,72,942,8,72,1,72,1,72,1,73,1,73,
		1,73,1,73,1,73,1,74,1,74,1,74,1,74,1,74,3,74,956,8,74,1,74,3,74,959,8,
		74,1,74,3,74,962,8,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,
		1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,5,74,986,8,
		74,10,74,12,74,989,9,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,
		74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,
		74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,1023,8,74,1,75,1,75,1,
		76,1,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,
		77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1052,8,77,1,
		77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,
		77,1068,8,77,1,77,1,77,1,77,1,77,3,77,1074,8,77,1,77,1,77,1,77,1,77,1,
		77,3,77,1081,8,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,
		77,1,77,1,77,1,77,1,77,1,77,3,77,1099,8,77,1,77,1,77,1,77,1,77,3,77,1105,
		8,77,1,77,1,77,1,77,1,77,3,77,1111,8,77,1,77,1,77,1,77,1,77,1,77,1,77,
		1,77,1,77,1,77,1,77,1,77,1,77,3,77,1125,8,77,1,77,1,77,1,77,5,77,1130,
		8,77,10,77,12,77,1133,9,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,
		1,78,1,78,1,78,1,78,1,78,3,78,1149,8,78,1,78,1,78,1,78,1,78,1,78,1,78,
		1,78,1,78,1,78,1,78,1,78,1,78,5,78,1163,8,78,10,78,12,78,1166,9,78,1,79,
		1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,1176,8,79,1,79,0,3,30,154,156,
		80,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
		48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,
		96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
		132,134,136,138,140,142,144,146,148,150,152,154,156,158,0,18,3,0,3,3,23,
		23,54,54,2,0,106,106,109,109,2,0,105,105,110,110,2,0,111,111,142,142,3,
		0,116,116,124,124,135,135,1,0,136,137,2,0,112,112,125,125,2,0,113,113,
		126,126,1,0,67,67,1,0,75,77,1,0,81,91,3,0,33,47,73,73,80,80,2,0,18,19,
		64,64,1,0,30,31,1,0,20,22,2,0,18,19,29,29,1,0,23,28,3,0,33,33,69,69,105,
		105,1319,0,160,1,0,0,0,2,166,1,0,0,0,4,198,1,0,0,0,6,200,1,0,0,0,8,219,
		1,0,0,0,10,227,1,0,0,0,12,261,1,0,0,0,14,266,1,0,0,0,16,270,1,0,0,0,18,
		276,1,0,0,0,20,281,1,0,0,0,22,283,1,0,0,0,24,293,1,0,0,0,26,304,1,0,0,
		0,28,311,1,0,0,0,30,326,1,0,0,0,32,351,1,0,0,0,34,354,1,0,0,0,36,376,1,
		0,0,0,38,384,1,0,0,0,40,396,1,0,0,0,42,398,1,0,0,0,44,411,1,0,0,0,46,423,
		1,0,0,0,48,435,1,0,0,0,50,462,1,0,0,0,52,464,1,0,0,0,54,474,1,0,0,0,56,
		484,1,0,0,0,58,493,1,0,0,0,60,500,1,0,0,0,62,511,1,0,0,0,64,572,1,0,0,
		0,66,599,1,0,0,0,68,606,1,0,0,0,70,608,1,0,0,0,72,618,1,0,0,0,74,621,1,
		0,0,0,76,624,1,0,0,0,78,636,1,0,0,0,80,646,1,0,0,0,82,656,1,0,0,0,84,665,
		1,0,0,0,86,669,1,0,0,0,88,674,1,0,0,0,90,685,1,0,0,0,92,688,1,0,0,0,94,
		691,1,0,0,0,96,721,1,0,0,0,98,723,1,0,0,0,100,727,1,0,0,0,102,759,1,0,
		0,0,104,761,1,0,0,0,106,774,1,0,0,0,108,776,1,0,0,0,110,798,1,0,0,0,112,
		800,1,0,0,0,114,803,1,0,0,0,116,806,1,0,0,0,118,819,1,0,0,0,120,823,1,
		0,0,0,122,830,1,0,0,0,124,839,1,0,0,0,126,841,1,0,0,0,128,846,1,0,0,0,
		130,856,1,0,0,0,132,876,1,0,0,0,134,878,1,0,0,0,136,889,1,0,0,0,138,892,
		1,0,0,0,140,915,1,0,0,0,142,922,1,0,0,0,144,929,1,0,0,0,146,945,1,0,0,
		0,148,1022,1,0,0,0,150,1024,1,0,0,0,152,1026,1,0,0,0,154,1051,1,0,0,0,
		156,1148,1,0,0,0,158,1175,1,0,0,0,160,161,3,2,1,0,161,162,5,0,0,1,162,
		1,1,0,0,0,163,165,5,9,0,0,164,163,1,0,0,0,165,168,1,0,0,0,166,164,1,0,
		0,0,166,167,1,0,0,0,167,169,1,0,0,0,168,166,1,0,0,0,169,174,3,4,2,0,170,
		171,5,9,0,0,171,173,3,4,2,0,172,170,1,0,0,0,173,176,1,0,0,0,174,172,1,
		0,0,0,174,175,1,0,0,0,175,180,1,0,0,0,176,174,1,0,0,0,177,179,5,9,0,0,
		178,177,1,0,0,0,179,182,1,0,0,0,180,178,1,0,0,0,180,181,1,0,0,0,181,3,
		1,0,0,0,182,180,1,0,0,0,183,199,3,12,6,0,184,199,3,16,8,0,185,199,3,18,
		9,0,186,199,3,20,10,0,187,199,3,94,47,0,188,199,3,100,50,0,189,199,3,108,
		54,0,190,199,3,112,56,0,191,199,3,114,57,0,192,199,3,116,58,0,193,199,
		3,120,60,0,194,199,3,122,61,0,195,199,3,124,62,0,196,199,3,126,63,0,197,
		199,3,154,77,0,198,183,1,0,0,0,198,184,1,0,0,0,198,185,1,0,0,0,198,186,
		1,0,0,0,198,187,1,0,0,0,198,188,1,0,0,0,198,189,1,0,0,0,198,190,1,0,0,
		0,198,191,1,0,0,0,198,192,1,0,0,0,198,193,1,0,0,0,198,194,1,0,0,0,198,
		195,1,0,0,0,198,196,1,0,0,0,198,197,1,0,0,0,199,5,1,0,0,0,200,201,3,128,
		64,0,201,210,5,1,0,0,202,207,3,10,5,0,203,204,5,6,0,0,204,206,3,10,5,0,
		205,203,1,0,0,0,206,209,1,0,0,0,207,205,1,0,0,0,207,208,1,0,0,0,208,211,
		1,0,0,0,209,207,1,0,0,0,210,202,1,0,0,0,210,211,1,0,0,0,211,212,1,0,0,
		0,212,215,5,2,0,0,213,214,5,5,0,0,214,216,3,8,4,0,215,213,1,0,0,0,215,
		216,1,0,0,0,216,217,1,0,0,0,217,218,5,0,0,1,218,7,1,0,0,0,219,224,3,152,
		76,0,220,221,5,27,0,0,221,222,3,128,64,0,222,223,5,25,0,0,223,225,1,0,
		0,0,224,220,1,0,0,0,224,225,1,0,0,0,225,9,1,0,0,0,226,228,5,8,0,0,227,
		226,1,0,0,0,227,228,1,0,0,0,228,229,1,0,0,0,229,231,3,128,64,0,230,232,
		5,10,0,0,231,230,1,0,0,0,231,232,1,0,0,0,232,233,1,0,0,0,233,234,5,5,0,
		0,234,236,3,8,4,0,235,237,5,13,0,0,236,235,1,0,0,0,236,237,1,0,0,0,237,
		240,1,0,0,0,238,239,7,0,0,0,239,241,3,158,79,0,240,238,1,0,0,0,240,241,
		1,0,0,0,241,11,1,0,0,0,242,243,3,128,64,0,243,252,5,1,0,0,244,249,3,14,
		7,0,245,246,5,6,0,0,246,248,3,14,7,0,247,245,1,0,0,0,248,251,1,0,0,0,249,
		247,1,0,0,0,249,250,1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,252,244,1,
		0,0,0,252,253,1,0,0,0,253,254,1,0,0,0,254,255,5,2,0,0,255,262,1,0,0,0,
		256,257,3,128,64,0,257,258,5,1,0,0,258,259,5,20,0,0,259,260,5,2,0,0,260,
		262,1,0,0,0,261,242,1,0,0,0,261,256,1,0,0,0,262,13,1,0,0,0,263,264,3,128,
		64,0,264,265,5,4,0,0,265,267,1,0,0,0,266,263,1,0,0,0,266,267,1,0,0,0,267,
		268,1,0,0,0,268,269,3,154,77,0,269,15,1,0,0,0,270,271,5,150,0,0,271,274,
		3,128,64,0,272,273,5,3,0,0,273,275,3,4,2,0,274,272,1,0,0,0,274,275,1,0,
		0,0,275,17,1,0,0,0,276,277,5,151,0,0,277,278,3,130,65,0,278,279,5,3,0,
		0,279,280,3,4,2,0,280,19,1,0,0,0,281,282,3,28,14,0,282,21,1,0,0,0,283,
		284,5,129,0,0,284,285,5,52,0,0,285,290,3,24,12,0,286,287,5,6,0,0,287,289,
		3,24,12,0,288,286,1,0,0,0,289,292,1,0,0,0,290,288,1,0,0,0,290,291,1,0,
		0,0,291,23,1,0,0,0,292,290,1,0,0,0,293,295,3,154,77,0,294,296,7,1,0,0,
		295,294,1,0,0,0,295,296,1,0,0,0,296,301,1,0,0,0,297,298,5,127,0,0,298,
		302,5,113,0,0,299,300,5,127,0,0,300,302,5,123,0,0,301,297,1,0,0,0,301,
		299,1,0,0,0,301,302,1,0,0,0,302,25,1,0,0,0,303,305,5,49,0,0,304,303,1,
		0,0,0,304,305,1,0,0,0,305,308,1,0,0,0,306,309,3,128,64,0,307,309,5,167,
		0,0,308,306,1,0,0,0,308,307,1,0,0,0,309,27,1,0,0,0,310,312,3,44,22,0,311,
		310,1,0,0,0,311,312,1,0,0,0,312,313,1,0,0,0,313,315,3,30,15,0,314,316,
		3,22,11,0,315,314,1,0,0,0,315,316,1,0,0,0,316,318,1,0,0,0,317,319,3,92,
		46,0,318,317,1,0,0,0,318,319,1,0,0,0,319,321,1,0,0,0,320,322,3,86,43,0,
		321,320,1,0,0,0,321,322,1,0,0,0,322,324,1,0,0,0,323,325,3,88,44,0,324,
		323,1,0,0,0,324,325,1,0,0,0,325,29,1,0,0,0,326,327,6,15,-1,0,327,328,3,
		32,16,0,328,343,1,0,0,0,329,330,10,2,0,0,330,332,5,120,0,0,331,333,7,2,
		0,0,332,331,1,0,0,0,332,333,1,0,0,0,333,334,1,0,0,0,334,342,3,30,15,3,
		335,336,10,1,0,0,336,338,7,3,0,0,337,339,7,2,0,0,338,337,1,0,0,0,338,339,
		1,0,0,0,339,340,1,0,0,0,340,342,3,30,15,2,341,329,1,0,0,0,341,335,1,0,
		0,0,342,345,1,0,0,0,343,341,1,0,0,0,343,344,1,0,0,0,344,31,1,0,0,0,345,
		343,1,0,0,0,346,352,3,34,17,0,347,348,5,1,0,0,348,349,3,28,14,0,349,350,
		5,2,0,0,350,352,1,0,0,0,351,346,1,0,0,0,351,347,1,0,0,0,352,33,1,0,0,0,
		353,355,3,44,22,0,354,353,1,0,0,0,354,355,1,0,0,0,355,356,1,0,0,0,356,
		358,5,138,0,0,357,359,3,90,45,0,358,357,1,0,0,0,358,359,1,0,0,0,359,361,
		1,0,0,0,360,362,3,40,20,0,361,360,1,0,0,0,361,362,1,0,0,0,362,363,1,0,
		0,0,363,365,3,36,18,0,364,366,3,38,19,0,365,364,1,0,0,0,365,366,1,0,0,
		0,366,368,1,0,0,0,367,369,3,52,26,0,368,367,1,0,0,0,368,369,1,0,0,0,369,
		371,1,0,0,0,370,372,3,54,27,0,371,370,1,0,0,0,371,372,1,0,0,0,372,374,
		1,0,0,0,373,375,3,82,41,0,374,373,1,0,0,0,374,375,1,0,0,0,375,35,1,0,0,
		0,376,381,3,50,25,0,377,378,5,6,0,0,378,380,3,50,25,0,379,377,1,0,0,0,
		380,383,1,0,0,0,381,379,1,0,0,0,381,382,1,0,0,0,382,37,1,0,0,0,383,381,
		1,0,0,0,384,385,5,111,0,0,385,390,3,130,65,0,386,387,5,6,0,0,387,389,3,
		130,65,0,388,386,1,0,0,0,389,392,1,0,0,0,390,388,1,0,0,0,390,391,1,0,0,
		0,391,39,1,0,0,0,392,390,1,0,0,0,393,397,5,105,0,0,394,397,5,110,0,0,395,
		397,3,42,21,0,396,393,1,0,0,0,396,394,1,0,0,0,396,395,1,0,0,0,397,41,1,
		0,0,0,398,399,5,110,0,0,399,400,5,66,0,0,400,401,5,1,0,0,401,406,3,156,
		78,0,402,403,5,6,0,0,403,405,3,156,78,0,404,402,1,0,0,0,405,408,1,0,0,
		0,406,404,1,0,0,0,406,407,1,0,0,0,407,409,1,0,0,0,408,406,1,0,0,0,409,
		410,5,2,0,0,410,43,1,0,0,0,411,413,5,146,0,0,412,414,5,134,0,0,413,412,
		1,0,0,0,413,414,1,0,0,0,414,415,1,0,0,0,415,420,3,46,23,0,416,417,5,6,
		0,0,417,419,3,46,23,0,418,416,1,0,0,0,419,422,1,0,0,0,420,418,1,0,0,0,
		420,421,1,0,0,0,421,45,1,0,0,0,422,420,1,0,0,0,423,428,3,128,64,0,424,
		425,5,1,0,0,425,426,3,48,24,0,426,427,5,2,0,0,427,429,1,0,0,0,428,424,
		1,0,0,0,428,429,1,0,0,0,429,430,1,0,0,0,430,431,5,49,0,0,431,432,5,1,0,
		0,432,433,3,28,14,0,433,434,5,2,0,0,434,47,1,0,0,0,435,440,3,130,65,0,
		436,437,5,6,0,0,437,439,3,130,65,0,438,436,1,0,0,0,439,442,1,0,0,0,440,
		438,1,0,0,0,440,441,1,0,0,0,441,49,1,0,0,0,442,440,1,0,0,0,443,444,3,128,
		64,0,444,445,5,7,0,0,445,447,1,0,0,0,446,443,1,0,0,0,446,447,1,0,0,0,447,
		448,1,0,0,0,448,463,5,20,0,0,449,450,3,12,6,0,450,453,5,131,0,0,451,454,
		3,128,64,0,452,454,3,76,38,0,453,451,1,0,0,0,453,452,1,0,0,0,454,456,1,
		0,0,0,455,457,3,26,13,0,456,455,1,0,0,0,456,457,1,0,0,0,457,463,1,0,0,
		0,458,460,3,154,77,0,459,461,3,26,13,0,460,459,1,0,0,0,460,461,1,0,0,0,
		461,463,1,0,0,0,462,446,1,0,0,0,462,449,1,0,0,0,462,458,1,0,0,0,463,51,
		1,0,0,0,464,468,5,121,0,0,465,469,3,12,6,0,466,469,5,167,0,0,467,469,5,
		19,0,0,468,465,1,0,0,0,468,466,1,0,0,0,468,467,1,0,0,0,469,472,1,0,0,0,
		470,471,5,115,0,0,471,473,3,12,6,0,472,470,1,0,0,0,472,473,1,0,0,0,473,
		53,1,0,0,0,474,476,3,56,28,0,475,477,3,74,37,0,476,475,1,0,0,0,476,477,
		1,0,0,0,477,479,1,0,0,0,478,480,3,70,35,0,479,478,1,0,0,0,479,480,1,0,
		0,0,480,482,1,0,0,0,481,483,3,72,36,0,482,481,1,0,0,0,482,483,1,0,0,0,
		483,55,1,0,0,0,484,485,5,58,0,0,485,490,3,58,29,0,486,487,5,6,0,0,487,
		489,3,58,29,0,488,486,1,0,0,0,489,492,1,0,0,0,490,488,1,0,0,0,490,491,
		1,0,0,0,491,57,1,0,0,0,492,490,1,0,0,0,493,497,3,64,32,0,494,496,3,66,
		33,0,495,494,1,0,0,0,496,499,1,0,0,0,497,495,1,0,0,0,497,498,1,0,0,0,498,
		59,1,0,0,0,499,497,1,0,0,0,500,501,5,1,0,0,501,506,3,156,78,0,502,503,
		5,6,0,0,503,505,3,156,78,0,504,502,1,0,0,0,505,508,1,0,0,0,506,504,1,0,
		0,0,506,507,1,0,0,0,507,509,1,0,0,0,508,506,1,0,0,0,509,510,5,2,0,0,510,
		61,1,0,0,0,511,512,5,143,0,0,512,517,3,60,30,0,513,514,5,6,0,0,514,516,
		3,60,30,0,515,513,1,0,0,0,516,519,1,0,0,0,517,515,1,0,0,0,517,518,1,0,
		0,0,518,63,1,0,0,0,519,517,1,0,0,0,520,523,3,12,6,0,521,522,5,115,0,0,
		522,524,3,12,6,0,523,521,1,0,0,0,523,524,1,0,0,0,524,526,1,0,0,0,525,527,
		3,26,13,0,526,525,1,0,0,0,526,527,1,0,0,0,527,573,1,0,0,0,528,531,5,19,
		0,0,529,530,5,115,0,0,530,532,3,12,6,0,531,529,1,0,0,0,531,532,1,0,0,0,
		532,534,1,0,0,0,533,535,3,26,13,0,534,533,1,0,0,0,534,535,1,0,0,0,535,
		573,1,0,0,0,536,539,5,167,0,0,537,538,5,115,0,0,538,540,3,12,6,0,539,537,
		1,0,0,0,539,540,1,0,0,0,540,542,1,0,0,0,541,543,3,26,13,0,542,541,1,0,
		0,0,542,543,1,0,0,0,543,573,1,0,0,0,544,545,5,1,0,0,545,546,3,28,14,0,
		546,548,5,2,0,0,547,549,3,26,13,0,548,547,1,0,0,0,548,549,1,0,0,0,549,
		573,1,0,0,0,550,553,3,130,65,0,551,552,5,115,0,0,552,554,3,12,6,0,553,
		551,1,0,0,0,553,554,1,0,0,0,554,556,1,0,0,0,555,557,3,26,13,0,556,555,
		1,0,0,0,556,557,1,0,0,0,557,573,1,0,0,0,558,559,5,1,0,0,559,560,3,62,31,
		0,560,562,5,2,0,0,561,563,3,26,13,0,562,561,1,0,0,0,562,563,1,0,0,0,563,
		573,1,0,0,0,564,567,3,156,78,0,565,566,5,115,0,0,566,568,3,12,6,0,567,
		565,1,0,0,0,567,568,1,0,0,0,568,570,1,0,0,0,569,571,3,26,13,0,570,569,
		1,0,0,0,570,571,1,0,0,0,571,573,1,0,0,0,572,520,1,0,0,0,572,528,1,0,0,
		0,572,536,1,0,0,0,572,544,1,0,0,0,572,550,1,0,0,0,572,558,1,0,0,0,572,
		564,1,0,0,0,573,65,1,0,0,0,574,576,3,68,34,0,575,574,1,0,0,0,575,576,1,
		0,0,0,576,577,1,0,0,0,577,578,5,122,0,0,578,579,3,64,32,0,579,580,5,66,
		0,0,580,581,3,154,77,0,581,600,1,0,0,0,582,584,3,68,34,0,583,582,1,0,0,
		0,583,584,1,0,0,0,584,585,1,0,0,0,585,586,5,122,0,0,586,587,3,64,32,0,
		587,588,5,72,0,0,588,589,5,1,0,0,589,594,3,130,65,0,590,591,5,6,0,0,591,
		593,3,130,65,0,592,590,1,0,0,0,593,596,1,0,0,0,594,592,1,0,0,0,594,595,
		1,0,0,0,595,597,1,0,0,0,596,594,1,0,0,0,597,598,5,2,0,0,598,600,1,0,0,
		0,599,575,1,0,0,0,599,583,1,0,0,0,600,67,1,0,0,0,601,607,5,119,0,0,602,
		604,7,4,0,0,603,605,5,130,0,0,604,603,1,0,0,0,604,605,1,0,0,0,605,607,
		1,0,0,0,606,601,1,0,0,0,606,602,1,0,0,0,607,69,1,0,0,0,608,609,5,117,0,
		0,609,610,5,52,0,0,610,615,3,154,77,0,611,612,5,6,0,0,612,614,3,154,77,
		0,613,611,1,0,0,0,614,617,1,0,0,0,615,613,1,0,0,0,615,616,1,0,0,0,616,
		71,1,0,0,0,617,615,1,0,0,0,618,619,5,118,0,0,619,620,3,154,77,0,620,73,
		1,0,0,0,621,622,5,144,0,0,622,623,3,154,77,0,623,75,1,0,0,0,624,626,5,
		1,0,0,625,627,3,128,64,0,626,625,1,0,0,0,626,627,1,0,0,0,627,629,1,0,0,
		0,628,630,3,78,39,0,629,628,1,0,0,0,629,630,1,0,0,0,630,632,1,0,0,0,631,
		633,3,80,40,0,632,631,1,0,0,0,632,633,1,0,0,0,633,634,1,0,0,0,634,635,
		5,2,0,0,635,77,1,0,0,0,636,637,5,132,0,0,637,638,5,52,0,0,638,643,3,154,
		77,0,639,640,5,6,0,0,640,642,3,154,77,0,641,639,1,0,0,0,642,645,1,0,0,
		0,643,641,1,0,0,0,643,644,1,0,0,0,644,79,1,0,0,0,645,643,1,0,0,0,646,647,
		5,129,0,0,647,648,5,52,0,0,648,653,3,24,12,0,649,650,5,6,0,0,650,652,3,
		24,12,0,651,649,1,0,0,0,652,655,1,0,0,0,653,651,1,0,0,0,653,654,1,0,0,
		0,654,81,1,0,0,0,655,653,1,0,0,0,656,657,5,145,0,0,657,662,3,84,42,0,658,
		659,5,6,0,0,659,661,3,84,42,0,660,658,1,0,0,0,661,664,1,0,0,0,662,660,
		1,0,0,0,662,663,1,0,0,0,663,83,1,0,0,0,664,662,1,0,0,0,665,666,3,130,65,
		0,666,667,5,49,0,0,667,668,3,76,38,0,668,85,1,0,0,0,669,670,5,128,0,0,
		670,672,3,154,77,0,671,673,7,5,0,0,672,671,1,0,0,0,672,673,1,0,0,0,673,
		87,1,0,0,0,674,676,7,6,0,0,675,677,7,7,0,0,676,675,1,0,0,0,676,677,1,0,
		0,0,677,678,1,0,0,0,678,680,3,154,77,0,679,681,7,5,0,0,680,679,1,0,0,0,
		680,681,1,0,0,0,681,683,1,0,0,0,682,684,7,8,0,0,683,682,1,0,0,0,683,684,
		1,0,0,0,684,89,1,0,0,0,685,686,5,140,0,0,686,687,5,164,0,0,687,91,1,0,
		0,0,688,689,5,125,0,0,689,690,3,154,77,0,690,93,1,0,0,0,691,692,5,147,
		0,0,692,693,3,96,48,0,693,694,5,151,0,0,694,699,3,98,49,0,695,696,5,6,
		0,0,696,698,3,98,49,0,697,695,1,0,0,0,698,701,1,0,0,0,699,697,1,0,0,0,
		699,700,1,0,0,0,700,703,1,0,0,0,701,699,1,0,0,0,702,704,3,74,37,0,703,
		702,1,0,0,0,703,704,1,0,0,0,704,95,1,0,0,0,705,707,3,12,6,0,706,708,3,
		26,13,0,707,706,1,0,0,0,707,708,1,0,0,0,708,722,1,0,0,0,709,712,5,167,
		0,0,710,711,5,115,0,0,711,713,3,12,6,0,712,710,1,0,0,0,712,713,1,0,0,0,
		713,715,1,0,0,0,714,716,3,26,13,0,715,714,1,0,0,0,715,716,1,0,0,0,716,
		722,1,0,0,0,717,719,3,130,65,0,718,720,3,26,13,0,719,718,1,0,0,0,719,720,
		1,0,0,0,720,722,1,0,0,0,721,705,1,0,0,0,721,709,1,0,0,0,721,717,1,0,0,
		0,722,97,1,0,0,0,723,724,3,130,65,0,724,725,5,23,0,0,725,726,3,154,77,
		0,726,99,1,0,0,0,727,728,5,148,0,0,728,729,5,121,0,0,729,731,3,102,51,
		0,730,732,3,104,52,0,731,730,1,0,0,0,731,732,1,0,0,0,732,733,1,0,0,0,733,
		734,3,106,53,0,734,101,1,0,0,0,735,737,3,12,6,0,736,738,3,26,13,0,737,
		736,1,0,0,0,737,738,1,0,0,0,738,760,1,0,0,0,739,742,5,167,0,0,740,741,
		5,115,0,0,741,743,3,12,6,0,742,740,1,0,0,0,742,743,1,0,0,0,743,745,1,0,
		0,0,744,746,3,26,13,0,745,744,1,0,0,0,745,746,1,0,0,0,746,760,1,0,0,0,
		747,750,5,19,0,0,748,749,5,115,0,0,749,751,3,12,6,0,750,748,1,0,0,0,750,
		751,1,0,0,0,751,753,1,0,0,0,752,754,3,26,13,0,753,752,1,0,0,0,753,754,
		1,0,0,0,754,760,1,0,0,0,755,757,3,130,65,0,756,758,3,26,13,0,757,756,1,
		0,0,0,757,758,1,0,0,0,758,760,1,0,0,0,759,735,1,0,0,0,759,739,1,0,0,0,
		759,747,1,0,0,0,759,755,1,0,0,0,760,103,1,0,0,0,761,762,5,1,0,0,762,767,
		3,130,65,0,763,764,5,6,0,0,764,766,3,130,65,0,765,763,1,0,0,0,766,769,
		1,0,0,0,767,765,1,0,0,0,767,768,1,0,0,0,768,770,1,0,0,0,769,767,1,0,0,
		0,770,771,5,2,0,0,771,105,1,0,0,0,772,775,3,28,14,0,773,775,3,62,31,0,
		774,772,1,0,0,0,774,773,1,0,0,0,775,107,1,0,0,0,776,777,5,149,0,0,777,
		778,5,58,0,0,778,780,3,110,55,0,779,781,3,74,37,0,780,779,1,0,0,0,780,
		781,1,0,0,0,781,109,1,0,0,0,782,784,3,12,6,0,783,785,3,26,13,0,784,783,
		1,0,0,0,784,785,1,0,0,0,785,799,1,0,0,0,786,789,5,167,0,0,787,788,5,115,
		0,0,788,790,3,12,6,0,789,787,1,0,0,0,789,790,1,0,0,0,790,792,1,0,0,0,791,
		793,3,26,13,0,792,791,1,0,0,0,792,793,1,0,0,0,793,799,1,0,0,0,794,796,
		3,130,65,0,795,797,3,26,13,0,796,795,1,0,0,0,796,797,1,0,0,0,797,799,1,
		0,0,0,798,782,1,0,0,0,798,786,1,0,0,0,798,794,1,0,0,0,799,111,1,0,0,0,
		800,801,5,104,0,0,801,802,3,154,77,0,802,113,1,0,0,0,803,804,5,152,0,0,
		804,805,3,12,6,0,805,115,1,0,0,0,806,807,5,153,0,0,807,812,3,118,59,0,
		808,809,5,156,0,0,809,811,3,118,59,0,810,808,1,0,0,0,811,814,1,0,0,0,812,
		810,1,0,0,0,812,813,1,0,0,0,813,817,1,0,0,0,814,812,1,0,0,0,815,816,5,
		155,0,0,816,818,3,138,69,0,817,815,1,0,0,0,817,818,1,0,0,0,818,117,1,0,
		0,0,819,820,3,154,77,0,820,821,5,154,0,0,821,822,3,138,69,0,822,119,1,
		0,0,0,823,824,5,157,0,0,824,825,3,154,77,0,825,826,5,63,0,0,826,827,3,
		2,1,0,827,828,5,55,0,0,828,829,5,63,0,0,829,121,1,0,0,0,830,831,5,158,
		0,0,831,832,3,128,64,0,832,833,5,59,0,0,833,834,3,154,77,0,834,835,5,63,
		0,0,835,836,3,2,1,0,836,837,5,55,0,0,837,838,5,63,0,0,838,123,1,0,0,0,
		839,840,5,159,0,0,840,125,1,0,0,0,841,842,5,160,0,0,842,127,1,0,0,0,843,
		847,5,162,0,0,844,847,5,163,0,0,845,847,5,15,0,0,846,843,1,0,0,0,846,844,
		1,0,0,0,846,845,1,0,0,0,847,129,1,0,0,0,848,852,3,128,64,0,849,851,3,132,
		66,0,850,849,1,0,0,0,851,854,1,0,0,0,852,850,1,0,0,0,852,853,1,0,0,0,853,
		857,1,0,0,0,854,852,1,0,0,0,855,857,3,128,64,0,856,848,1,0,0,0,856,855,
		1,0,0,0,857,131,1,0,0,0,858,859,5,7,0,0,859,877,3,128,64,0,860,861,5,11,
		0,0,861,866,3,156,78,0,862,863,5,6,0,0,863,865,3,156,78,0,864,862,1,0,
		0,0,865,868,1,0,0,0,866,864,1,0,0,0,866,867,1,0,0,0,867,869,1,0,0,0,868,
		866,1,0,0,0,869,870,5,12,0,0,870,877,1,0,0,0,871,872,5,11,0,0,872,873,
		5,10,0,0,873,874,3,156,78,0,874,875,5,12,0,0,875,877,1,0,0,0,876,858,1,
		0,0,0,876,860,1,0,0,0,876,871,1,0,0,0,877,133,1,0,0,0,878,879,5,1,0,0,
		879,884,3,154,77,0,880,881,5,6,0,0,881,883,3,154,77,0,882,880,1,0,0,0,
		883,886,1,0,0,0,884,882,1,0,0,0,884,885,1,0,0,0,885,887,1,0,0,0,886,884,
		1,0,0,0,887,888,5,2,0,0,888,135,1,0,0,0,889,890,5,80,0,0,890,891,5,167,
		0,0,891,137,1,0,0,0,892,896,5,51,0,0,893,895,5,9,0,0,894,893,1,0,0,0,895,
		898,1,0,0,0,896,894,1,0,0,0,896,897,1,0,0,0,897,899,1,0,0,0,898,896,1,
		0,0,0,899,904,3,4,2,0,900,901,5,9,0,0,901,903,3,4,2,0,902,900,1,0,0,0,
		903,906,1,0,0,0,904,902,1,0,0,0,904,905,1,0,0,0,905,910,1,0,0,0,906,904,
		1,0,0,0,907,909,5,9,0,0,908,907,1,0,0,0,909,912,1,0,0,0,910,908,1,0,0,
		0,910,911,1,0,0,0,911,913,1,0,0,0,912,910,1,0,0,0,913,914,5,55,0,0,914,
		139,1,0,0,0,915,916,5,53,0,0,916,917,5,1,0,0,917,918,3,156,78,0,918,919,
		5,49,0,0,919,920,3,152,76,0,920,921,5,2,0,0,921,141,1,0,0,0,922,927,5,
		50,0,0,923,928,5,92,0,0,924,925,5,93,0,0,925,926,5,94,0,0,926,928,3,156,
		78,0,927,923,1,0,0,0,927,924,1,0,0,0,928,143,1,0,0,0,929,931,5,95,0,0,
		930,932,3,156,78,0,931,930,1,0,0,0,931,932,1,0,0,0,932,936,1,0,0,0,933,
		935,3,146,73,0,934,933,1,0,0,0,935,938,1,0,0,0,936,934,1,0,0,0,936,937,
		1,0,0,0,937,941,1,0,0,0,938,936,1,0,0,0,939,940,5,155,0,0,940,942,3,154,
		77,0,941,939,1,0,0,0,941,942,1,0,0,0,942,943,1,0,0,0,943,944,5,55,0,0,
		944,145,1,0,0,0,945,946,5,99,0,0,946,947,3,154,77,0,947,948,5,154,0,0,
		948,949,3,154,77,0,949,147,1,0,0,0,950,1023,5,78,0,0,951,1023,5,79,0,0,
		952,953,5,74,0,0,953,955,5,1,0,0,954,956,7,9,0,0,955,954,1,0,0,0,955,956,
		1,0,0,0,956,958,1,0,0,0,957,959,5,167,0,0,958,957,1,0,0,0,958,959,1,0,
		0,0,959,961,1,0,0,0,960,962,5,58,0,0,961,960,1,0,0,0,961,962,1,0,0,0,962,
		963,1,0,0,0,963,964,3,156,78,0,964,965,5,2,0,0,965,1023,1,0,0,0,966,967,
		5,98,0,0,967,968,5,1,0,0,968,969,5,167,0,0,969,970,5,59,0,0,970,971,3,
		156,78,0,971,972,5,2,0,0,972,1023,1,0,0,0,973,974,5,97,0,0,974,975,5,1,
		0,0,975,976,3,150,75,0,976,977,5,58,0,0,977,978,3,156,78,0,978,979,5,2,
		0,0,979,1023,1,0,0,0,980,981,5,96,0,0,981,982,5,1,0,0,982,987,3,154,77,
		0,983,984,5,6,0,0,984,986,3,154,77,0,985,983,1,0,0,0,986,989,1,0,0,0,987,
		985,1,0,0,0,987,988,1,0,0,0,988,990,1,0,0,0,989,987,1,0,0,0,990,991,5,
		2,0,0,991,1023,1,0,0,0,992,993,5,100,0,0,993,994,5,1,0,0,994,995,5,167,
		0,0,995,996,5,59,0,0,996,997,3,156,78,0,997,998,5,2,0,0,998,1023,1,0,0,
		0,999,1000,5,101,0,0,1000,1001,5,1,0,0,1001,1002,5,167,0,0,1002,1003,5,
		59,0,0,1003,1004,3,156,78,0,1004,1005,5,2,0,0,1005,1023,1,0,0,0,1006,1007,
		5,102,0,0,1007,1008,5,1,0,0,1008,1009,5,167,0,0,1009,1010,5,59,0,0,1010,
		1011,3,156,78,0,1011,1012,5,2,0,0,1012,1023,1,0,0,0,1013,1014,5,103,0,
		0,1014,1015,5,1,0,0,1015,1016,5,167,0,0,1016,1017,5,59,0,0,1017,1018,3,
		156,78,0,1018,1019,5,146,0,0,1019,1020,5,167,0,0,1020,1021,5,2,0,0,1021,
		1023,1,0,0,0,1022,950,1,0,0,0,1022,951,1,0,0,0,1022,952,1,0,0,0,1022,966,
		1,0,0,0,1022,973,1,0,0,0,1022,980,1,0,0,0,1022,992,1,0,0,0,1022,999,1,
		0,0,0,1022,1006,1,0,0,0,1022,1013,1,0,0,0,1023,149,1,0,0,0,1024,1025,7,
		10,0,0,1025,151,1,0,0,0,1026,1027,7,11,0,0,1027,153,1,0,0,0,1028,1029,
		6,77,-1,0,1029,1052,3,158,79,0,1030,1052,3,140,70,0,1031,1052,3,148,74,
		0,1032,1052,3,12,6,0,1033,1052,3,130,65,0,1034,1035,5,1,0,0,1035,1036,
		3,154,77,0,1036,1037,5,2,0,0,1037,1052,1,0,0,0,1038,1039,7,12,0,0,1039,
		1052,3,154,77,20,1040,1041,5,56,0,0,1041,1042,5,1,0,0,1042,1043,3,28,14,
		0,1043,1044,5,2,0,0,1044,1052,1,0,0,0,1045,1046,5,1,0,0,1046,1047,3,28,
		14,0,1047,1048,5,2,0,0,1048,1052,1,0,0,0,1049,1052,3,144,72,0,1050,1052,
		3,138,69,0,1051,1028,1,0,0,0,1051,1030,1,0,0,0,1051,1031,1,0,0,0,1051,
		1032,1,0,0,0,1051,1033,1,0,0,0,1051,1034,1,0,0,0,1051,1038,1,0,0,0,1051,
		1040,1,0,0,0,1051,1045,1,0,0,0,1051,1049,1,0,0,0,1051,1050,1,0,0,0,1052,
		1131,1,0,0,0,1053,1054,10,19,0,0,1054,1055,7,13,0,0,1055,1130,3,154,77,
		20,1056,1057,10,18,0,0,1057,1058,7,14,0,0,1058,1130,3,154,77,19,1059,1060,
		10,17,0,0,1060,1061,7,15,0,0,1061,1130,3,154,77,18,1062,1063,10,16,0,0,
		1063,1064,7,16,0,0,1064,1130,3,154,77,17,1065,1067,10,15,0,0,1066,1068,
		5,64,0,0,1067,1066,1,0,0,0,1067,1068,1,0,0,0,1068,1069,1,0,0,0,1069,1070,
		5,61,0,0,1070,1130,3,154,77,16,1071,1073,10,14,0,0,1072,1074,5,64,0,0,
		1073,1072,1,0,0,0,1073,1074,1,0,0,0,1074,1075,1,0,0,0,1075,1076,5,139,
		0,0,1076,1077,5,70,0,0,1077,1130,3,154,77,15,1078,1080,10,10,0,0,1079,
		1081,5,64,0,0,1080,1079,1,0,0,0,1080,1081,1,0,0,0,1081,1082,1,0,0,0,1082,
		1083,5,107,0,0,1083,1084,3,156,78,0,1084,1085,5,48,0,0,1085,1086,3,154,
		77,11,1086,1130,1,0,0,0,1087,1088,10,6,0,0,1088,1089,5,48,0,0,1089,1130,
		3,154,77,7,1090,1091,10,5,0,0,1091,1092,5,68,0,0,1092,1130,3,154,77,6,
		1093,1094,10,25,0,0,1094,1095,5,32,0,0,1095,1130,3,152,76,0,1096,1098,
		10,13,0,0,1097,1099,5,64,0,0,1098,1097,1,0,0,0,1098,1099,1,0,0,0,1099,
		1100,1,0,0,0,1100,1101,5,59,0,0,1101,1130,3,134,67,0,1102,1104,10,12,0,
		0,1103,1105,5,64,0,0,1104,1103,1,0,0,0,1104,1105,1,0,0,0,1105,1106,1,0,
		0,0,1106,1107,5,59,0,0,1107,1130,3,128,64,0,1108,1110,10,11,0,0,1109,1111,
		5,64,0,0,1110,1109,1,0,0,0,1110,1111,1,0,0,0,1111,1112,1,0,0,0,1112,1113,
		5,59,0,0,1113,1130,3,28,14,0,1114,1115,10,9,0,0,1115,1116,7,16,0,0,1116,
		1117,7,17,0,0,1117,1118,5,1,0,0,1118,1119,3,28,14,0,1119,1120,5,2,0,0,
		1120,1130,1,0,0,0,1121,1122,10,4,0,0,1122,1124,5,60,0,0,1123,1125,5,64,
		0,0,1124,1123,1,0,0,0,1124,1125,1,0,0,0,1125,1126,1,0,0,0,1126,1130,5,
		65,0,0,1127,1128,10,3,0,0,1128,1130,3,142,71,0,1129,1053,1,0,0,0,1129,
		1056,1,0,0,0,1129,1059,1,0,0,0,1129,1062,1,0,0,0,1129,1065,1,0,0,0,1129,
		1071,1,0,0,0,1129,1078,1,0,0,0,1129,1087,1,0,0,0,1129,1090,1,0,0,0,1129,
		1093,1,0,0,0,1129,1096,1,0,0,0,1129,1102,1,0,0,0,1129,1108,1,0,0,0,1129,
		1114,1,0,0,0,1129,1121,1,0,0,0,1129,1127,1,0,0,0,1130,1133,1,0,0,0,1131,
		1129,1,0,0,0,1131,1132,1,0,0,0,1132,155,1,0,0,0,1133,1131,1,0,0,0,1134,
		1135,6,78,-1,0,1135,1149,3,158,79,0,1136,1149,3,140,70,0,1137,1149,3,148,
		74,0,1138,1149,3,12,6,0,1139,1149,3,130,65,0,1140,1141,5,1,0,0,1141,1142,
		3,156,78,0,1142,1143,5,2,0,0,1143,1149,1,0,0,0,1144,1145,7,12,0,0,1145,
		1149,3,156,78,6,1146,1149,3,144,72,0,1147,1149,3,142,71,0,1148,1134,1,
		0,0,0,1148,1136,1,0,0,0,1148,1137,1,0,0,0,1148,1138,1,0,0,0,1148,1139,
		1,0,0,0,1148,1140,1,0,0,0,1148,1144,1,0,0,0,1148,1146,1,0,0,0,1148,1147,
		1,0,0,0,1149,1164,1,0,0,0,1150,1151,10,5,0,0,1151,1152,7,14,0,0,1152,1163,
		3,156,78,6,1153,1154,10,4,0,0,1154,1155,7,15,0,0,1155,1163,3,156,78,5,
		1156,1157,10,3,0,0,1157,1158,7,16,0,0,1158,1163,3,156,78,4,1159,1160,10,
		11,0,0,1160,1161,5,32,0,0,1161,1163,3,152,76,0,1162,1150,1,0,0,0,1162,
		1153,1,0,0,0,1162,1156,1,0,0,0,1162,1159,1,0,0,0,1163,1166,1,0,0,0,1164,
		1162,1,0,0,0,1164,1165,1,0,0,0,1165,157,1,0,0,0,1166,1164,1,0,0,0,1167,
		1176,5,164,0,0,1168,1176,5,167,0,0,1169,1176,5,165,0,0,1170,1176,5,166,
		0,0,1171,1176,5,71,0,0,1172,1176,5,57,0,0,1173,1176,5,65,0,0,1174,1176,
		3,136,68,0,1175,1167,1,0,0,0,1175,1168,1,0,0,0,1175,1169,1,0,0,0,1175,
		1170,1,0,0,0,1175,1171,1,0,0,0,1175,1172,1,0,0,0,1175,1173,1,0,0,0,1175,
		1174,1,0,0,0,1176,159,1,0,0,0,148,166,174,180,198,207,210,215,224,227,
		231,236,240,249,252,261,266,274,290,295,301,304,308,311,315,318,321,324,
		332,338,341,343,351,354,358,361,365,368,371,374,381,390,396,406,413,420,
		428,440,446,453,456,460,462,468,472,476,479,482,490,497,506,517,523,526,
		531,534,539,542,548,553,556,562,567,570,572,575,583,594,599,604,606,615,
		626,629,632,643,653,662,672,676,680,683,699,703,707,712,715,719,721,731,
		737,742,745,750,753,757,759,767,774,780,784,789,792,796,798,812,817,846,
		852,856,866,876,884,896,904,910,927,931,936,941,955,958,961,987,1022,1051,
		1067,1073,1080,1098,1104,1110,1124,1129,1131,1148,1162,1164,1175
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace QueryCat.Backend.Parser
