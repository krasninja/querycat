//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../QueryCat.Backend/Parser/QueryCatParser.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace QueryCat.Backend.Parser {
 #pragma warning disable 3021 
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class QueryCatParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LEFT_PAREN=1, RIGHT_PAREN=2, ASSIGN=3, ASSOCIATION=4, COLON=5, COMMA=6, 
		PERIOD=7, ELLIPSIS=8, SEMICOLON=9, QUESTION=10, LEFT_BRACKET=11, RIGHT_BRACKET=12, 
		LEFT_RIGHT_BRACKET=13, PIPE=14, PLUS=15, MINUS=16, STAR=17, DIV=18, MOD=19, 
		EQUALS=20, NOT_EQUALS=21, GREATER=22, GREATER_OR_EQUALS=23, LESS=24, LESS_OR_EQUALS=25, 
		CONCAT=26, LESS_LESS=27, GREATER_GREATER=28, TYPECAST=29, INTEGER=30, 
		STRING=31, FLOAT=32, TIMESTAMP=33, BOOLEAN=34, NUMERIC=35, OBJECT=36, 
		ANY=37, AND=38, AS=39, AT=40, BY=41, CAST=42, DEFAULT=43, ELSE=44, END=45, 
		EXISTS=46, FALSE=47, FROM=48, IF=49, IN=50, IS=51, LIKE=52, NOT=53, NULL=54, 
		ON=55, ONLY=56, OR=57, SOME=58, THEN=59, TO=60, TRUE=61, USING=62, VOID=63, 
		TRIM=64, LEADING=65, TRAILING=66, BOTH=67, CURRENT_DATE=68, CURRENT_TIMESTAMP=69, 
		INTERVAL=70, YEAR=71, DOY=72, DAYOFYEAR=73, MONTH=74, DOW=75, WEEKDAY=76, 
		DAY=77, HOUR=78, MINUTE=79, SECOND=80, MILLISECOND=81, LOCAL=82, TIME=83, 
		ZONE=84, CASE=85, COALESCE=86, EXTRACT=87, POSITION=88, WHEN=89, ECHO=90, 
		ALL=91, ASC=92, BETWEEN=93, CURRENT=94, DESC=95, DISTINCT=96, EXCEPT=97, 
		FETCH=98, FIRST=99, FOLLOWING=100, FORMAT=101, FULL=102, GROUP=103, HAVING=104, 
		INNER=105, INTERSECT=106, INTO=107, JOIN=108, LAST=109, LEFT=110, LIMIT=111, 
		NEXT=112, NULLS=113, OFFSET=114, ORDER=115, OUTER=116, OVER=117, PARTITION=118, 
		PRECEDING=119, RECURSIVE=120, RIGHT=121, ROW=122, ROWS=123, SELECT=124, 
		SIMILAR=125, TOP=126, UNBOUNDED=127, UNION=128, VALUES=129, WHERE=130, 
		WINDOW=131, WITH=132, UPDATE=133, INSERT=134, DECLARE=135, SET=136, TYPE=137, 
		IDENTIFIER=138, INTEGER_LITERAL=139, FLOAT_LITERAL=140, NUMERIC_LITERAL=141, 
		STRING_LITERAL=142, BOOLEAN_LITERAL=143, SINGLE_LINE_COMMENT=144, MULTILINE_COMMENT=145, 
		SPACES=146;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_functionSignature = 2, RULE_functionType = 3, 
		RULE_functionArg = 4, RULE_functionCall = 5, RULE_functionCallArg = 6, 
		RULE_declareVariable = 7, RULE_setVariable = 8, RULE_selectStatement = 9, 
		RULE_selectOrderByClause = 10, RULE_selectSortSpecification = 11, RULE_selectAlias = 12, 
		RULE_selectQueryExpression = 13, RULE_selectQueryExpressionBody = 14, 
		RULE_selectQueryPrimary = 15, RULE_selectQuerySpecification = 16, RULE_selectList = 17, 
		RULE_selectDistinctClause = 18, RULE_selectDistinctOnClause = 19, RULE_selectWithClause = 20, 
		RULE_selectWithElement = 21, RULE_selectWithColumnList = 22, RULE_selectSublist = 23, 
		RULE_selectTarget = 24, RULE_selectFromClause = 25, RULE_selectTableReferenceList = 26, 
		RULE_selectTableReference = 27, RULE_selectTableRow = 28, RULE_selectTable = 29, 
		RULE_selectTablePrimary = 30, RULE_selectTableJoined = 31, RULE_selectJoinType = 32, 
		RULE_selectGroupBy = 33, RULE_selectHaving = 34, RULE_selectSearchCondition = 35, 
		RULE_selectWindowSpecification = 36, RULE_selectWindowPartitionClause = 37, 
		RULE_selectWindowOrderClause = 38, RULE_selectWindow = 39, RULE_selectWindowDefinitionList = 40, 
		RULE_selectOffsetClause = 41, RULE_selectFetchFirstClause = 42, RULE_selectTopClause = 43, 
		RULE_selectLimitClause = 44, RULE_updateStatement = 45, RULE_updateSource = 46, 
		RULE_updateSetClause = 47, RULE_insertStatement = 48, RULE_insertToSource = 49, 
		RULE_insertColumnsList = 50, RULE_insertFromSource = 51, RULE_echoStatement = 52, 
		RULE_identifierChain = 53, RULE_array = 54, RULE_intervalLiteral = 55, 
		RULE_castOperand = 56, RULE_atTimeZone = 57, RULE_caseExpression = 58, 
		RULE_caseWhen = 59, RULE_standardFunction = 60, RULE_dateTimeField = 61, 
		RULE_type = 62, RULE_expression = 63, RULE_simpleExpression = 64, RULE_literal = 65;
	public static readonly string[] ruleNames = {
		"program", "statement", "functionSignature", "functionType", "functionArg", 
		"functionCall", "functionCallArg", "declareVariable", "setVariable", "selectStatement", 
		"selectOrderByClause", "selectSortSpecification", "selectAlias", "selectQueryExpression", 
		"selectQueryExpressionBody", "selectQueryPrimary", "selectQuerySpecification", 
		"selectList", "selectDistinctClause", "selectDistinctOnClause", "selectWithClause", 
		"selectWithElement", "selectWithColumnList", "selectSublist", "selectTarget", 
		"selectFromClause", "selectTableReferenceList", "selectTableReference", 
		"selectTableRow", "selectTable", "selectTablePrimary", "selectTableJoined", 
		"selectJoinType", "selectGroupBy", "selectHaving", "selectSearchCondition", 
		"selectWindowSpecification", "selectWindowPartitionClause", "selectWindowOrderClause", 
		"selectWindow", "selectWindowDefinitionList", "selectOffsetClause", "selectFetchFirstClause", 
		"selectTopClause", "selectLimitClause", "updateStatement", "updateSource", 
		"updateSetClause", "insertStatement", "insertToSource", "insertColumnsList", 
		"insertFromSource", "echoStatement", "identifierChain", "array", "intervalLiteral", 
		"castOperand", "atTimeZone", "caseExpression", "caseWhen", "standardFunction", 
		"dateTimeField", "type", "expression", "simpleExpression", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "':='", "'=>'", "':'", "','", "'.'", "'...'", "';'", 
		"'?'", "'['", "']'", "'[]'", "'&>'", "'+'", "'-'", "'*'", "'/'", "'%'", 
		"'='", "'<>'", "'>'", "'>='", "'<'", "'<='", "'||'", "'<<'", "'>>'", "'::'", 
		"'INTEGER'", "'STRING'", "'FLOAT'", "'TIMESTAMP'", "'BOOLEAN'", "'NUMERIC'", 
		"'OBJECT'", "'ANY'", "'AND'", "'AS'", "'AT'", "'BY'", "'CAST'", "'DEFAULT'", 
		"'ELSE'", "'END'", "'EXISTS'", "'FALSE'", "'FROM'", "'IF'", "'IN'", "'IS'", 
		"'LIKE'", "'NOT'", "'NULL'", "'ON'", "'ONLY'", "'OR'", "'SOME'", "'THEN'", 
		"'TO'", "'TRUE'", "'USING'", "'VOID'", "'TRIM'", "'LEADING'", "'TRAILING'", 
		"'BOTH'", "'CURRENT_DATE'", "'CURRENT_TIMESTAMP'", "'INTERVAL'", "'YEAR'", 
		"'DOY'", "'DAYOFYEAR'", "'MONTH'", "'DOW'", "'WEEKDAY'", "'DAY'", "'HOUR'", 
		"'MINUTE'", "'SECOND'", "'MILLISECOND'", "'LOCAL'", "'TIME'", "'ZONE'", 
		"'CASE'", "'COALESCE'", "'EXTRACT'", "'POSITION'", "'WHEN'", "'ECHO'", 
		"'ALL'", "'ASC'", "'BETWEEN'", "'CURRENT'", "'DESC'", "'DISTINCT'", "'EXCEPT'", 
		"'FETCH'", "'FIRST'", "'FOLLOWING'", "'FORMAT'", "'FULL'", "'GROUP'", 
		"'HAVING'", "'INNER'", "'INTERSECT'", "'INTO'", "'JOIN'", "'LAST'", "'LEFT'", 
		"'LIMIT'", "'NEXT'", "'NULLS'", "'OFFSET'", "'ORDER'", "'OUTER'", "'OVER'", 
		"'PARTITION'", "'PRECEDING'", "'RECURSIVE'", "'RIGHT'", "'ROW'", "'ROWS'", 
		"'SELECT'", "'SIMILAR'", "'TOP'", "'UNBOUNDED'", "'UNION'", "'VALUES'", 
		"'WHERE'", "'WINDOW'", "'WITH'", "'UPDATE'", "'INSERT'", "'DECLARE'", 
		"'SET'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LEFT_PAREN", "RIGHT_PAREN", "ASSIGN", "ASSOCIATION", "COLON", "COMMA", 
		"PERIOD", "ELLIPSIS", "SEMICOLON", "QUESTION", "LEFT_BRACKET", "RIGHT_BRACKET", 
		"LEFT_RIGHT_BRACKET", "PIPE", "PLUS", "MINUS", "STAR", "DIV", "MOD", "EQUALS", 
		"NOT_EQUALS", "GREATER", "GREATER_OR_EQUALS", "LESS", "LESS_OR_EQUALS", 
		"CONCAT", "LESS_LESS", "GREATER_GREATER", "TYPECAST", "INTEGER", "STRING", 
		"FLOAT", "TIMESTAMP", "BOOLEAN", "NUMERIC", "OBJECT", "ANY", "AND", "AS", 
		"AT", "BY", "CAST", "DEFAULT", "ELSE", "END", "EXISTS", "FALSE", "FROM", 
		"IF", "IN", "IS", "LIKE", "NOT", "NULL", "ON", "ONLY", "OR", "SOME", "THEN", 
		"TO", "TRUE", "USING", "VOID", "TRIM", "LEADING", "TRAILING", "BOTH", 
		"CURRENT_DATE", "CURRENT_TIMESTAMP", "INTERVAL", "YEAR", "DOY", "DAYOFYEAR", 
		"MONTH", "DOW", "WEEKDAY", "DAY", "HOUR", "MINUTE", "SECOND", "MILLISECOND", 
		"LOCAL", "TIME", "ZONE", "CASE", "COALESCE", "EXTRACT", "POSITION", "WHEN", 
		"ECHO", "ALL", "ASC", "BETWEEN", "CURRENT", "DESC", "DISTINCT", "EXCEPT", 
		"FETCH", "FIRST", "FOLLOWING", "FORMAT", "FULL", "GROUP", "HAVING", "INNER", 
		"INTERSECT", "INTO", "JOIN", "LAST", "LEFT", "LIMIT", "NEXT", "NULLS", 
		"OFFSET", "ORDER", "OUTER", "OVER", "PARTITION", "PRECEDING", "RECURSIVE", 
		"RIGHT", "ROW", "ROWS", "SELECT", "SIMILAR", "TOP", "UNBOUNDED", "UNION", 
		"VALUES", "WHERE", "WINDOW", "WITH", "UPDATE", "INSERT", "DECLARE", "SET", 
		"TYPE", "IDENTIFIER", "INTEGER_LITERAL", "FLOAT_LITERAL", "NUMERIC_LITERAL", 
		"STRING_LITERAL", "BOOLEAN_LITERAL", "SINGLE_LINE_COMMENT", "MULTILINE_COMMENT", 
		"SPACES"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "QueryCatParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static QueryCatParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public QueryCatParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public QueryCatParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(QueryCatParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(QueryCatParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(QueryCatParser.SEMICOLON, i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 132;
				Match(SEMICOLON);
				}
				}
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 138;
			statement();
			State = 143;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 139;
					Match(SEMICOLON);
					State = 140;
					statement();
					}
					} 
				}
				State = 145;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEMICOLON) {
				{
				{
				State = 146;
				Match(SEMICOLON);
				}
				}
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 152;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StatementSelectExpressionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public StatementSelectExpressionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementSelectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementEchoContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public EchoStatementContext echoStatement() {
			return GetRuleContext<EchoStatementContext>(0);
		}
		public StatementEchoContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementEcho(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementExpressionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementExpressionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementDeclareVariableContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclareVariableContext declareVariable() {
			return GetRuleContext<DeclareVariableContext>(0);
		}
		public StatementDeclareVariableContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementDeclareVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementFunctionCallContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public StatementFunctionCallContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementSetVariableContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetVariableContext setVariable() {
			return GetRuleContext<SetVariableContext>(0);
		}
		public StatementSetVariableContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementSetVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementUpdateExpressionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public UpdateStatementContext updateStatement() {
			return GetRuleContext<UpdateStatementContext>(0);
		}
		public StatementUpdateExpressionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementUpdateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementInsertExpressionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public InsertStatementContext insertStatement() {
			return GetRuleContext<InsertStatementContext>(0);
		}
		public StatementInsertExpressionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementInsertExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 162;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new StatementFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 154;
				functionCall();
				}
				break;
			case 2:
				_localctx = new StatementSelectExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 155;
				selectStatement();
				}
				break;
			case 3:
				_localctx = new StatementUpdateExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 156;
				updateStatement();
				}
				break;
			case 4:
				_localctx = new StatementInsertExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 157;
				insertStatement();
				}
				break;
			case 5:
				_localctx = new StatementEchoContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 158;
				echoStatement();
				}
				break;
			case 6:
				_localctx = new StatementDeclareVariableContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 159;
				declareVariable();
				}
				break;
			case 7:
				_localctx = new StatementSetVariableContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 160;
				setVariable();
				}
				break;
			case 8:
				_localctx = new StatementExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 161;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSignatureContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(QueryCatParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext[] functionArg() {
			return GetRuleContexts<FunctionArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext functionArg(int i) {
			return GetRuleContext<FunctionArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(QueryCatParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public FunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSignatureContext functionSignature() {
		FunctionSignatureContext _localctx = new FunctionSignatureContext(Context, State);
		EnterRule(_localctx, 4, RULE_functionSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			_localctx.name = Match(IDENTIFIER);
			State = 165;
			Match(LEFT_PAREN);
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELLIPSIS || _la==IDENTIFIER) {
				{
				State = 166;
				functionArg();
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 167;
					Match(COMMA);
					State = 168;
					functionArg();
					}
					}
					State = 173;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 176;
			Match(RIGHT_PAREN);
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 177;
				Match(COLON);
				State = 178;
				functionType();
				}
			}

			State = 181;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(QueryCatParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(QueryCatParser.GREATER, 0); }
		public FunctionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeContext functionType() {
		FunctionTypeContext _localctx = new FunctionTypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_functionType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			type();
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LESS) {
				{
				State = 184;
				Match(LESS);
				State = 185;
				Match(IDENTIFIER);
				State = 186;
				Match(GREATER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgContext : ParserRuleContext {
		public IToken variadic;
		public IToken optional;
		public IToken isArray;
		public LiteralContext @default;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(QueryCatParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSIS() { return GetToken(QueryCatParser.ELLIPSIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(QueryCatParser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_RIGHT_BRACKET() { return GetToken(QueryCatParser.LEFT_RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(QueryCatParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(QueryCatParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(QueryCatParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgContext functionArg() {
		FunctionArgContext _localctx = new FunctionArgContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELLIPSIS) {
				{
				State = 189;
				_localctx.variadic = Match(ELLIPSIS);
				}
			}

			State = 192;
			Match(IDENTIFIER);
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUESTION) {
				{
				State = 193;
				_localctx.optional = Match(QUESTION);
				}
			}

			State = 196;
			Match(COLON);
			State = 197;
			functionType();
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_RIGHT_BRACKET) {
				{
				State = 198;
				_localctx.isArray = Match(LEFT_RIGHT_BRACKET);
				}
			}

			State = 203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8796094070792L) != 0)) {
				{
				State = 201;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8796094070792L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 202;
				_localctx.@default = literal();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallArgContext[] functionCallArg() {
			return GetRuleContexts<FunctionCallArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallArgContext functionCallArg(int i) {
			return GetRuleContext<FunctionCallArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(QueryCatParser.STAR, 0); }
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 10, RULE_functionCall);
		int _la;
		try {
			State = 222;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 205;
				Match(IDENTIFIER);
				State = 206;
				Match(LEFT_PAREN);
				State = 215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2333081210768687106L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 31457393L) != 0) || ((((_la - 138)) & ~0x3f) == 0 && ((1L << (_la - 138)) & 63L) != 0)) {
					{
					State = 207;
					functionCallArg();
					State = 212;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 208;
						Match(COMMA);
						State = 209;
						functionCallArg();
						}
						}
						State = 214;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 217;
				Match(RIGHT_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 218;
				Match(IDENTIFIER);
				State = 219;
				Match(LEFT_PAREN);
				State = 220;
				Match(STAR);
				State = 221;
				Match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSOCIATION() { return GetToken(QueryCatParser.ASSOCIATION, 0); }
		public FunctionCallArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallArgContext functionCallArg() {
		FunctionCallArgContext _localctx = new FunctionCallArgContext(Context, State);
		EnterRule(_localctx, 12, RULE_functionCallArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 224;
				Match(IDENTIFIER);
				State = 225;
				Match(ASSOCIATION);
				}
				break;
			}
			State = 228;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(QueryCatParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(QueryCatParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public DeclareVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareVariableContext declareVariable() {
		DeclareVariableContext _localctx = new DeclareVariableContext(Context, State);
		EnterRule(_localctx, 14, RULE_declareVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			Match(DECLARE);
			State = 231;
			Match(IDENTIFIER);
			State = 232;
			type();
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 233;
				Match(ASSIGN);
				State = 234;
				statement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(QueryCatParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(QueryCatParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public SetVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetVariableContext setVariable() {
		SetVariableContext _localctx = new SetVariableContext(Context, State);
		EnterRule(_localctx, 16, RULE_setVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			Match(SET);
			State = 238;
			Match(IDENTIFIER);
			State = 239;
			Match(ASSIGN);
			State = 240;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementContext selectStatement() {
		SelectStatementContext _localctx = new SelectStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_selectStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			selectQueryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectOrderByClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(QueryCatParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(QueryCatParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectSortSpecificationContext[] selectSortSpecification() {
			return GetRuleContexts<SelectSortSpecificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSortSpecificationContext selectSortSpecification(int i) {
			return GetRuleContext<SelectSortSpecificationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectOrderByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectOrderByClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectOrderByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectOrderByClauseContext selectOrderByClause() {
		SelectOrderByClauseContext _localctx = new SelectOrderByClauseContext(Context, State);
		EnterRule(_localctx, 20, RULE_selectOrderByClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			Match(ORDER);
			State = 245;
			Match(BY);
			State = 246;
			selectSortSpecification();
			State = 251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 247;
				Match(COMMA);
				State = 248;
				selectSortSpecification();
				}
				}
				State = 253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectSortSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(QueryCatParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(QueryCatParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS() { return GetToken(QueryCatParser.NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(QueryCatParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(QueryCatParser.LAST, 0); }
		public SelectSortSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectSortSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSortSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectSortSpecificationContext selectSortSpecification() {
		SelectSortSpecificationContext _localctx = new SelectSortSpecificationContext(Context, State);
		EnterRule(_localctx, 22, RULE_selectSortSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			expression(0);
			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 255;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 262;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				{
				State = 258;
				Match(NULLS);
				State = 259;
				Match(FIRST);
				}
				}
				break;
			case 2:
				{
				{
				State = 260;
				Match(NULLS);
				State = 261;
				Match(LAST);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectAliasContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(QueryCatParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		public SelectAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectAliasContext selectAlias() {
		SelectAliasContext _localctx = new SelectAliasContext(Context, State);
		EnterRule(_localctx, 24, RULE_selectAlias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 264;
				Match(AS);
				}
			}

			{
			State = 267;
			_localctx.name = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIER || _la==STRING_LITERAL) ) {
				_localctx.name = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectQueryExpressionContext : ParserRuleContext {
		public SelectQueryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectQueryExpression; } }
	 
		public SelectQueryExpressionContext() { }
		public virtual void CopyFrom(SelectQueryExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectQueryExpressionSimpleContext : SelectQueryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(QueryCatParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectListContext selectList() {
			return GetRuleContext<SelectListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectFromClauseContext selectFromClause() {
			return GetRuleContext<SelectFromClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectWithClauseContext selectWithClause() {
			return GetRuleContext<SelectWithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTopClauseContext selectTopClause() {
			return GetRuleContext<SelectTopClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectDistinctClauseContext selectDistinctClause() {
			return GetRuleContext<SelectDistinctClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTargetContext selectTarget() {
			return GetRuleContext<SelectTargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectWindowContext selectWindow() {
			return GetRuleContext<SelectWindowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectOrderByClauseContext selectOrderByClause() {
			return GetRuleContext<SelectOrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectLimitClauseContext selectLimitClause() {
			return GetRuleContext<SelectLimitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectOffsetClauseContext selectOffsetClause() {
			return GetRuleContext<SelectOffsetClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectFetchFirstClauseContext selectFetchFirstClause() {
			return GetRuleContext<SelectFetchFirstClauseContext>(0);
		}
		public SelectQueryExpressionSimpleContext(SelectQueryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQueryExpressionSimple(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectQueryExpressionFullContext : SelectQueryExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionBodyContext selectQueryExpressionBody() {
			return GetRuleContext<SelectQueryExpressionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectWithClauseContext selectWithClause() {
			return GetRuleContext<SelectWithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectOrderByClauseContext selectOrderByClause() {
			return GetRuleContext<SelectOrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectLimitClauseContext selectLimitClause() {
			return GetRuleContext<SelectLimitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectOffsetClauseContext selectOffsetClause() {
			return GetRuleContext<SelectOffsetClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectFetchFirstClauseContext selectFetchFirstClause() {
			return GetRuleContext<SelectFetchFirstClauseContext>(0);
		}
		public SelectQueryExpressionFullContext(SelectQueryExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQueryExpressionFull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectQueryExpressionContext selectQueryExpression() {
		SelectQueryExpressionContext _localctx = new SelectQueryExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_selectQueryExpression);
		int _la;
		try {
			State = 315;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				_localctx = new SelectQueryExpressionSimpleContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 269;
					selectWithClause();
					}
				}

				State = 272;
				Match(SELECT);
				State = 274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TOP) {
					{
					State = 273;
					selectTopClause();
					}
				}

				State = 277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					State = 276;
					selectDistinctClause();
					}
				}

				State = 279;
				selectList();
				State = 281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTO) {
					{
					State = 280;
					selectTarget();
					}
				}

				State = 283;
				selectFromClause();
				State = 285;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WINDOW) {
					{
					State = 284;
					selectWindow();
					}
				}

				State = 288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 287;
					selectOrderByClause();
					}
				}

				State = 291;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 290;
					selectLimitClause();
					}
					break;
				}
				State = 294;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OFFSET) {
					{
					State = 293;
					selectOffsetClause();
					}
				}

				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FETCH || _la==LIMIT) {
					{
					State = 296;
					selectFetchFirstClause();
					}
				}

				}
				break;
			case 2:
				_localctx = new SelectQueryExpressionFullContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 300;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 299;
					selectWithClause();
					}
					break;
				}
				State = 302;
				selectQueryExpressionBody(0);
				State = 304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 303;
					selectOrderByClause();
					}
				}

				State = 307;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 306;
					selectLimitClause();
					}
					break;
				}
				State = 310;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OFFSET) {
					{
					State = 309;
					selectOffsetClause();
					}
				}

				State = 313;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FETCH || _la==LIMIT) {
					{
					State = 312;
					selectFetchFirstClause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectQueryExpressionBodyContext : ParserRuleContext {
		public SelectQueryExpressionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectQueryExpressionBody; } }
	 
		public SelectQueryExpressionBodyContext() { }
		public virtual void CopyFrom(SelectQueryExpressionBodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectQueryExpressionBodyUnionExceptContext : SelectQueryExpressionBodyContext {
		public SelectQueryExpressionBodyContext left;
		public SelectQueryExpressionBodyContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionBodyContext[] selectQueryExpressionBody() {
			return GetRuleContexts<SelectQueryExpressionBodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionBodyContext selectQueryExpressionBody(int i) {
			return GetRuleContext<SelectQueryExpressionBodyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(QueryCatParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(QueryCatParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(QueryCatParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(QueryCatParser.ALL, 0); }
		public SelectQueryExpressionBodyUnionExceptContext(SelectQueryExpressionBodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQueryExpressionBodyUnionExcept(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectQueryExpressionBodyIntersectContext : SelectQueryExpressionBodyContext {
		public SelectQueryExpressionBodyContext left;
		public SelectQueryExpressionBodyContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT() { return GetToken(QueryCatParser.INTERSECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionBodyContext[] selectQueryExpressionBody() {
			return GetRuleContexts<SelectQueryExpressionBodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionBodyContext selectQueryExpressionBody(int i) {
			return GetRuleContext<SelectQueryExpressionBodyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(QueryCatParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(QueryCatParser.ALL, 0); }
		public SelectQueryExpressionBodyIntersectContext(SelectQueryExpressionBodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQueryExpressionBodyIntersect(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectQueryExpressionBodyPrimaryContext : SelectQueryExpressionBodyContext {
		public SelectQueryPrimaryContext left;
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryPrimaryContext selectQueryPrimary() {
			return GetRuleContext<SelectQueryPrimaryContext>(0);
		}
		public SelectQueryExpressionBodyPrimaryContext(SelectQueryExpressionBodyContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQueryExpressionBodyPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectQueryExpressionBodyContext selectQueryExpressionBody() {
		return selectQueryExpressionBody(0);
	}

	private SelectQueryExpressionBodyContext selectQueryExpressionBody(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SelectQueryExpressionBodyContext _localctx = new SelectQueryExpressionBodyContext(Context, _parentState);
		SelectQueryExpressionBodyContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_selectQueryExpressionBody, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SelectQueryExpressionBodyPrimaryContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 318;
			((SelectQueryExpressionBodyPrimaryContext)_localctx).left = selectQueryPrimary();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 334;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 332;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
					case 1:
						{
						_localctx = new SelectQueryExpressionBodyIntersectContext(new SelectQueryExpressionBodyContext(_parentctx, _parentState));
						((SelectQueryExpressionBodyIntersectContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_selectQueryExpressionBody);
						State = 320;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 321;
						Match(INTERSECT);
						State = 323;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==ALL || _la==DISTINCT) {
							{
							State = 322;
							_la = TokenStream.LA(1);
							if ( !(_la==ALL || _la==DISTINCT) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
						}

						State = 325;
						((SelectQueryExpressionBodyIntersectContext)_localctx).right = selectQueryExpressionBody(3);
						}
						break;
					case 2:
						{
						_localctx = new SelectQueryExpressionBodyUnionExceptContext(new SelectQueryExpressionBodyContext(_parentctx, _parentState));
						((SelectQueryExpressionBodyUnionExceptContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_selectQueryExpressionBody);
						State = 326;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 327;
						_la = TokenStream.LA(1);
						if ( !(_la==EXCEPT || _la==UNION) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 329;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==ALL || _la==DISTINCT) {
							{
							State = 328;
							_la = TokenStream.LA(1);
							if ( !(_la==ALL || _la==DISTINCT) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
						}

						State = 331;
						((SelectQueryExpressionBodyUnionExceptContext)_localctx).right = selectQueryExpressionBody(2);
						}
						break;
					}
					} 
				}
				State = 336;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SelectQueryPrimaryContext : ParserRuleContext {
		public SelectQueryPrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectQueryPrimary; } }
	 
		public SelectQueryPrimaryContext() { }
		public virtual void CopyFrom(SelectQueryPrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectQueryPrimaryNoParensContext : SelectQueryPrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectQuerySpecificationContext selectQuerySpecification() {
			return GetRuleContext<SelectQuerySpecificationContext>(0);
		}
		public SelectQueryPrimaryNoParensContext(SelectQueryPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQueryPrimaryNoParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectQueryPrimaryParensContext : SelectQueryPrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		public SelectQueryPrimaryParensContext(SelectQueryPrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQueryPrimaryParens(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectQueryPrimaryContext selectQueryPrimary() {
		SelectQueryPrimaryContext _localctx = new SelectQueryPrimaryContext(Context, State);
		EnterRule(_localctx, 30, RULE_selectQueryPrimary);
		try {
			State = 342;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
			case WITH:
				_localctx = new SelectQueryPrimaryNoParensContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 337;
				selectQuerySpecification();
				}
				break;
			case LEFT_PAREN:
				_localctx = new SelectQueryPrimaryParensContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 338;
				Match(LEFT_PAREN);
				State = 339;
				selectQueryExpression();
				State = 340;
				Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectQuerySpecificationContext : ParserRuleContext {
		public SelectQuerySpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectQuerySpecification; } }
	 
		public SelectQuerySpecificationContext() { }
		public virtual void CopyFrom(SelectQuerySpecificationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectQuerySpecificationSingleContext : SelectQuerySpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(QueryCatParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectSublistContext[] selectSublist() {
			return GetRuleContexts<SelectSublistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSublistContext selectSublist(int i) {
			return GetRuleContext<SelectSublistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTargetContext selectTarget() {
			return GetRuleContext<SelectTargetContext>(0);
		}
		public SelectQuerySpecificationSingleContext(SelectQuerySpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQuerySpecificationSingle(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectQuerySpecificationFullContext : SelectQuerySpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(QueryCatParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectListContext selectList() {
			return GetRuleContext<SelectListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectFromClauseContext selectFromClause() {
			return GetRuleContext<SelectFromClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectWithClauseContext selectWithClause() {
			return GetRuleContext<SelectWithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTopClauseContext selectTopClause() {
			return GetRuleContext<SelectTopClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectDistinctClauseContext selectDistinctClause() {
			return GetRuleContext<SelectDistinctClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTargetContext selectTarget() {
			return GetRuleContext<SelectTargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectWindowContext selectWindow() {
			return GetRuleContext<SelectWindowContext>(0);
		}
		public SelectQuerySpecificationFullContext(SelectQuerySpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQuerySpecificationFull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectQuerySpecificationContext selectQuerySpecification() {
		SelectQuerySpecificationContext _localctx = new SelectQuerySpecificationContext(Context, State);
		EnterRule(_localctx, 32, RULE_selectQuerySpecification);
		int _la;
		try {
			int _alt;
			State = 374;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				_localctx = new SelectQuerySpecificationFullContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 344;
					selectWithClause();
					}
				}

				State = 347;
				Match(SELECT);
				State = 349;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TOP) {
					{
					State = 348;
					selectTopClause();
					}
				}

				State = 352;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					State = 351;
					selectDistinctClause();
					}
				}

				State = 354;
				selectList();
				State = 356;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTO) {
					{
					State = 355;
					selectTarget();
					}
				}

				State = 358;
				selectFromClause();
				State = 360;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
				case 1:
					{
					State = 359;
					selectWindow();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new SelectQuerySpecificationSingleContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 362;
				Match(SELECT);
				State = 363;
				selectSublist();
				State = 368;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 364;
						Match(COMMA);
						State = 365;
						selectSublist();
						}
						} 
					}
					State = 370;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
				}
				State = 372;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
				case 1:
					{
					State = 371;
					selectTarget();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectSublistContext[] selectSublist() {
			return GetRuleContexts<SelectSublistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSublistContext selectSublist(int i) {
			return GetRuleContext<SelectSublistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectListContext selectList() {
		SelectListContext _localctx = new SelectListContext(Context, State);
		EnterRule(_localctx, 34, RULE_selectList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			selectSublist();
			State = 381;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 377;
				Match(COMMA);
				State = 378;
				selectSublist();
				}
				}
				State = 383;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectDistinctClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(QueryCatParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(QueryCatParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectDistinctOnClauseContext selectDistinctOnClause() {
			return GetRuleContext<SelectDistinctOnClauseContext>(0);
		}
		public SelectDistinctClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectDistinctClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectDistinctClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectDistinctClauseContext selectDistinctClause() {
		SelectDistinctClauseContext _localctx = new SelectDistinctClauseContext(Context, State);
		EnterRule(_localctx, 36, RULE_selectDistinctClause);
		try {
			State = 387;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 384;
				Match(ALL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 385;
				Match(DISTINCT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 386;
				selectDistinctOnClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectDistinctOnClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(QueryCatParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(QueryCatParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext[] simpleExpression() {
			return GetRuleContexts<SimpleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression(int i) {
			return GetRuleContext<SimpleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectDistinctOnClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectDistinctOnClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectDistinctOnClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectDistinctOnClauseContext selectDistinctOnClause() {
		SelectDistinctOnClauseContext _localctx = new SelectDistinctOnClauseContext(Context, State);
		EnterRule(_localctx, 38, RULE_selectDistinctOnClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389;
			Match(DISTINCT);
			State = 390;
			Match(ON);
			State = 391;
			Match(LEFT_PAREN);
			State = 392;
			simpleExpression(0);
			State = 397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 393;
				Match(COMMA);
				State = 394;
				simpleExpression(0);
				}
				}
				State = 399;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 400;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectWithClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(QueryCatParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectWithElementContext[] selectWithElement() {
			return GetRuleContexts<SelectWithElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectWithElementContext selectWithElement(int i) {
			return GetRuleContext<SelectWithElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(QueryCatParser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectWithClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectWithClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectWithClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectWithClauseContext selectWithClause() {
		SelectWithClauseContext _localctx = new SelectWithClauseContext(Context, State);
		EnterRule(_localctx, 40, RULE_selectWithClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402;
			Match(WITH);
			State = 404;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RECURSIVE) {
				{
				State = 403;
				Match(RECURSIVE);
				}
			}

			State = 406;
			selectWithElement();
			State = 411;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 407;
				Match(COMMA);
				State = 408;
				selectWithElement();
				}
				}
				State = 413;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectWithElementContext : ParserRuleContext {
		public IToken name;
		public SelectQueryExpressionContext query;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(QueryCatParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LEFT_PAREN() { return GetTokens(QueryCatParser.LEFT_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN(int i) {
			return GetToken(QueryCatParser.LEFT_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RIGHT_PAREN() { return GetTokens(QueryCatParser.RIGHT_PAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN(int i) {
			return GetToken(QueryCatParser.RIGHT_PAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectWithColumnListContext selectWithColumnList() {
			return GetRuleContext<SelectWithColumnListContext>(0);
		}
		public SelectWithElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectWithElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectWithElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectWithElementContext selectWithElement() {
		SelectWithElementContext _localctx = new SelectWithElementContext(Context, State);
		EnterRule(_localctx, 42, RULE_selectWithElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			_localctx.name = Match(IDENTIFIER);
			State = 419;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 415;
				Match(LEFT_PAREN);
				State = 416;
				selectWithColumnList();
				State = 417;
				Match(RIGHT_PAREN);
				}
			}

			State = 421;
			Match(AS);
			State = 422;
			Match(LEFT_PAREN);
			State = 423;
			_localctx.query = selectQueryExpression();
			State = 424;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectWithColumnListContext : ParserRuleContext {
		public IdentifierChainContext name;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierChainContext[] identifierChain() {
			return GetRuleContexts<IdentifierChainContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierChainContext identifierChain(int i) {
			return GetRuleContext<IdentifierChainContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectWithColumnListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectWithColumnList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectWithColumnList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectWithColumnListContext selectWithColumnList() {
		SelectWithColumnListContext _localctx = new SelectWithColumnListContext(Context, State);
		EnterRule(_localctx, 44, RULE_selectWithColumnList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			_localctx.name = identifierChain();
			State = 431;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 427;
				Match(COMMA);
				State = 428;
				_localctx.name = identifierChain();
				}
				}
				State = 433;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectSublistContext : ParserRuleContext {
		public SelectSublistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectSublist; } }
	 
		public SelectSublistContext() { }
		public virtual void CopyFrom(SelectSublistContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectSublistExpressionContext : SelectSublistContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public SelectSublistExpressionContext(SelectSublistContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSublistExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectSublistWindowContext : SelectSublistContext {
		public IToken windowName;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(QueryCatParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectWindowSpecificationContext selectWindowSpecification() {
			return GetRuleContext<SelectWindowSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public SelectSublistWindowContext(SelectSublistContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSublistWindow(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectSublistAllContext : SelectSublistContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(QueryCatParser.STAR, 0); }
		public SelectSublistAllContext(SelectSublistContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSublistAll(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectSublistContext selectSublist() {
		SelectSublistContext _localctx = new SelectSublistContext(Context, State);
		EnterRule(_localctx, 46, RULE_selectSublist);
		try {
			State = 448;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				_localctx = new SelectSublistAllContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 434;
				Match(STAR);
				}
				break;
			case 2:
				_localctx = new SelectSublistWindowContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 435;
				functionCall();
				State = 436;
				Match(OVER);
				State = 439;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IDENTIFIER:
					{
					State = 437;
					((SelectSublistWindowContext)_localctx).windowName = Match(IDENTIFIER);
					}
					break;
				case LEFT_PAREN:
					{
					State = 438;
					selectWindowSpecification();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 442;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
				case 1:
					{
					State = 441;
					selectAlias();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new SelectSublistExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 444;
				expression(0);
				State = 446;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
				case 1:
					{
					State = 445;
					selectAlias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTargetContext : ParserRuleContext {
		public IToken uri;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(QueryCatParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		public SelectTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTarget; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTarget(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTargetContext selectTarget() {
		SelectTargetContext _localctx = new SelectTargetContext(Context, State);
		EnterRule(_localctx, 48, RULE_selectTarget);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450;
			Match(INTO);
			State = 453;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 451;
				functionCall();
				}
				break;
			case STRING_LITERAL:
				{
				State = 452;
				_localctx.uri = Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectFromClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableReferenceListContext selectTableReferenceList() {
			return GetRuleContext<SelectTableReferenceListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSearchConditionContext selectSearchCondition() {
			return GetRuleContext<SelectSearchConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectGroupByContext selectGroupBy() {
			return GetRuleContext<SelectGroupByContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectHavingContext selectHaving() {
			return GetRuleContext<SelectHavingContext>(0);
		}
		public SelectFromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectFromClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectFromClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectFromClauseContext selectFromClause() {
		SelectFromClauseContext _localctx = new SelectFromClauseContext(Context, State);
		EnterRule(_localctx, 50, RULE_selectFromClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455;
			selectTableReferenceList();
			State = 457;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				{
				State = 456;
				selectSearchCondition();
				}
				break;
			}
			State = 460;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				{
				State = 459;
				selectGroupBy();
				}
				break;
			}
			State = 463;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 462;
				selectHaving();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTableReferenceListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(QueryCatParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableReferenceContext[] selectTableReference() {
			return GetRuleContexts<SelectTableReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableReferenceContext selectTableReference(int i) {
			return GetRuleContext<SelectTableReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectTableReferenceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTableReferenceList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTableReferenceList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTableReferenceListContext selectTableReferenceList() {
		SelectTableReferenceListContext _localctx = new SelectTableReferenceListContext(Context, State);
		EnterRule(_localctx, 52, RULE_selectTableReferenceList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 465;
			Match(FROM);
			State = 466;
			selectTableReference();
			State = 471;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 467;
					Match(COMMA);
					State = 468;
					selectTableReference();
					}
					} 
				}
				State = 473;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTableReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectTablePrimaryContext selectTablePrimary() {
			return GetRuleContext<SelectTablePrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableJoinedContext[] selectTableJoined() {
			return GetRuleContexts<SelectTableJoinedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableJoinedContext selectTableJoined(int i) {
			return GetRuleContext<SelectTableJoinedContext>(i);
		}
		public SelectTableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTableReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTableReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTableReferenceContext selectTableReference() {
		SelectTableReferenceContext _localctx = new SelectTableReferenceContext(Context, State);
		EnterRule(_localctx, 54, RULE_selectTableReference);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 474;
			selectTablePrimary();
			State = 478;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 475;
					selectTableJoined();
					}
					} 
				}
				State = 480;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTableRowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext[] simpleExpression() {
			return GetRuleContexts<SimpleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression(int i) {
			return GetRuleContext<SimpleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectTableRowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTableRow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTableRow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTableRowContext selectTableRow() {
		SelectTableRowContext _localctx = new SelectTableRowContext(Context, State);
		EnterRule(_localctx, 56, RULE_selectTableRow);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481;
			Match(LEFT_PAREN);
			State = 482;
			simpleExpression(0);
			State = 487;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 483;
				Match(COMMA);
				State = 484;
				simpleExpression(0);
				}
				}
				State = 489;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 490;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(QueryCatParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableRowContext[] selectTableRow() {
			return GetRuleContexts<SelectTableRowContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableRowContext selectTableRow(int i) {
			return GetRuleContext<SelectTableRowContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTableContext selectTable() {
		SelectTableContext _localctx = new SelectTableContext(Context, State);
		EnterRule(_localctx, 58, RULE_selectTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 492;
			Match(VALUES);
			State = 493;
			selectTableRow();
			State = 498;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 494;
				Match(COMMA);
				State = 495;
				selectTableRow();
				}
				}
				State = 500;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTablePrimaryContext : ParserRuleContext {
		public SelectTablePrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTablePrimary; } }
	 
		public SelectTablePrimaryContext() { }
		public virtual void CopyFrom(SelectTablePrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectTablePrimaryNoFormatContext : SelectTablePrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public SelectTablePrimaryNoFormatContext(SelectTablePrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTablePrimaryNoFormat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectTablePrimarySubqueryContext : SelectTablePrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public SelectTablePrimarySubqueryContext(SelectTablePrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTablePrimarySubquery(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectTablePrimaryWithFormatContext : SelectTablePrimaryContext {
		public IToken uri;
		public FunctionCallContext format;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(QueryCatParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public SelectTablePrimaryWithFormatContext(SelectTablePrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTablePrimaryWithFormat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectTablePrimaryTableContext : SelectTablePrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableContext selectTable() {
			return GetRuleContext<SelectTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public SelectTablePrimaryTableContext(SelectTablePrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTablePrimaryTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectTablePrimaryStdinContext : SelectTablePrimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(QueryCatParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public SelectTablePrimaryStdinContext(SelectTablePrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTablePrimaryStdin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectTablePrimaryIdentifierContext : SelectTablePrimaryContext {
		public IToken name;
		public FunctionCallContext format;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(QueryCatParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public SelectTablePrimaryIdentifierContext(SelectTablePrimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTablePrimaryIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTablePrimaryContext selectTablePrimary() {
		SelectTablePrimaryContext _localctx = new SelectTablePrimaryContext(Context, State);
		EnterRule(_localctx, 60, RULE_selectTablePrimary);
		try {
			State = 537;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				_localctx = new SelectTablePrimaryNoFormatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 501;
				functionCall();
				State = 503;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
				case 1:
					{
					State = 502;
					selectAlias();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new SelectTablePrimaryStdinContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 505;
				Match(MINUS);
				State = 507;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
				case 1:
					{
					State = 506;
					selectAlias();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new SelectTablePrimaryWithFormatContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 509;
				((SelectTablePrimaryWithFormatContext)_localctx).uri = Match(STRING_LITERAL);
				State = 512;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
				case 1:
					{
					State = 510;
					Match(FORMAT);
					State = 511;
					((SelectTablePrimaryWithFormatContext)_localctx).format = functionCall();
					}
					break;
				}
				State = 515;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
				case 1:
					{
					State = 514;
					selectAlias();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SelectTablePrimarySubqueryContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 517;
				Match(LEFT_PAREN);
				State = 518;
				selectQueryExpression();
				State = 519;
				Match(RIGHT_PAREN);
				State = 521;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
				case 1:
					{
					State = 520;
					selectAlias();
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new SelectTablePrimaryIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 523;
				((SelectTablePrimaryIdentifierContext)_localctx).name = Match(IDENTIFIER);
				State = 526;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
				case 1:
					{
					State = 524;
					Match(FORMAT);
					State = 525;
					((SelectTablePrimaryIdentifierContext)_localctx).format = functionCall();
					}
					break;
				}
				State = 529;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
				case 1:
					{
					State = 528;
					selectAlias();
					}
					break;
				}
				}
				break;
			case 6:
				_localctx = new SelectTablePrimaryTableContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 531;
				Match(LEFT_PAREN);
				State = 532;
				selectTable();
				State = 533;
				Match(RIGHT_PAREN);
				State = 535;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
				case 1:
					{
					State = 534;
					selectAlias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTableJoinedContext : ParserRuleContext {
		public SelectTableJoinedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTableJoined; } }
	 
		public SelectTableJoinedContext() { }
		public virtual void CopyFrom(SelectTableJoinedContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectTableJoinedUsingContext : SelectTableJoinedContext {
		public SelectTablePrimaryContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(QueryCatParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(QueryCatParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(QueryCatParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(QueryCatParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectTablePrimaryContext selectTablePrimary() {
			return GetRuleContext<SelectTablePrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectJoinTypeContext selectJoinType() {
			return GetRuleContext<SelectJoinTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectTableJoinedUsingContext(SelectTableJoinedContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTableJoinedUsing(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectTableJoinedOnContext : SelectTableJoinedContext {
		public SelectTablePrimaryContext right;
		public ExpressionContext condition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(QueryCatParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(QueryCatParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectTablePrimaryContext selectTablePrimary() {
			return GetRuleContext<SelectTablePrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectJoinTypeContext selectJoinType() {
			return GetRuleContext<SelectJoinTypeContext>(0);
		}
		public SelectTableJoinedOnContext(SelectTableJoinedContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTableJoinedOn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTableJoinedContext selectTableJoined() {
		SelectTableJoinedContext _localctx = new SelectTableJoinedContext(Context, State);
		EnterRule(_localctx, 62, RULE_selectTableJoined);
		int _la;
		try {
			State = 564;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				_localctx = new SelectTableJoinedOnContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 540;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & 524553L) != 0)) {
					{
					State = 539;
					selectJoinType();
					}
				}

				State = 542;
				Match(JOIN);
				State = 543;
				((SelectTableJoinedOnContext)_localctx).right = selectTablePrimary();
				State = 544;
				Match(ON);
				State = 545;
				((SelectTableJoinedOnContext)_localctx).condition = expression(0);
				}
				break;
			case 2:
				_localctx = new SelectTableJoinedUsingContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 548;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & 524553L) != 0)) {
					{
					State = 547;
					selectJoinType();
					}
				}

				State = 550;
				Match(JOIN);
				State = 551;
				((SelectTableJoinedUsingContext)_localctx).right = selectTablePrimary();
				State = 552;
				Match(USING);
				State = 553;
				Match(LEFT_PAREN);
				State = 554;
				Match(IDENTIFIER);
				State = 559;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 555;
					Match(COMMA);
					State = 556;
					Match(IDENTIFIER);
					}
					}
					State = 561;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 562;
				Match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectJoinTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(QueryCatParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(QueryCatParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(QueryCatParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(QueryCatParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(QueryCatParser.OUTER, 0); }
		public SelectJoinTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectJoinType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectJoinType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectJoinTypeContext selectJoinType() {
		SelectJoinTypeContext _localctx = new SelectJoinTypeContext(Context, State);
		EnterRule(_localctx, 64, RULE_selectJoinType);
		int _la;
		try {
			State = 571;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INNER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 566;
				Match(INNER);
				}
				break;
			case FULL:
			case LEFT:
			case RIGHT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 567;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 102)) & ~0x3f) == 0 && ((1L << (_la - 102)) & 524545L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 569;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 568;
					Match(OUTER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectGroupByContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(QueryCatParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(QueryCatParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectGroupByContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectGroupBy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectGroupBy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectGroupByContext selectGroupBy() {
		SelectGroupByContext _localctx = new SelectGroupByContext(Context, State);
		EnterRule(_localctx, 66, RULE_selectGroupBy);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 573;
			Match(GROUP);
			State = 574;
			Match(BY);
			State = 575;
			expression(0);
			State = 580;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,83,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 576;
					Match(COMMA);
					State = 577;
					expression(0);
					}
					} 
				}
				State = 582;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,83,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectHavingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(QueryCatParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectHavingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectHaving; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectHaving(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectHavingContext selectHaving() {
		SelectHavingContext _localctx = new SelectHavingContext(Context, State);
		EnterRule(_localctx, 68, RULE_selectHaving);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 583;
			Match(HAVING);
			State = 584;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectSearchConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(QueryCatParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectSearchConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectSearchCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSearchCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectSearchConditionContext selectSearchCondition() {
		SelectSearchConditionContext _localctx = new SelectSearchConditionContext(Context, State);
		EnterRule(_localctx, 70, RULE_selectSearchCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 586;
			Match(WHERE);
			State = 587;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectWindowSpecificationContext : ParserRuleContext {
		public IToken existingWindowName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectWindowPartitionClauseContext selectWindowPartitionClause() {
			return GetRuleContext<SelectWindowPartitionClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectWindowOrderClauseContext selectWindowOrderClause() {
			return GetRuleContext<SelectWindowOrderClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		public SelectWindowSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectWindowSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectWindowSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectWindowSpecificationContext selectWindowSpecification() {
		SelectWindowSpecificationContext _localctx = new SelectWindowSpecificationContext(Context, State);
		EnterRule(_localctx, 72, RULE_selectWindowSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589;
			Match(LEFT_PAREN);
			State = 591;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 590;
				_localctx.existingWindowName = Match(IDENTIFIER);
				}
			}

			State = 594;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 593;
				selectWindowPartitionClause();
				}
			}

			State = 597;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 596;
				selectWindowOrderClause();
				}
			}

			State = 599;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectWindowPartitionClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(QueryCatParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(QueryCatParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectWindowPartitionClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectWindowPartitionClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectWindowPartitionClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectWindowPartitionClauseContext selectWindowPartitionClause() {
		SelectWindowPartitionClauseContext _localctx = new SelectWindowPartitionClauseContext(Context, State);
		EnterRule(_localctx, 74, RULE_selectWindowPartitionClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 601;
			Match(PARTITION);
			State = 602;
			Match(BY);
			State = 603;
			expression(0);
			State = 608;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 604;
				Match(COMMA);
				State = 605;
				expression(0);
				}
				}
				State = 610;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectWindowOrderClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(QueryCatParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(QueryCatParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectSortSpecificationContext[] selectSortSpecification() {
			return GetRuleContexts<SelectSortSpecificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSortSpecificationContext selectSortSpecification(int i) {
			return GetRuleContext<SelectSortSpecificationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectWindowOrderClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectWindowOrderClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectWindowOrderClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectWindowOrderClauseContext selectWindowOrderClause() {
		SelectWindowOrderClauseContext _localctx = new SelectWindowOrderClauseContext(Context, State);
		EnterRule(_localctx, 76, RULE_selectWindowOrderClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 611;
			Match(ORDER);
			State = 612;
			Match(BY);
			State = 613;
			selectSortSpecification();
			State = 618;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 614;
				Match(COMMA);
				State = 615;
				selectSortSpecification();
				}
				}
				State = 620;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectWindowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(QueryCatParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectWindowDefinitionListContext[] selectWindowDefinitionList() {
			return GetRuleContexts<SelectWindowDefinitionListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectWindowDefinitionListContext selectWindowDefinitionList(int i) {
			return GetRuleContext<SelectWindowDefinitionListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectWindowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectWindow; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectWindow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectWindowContext selectWindow() {
		SelectWindowContext _localctx = new SelectWindowContext(Context, State);
		EnterRule(_localctx, 78, RULE_selectWindow);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 621;
			Match(WINDOW);
			State = 622;
			selectWindowDefinitionList();
			State = 627;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,89,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 623;
					Match(COMMA);
					State = 624;
					selectWindowDefinitionList();
					}
					} 
				}
				State = 629;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,89,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectWindowDefinitionListContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(QueryCatParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectWindowSpecificationContext selectWindowSpecification() {
			return GetRuleContext<SelectWindowSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		public SelectWindowDefinitionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectWindowDefinitionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectWindowDefinitionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectWindowDefinitionListContext selectWindowDefinitionList() {
		SelectWindowDefinitionListContext _localctx = new SelectWindowDefinitionListContext(Context, State);
		EnterRule(_localctx, 80, RULE_selectWindowDefinitionList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 630;
			_localctx.name = Match(IDENTIFIER);
			State = 631;
			Match(AS);
			State = 632;
			selectWindowSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectOffsetClauseContext : ParserRuleContext {
		public ExpressionContext offset;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(QueryCatParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(QueryCatParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(QueryCatParser.ROWS, 0); }
		public SelectOffsetClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectOffsetClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectOffsetClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectOffsetClauseContext selectOffsetClause() {
		SelectOffsetClauseContext _localctx = new SelectOffsetClauseContext(Context, State);
		EnterRule(_localctx, 82, RULE_selectOffsetClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 634;
			Match(OFFSET);
			{
			State = 635;
			_localctx.offset = expression(0);
			}
			State = 637;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ROW || _la==ROWS) {
				{
				State = 636;
				_la = TokenStream.LA(1);
				if ( !(_la==ROW || _la==ROWS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectFetchFirstClauseContext : ParserRuleContext {
		public ExpressionContext limit;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(QueryCatParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(QueryCatParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(QueryCatParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(QueryCatParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(QueryCatParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(QueryCatParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(QueryCatParser.ONLY, 0); }
		public SelectFetchFirstClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectFetchFirstClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectFetchFirstClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectFetchFirstClauseContext selectFetchFirstClause() {
		SelectFetchFirstClauseContext _localctx = new SelectFetchFirstClauseContext(Context, State);
		EnterRule(_localctx, 84, RULE_selectFetchFirstClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 639;
			_la = TokenStream.LA(1);
			if ( !(_la==FETCH || _la==LIMIT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 641;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FIRST || _la==NEXT) {
				{
				State = 640;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST || _la==NEXT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			{
			State = 643;
			_localctx.limit = expression(0);
			}
			State = 645;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ROW || _la==ROWS) {
				{
				State = 644;
				_la = TokenStream.LA(1);
				if ( !(_la==ROW || _la==ROWS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 648;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ONLY) {
				{
				State = 647;
				_la = TokenStream.LA(1);
				if ( !(_la==ONLY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTopClauseContext : ParserRuleContext {
		public IToken limit;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOP() { return GetToken(QueryCatParser.TOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(QueryCatParser.INTEGER_LITERAL, 0); }
		public SelectTopClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTopClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTopClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTopClauseContext selectTopClause() {
		SelectTopClauseContext _localctx = new SelectTopClauseContext(Context, State);
		EnterRule(_localctx, 86, RULE_selectTopClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 650;
			Match(TOP);
			State = 651;
			_localctx.limit = Match(INTEGER_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectLimitClauseContext : ParserRuleContext {
		public ExpressionContext limit;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(QueryCatParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectLimitClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectLimitClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectLimitClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectLimitClauseContext selectLimitClause() {
		SelectLimitClauseContext _localctx = new SelectLimitClauseContext(Context, State);
		EnterRule(_localctx, 88, RULE_selectLimitClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 653;
			Match(LIMIT);
			State = 654;
			_localctx.limit = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(QueryCatParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdateSourceContext updateSource() {
			return GetRuleContext<UpdateSourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(QueryCatParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdateSetClauseContext[] updateSetClause() {
			return GetRuleContexts<UpdateSetClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateSetClauseContext updateSetClause(int i) {
			return GetRuleContext<UpdateSetClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSearchConditionContext selectSearchCondition() {
			return GetRuleContext<SelectSearchConditionContext>(0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateStatementContext updateStatement() {
		UpdateStatementContext _localctx = new UpdateStatementContext(Context, State);
		EnterRule(_localctx, 90, RULE_updateStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 656;
			Match(UPDATE);
			State = 657;
			updateSource();
			State = 658;
			Match(SET);
			State = 659;
			updateSetClause();
			State = 664;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 660;
				Match(COMMA);
				State = 661;
				updateSetClause();
				}
				}
				State = 666;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 668;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 667;
				selectSearchCondition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateSourceContext : ParserRuleContext {
		public UpdateSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateSource; } }
	 
		public UpdateSourceContext() { }
		public virtual void CopyFrom(UpdateSourceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UpdateFromVariableContext : UpdateSourceContext {
		public IdentifierChainContext name;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierChainContext identifierChain() {
			return GetRuleContext<IdentifierChainContext>(0);
		}
		public UpdateFromVariableContext(UpdateSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateFromVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UpdateWithFormatContext : UpdateSourceContext {
		public IToken uri;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(QueryCatParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public UpdateWithFormatContext(UpdateSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateWithFormat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UpdateNoFormatContext : UpdateSourceContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public UpdateNoFormatContext(UpdateSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateNoFormat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateSourceContext updateSource() {
		UpdateSourceContext _localctx = new UpdateSourceContext(Context, State);
		EnterRule(_localctx, 92, RULE_updateSource);
		int _la;
		try {
			State = 680;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				_localctx = new UpdateNoFormatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 670;
				functionCall();
				State = 672;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS || _la==IDENTIFIER || _la==STRING_LITERAL) {
					{
					State = 671;
					selectAlias();
					}
				}

				}
				break;
			case 2:
				_localctx = new UpdateWithFormatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 674;
				((UpdateWithFormatContext)_localctx).uri = Match(STRING_LITERAL);
				State = 677;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FORMAT) {
					{
					State = 675;
					Match(FORMAT);
					State = 676;
					functionCall();
					}
				}

				}
				break;
			case 3:
				_localctx = new UpdateFromVariableContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 679;
				((UpdateFromVariableContext)_localctx).name = identifierChain();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateSetClauseContext : ParserRuleContext {
		public IdentifierChainContext source;
		public ExpressionContext target;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(QueryCatParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierChainContext identifierChain() {
			return GetRuleContext<IdentifierChainContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UpdateSetClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateSetClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateSetClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateSetClauseContext updateSetClause() {
		UpdateSetClauseContext _localctx = new UpdateSetClauseContext(Context, State);
		EnterRule(_localctx, 94, RULE_updateSetClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 682;
			_localctx.source = identifierChain();
			State = 683;
			Match(EQUALS);
			State = 684;
			_localctx.target = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(QueryCatParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(QueryCatParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InsertToSourceContext insertToSource() {
			return GetRuleContext<InsertToSourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertFromSourceContext insertFromSource() {
			return GetRuleContext<InsertFromSourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertColumnsListContext insertColumnsList() {
			return GetRuleContext<InsertColumnsListContext>(0);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertStatementContext insertStatement() {
		InsertStatementContext _localctx = new InsertStatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_insertStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 686;
			Match(INSERT);
			State = 687;
			Match(INTO);
			State = 688;
			insertToSource();
			State = 690;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				{
				State = 689;
				insertColumnsList();
				}
				break;
			}
			State = 692;
			insertFromSource();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertToSourceContext : ParserRuleContext {
		public InsertToSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertToSource; } }
	 
		public InsertToSourceContext() { }
		public virtual void CopyFrom(InsertToSourceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InsertFromVariableContext : InsertToSourceContext {
		public IdentifierChainContext name;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierChainContext identifierChain() {
			return GetRuleContext<IdentifierChainContext>(0);
		}
		public InsertFromVariableContext(InsertToSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertFromVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InsertWithFormatContext : InsertToSourceContext {
		public IToken uri;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(QueryCatParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public InsertWithFormatContext(InsertToSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertWithFormat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InsertNoFormatContext : InsertToSourceContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public InsertNoFormatContext(InsertToSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertNoFormat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertToSourceContext insertToSource() {
		InsertToSourceContext _localctx = new InsertToSourceContext(Context, State);
		EnterRule(_localctx, 98, RULE_insertToSource);
		int _la;
		try {
			State = 701;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				_localctx = new InsertNoFormatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 694;
				functionCall();
				}
				break;
			case 2:
				_localctx = new InsertWithFormatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 695;
				((InsertWithFormatContext)_localctx).uri = Match(STRING_LITERAL);
				State = 698;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FORMAT) {
					{
					State = 696;
					Match(FORMAT);
					State = 697;
					functionCall();
					}
				}

				}
				break;
			case 3:
				_localctx = new InsertFromVariableContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 700;
				((InsertFromVariableContext)_localctx).name = identifierChain();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertColumnsListContext : ParserRuleContext {
		public IdentifierChainContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierChainContext[] identifierChain() {
			return GetRuleContexts<IdentifierChainContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierChainContext identifierChain(int i) {
			return GetRuleContext<IdentifierChainContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public InsertColumnsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertColumnsList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertColumnsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertColumnsListContext insertColumnsList() {
		InsertColumnsListContext _localctx = new InsertColumnsListContext(Context, State);
		EnterRule(_localctx, 100, RULE_insertColumnsList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 703;
			Match(LEFT_PAREN);
			State = 704;
			_localctx.name = identifierChain();
			State = 709;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 705;
				Match(COMMA);
				State = 706;
				_localctx.name = identifierChain();
				}
				}
				State = 711;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 712;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertFromSourceContext : ParserRuleContext {
		public InsertFromSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertFromSource; } }
	 
		public InsertFromSourceContext() { }
		public virtual void CopyFrom(InsertFromSourceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InsertSourceQueryContext : InsertFromSourceContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		public InsertSourceQueryContext(InsertFromSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertSourceQuery(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InsertSourceTableContext : InsertFromSourceContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableContext selectTable() {
			return GetRuleContext<SelectTableContext>(0);
		}
		public InsertSourceTableContext(InsertFromSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertSourceTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertFromSourceContext insertFromSource() {
		InsertFromSourceContext _localctx = new InsertFromSourceContext(Context, State);
		EnterRule(_localctx, 102, RULE_insertFromSource);
		try {
			State = 716;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEFT_PAREN:
			case SELECT:
			case WITH:
				_localctx = new InsertSourceQueryContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 714;
				selectQueryExpression();
				}
				break;
			case VALUES:
				_localctx = new InsertSourceTableContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 715;
				selectTable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EchoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ECHO() { return GetToken(QueryCatParser.ECHO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EchoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_echoStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEchoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EchoStatementContext echoStatement() {
		EchoStatementContext _localctx = new EchoStatementContext(Context, State);
		EnterRule(_localctx, 104, RULE_echoStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 718;
			Match(ECHO);
			State = 719;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierChainContext : ParserRuleContext {
		public IdentifierChainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierChain; } }
	 
		public IdentifierChainContext() { }
		public virtual void CopyFrom(IdentifierChainContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierChainSimpleContext : IdentifierChainContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		public IdentifierChainSimpleContext(IdentifierChainContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierChainSimple(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierChainFullContext : IdentifierChainContext {
		public IToken source;
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(QueryCatParser.PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(QueryCatParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(QueryCatParser.IDENTIFIER, i);
		}
		public IdentifierChainFullContext(IdentifierChainContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierChainFull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierChainContext identifierChain() {
		IdentifierChainContext _localctx = new IdentifierChainContext(Context, State);
		EnterRule(_localctx, 106, RULE_identifierChain);
		try {
			State = 727;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				_localctx = new IdentifierChainFullContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 721;
				((IdentifierChainFullContext)_localctx).source = Match(IDENTIFIER);
				State = 722;
				Match(PERIOD);
				State = 724;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
				case 1:
					{
					State = 723;
					((IdentifierChainFullContext)_localctx).name = Match(IDENTIFIER);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new IdentifierChainSimpleContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 726;
				((IdentifierChainSimpleContext)_localctx).name = Match(IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 108, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 729;
			Match(LEFT_PAREN);
			State = 730;
			expression(0);
			State = 735;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 731;
				Match(COMMA);
				State = 732;
				expression(0);
				}
				}
				State = 737;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 738;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalLiteralContext : ParserRuleContext {
		public IToken interval;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(QueryCatParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		public IntervalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalLiteralContext intervalLiteral() {
		IntervalLiteralContext _localctx = new IntervalLiteralContext(Context, State);
		EnterRule(_localctx, 110, RULE_intervalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 740;
			Match(INTERVAL);
			State = 741;
			_localctx.interval = Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastOperandContext : ParserRuleContext {
		public SimpleExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(QueryCatParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(QueryCatParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public CastOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castOperand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastOperandContext castOperand() {
		CastOperandContext _localctx = new CastOperandContext(Context, State);
		EnterRule(_localctx, 112, RULE_castOperand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 743;
			Match(CAST);
			State = 744;
			Match(LEFT_PAREN);
			State = 745;
			_localctx.value = simpleExpression(0);
			State = 746;
			Match(AS);
			State = 747;
			type();
			State = 748;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtTimeZoneContext : ParserRuleContext {
		public SimpleExpressionContext tz;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(QueryCatParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(QueryCatParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(QueryCatParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE() { return GetToken(QueryCatParser.ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public AtTimeZoneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atTimeZone; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtTimeZone(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtTimeZoneContext atTimeZone() {
		AtTimeZoneContext _localctx = new AtTimeZoneContext(Context, State);
		EnterRule(_localctx, 114, RULE_atTimeZone);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 750;
			Match(AT);
			State = 755;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LOCAL:
				{
				State = 751;
				Match(LOCAL);
				}
				break;
			case TIME:
				{
				State = 752;
				Match(TIME);
				State = 753;
				Match(ZONE);
				State = 754;
				_localctx.tz = simpleExpression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseExpressionContext : ParserRuleContext {
		public SimpleExpressionContext arg;
		public ExpressionContext @default;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(QueryCatParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(QueryCatParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseWhenContext[] caseWhen() {
			return GetRuleContexts<CaseWhenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseWhenContext caseWhen(int i) {
			return GetRuleContext<CaseWhenContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(QueryCatParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CaseExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseExpressionContext caseExpression() {
		CaseExpressionContext _localctx = new CaseExpressionContext(Context, State);
		EnterRule(_localctx, 116, RULE_caseExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 757;
			Match(CASE);
			State = 759;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2324003642769768450L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 31457393L) != 0) || ((((_la - 138)) & ~0x3f) == 0 && ((1L << (_la - 138)) & 63L) != 0)) {
				{
				State = 758;
				_localctx.arg = simpleExpression(0);
				}
			}

			State = 764;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WHEN) {
				{
				{
				State = 761;
				caseWhen();
				}
				}
				State = 766;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 769;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 767;
				Match(ELSE);
				State = 768;
				_localctx.@default = expression(0);
				}
			}

			State = 771;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseWhenContext : ParserRuleContext {
		public ExpressionContext condition;
		public ExpressionContext result;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(QueryCatParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(QueryCatParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CaseWhenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseWhen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseWhen(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseWhenContext caseWhen() {
		CaseWhenContext _localctx = new CaseWhenContext(Context, State);
		EnterRule(_localctx, 118, RULE_caseWhen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 773;
			Match(WHEN);
			State = 774;
			_localctx.condition = expression(0);
			State = 775;
			Match(THEN);
			State = 776;
			_localctx.result = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandardFunctionContext : ParserRuleContext {
		public StandardFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standardFunction; } }
	 
		public StandardFunctionContext() { }
		public virtual void CopyFrom(StandardFunctionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StandardFunctionCurrentDateContext : StandardFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE() { return GetToken(QueryCatParser.CURRENT_DATE, 0); }
		public StandardFunctionCurrentDateContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardFunctionCurrentDate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StandardFunctionExtractContext : StandardFunctionContext {
		public DateTimeFieldContext extractField;
		public SimpleExpressionContext source;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACT() { return GetToken(QueryCatParser.EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(QueryCatParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DateTimeFieldContext dateTimeField() {
			return GetRuleContext<DateTimeFieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public StandardFunctionExtractContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardFunctionExtract(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StandardFunctionCurrentTimestampContext : StandardFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(QueryCatParser.CURRENT_TIMESTAMP, 0); }
		public StandardFunctionCurrentTimestampContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardFunctionCurrentTimestamp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StandardFunctionTrimContext : StandardFunctionContext {
		public IToken spec;
		public IToken characters;
		public SimpleExpressionContext target;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIM() { return GetToken(QueryCatParser.TRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(QueryCatParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEADING() { return GetToken(QueryCatParser.LEADING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAILING() { return GetToken(QueryCatParser.TRAILING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOTH() { return GetToken(QueryCatParser.BOTH, 0); }
		public StandardFunctionTrimContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardFunctionTrim(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StandardFunctionPositionContext : StandardFunctionContext {
		public IToken substring;
		public SimpleExpressionContext @string;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(QueryCatParser.POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(QueryCatParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public StandardFunctionPositionContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardFunctionPosition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StandardFunctionCoalesceContext : StandardFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(QueryCatParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public StandardFunctionCoalesceContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardFunctionCoalesce(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StandardFunctionContext standardFunction() {
		StandardFunctionContext _localctx = new StandardFunctionContext(Context, State);
		EnterRule(_localctx, 120, RULE_standardFunction);
		int _la;
		try {
			State = 820;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT_DATE:
				_localctx = new StandardFunctionCurrentDateContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 778;
				Match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIMESTAMP:
				_localctx = new StandardFunctionCurrentTimestampContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 779;
				Match(CURRENT_TIMESTAMP);
				}
				break;
			case TRIM:
				_localctx = new StandardFunctionTrimContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 780;
				Match(TRIM);
				State = 781;
				Match(LEFT_PAREN);
				State = 783;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7L) != 0)) {
					{
					State = 782;
					((StandardFunctionTrimContext)_localctx).spec = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & 7L) != 0)) ) {
						((StandardFunctionTrimContext)_localctx).spec = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 786;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
				case 1:
					{
					State = 785;
					((StandardFunctionTrimContext)_localctx).characters = Match(STRING_LITERAL);
					}
					break;
				}
				State = 789;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM) {
					{
					State = 788;
					Match(FROM);
					}
				}

				State = 791;
				((StandardFunctionTrimContext)_localctx).target = simpleExpression(0);
				State = 792;
				Match(RIGHT_PAREN);
				}
				break;
			case POSITION:
				_localctx = new StandardFunctionPositionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 794;
				Match(POSITION);
				State = 795;
				Match(LEFT_PAREN);
				State = 796;
				((StandardFunctionPositionContext)_localctx).substring = Match(STRING_LITERAL);
				State = 797;
				Match(IN);
				State = 798;
				((StandardFunctionPositionContext)_localctx).@string = simpleExpression(0);
				State = 799;
				Match(RIGHT_PAREN);
				}
				break;
			case EXTRACT:
				_localctx = new StandardFunctionExtractContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 801;
				Match(EXTRACT);
				State = 802;
				Match(LEFT_PAREN);
				State = 803;
				((StandardFunctionExtractContext)_localctx).extractField = dateTimeField();
				State = 804;
				Match(FROM);
				State = 805;
				((StandardFunctionExtractContext)_localctx).source = simpleExpression(0);
				State = 806;
				Match(RIGHT_PAREN);
				}
				break;
			case COALESCE:
				_localctx = new StandardFunctionCoalesceContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 808;
				Match(COALESCE);
				State = 809;
				Match(LEFT_PAREN);
				State = 810;
				expression(0);
				State = 815;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 811;
					Match(COMMA);
					State = 812;
					expression(0);
					}
					}
					State = 817;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 818;
				Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTimeFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(QueryCatParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOY() { return GetToken(QueryCatParser.DOY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAYOFYEAR() { return GetToken(QueryCatParser.DAYOFYEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(QueryCatParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOW() { return GetToken(QueryCatParser.DOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEKDAY() { return GetToken(QueryCatParser.WEEKDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(QueryCatParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(QueryCatParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(QueryCatParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(QueryCatParser.SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLISECOND() { return GetToken(QueryCatParser.MILLISECOND, 0); }
		public DateTimeFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTimeField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateTimeField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateTimeFieldContext dateTimeField() {
		DateTimeFieldContext _localctx = new DateTimeFieldContext(Context, State);
		EnterRule(_localctx, 122, RULE_dateTimeField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 822;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 2047L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(QueryCatParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(QueryCatParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(QueryCatParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(QueryCatParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(QueryCatParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(QueryCatParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC() { return GetToken(QueryCatParser.NUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(QueryCatParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(QueryCatParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(QueryCatParser.VOID, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 124, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 824;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 30)) & ~0x3f) == 0 && ((1L << (_la - 30)) & 1108101562623L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionBinaryContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(QueryCatParser.CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_LESS() { return GetToken(QueryCatParser.LESS_LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_GREATER() { return GetToken(QueryCatParser.GREATER_GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(QueryCatParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(QueryCatParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(QueryCatParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(QueryCatParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(QueryCatParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(QueryCatParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(QueryCatParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(QueryCatParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUALS() { return GetToken(QueryCatParser.GREATER_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(QueryCatParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUALS() { return GetToken(QueryCatParser.LESS_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(QueryCatParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(QueryCatParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(QueryCatParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMILAR() { return GetToken(QueryCatParser.SIMILAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(QueryCatParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(QueryCatParser.OR, 0); }
		public ExpressionBinaryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStandardFunctionCallContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public StandardFunctionContext standardFunction() {
			return GetRuleContext<StandardFunctionContext>(0);
		}
		public ExpressionStandardFunctionCallContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStandardFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionInParensContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		public ExpressionInParensContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionInParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionAtTimeZoneContext : ExpressionContext {
		public ExpressionContext left;
		[System.Diagnostics.DebuggerNonUserCode] public AtTimeZoneContext atTimeZone() {
			return GetRuleContext<AtTimeZoneContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionAtTimeZoneContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionAtTimeZone(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionCaseContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseExpressionContext caseExpression() {
			return GetRuleContext<CaseExpressionContext>(0);
		}
		public ExpressionCaseContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionCase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionCastContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CastOperandContext castOperand() {
			return GetRuleContext<CastOperandContext>(0);
		}
		public ExpressionCastContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionCast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionBetweenContext : ExpressionContext {
		public ExpressionContext expr;
		public IToken op;
		public SimpleExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(QueryCatParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(QueryCatParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(QueryCatParser.NOT, 0); }
		public ExpressionBetweenContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionBetween(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionBinaryInContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ArrayContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(QueryCatParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(QueryCatParser.NOT, 0); }
		public ExpressionBinaryInContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionBinaryIn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionUnaryContext : ExpressionContext {
		public ExpressionContext right;
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(QueryCatParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(QueryCatParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(QueryCatParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(QueryCatParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(QueryCatParser.IS, 0); }
		public ExpressionUnaryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionUnary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionSubqueryContext : ExpressionContext {
		public SimpleExpressionContext left;
		public IToken op;
		public IToken condition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(QueryCatParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(QueryCatParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(QueryCatParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUALS() { return GetToken(QueryCatParser.GREATER_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(QueryCatParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUALS() { return GetToken(QueryCatParser.LESS_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(QueryCatParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(QueryCatParser.SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(QueryCatParser.ALL, 0); }
		public ExpressionSubqueryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionSubquery(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionBinaryCastContext : ExpressionContext {
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPECAST() { return GetToken(QueryCatParser.TYPECAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionBinaryCastContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionBinaryCast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionSelectContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		public ExpressionSelectContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionSelect(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionIdentifierContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierChainContext identifierChain() {
			return GetRuleContext<IdentifierChainContext>(0);
		}
		public ExpressionIdentifierContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionLiteralContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ExpressionLiteralContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionFunctionCallContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ExpressionFunctionCallContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionExistsContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(QueryCatParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		public ExpressionExistsContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionExists(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 126;
		EnterRecursionRule(_localctx, 126, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 857;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				{
				_localctx = new ExpressionLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 827;
				literal();
				}
				break;
			case 2:
				{
				_localctx = new ExpressionCastContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 828;
				castOperand();
				}
				break;
			case 3:
				{
				_localctx = new ExpressionStandardFunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 829;
				standardFunction();
				}
				break;
			case 4:
				{
				_localctx = new ExpressionFunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 830;
				functionCall();
				}
				break;
			case 5:
				{
				_localctx = new ExpressionCaseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 831;
				caseExpression();
				}
				break;
			case 6:
				{
				_localctx = new ExpressionIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 832;
				identifierChain();
				}
				break;
			case 7:
				{
				_localctx = new ExpressionInParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 833;
				Match(LEFT_PAREN);
				State = 834;
				expression(0);
				State = 835;
				Match(RIGHT_PAREN);
				}
				break;
			case 8:
				{
				_localctx = new ExpressionSelectContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 837;
				Match(LEFT_PAREN);
				State = 838;
				selectQueryExpression();
				State = 839;
				Match(RIGHT_PAREN);
				}
				break;
			case 9:
				{
				_localctx = new ExpressionUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 841;
				((ExpressionUnaryContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					((ExpressionUnaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 842;
				((ExpressionUnaryContext)_localctx).right = expression(15);
				}
				break;
			case 10:
				{
				_localctx = new ExpressionExistsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 843;
				Match(EXISTS);
				State = 844;
				Match(LEFT_PAREN);
				State = 845;
				selectQueryExpression();
				State = 846;
				Match(RIGHT_PAREN);
				}
				break;
			case 11:
				{
				_localctx = new ExpressionSubqueryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 848;
				((ExpressionSubqueryContext)_localctx).left = simpleExpression(0);
				State = 849;
				((ExpressionSubqueryContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 66060288L) != 0)) ) {
					((ExpressionSubqueryContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 850;
				((ExpressionSubqueryContext)_localctx).condition = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 37)) & ~0x3f) == 0 && ((1L << (_la - 37)) & 18014398511579137L) != 0)) ) {
					((ExpressionSubqueryContext)_localctx).condition = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 851;
				Match(LEFT_PAREN);
				State = 852;
				selectQueryExpression();
				State = 853;
				Match(RIGHT_PAREN);
				}
				break;
			case 12:
				{
				_localctx = new ExpressionUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 855;
				((ExpressionUnaryContext)_localctx).op = Match(NOT);
				State = 856;
				((ExpressionUnaryContext)_localctx).right = expression(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 921;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,123,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 919;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
					case 1:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 859;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 860;
						((ExpressionBinaryContext)_localctx).op = Match(CONCAT);
						State = 861;
						((ExpressionBinaryContext)_localctx).right = expression(18);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 862;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 863;
						((ExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==LESS_LESS || _la==GREATER_GREATER) ) {
							((ExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 864;
						((ExpressionBinaryContext)_localctx).right = expression(15);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 865;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 866;
						((ExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 917504L) != 0)) ) {
							((ExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 867;
						((ExpressionBinaryContext)_localctx).right = expression(14);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 868;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 869;
						((ExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((ExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 870;
						((ExpressionBinaryContext)_localctx).right = expression(13);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 871;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 872;
						((ExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 66060288L) != 0)) ) {
							((ExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 873;
						((ExpressionBinaryContext)_localctx).right = expression(12);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 874;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 876;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 875;
							Match(NOT);
							}
						}

						State = 878;
						((ExpressionBinaryContext)_localctx).op = Match(LIKE);
						State = 879;
						((ExpressionBinaryContext)_localctx).right = expression(11);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 880;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 882;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 881;
							Match(NOT);
							}
						}

						State = 884;
						((ExpressionBinaryContext)_localctx).op = Match(SIMILAR);
						State = 885;
						Match(TO);
						State = 886;
						((ExpressionBinaryContext)_localctx).right = expression(10);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionBetweenContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBetweenContext)_localctx).expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 887;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 889;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 888;
							Match(NOT);
							}
						}

						State = 891;
						((ExpressionBetweenContext)_localctx).op = Match(BETWEEN);
						State = 892;
						((ExpressionBetweenContext)_localctx).left = simpleExpression(0);
						State = 893;
						Match(AND);
						State = 894;
						((ExpressionBetweenContext)_localctx).right = expression(8);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 896;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 897;
						((ExpressionBinaryContext)_localctx).op = Match(AND);
						State = 898;
						((ExpressionBinaryContext)_localctx).right = expression(5);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 899;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 900;
						((ExpressionBinaryContext)_localctx).op = Match(OR);
						State = 901;
						((ExpressionBinaryContext)_localctx).right = expression(4);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionAtTimeZoneContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionAtTimeZoneContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 902;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 903;
						atTimeZone();
						}
						break;
					case 12:
						{
						_localctx = new ExpressionBinaryCastContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryCastContext)_localctx).right = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 904;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 905;
						Match(TYPECAST);
						State = 906;
						type();
						}
						break;
					case 13:
						{
						_localctx = new ExpressionBinaryInContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryInContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 907;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 909;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 908;
							Match(NOT);
							}
						}

						State = 911;
						((ExpressionBinaryInContext)_localctx).op = Match(IN);
						State = 912;
						((ExpressionBinaryInContext)_localctx).right = array();
						}
						break;
					case 14:
						{
						_localctx = new ExpressionUnaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionUnaryContext)_localctx).right = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 913;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 914;
						((ExpressionUnaryContext)_localctx).op = Match(IS);
						State = 916;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 915;
							Match(NOT);
							}
						}

						State = 918;
						Match(NULL);
						}
						break;
					}
					} 
				}
				State = 923;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,123,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SimpleExpressionContext : ParserRuleContext {
		public SimpleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpression; } }
	 
		public SimpleExpressionContext() { }
		public virtual void CopyFrom(SimpleExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleExpressionCaseContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseExpressionContext caseExpression() {
			return GetRuleContext<CaseExpressionContext>(0);
		}
		public SimpleExpressionCaseContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionCase(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionLiteralContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public SimpleExpressionLiteralContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionCastContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CastOperandContext castOperand() {
			return GetRuleContext<CastOperandContext>(0);
		}
		public SimpleExpressionCastContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionCast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionAtTimeZoneContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtTimeZoneContext atTimeZone() {
			return GetRuleContext<AtTimeZoneContext>(0);
		}
		public SimpleExpressionAtTimeZoneContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionAtTimeZone(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionStandardFunctionCallContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public StandardFunctionContext standardFunction() {
			return GetRuleContext<StandardFunctionContext>(0);
		}
		public SimpleExpressionStandardFunctionCallContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionStandardFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionUnaryContext : SimpleExpressionContext {
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(QueryCatParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(QueryCatParser.MINUS, 0); }
		public SimpleExpressionUnaryContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionUnary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionBinaryContext : SimpleExpressionContext {
		public SimpleExpressionContext left;
		public IToken op;
		public SimpleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext[] simpleExpression() {
			return GetRuleContexts<SimpleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression(int i) {
			return GetRuleContext<SimpleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(QueryCatParser.CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(QueryCatParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(QueryCatParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(QueryCatParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(QueryCatParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(QueryCatParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(QueryCatParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(QueryCatParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(QueryCatParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUALS() { return GetToken(QueryCatParser.GREATER_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(QueryCatParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUALS() { return GetToken(QueryCatParser.LESS_OR_EQUALS, 0); }
		public SimpleExpressionBinaryContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionBinaryCastContext : SimpleExpressionContext {
		public SimpleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPECAST() { return GetToken(QueryCatParser.TYPECAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public SimpleExpressionBinaryCastContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionBinaryCast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionFunctionCallContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public SimpleExpressionFunctionCallContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionInParensContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		public SimpleExpressionInParensContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionInParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionIdentifierContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierChainContext identifierChain() {
			return GetRuleContext<IdentifierChainContext>(0);
		}
		public SimpleExpressionIdentifierContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExpressionContext simpleExpression() {
		return simpleExpression(0);
	}

	private SimpleExpressionContext simpleExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SimpleExpressionContext _localctx = new SimpleExpressionContext(Context, _parentState);
		SimpleExpressionContext _prevctx = _localctx;
		int _startState = 128;
		EnterRecursionRule(_localctx, 128, RULE_simpleExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 938;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
			case 1:
				{
				_localctx = new SimpleExpressionLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 925;
				literal();
				}
				break;
			case 2:
				{
				_localctx = new SimpleExpressionCastContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 926;
				castOperand();
				}
				break;
			case 3:
				{
				_localctx = new SimpleExpressionAtTimeZoneContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 927;
				atTimeZone();
				}
				break;
			case 4:
				{
				_localctx = new SimpleExpressionStandardFunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 928;
				standardFunction();
				}
				break;
			case 5:
				{
				_localctx = new SimpleExpressionFunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 929;
				functionCall();
				}
				break;
			case 6:
				{
				_localctx = new SimpleExpressionCaseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 930;
				caseExpression();
				}
				break;
			case 7:
				{
				_localctx = new SimpleExpressionIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 931;
				identifierChain();
				}
				break;
			case 8:
				{
				_localctx = new SimpleExpressionInParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 932;
				Match(LEFT_PAREN);
				State = 933;
				simpleExpression(0);
				State = 934;
				Match(RIGHT_PAREN);
				}
				break;
			case 9:
				{
				_localctx = new SimpleExpressionUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 936;
				((SimpleExpressionUnaryContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					((SimpleExpressionUnaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 937;
				((SimpleExpressionUnaryContext)_localctx).right = expression(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 957;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,126,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 955;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,125,Context) ) {
					case 1:
						{
						_localctx = new SimpleExpressionBinaryContext(new SimpleExpressionContext(_parentctx, _parentState));
						((SimpleExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpression);
						State = 940;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 941;
						((SimpleExpressionBinaryContext)_localctx).op = Match(CONCAT);
						State = 942;
						((SimpleExpressionBinaryContext)_localctx).right = simpleExpression(6);
						}
						break;
					case 2:
						{
						_localctx = new SimpleExpressionBinaryContext(new SimpleExpressionContext(_parentctx, _parentState));
						((SimpleExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpression);
						State = 943;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 944;
						((SimpleExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 917504L) != 0)) ) {
							((SimpleExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 945;
						((SimpleExpressionBinaryContext)_localctx).right = simpleExpression(4);
						}
						break;
					case 3:
						{
						_localctx = new SimpleExpressionBinaryContext(new SimpleExpressionContext(_parentctx, _parentState));
						((SimpleExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpression);
						State = 946;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 947;
						((SimpleExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((SimpleExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 948;
						((SimpleExpressionBinaryContext)_localctx).right = simpleExpression(3);
						}
						break;
					case 4:
						{
						_localctx = new SimpleExpressionBinaryContext(new SimpleExpressionContext(_parentctx, _parentState));
						((SimpleExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpression);
						State = 949;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 950;
						((SimpleExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 66060288L) != 0)) ) {
							((SimpleExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 951;
						((SimpleExpressionBinaryContext)_localctx).right = simpleExpression(2);
						}
						break;
					case 5:
						{
						_localctx = new SimpleExpressionBinaryCastContext(new SimpleExpressionContext(_parentctx, _parentState));
						((SimpleExpressionBinaryCastContext)_localctx).right = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpression);
						State = 952;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 953;
						Match(TYPECAST);
						State = 954;
						type();
						}
						break;
					}
					} 
				}
				State = 959;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,126,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LiteralPlainContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(QueryCatParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_LITERAL() { return GetToken(QueryCatParser.FLOAT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_LITERAL() { return GetToken(QueryCatParser.NUMERIC_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_LITERAL() { return GetToken(QueryCatParser.BOOLEAN_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(QueryCatParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(QueryCatParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(QueryCatParser.NULL, 0); }
		public LiteralPlainContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralPlain(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralIntervalContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntervalLiteralContext intervalLiteral() {
			return GetRuleContext<IntervalLiteralContext>(0);
		}
		public LiteralIntervalContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralInterval(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 130, RULE_literal);
		try {
			State = 969;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER_LITERAL:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 960;
				Match(INTEGER_LITERAL);
				}
				break;
			case FLOAT_LITERAL:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 961;
				Match(FLOAT_LITERAL);
				}
				break;
			case NUMERIC_LITERAL:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 962;
				Match(NUMERIC_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 963;
				Match(BOOLEAN_LITERAL);
				}
				break;
			case STRING_LITERAL:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 964;
				Match(STRING_LITERAL);
				}
				break;
			case TRUE:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 965;
				Match(TRUE);
				}
				break;
			case FALSE:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 966;
				Match(FALSE);
				}
				break;
			case NULL:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 967;
				Match(NULL);
				}
				break;
			case INTERVAL:
				_localctx = new LiteralIntervalContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 968;
				intervalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return selectQueryExpressionBody_sempred((SelectQueryExpressionBodyContext)_localctx, predIndex);
		case 63: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 64: return simpleExpression_sempred((SimpleExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool selectQueryExpressionBody_sempred(SelectQueryExpressionBodyContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 17);
		case 3: return Precpred(Context, 14);
		case 4: return Precpred(Context, 13);
		case 5: return Precpred(Context, 12);
		case 6: return Precpred(Context, 11);
		case 7: return Precpred(Context, 10);
		case 8: return Precpred(Context, 9);
		case 9: return Precpred(Context, 7);
		case 10: return Precpred(Context, 4);
		case 11: return Precpred(Context, 3);
		case 12: return Precpred(Context, 24);
		case 13: return Precpred(Context, 16);
		case 14: return Precpred(Context, 8);
		case 15: return Precpred(Context, 2);
		}
		return true;
	}
	private bool simpleExpression_sempred(SimpleExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return Precpred(Context, 5);
		case 17: return Precpred(Context, 3);
		case 18: return Precpred(Context, 2);
		case 19: return Precpred(Context, 1);
		case 20: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,146,972,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,1,0,5,0,134,8,0,10,0,12,0,137,9,0,1,0,1,0,1,0,5,0,
		142,8,0,10,0,12,0,145,9,0,1,0,5,0,148,8,0,10,0,12,0,151,9,0,1,0,1,0,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,163,8,1,1,2,1,2,1,2,1,2,1,2,5,2,170,
		8,2,10,2,12,2,173,9,2,3,2,175,8,2,1,2,1,2,1,2,3,2,180,8,2,1,2,1,2,1,3,
		1,3,1,3,1,3,3,3,188,8,3,1,4,3,4,191,8,4,1,4,1,4,3,4,195,8,4,1,4,1,4,1,
		4,3,4,200,8,4,1,4,1,4,3,4,204,8,4,1,5,1,5,1,5,1,5,1,5,5,5,211,8,5,10,5,
		12,5,214,9,5,3,5,216,8,5,1,5,1,5,1,5,1,5,1,5,3,5,223,8,5,1,6,1,6,3,6,227,
		8,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,3,7,236,8,7,1,8,1,8,1,8,1,8,1,8,1,9,1,
		9,1,10,1,10,1,10,1,10,1,10,5,10,250,8,10,10,10,12,10,253,9,10,1,11,1,11,
		3,11,257,8,11,1,11,1,11,1,11,1,11,3,11,263,8,11,1,12,3,12,266,8,12,1,12,
		1,12,1,13,3,13,271,8,13,1,13,1,13,3,13,275,8,13,1,13,3,13,278,8,13,1,13,
		1,13,3,13,282,8,13,1,13,1,13,3,13,286,8,13,1,13,3,13,289,8,13,1,13,3,13,
		292,8,13,1,13,3,13,295,8,13,1,13,3,13,298,8,13,1,13,3,13,301,8,13,1,13,
		1,13,3,13,305,8,13,1,13,3,13,308,8,13,1,13,3,13,311,8,13,1,13,3,13,314,
		8,13,3,13,316,8,13,1,14,1,14,1,14,1,14,1,14,1,14,3,14,324,8,14,1,14,1,
		14,1,14,1,14,3,14,330,8,14,1,14,5,14,333,8,14,10,14,12,14,336,9,14,1,15,
		1,15,1,15,1,15,1,15,3,15,343,8,15,1,16,3,16,346,8,16,1,16,1,16,3,16,350,
		8,16,1,16,3,16,353,8,16,1,16,1,16,3,16,357,8,16,1,16,1,16,3,16,361,8,16,
		1,16,1,16,1,16,1,16,5,16,367,8,16,10,16,12,16,370,9,16,1,16,3,16,373,8,
		16,3,16,375,8,16,1,17,1,17,1,17,5,17,380,8,17,10,17,12,17,383,9,17,1,18,
		1,18,1,18,3,18,388,8,18,1,19,1,19,1,19,1,19,1,19,1,19,5,19,396,8,19,10,
		19,12,19,399,9,19,1,19,1,19,1,20,1,20,3,20,405,8,20,1,20,1,20,1,20,5,20,
		410,8,20,10,20,12,20,413,9,20,1,21,1,21,1,21,1,21,1,21,3,21,420,8,21,1,
		21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,5,22,430,8,22,10,22,12,22,433,9,
		22,1,23,1,23,1,23,1,23,1,23,3,23,440,8,23,1,23,3,23,443,8,23,1,23,1,23,
		3,23,447,8,23,3,23,449,8,23,1,24,1,24,1,24,3,24,454,8,24,1,25,1,25,3,25,
		458,8,25,1,25,3,25,461,8,25,1,25,3,25,464,8,25,1,26,1,26,1,26,1,26,5,26,
		470,8,26,10,26,12,26,473,9,26,1,27,1,27,5,27,477,8,27,10,27,12,27,480,
		9,27,1,28,1,28,1,28,1,28,5,28,486,8,28,10,28,12,28,489,9,28,1,28,1,28,
		1,29,1,29,1,29,1,29,5,29,497,8,29,10,29,12,29,500,9,29,1,30,1,30,3,30,
		504,8,30,1,30,1,30,3,30,508,8,30,1,30,1,30,1,30,3,30,513,8,30,1,30,3,30,
		516,8,30,1,30,1,30,1,30,1,30,3,30,522,8,30,1,30,1,30,1,30,3,30,527,8,30,
		1,30,3,30,530,8,30,1,30,1,30,1,30,1,30,3,30,536,8,30,3,30,538,8,30,1,31,
		3,31,541,8,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,549,8,31,1,31,1,31,1,
		31,1,31,1,31,1,31,1,31,5,31,558,8,31,10,31,12,31,561,9,31,1,31,1,31,3,
		31,565,8,31,1,32,1,32,1,32,3,32,570,8,32,3,32,572,8,32,1,33,1,33,1,33,
		1,33,1,33,5,33,579,8,33,10,33,12,33,582,9,33,1,34,1,34,1,34,1,35,1,35,
		1,35,1,36,1,36,3,36,592,8,36,1,36,3,36,595,8,36,1,36,3,36,598,8,36,1,36,
		1,36,1,37,1,37,1,37,1,37,1,37,5,37,607,8,37,10,37,12,37,610,9,37,1,38,
		1,38,1,38,1,38,1,38,5,38,617,8,38,10,38,12,38,620,9,38,1,39,1,39,1,39,
		1,39,5,39,626,8,39,10,39,12,39,629,9,39,1,40,1,40,1,40,1,40,1,41,1,41,
		1,41,3,41,638,8,41,1,42,1,42,3,42,642,8,42,1,42,1,42,3,42,646,8,42,1,42,
		3,42,649,8,42,1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,
		45,5,45,663,8,45,10,45,12,45,666,9,45,1,45,3,45,669,8,45,1,46,1,46,3,46,
		673,8,46,1,46,1,46,1,46,3,46,678,8,46,1,46,3,46,681,8,46,1,47,1,47,1,47,
		1,47,1,48,1,48,1,48,1,48,3,48,691,8,48,1,48,1,48,1,49,1,49,1,49,1,49,3,
		49,699,8,49,1,49,3,49,702,8,49,1,50,1,50,1,50,1,50,5,50,708,8,50,10,50,
		12,50,711,9,50,1,50,1,50,1,51,1,51,3,51,717,8,51,1,52,1,52,1,52,1,53,1,
		53,1,53,3,53,725,8,53,1,53,3,53,728,8,53,1,54,1,54,1,54,1,54,5,54,734,
		8,54,10,54,12,54,737,9,54,1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,56,1,56,
		1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,3,57,756,8,57,1,58,1,58,3,58,760,
		8,58,1,58,5,58,763,8,58,10,58,12,58,766,9,58,1,58,1,58,3,58,770,8,58,1,
		58,1,58,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,3,60,784,8,60,
		1,60,3,60,787,8,60,1,60,3,60,790,8,60,1,60,1,60,1,60,1,60,1,60,1,60,1,
		60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,
		60,1,60,5,60,814,8,60,10,60,12,60,817,9,60,1,60,1,60,3,60,821,8,60,1,61,
		1,61,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,
		1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,
		1,63,1,63,1,63,1,63,1,63,1,63,3,63,858,8,63,1,63,1,63,1,63,1,63,1,63,1,
		63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,877,8,63,
		1,63,1,63,1,63,1,63,3,63,883,8,63,1,63,1,63,1,63,1,63,1,63,3,63,890,8,
		63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,
		63,1,63,1,63,1,63,1,63,3,63,910,8,63,1,63,1,63,1,63,1,63,1,63,3,63,917,
		8,63,1,63,5,63,920,8,63,10,63,12,63,923,9,63,1,64,1,64,1,64,1,64,1,64,
		1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,939,8,64,1,64,1,64,1,
		64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,5,64,956,
		8,64,10,64,12,64,959,9,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
		3,65,970,8,65,1,65,0,3,28,126,128,66,0,2,4,6,8,10,12,14,16,18,20,22,24,
		26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
		74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
		116,118,120,122,124,126,128,130,0,18,3,0,3,3,20,20,43,43,2,0,92,92,95,
		95,2,0,138,138,142,142,2,0,91,91,96,96,2,0,97,97,128,128,3,0,102,102,110,
		110,121,121,1,0,122,123,2,0,98,98,111,111,2,0,99,99,112,112,1,0,56,56,
		1,0,65,67,1,0,71,81,3,0,30,37,63,63,70,70,1,0,15,16,1,0,20,25,3,0,37,37,
		58,58,91,91,1,0,27,28,1,0,17,19,1091,0,135,1,0,0,0,2,162,1,0,0,0,4,164,
		1,0,0,0,6,183,1,0,0,0,8,190,1,0,0,0,10,222,1,0,0,0,12,226,1,0,0,0,14,230,
		1,0,0,0,16,237,1,0,0,0,18,242,1,0,0,0,20,244,1,0,0,0,22,254,1,0,0,0,24,
		265,1,0,0,0,26,315,1,0,0,0,28,317,1,0,0,0,30,342,1,0,0,0,32,374,1,0,0,
		0,34,376,1,0,0,0,36,387,1,0,0,0,38,389,1,0,0,0,40,402,1,0,0,0,42,414,1,
		0,0,0,44,426,1,0,0,0,46,448,1,0,0,0,48,450,1,0,0,0,50,455,1,0,0,0,52,465,
		1,0,0,0,54,474,1,0,0,0,56,481,1,0,0,0,58,492,1,0,0,0,60,537,1,0,0,0,62,
		564,1,0,0,0,64,571,1,0,0,0,66,573,1,0,0,0,68,583,1,0,0,0,70,586,1,0,0,
		0,72,589,1,0,0,0,74,601,1,0,0,0,76,611,1,0,0,0,78,621,1,0,0,0,80,630,1,
		0,0,0,82,634,1,0,0,0,84,639,1,0,0,0,86,650,1,0,0,0,88,653,1,0,0,0,90,656,
		1,0,0,0,92,680,1,0,0,0,94,682,1,0,0,0,96,686,1,0,0,0,98,701,1,0,0,0,100,
		703,1,0,0,0,102,716,1,0,0,0,104,718,1,0,0,0,106,727,1,0,0,0,108,729,1,
		0,0,0,110,740,1,0,0,0,112,743,1,0,0,0,114,750,1,0,0,0,116,757,1,0,0,0,
		118,773,1,0,0,0,120,820,1,0,0,0,122,822,1,0,0,0,124,824,1,0,0,0,126,857,
		1,0,0,0,128,938,1,0,0,0,130,969,1,0,0,0,132,134,5,9,0,0,133,132,1,0,0,
		0,134,137,1,0,0,0,135,133,1,0,0,0,135,136,1,0,0,0,136,138,1,0,0,0,137,
		135,1,0,0,0,138,143,3,2,1,0,139,140,5,9,0,0,140,142,3,2,1,0,141,139,1,
		0,0,0,142,145,1,0,0,0,143,141,1,0,0,0,143,144,1,0,0,0,144,149,1,0,0,0,
		145,143,1,0,0,0,146,148,5,9,0,0,147,146,1,0,0,0,148,151,1,0,0,0,149,147,
		1,0,0,0,149,150,1,0,0,0,150,152,1,0,0,0,151,149,1,0,0,0,152,153,5,0,0,
		1,153,1,1,0,0,0,154,163,3,10,5,0,155,163,3,18,9,0,156,163,3,90,45,0,157,
		163,3,96,48,0,158,163,3,104,52,0,159,163,3,14,7,0,160,163,3,16,8,0,161,
		163,3,126,63,0,162,154,1,0,0,0,162,155,1,0,0,0,162,156,1,0,0,0,162,157,
		1,0,0,0,162,158,1,0,0,0,162,159,1,0,0,0,162,160,1,0,0,0,162,161,1,0,0,
		0,163,3,1,0,0,0,164,165,5,138,0,0,165,174,5,1,0,0,166,171,3,8,4,0,167,
		168,5,6,0,0,168,170,3,8,4,0,169,167,1,0,0,0,170,173,1,0,0,0,171,169,1,
		0,0,0,171,172,1,0,0,0,172,175,1,0,0,0,173,171,1,0,0,0,174,166,1,0,0,0,
		174,175,1,0,0,0,175,176,1,0,0,0,176,179,5,2,0,0,177,178,5,5,0,0,178,180,
		3,6,3,0,179,177,1,0,0,0,179,180,1,0,0,0,180,181,1,0,0,0,181,182,5,0,0,
		1,182,5,1,0,0,0,183,187,3,124,62,0,184,185,5,24,0,0,185,186,5,138,0,0,
		186,188,5,22,0,0,187,184,1,0,0,0,187,188,1,0,0,0,188,7,1,0,0,0,189,191,
		5,8,0,0,190,189,1,0,0,0,190,191,1,0,0,0,191,192,1,0,0,0,192,194,5,138,
		0,0,193,195,5,10,0,0,194,193,1,0,0,0,194,195,1,0,0,0,195,196,1,0,0,0,196,
		197,5,5,0,0,197,199,3,6,3,0,198,200,5,13,0,0,199,198,1,0,0,0,199,200,1,
		0,0,0,200,203,1,0,0,0,201,202,7,0,0,0,202,204,3,130,65,0,203,201,1,0,0,
		0,203,204,1,0,0,0,204,9,1,0,0,0,205,206,5,138,0,0,206,215,5,1,0,0,207,
		212,3,12,6,0,208,209,5,6,0,0,209,211,3,12,6,0,210,208,1,0,0,0,211,214,
		1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,216,1,0,0,0,214,212,1,0,0,
		0,215,207,1,0,0,0,215,216,1,0,0,0,216,217,1,0,0,0,217,223,5,2,0,0,218,
		219,5,138,0,0,219,220,5,1,0,0,220,221,5,17,0,0,221,223,5,2,0,0,222,205,
		1,0,0,0,222,218,1,0,0,0,223,11,1,0,0,0,224,225,5,138,0,0,225,227,5,4,0,
		0,226,224,1,0,0,0,226,227,1,0,0,0,227,228,1,0,0,0,228,229,3,126,63,0,229,
		13,1,0,0,0,230,231,5,135,0,0,231,232,5,138,0,0,232,235,3,124,62,0,233,
		234,5,3,0,0,234,236,3,2,1,0,235,233,1,0,0,0,235,236,1,0,0,0,236,15,1,0,
		0,0,237,238,5,136,0,0,238,239,5,138,0,0,239,240,5,3,0,0,240,241,3,2,1,
		0,241,17,1,0,0,0,242,243,3,26,13,0,243,19,1,0,0,0,244,245,5,115,0,0,245,
		246,5,41,0,0,246,251,3,22,11,0,247,248,5,6,0,0,248,250,3,22,11,0,249,247,
		1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,251,252,1,0,0,0,252,21,1,0,0,0,
		253,251,1,0,0,0,254,256,3,126,63,0,255,257,7,1,0,0,256,255,1,0,0,0,256,
		257,1,0,0,0,257,262,1,0,0,0,258,259,5,113,0,0,259,263,5,99,0,0,260,261,
		5,113,0,0,261,263,5,109,0,0,262,258,1,0,0,0,262,260,1,0,0,0,262,263,1,
		0,0,0,263,23,1,0,0,0,264,266,5,39,0,0,265,264,1,0,0,0,265,266,1,0,0,0,
		266,267,1,0,0,0,267,268,7,2,0,0,268,25,1,0,0,0,269,271,3,40,20,0,270,269,
		1,0,0,0,270,271,1,0,0,0,271,272,1,0,0,0,272,274,5,124,0,0,273,275,3,86,
		43,0,274,273,1,0,0,0,274,275,1,0,0,0,275,277,1,0,0,0,276,278,3,36,18,0,
		277,276,1,0,0,0,277,278,1,0,0,0,278,279,1,0,0,0,279,281,3,34,17,0,280,
		282,3,48,24,0,281,280,1,0,0,0,281,282,1,0,0,0,282,283,1,0,0,0,283,285,
		3,50,25,0,284,286,3,78,39,0,285,284,1,0,0,0,285,286,1,0,0,0,286,288,1,
		0,0,0,287,289,3,20,10,0,288,287,1,0,0,0,288,289,1,0,0,0,289,291,1,0,0,
		0,290,292,3,88,44,0,291,290,1,0,0,0,291,292,1,0,0,0,292,294,1,0,0,0,293,
		295,3,82,41,0,294,293,1,0,0,0,294,295,1,0,0,0,295,297,1,0,0,0,296,298,
		3,84,42,0,297,296,1,0,0,0,297,298,1,0,0,0,298,316,1,0,0,0,299,301,3,40,
		20,0,300,299,1,0,0,0,300,301,1,0,0,0,301,302,1,0,0,0,302,304,3,28,14,0,
		303,305,3,20,10,0,304,303,1,0,0,0,304,305,1,0,0,0,305,307,1,0,0,0,306,
		308,3,88,44,0,307,306,1,0,0,0,307,308,1,0,0,0,308,310,1,0,0,0,309,311,
		3,82,41,0,310,309,1,0,0,0,310,311,1,0,0,0,311,313,1,0,0,0,312,314,3,84,
		42,0,313,312,1,0,0,0,313,314,1,0,0,0,314,316,1,0,0,0,315,270,1,0,0,0,315,
		300,1,0,0,0,316,27,1,0,0,0,317,318,6,14,-1,0,318,319,3,30,15,0,319,334,
		1,0,0,0,320,321,10,2,0,0,321,323,5,106,0,0,322,324,7,3,0,0,323,322,1,0,
		0,0,323,324,1,0,0,0,324,325,1,0,0,0,325,333,3,28,14,3,326,327,10,1,0,0,
		327,329,7,4,0,0,328,330,7,3,0,0,329,328,1,0,0,0,329,330,1,0,0,0,330,331,
		1,0,0,0,331,333,3,28,14,2,332,320,1,0,0,0,332,326,1,0,0,0,333,336,1,0,
		0,0,334,332,1,0,0,0,334,335,1,0,0,0,335,29,1,0,0,0,336,334,1,0,0,0,337,
		343,3,32,16,0,338,339,5,1,0,0,339,340,3,26,13,0,340,341,5,2,0,0,341,343,
		1,0,0,0,342,337,1,0,0,0,342,338,1,0,0,0,343,31,1,0,0,0,344,346,3,40,20,
		0,345,344,1,0,0,0,345,346,1,0,0,0,346,347,1,0,0,0,347,349,5,124,0,0,348,
		350,3,86,43,0,349,348,1,0,0,0,349,350,1,0,0,0,350,352,1,0,0,0,351,353,
		3,36,18,0,352,351,1,0,0,0,352,353,1,0,0,0,353,354,1,0,0,0,354,356,3,34,
		17,0,355,357,3,48,24,0,356,355,1,0,0,0,356,357,1,0,0,0,357,358,1,0,0,0,
		358,360,3,50,25,0,359,361,3,78,39,0,360,359,1,0,0,0,360,361,1,0,0,0,361,
		375,1,0,0,0,362,363,5,124,0,0,363,368,3,46,23,0,364,365,5,6,0,0,365,367,
		3,46,23,0,366,364,1,0,0,0,367,370,1,0,0,0,368,366,1,0,0,0,368,369,1,0,
		0,0,369,372,1,0,0,0,370,368,1,0,0,0,371,373,3,48,24,0,372,371,1,0,0,0,
		372,373,1,0,0,0,373,375,1,0,0,0,374,345,1,0,0,0,374,362,1,0,0,0,375,33,
		1,0,0,0,376,381,3,46,23,0,377,378,5,6,0,0,378,380,3,46,23,0,379,377,1,
		0,0,0,380,383,1,0,0,0,381,379,1,0,0,0,381,382,1,0,0,0,382,35,1,0,0,0,383,
		381,1,0,0,0,384,388,5,91,0,0,385,388,5,96,0,0,386,388,3,38,19,0,387,384,
		1,0,0,0,387,385,1,0,0,0,387,386,1,0,0,0,388,37,1,0,0,0,389,390,5,96,0,
		0,390,391,5,55,0,0,391,392,5,1,0,0,392,397,3,128,64,0,393,394,5,6,0,0,
		394,396,3,128,64,0,395,393,1,0,0,0,396,399,1,0,0,0,397,395,1,0,0,0,397,
		398,1,0,0,0,398,400,1,0,0,0,399,397,1,0,0,0,400,401,5,2,0,0,401,39,1,0,
		0,0,402,404,5,132,0,0,403,405,5,120,0,0,404,403,1,0,0,0,404,405,1,0,0,
		0,405,406,1,0,0,0,406,411,3,42,21,0,407,408,5,6,0,0,408,410,3,42,21,0,
		409,407,1,0,0,0,410,413,1,0,0,0,411,409,1,0,0,0,411,412,1,0,0,0,412,41,
		1,0,0,0,413,411,1,0,0,0,414,419,5,138,0,0,415,416,5,1,0,0,416,417,3,44,
		22,0,417,418,5,2,0,0,418,420,1,0,0,0,419,415,1,0,0,0,419,420,1,0,0,0,420,
		421,1,0,0,0,421,422,5,39,0,0,422,423,5,1,0,0,423,424,3,26,13,0,424,425,
		5,2,0,0,425,43,1,0,0,0,426,431,3,106,53,0,427,428,5,6,0,0,428,430,3,106,
		53,0,429,427,1,0,0,0,430,433,1,0,0,0,431,429,1,0,0,0,431,432,1,0,0,0,432,
		45,1,0,0,0,433,431,1,0,0,0,434,449,5,17,0,0,435,436,3,10,5,0,436,439,5,
		117,0,0,437,440,5,138,0,0,438,440,3,72,36,0,439,437,1,0,0,0,439,438,1,
		0,0,0,440,442,1,0,0,0,441,443,3,24,12,0,442,441,1,0,0,0,442,443,1,0,0,
		0,443,449,1,0,0,0,444,446,3,126,63,0,445,447,3,24,12,0,446,445,1,0,0,0,
		446,447,1,0,0,0,447,449,1,0,0,0,448,434,1,0,0,0,448,435,1,0,0,0,448,444,
		1,0,0,0,449,47,1,0,0,0,450,453,5,107,0,0,451,454,3,10,5,0,452,454,5,142,
		0,0,453,451,1,0,0,0,453,452,1,0,0,0,454,49,1,0,0,0,455,457,3,52,26,0,456,
		458,3,70,35,0,457,456,1,0,0,0,457,458,1,0,0,0,458,460,1,0,0,0,459,461,
		3,66,33,0,460,459,1,0,0,0,460,461,1,0,0,0,461,463,1,0,0,0,462,464,3,68,
		34,0,463,462,1,0,0,0,463,464,1,0,0,0,464,51,1,0,0,0,465,466,5,48,0,0,466,
		471,3,54,27,0,467,468,5,6,0,0,468,470,3,54,27,0,469,467,1,0,0,0,470,473,
		1,0,0,0,471,469,1,0,0,0,471,472,1,0,0,0,472,53,1,0,0,0,473,471,1,0,0,0,
		474,478,3,60,30,0,475,477,3,62,31,0,476,475,1,0,0,0,477,480,1,0,0,0,478,
		476,1,0,0,0,478,479,1,0,0,0,479,55,1,0,0,0,480,478,1,0,0,0,481,482,5,1,
		0,0,482,487,3,128,64,0,483,484,5,6,0,0,484,486,3,128,64,0,485,483,1,0,
		0,0,486,489,1,0,0,0,487,485,1,0,0,0,487,488,1,0,0,0,488,490,1,0,0,0,489,
		487,1,0,0,0,490,491,5,2,0,0,491,57,1,0,0,0,492,493,5,129,0,0,493,498,3,
		56,28,0,494,495,5,6,0,0,495,497,3,56,28,0,496,494,1,0,0,0,497,500,1,0,
		0,0,498,496,1,0,0,0,498,499,1,0,0,0,499,59,1,0,0,0,500,498,1,0,0,0,501,
		503,3,10,5,0,502,504,3,24,12,0,503,502,1,0,0,0,503,504,1,0,0,0,504,538,
		1,0,0,0,505,507,5,16,0,0,506,508,3,24,12,0,507,506,1,0,0,0,507,508,1,0,
		0,0,508,538,1,0,0,0,509,512,5,142,0,0,510,511,5,101,0,0,511,513,3,10,5,
		0,512,510,1,0,0,0,512,513,1,0,0,0,513,515,1,0,0,0,514,516,3,24,12,0,515,
		514,1,0,0,0,515,516,1,0,0,0,516,538,1,0,0,0,517,518,5,1,0,0,518,519,3,
		26,13,0,519,521,5,2,0,0,520,522,3,24,12,0,521,520,1,0,0,0,521,522,1,0,
		0,0,522,538,1,0,0,0,523,526,5,138,0,0,524,525,5,101,0,0,525,527,3,10,5,
		0,526,524,1,0,0,0,526,527,1,0,0,0,527,529,1,0,0,0,528,530,3,24,12,0,529,
		528,1,0,0,0,529,530,1,0,0,0,530,538,1,0,0,0,531,532,5,1,0,0,532,533,3,
		58,29,0,533,535,5,2,0,0,534,536,3,24,12,0,535,534,1,0,0,0,535,536,1,0,
		0,0,536,538,1,0,0,0,537,501,1,0,0,0,537,505,1,0,0,0,537,509,1,0,0,0,537,
		517,1,0,0,0,537,523,1,0,0,0,537,531,1,0,0,0,538,61,1,0,0,0,539,541,3,64,
		32,0,540,539,1,0,0,0,540,541,1,0,0,0,541,542,1,0,0,0,542,543,5,108,0,0,
		543,544,3,60,30,0,544,545,5,55,0,0,545,546,3,126,63,0,546,565,1,0,0,0,
		547,549,3,64,32,0,548,547,1,0,0,0,548,549,1,0,0,0,549,550,1,0,0,0,550,
		551,5,108,0,0,551,552,3,60,30,0,552,553,5,62,0,0,553,554,5,1,0,0,554,559,
		5,138,0,0,555,556,5,6,0,0,556,558,5,138,0,0,557,555,1,0,0,0,558,561,1,
		0,0,0,559,557,1,0,0,0,559,560,1,0,0,0,560,562,1,0,0,0,561,559,1,0,0,0,
		562,563,5,2,0,0,563,565,1,0,0,0,564,540,1,0,0,0,564,548,1,0,0,0,565,63,
		1,0,0,0,566,572,5,105,0,0,567,569,7,5,0,0,568,570,5,116,0,0,569,568,1,
		0,0,0,569,570,1,0,0,0,570,572,1,0,0,0,571,566,1,0,0,0,571,567,1,0,0,0,
		572,65,1,0,0,0,573,574,5,103,0,0,574,575,5,41,0,0,575,580,3,126,63,0,576,
		577,5,6,0,0,577,579,3,126,63,0,578,576,1,0,0,0,579,582,1,0,0,0,580,578,
		1,0,0,0,580,581,1,0,0,0,581,67,1,0,0,0,582,580,1,0,0,0,583,584,5,104,0,
		0,584,585,3,126,63,0,585,69,1,0,0,0,586,587,5,130,0,0,587,588,3,126,63,
		0,588,71,1,0,0,0,589,591,5,1,0,0,590,592,5,138,0,0,591,590,1,0,0,0,591,
		592,1,0,0,0,592,594,1,0,0,0,593,595,3,74,37,0,594,593,1,0,0,0,594,595,
		1,0,0,0,595,597,1,0,0,0,596,598,3,76,38,0,597,596,1,0,0,0,597,598,1,0,
		0,0,598,599,1,0,0,0,599,600,5,2,0,0,600,73,1,0,0,0,601,602,5,118,0,0,602,
		603,5,41,0,0,603,608,3,126,63,0,604,605,5,6,0,0,605,607,3,126,63,0,606,
		604,1,0,0,0,607,610,1,0,0,0,608,606,1,0,0,0,608,609,1,0,0,0,609,75,1,0,
		0,0,610,608,1,0,0,0,611,612,5,115,0,0,612,613,5,41,0,0,613,618,3,22,11,
		0,614,615,5,6,0,0,615,617,3,22,11,0,616,614,1,0,0,0,617,620,1,0,0,0,618,
		616,1,0,0,0,618,619,1,0,0,0,619,77,1,0,0,0,620,618,1,0,0,0,621,622,5,131,
		0,0,622,627,3,80,40,0,623,624,5,6,0,0,624,626,3,80,40,0,625,623,1,0,0,
		0,626,629,1,0,0,0,627,625,1,0,0,0,627,628,1,0,0,0,628,79,1,0,0,0,629,627,
		1,0,0,0,630,631,5,138,0,0,631,632,5,39,0,0,632,633,3,72,36,0,633,81,1,
		0,0,0,634,635,5,114,0,0,635,637,3,126,63,0,636,638,7,6,0,0,637,636,1,0,
		0,0,637,638,1,0,0,0,638,83,1,0,0,0,639,641,7,7,0,0,640,642,7,8,0,0,641,
		640,1,0,0,0,641,642,1,0,0,0,642,643,1,0,0,0,643,645,3,126,63,0,644,646,
		7,6,0,0,645,644,1,0,0,0,645,646,1,0,0,0,646,648,1,0,0,0,647,649,7,9,0,
		0,648,647,1,0,0,0,648,649,1,0,0,0,649,85,1,0,0,0,650,651,5,126,0,0,651,
		652,5,139,0,0,652,87,1,0,0,0,653,654,5,111,0,0,654,655,3,126,63,0,655,
		89,1,0,0,0,656,657,5,133,0,0,657,658,3,92,46,0,658,659,5,136,0,0,659,664,
		3,94,47,0,660,661,5,6,0,0,661,663,3,94,47,0,662,660,1,0,0,0,663,666,1,
		0,0,0,664,662,1,0,0,0,664,665,1,0,0,0,665,668,1,0,0,0,666,664,1,0,0,0,
		667,669,3,70,35,0,668,667,1,0,0,0,668,669,1,0,0,0,669,91,1,0,0,0,670,672,
		3,10,5,0,671,673,3,24,12,0,672,671,1,0,0,0,672,673,1,0,0,0,673,681,1,0,
		0,0,674,677,5,142,0,0,675,676,5,101,0,0,676,678,3,10,5,0,677,675,1,0,0,
		0,677,678,1,0,0,0,678,681,1,0,0,0,679,681,3,106,53,0,680,670,1,0,0,0,680,
		674,1,0,0,0,680,679,1,0,0,0,681,93,1,0,0,0,682,683,3,106,53,0,683,684,
		5,20,0,0,684,685,3,126,63,0,685,95,1,0,0,0,686,687,5,134,0,0,687,688,5,
		107,0,0,688,690,3,98,49,0,689,691,3,100,50,0,690,689,1,0,0,0,690,691,1,
		0,0,0,691,692,1,0,0,0,692,693,3,102,51,0,693,97,1,0,0,0,694,702,3,10,5,
		0,695,698,5,142,0,0,696,697,5,101,0,0,697,699,3,10,5,0,698,696,1,0,0,0,
		698,699,1,0,0,0,699,702,1,0,0,0,700,702,3,106,53,0,701,694,1,0,0,0,701,
		695,1,0,0,0,701,700,1,0,0,0,702,99,1,0,0,0,703,704,5,1,0,0,704,709,3,106,
		53,0,705,706,5,6,0,0,706,708,3,106,53,0,707,705,1,0,0,0,708,711,1,0,0,
		0,709,707,1,0,0,0,709,710,1,0,0,0,710,712,1,0,0,0,711,709,1,0,0,0,712,
		713,5,2,0,0,713,101,1,0,0,0,714,717,3,26,13,0,715,717,3,58,29,0,716,714,
		1,0,0,0,716,715,1,0,0,0,717,103,1,0,0,0,718,719,5,90,0,0,719,720,3,126,
		63,0,720,105,1,0,0,0,721,722,5,138,0,0,722,724,5,7,0,0,723,725,5,138,0,
		0,724,723,1,0,0,0,724,725,1,0,0,0,725,728,1,0,0,0,726,728,5,138,0,0,727,
		721,1,0,0,0,727,726,1,0,0,0,728,107,1,0,0,0,729,730,5,1,0,0,730,735,3,
		126,63,0,731,732,5,6,0,0,732,734,3,126,63,0,733,731,1,0,0,0,734,737,1,
		0,0,0,735,733,1,0,0,0,735,736,1,0,0,0,736,738,1,0,0,0,737,735,1,0,0,0,
		738,739,5,2,0,0,739,109,1,0,0,0,740,741,5,70,0,0,741,742,5,142,0,0,742,
		111,1,0,0,0,743,744,5,42,0,0,744,745,5,1,0,0,745,746,3,128,64,0,746,747,
		5,39,0,0,747,748,3,124,62,0,748,749,5,2,0,0,749,113,1,0,0,0,750,755,5,
		40,0,0,751,756,5,82,0,0,752,753,5,83,0,0,753,754,5,84,0,0,754,756,3,128,
		64,0,755,751,1,0,0,0,755,752,1,0,0,0,756,115,1,0,0,0,757,759,5,85,0,0,
		758,760,3,128,64,0,759,758,1,0,0,0,759,760,1,0,0,0,760,764,1,0,0,0,761,
		763,3,118,59,0,762,761,1,0,0,0,763,766,1,0,0,0,764,762,1,0,0,0,764,765,
		1,0,0,0,765,769,1,0,0,0,766,764,1,0,0,0,767,768,5,44,0,0,768,770,3,126,
		63,0,769,767,1,0,0,0,769,770,1,0,0,0,770,771,1,0,0,0,771,772,5,45,0,0,
		772,117,1,0,0,0,773,774,5,89,0,0,774,775,3,126,63,0,775,776,5,59,0,0,776,
		777,3,126,63,0,777,119,1,0,0,0,778,821,5,68,0,0,779,821,5,69,0,0,780,781,
		5,64,0,0,781,783,5,1,0,0,782,784,7,10,0,0,783,782,1,0,0,0,783,784,1,0,
		0,0,784,786,1,0,0,0,785,787,5,142,0,0,786,785,1,0,0,0,786,787,1,0,0,0,
		787,789,1,0,0,0,788,790,5,48,0,0,789,788,1,0,0,0,789,790,1,0,0,0,790,791,
		1,0,0,0,791,792,3,128,64,0,792,793,5,2,0,0,793,821,1,0,0,0,794,795,5,88,
		0,0,795,796,5,1,0,0,796,797,5,142,0,0,797,798,5,50,0,0,798,799,3,128,64,
		0,799,800,5,2,0,0,800,821,1,0,0,0,801,802,5,87,0,0,802,803,5,1,0,0,803,
		804,3,122,61,0,804,805,5,48,0,0,805,806,3,128,64,0,806,807,5,2,0,0,807,
		821,1,0,0,0,808,809,5,86,0,0,809,810,5,1,0,0,810,815,3,126,63,0,811,812,
		5,6,0,0,812,814,3,126,63,0,813,811,1,0,0,0,814,817,1,0,0,0,815,813,1,0,
		0,0,815,816,1,0,0,0,816,818,1,0,0,0,817,815,1,0,0,0,818,819,5,2,0,0,819,
		821,1,0,0,0,820,778,1,0,0,0,820,779,1,0,0,0,820,780,1,0,0,0,820,794,1,
		0,0,0,820,801,1,0,0,0,820,808,1,0,0,0,821,121,1,0,0,0,822,823,7,11,0,0,
		823,123,1,0,0,0,824,825,7,12,0,0,825,125,1,0,0,0,826,827,6,63,-1,0,827,
		858,3,130,65,0,828,858,3,112,56,0,829,858,3,120,60,0,830,858,3,10,5,0,
		831,858,3,116,58,0,832,858,3,106,53,0,833,834,5,1,0,0,834,835,3,126,63,
		0,835,836,5,2,0,0,836,858,1,0,0,0,837,838,5,1,0,0,838,839,3,26,13,0,839,
		840,5,2,0,0,840,858,1,0,0,0,841,842,7,13,0,0,842,858,3,126,63,15,843,844,
		5,46,0,0,844,845,5,1,0,0,845,846,3,26,13,0,846,847,5,2,0,0,847,858,1,0,
		0,0,848,849,3,128,64,0,849,850,7,14,0,0,850,851,7,15,0,0,851,852,5,1,0,
		0,852,853,3,26,13,0,853,854,5,2,0,0,854,858,1,0,0,0,855,856,5,53,0,0,856,
		858,3,126,63,1,857,826,1,0,0,0,857,828,1,0,0,0,857,829,1,0,0,0,857,830,
		1,0,0,0,857,831,1,0,0,0,857,832,1,0,0,0,857,833,1,0,0,0,857,837,1,0,0,
		0,857,841,1,0,0,0,857,843,1,0,0,0,857,848,1,0,0,0,857,855,1,0,0,0,858,
		921,1,0,0,0,859,860,10,17,0,0,860,861,5,26,0,0,861,920,3,126,63,18,862,
		863,10,14,0,0,863,864,7,16,0,0,864,920,3,126,63,15,865,866,10,13,0,0,866,
		867,7,17,0,0,867,920,3,126,63,14,868,869,10,12,0,0,869,870,7,13,0,0,870,
		920,3,126,63,13,871,872,10,11,0,0,872,873,7,14,0,0,873,920,3,126,63,12,
		874,876,10,10,0,0,875,877,5,53,0,0,876,875,1,0,0,0,876,877,1,0,0,0,877,
		878,1,0,0,0,878,879,5,52,0,0,879,920,3,126,63,11,880,882,10,9,0,0,881,
		883,5,53,0,0,882,881,1,0,0,0,882,883,1,0,0,0,883,884,1,0,0,0,884,885,5,
		125,0,0,885,886,5,60,0,0,886,920,3,126,63,10,887,889,10,7,0,0,888,890,
		5,53,0,0,889,888,1,0,0,0,889,890,1,0,0,0,890,891,1,0,0,0,891,892,5,93,
		0,0,892,893,3,128,64,0,893,894,5,38,0,0,894,895,3,126,63,8,895,920,1,0,
		0,0,896,897,10,4,0,0,897,898,5,38,0,0,898,920,3,126,63,5,899,900,10,3,
		0,0,900,901,5,57,0,0,901,920,3,126,63,4,902,903,10,24,0,0,903,920,3,114,
		57,0,904,905,10,16,0,0,905,906,5,29,0,0,906,920,3,124,62,0,907,909,10,
		8,0,0,908,910,5,53,0,0,909,908,1,0,0,0,909,910,1,0,0,0,910,911,1,0,0,0,
		911,912,5,50,0,0,912,920,3,108,54,0,913,914,10,2,0,0,914,916,5,51,0,0,
		915,917,5,53,0,0,916,915,1,0,0,0,916,917,1,0,0,0,917,918,1,0,0,0,918,920,
		5,54,0,0,919,859,1,0,0,0,919,862,1,0,0,0,919,865,1,0,0,0,919,868,1,0,0,
		0,919,871,1,0,0,0,919,874,1,0,0,0,919,880,1,0,0,0,919,887,1,0,0,0,919,
		896,1,0,0,0,919,899,1,0,0,0,919,902,1,0,0,0,919,904,1,0,0,0,919,907,1,
		0,0,0,919,913,1,0,0,0,920,923,1,0,0,0,921,919,1,0,0,0,921,922,1,0,0,0,
		922,127,1,0,0,0,923,921,1,0,0,0,924,925,6,64,-1,0,925,939,3,130,65,0,926,
		939,3,112,56,0,927,939,3,114,57,0,928,939,3,120,60,0,929,939,3,10,5,0,
		930,939,3,116,58,0,931,939,3,106,53,0,932,933,5,1,0,0,933,934,3,128,64,
		0,934,935,5,2,0,0,935,939,1,0,0,0,936,937,7,13,0,0,937,939,3,126,63,0,
		938,924,1,0,0,0,938,926,1,0,0,0,938,927,1,0,0,0,938,928,1,0,0,0,938,929,
		1,0,0,0,938,930,1,0,0,0,938,931,1,0,0,0,938,932,1,0,0,0,938,936,1,0,0,
		0,939,957,1,0,0,0,940,941,10,5,0,0,941,942,5,26,0,0,942,956,3,128,64,6,
		943,944,10,3,0,0,944,945,7,17,0,0,945,956,3,128,64,4,946,947,10,2,0,0,
		947,948,7,13,0,0,948,956,3,128,64,3,949,950,10,1,0,0,950,951,7,14,0,0,
		951,956,3,128,64,2,952,953,10,4,0,0,953,954,5,29,0,0,954,956,3,124,62,
		0,955,940,1,0,0,0,955,943,1,0,0,0,955,946,1,0,0,0,955,949,1,0,0,0,955,
		952,1,0,0,0,956,959,1,0,0,0,957,955,1,0,0,0,957,958,1,0,0,0,958,129,1,
		0,0,0,959,957,1,0,0,0,960,970,5,139,0,0,961,970,5,140,0,0,962,970,5,141,
		0,0,963,970,5,143,0,0,964,970,5,142,0,0,965,970,5,61,0,0,966,970,5,47,
		0,0,967,970,5,54,0,0,968,970,3,110,55,0,969,960,1,0,0,0,969,961,1,0,0,
		0,969,962,1,0,0,0,969,963,1,0,0,0,969,964,1,0,0,0,969,965,1,0,0,0,969,
		966,1,0,0,0,969,967,1,0,0,0,969,968,1,0,0,0,970,131,1,0,0,0,128,135,143,
		149,162,171,174,179,187,190,194,199,203,212,215,222,226,235,251,256,262,
		265,270,274,277,281,285,288,291,294,297,300,304,307,310,313,315,323,329,
		332,334,342,345,349,352,356,360,368,372,374,381,387,397,404,411,419,431,
		439,442,446,448,453,457,460,463,471,478,487,498,503,507,512,515,521,526,
		529,535,537,540,548,559,564,569,571,580,591,594,597,608,618,627,637,641,
		645,648,664,668,672,677,680,690,698,701,709,716,724,727,735,755,759,764,
		769,783,786,789,815,820,857,876,882,889,909,916,919,921,938,955,957,969
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace QueryCat.Backend.Parser
