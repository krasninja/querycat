//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ../QueryCat.Backend/Parser/QueryCatParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace QueryCat.Backend.Parser {
 #pragma warning disable 3021 
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class QueryCatParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LEFT_PAREN=1, RIGHT_PAREN=2, ASSIGN=3, ASSOCIATION=4, COLON=5, COMMA=6, 
		PERIOD=7, ELLIPSIS=8, SEMICOLON=9, QUESTION=10, LEFT_BRACKET=11, RIGHT_BRACKET=12, 
		LEFT_RIGHT_BRACKET=13, PLUS=14, MINUS=15, STAR=16, DIV=17, MOD=18, EQUALS=19, 
		NOT_EQUALS=20, GREATER=21, GREATER_OR_EQUALS=22, LESS=23, LESS_OR_EQUALS=24, 
		CONCAT=25, INTEGER=26, STRING=27, FLOAT=28, TIMESTAMP=29, BOOLEAN=30, 
		NUMERIC=31, OBJECT=32, ANY=33, AND=34, AS=35, BY=36, CAST=37, DEFAULT=38, 
		EXISTS=39, FALSE=40, FROM=41, IN=42, IS=43, LIKE=44, NOT=45, NULL=46, 
		ONLY=47, OR=48, TO=49, TRUE=50, VOID=51, TRIM=52, LEADING=53, TRAILING=54, 
		BOTH=55, CURRENT_DATE=56, CURRENT_TIMESTAMP=57, INTERVAL=58, YEAR=59, 
		MONTH=60, DAY=61, HOUR=62, MINUTE=63, SECOND=64, MILLISECOND=65, POSITION=66, 
		EXTRACT=67, ECHO=68, ALL=69, ASC=70, BETWEEN=71, DESC=72, DISTINCT=73, 
		FETCH=74, FIRST=75, FORMAT=76, GROUP=77, HAVING=78, INTO=79, NEXT=80, 
		OFFSET=81, ORDER=82, ROW=83, ROWS=84, SELECT=85, UNION=86, WHERE=87, TYPE=88, 
		IDENTIFIER=89, INTEGER_LITERAL=90, FLOAT_LITERAL=91, NUMERIC_LITERAL=92, 
		STRING_LITERAL=93, BOOLEAN_LITERAL=94, SINGLE_LINE_COMMENT=95, MULTILINE_COMMENT=96, 
		SPACES=97;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_functionSignature = 2, RULE_functionType = 3, 
		RULE_functionArg = 4, RULE_selectStatement = 5, RULE_selectQueryExpression = 6, 
		RULE_selectOrderByClause = 7, RULE_selectSortSpecification = 8, RULE_selectAlias = 9, 
		RULE_selectQuery = 10, RULE_selectList = 11, RULE_selectSetQuantifier = 12, 
		RULE_selectSublist = 13, RULE_selectTarget = 14, RULE_selectFromClause = 15, 
		RULE_selectTableReferenceList = 16, RULE_selectTableReference = 17, RULE_selectGroupBy = 18, 
		RULE_selectHaving = 19, RULE_selectSearchCondition = 20, RULE_selectOffsetClause = 21, 
		RULE_selectFetchFirstClause = 22, RULE_echoStatement = 23, RULE_identifierChain = 24, 
		RULE_array = 25, RULE_intervalLiteral = 26, RULE_functionCall = 27, RULE_functionCallArg = 28, 
		RULE_castOperand = 29, RULE_standardFunction = 30, RULE_dateTimeField = 31, 
		RULE_type = 32, RULE_expression = 33, RULE_simpleExpression = 34, RULE_literal = 35;
	public static readonly string[] ruleNames = {
		"program", "statement", "functionSignature", "functionType", "functionArg", 
		"selectStatement", "selectQueryExpression", "selectOrderByClause", "selectSortSpecification", 
		"selectAlias", "selectQuery", "selectList", "selectSetQuantifier", "selectSublist", 
		"selectTarget", "selectFromClause", "selectTableReferenceList", "selectTableReference", 
		"selectGroupBy", "selectHaving", "selectSearchCondition", "selectOffsetClause", 
		"selectFetchFirstClause", "echoStatement", "identifierChain", "array", 
		"intervalLiteral", "functionCall", "functionCallArg", "castOperand", "standardFunction", 
		"dateTimeField", "type", "expression", "simpleExpression", "literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "':='", "'=>'", "':'", "','", "'.'", "'...'", "';'", 
		"'?'", "'['", "']'", "'[]'", "'+'", "'-'", "'*'", "'/'", "'%'", "'='", 
		"'<>'", "'>'", "'>='", "'<'", "'<='", "'||'", "'INTEGER'", "'STRING'", 
		"'FLOAT'", "'TIMESTAMP'", "'BOOLEAN'", "'NUMERIC'", "'OBJECT'", "'ANY'", 
		"'AND'", "'AS'", "'BY'", "'CAST'", "'DEFAULT'", "'EXISTS'", "'FALSE'", 
		"'FROM'", "'IN'", "'IS'", "'LIKE'", "'NOT'", "'NULL'", "'ONLY'", "'OR'", 
		"'TO'", "'TRUE'", "'VOID'", "'TRIM'", "'LEADING'", "'TRAILING'", "'BOTH'", 
		"'CURRENT_DATE'", "'CURRENT_TIMESTAMP'", "'INTERVAL'", "'YEAR'", "'MONTH'", 
		"'DAY'", "'HOUR'", "'MINUTE'", "'SECOND'", "'MILLISECOND'", "'POSITION'", 
		"'EXTRACT'", "'ECHO'", "'ALL'", "'ASC'", "'BETWEEN'", "'DESC'", "'DISTINCT'", 
		"'FETCH'", "'FIRST'", "'FORMAT'", "'GROUP'", "'HAVING'", "'INTO'", "'NEXT'", 
		"'OFFSET'", "'ORDER'", "'ROW'", "'ROWS'", "'SELECT'", "'UNION'", "'WHERE'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LEFT_PAREN", "RIGHT_PAREN", "ASSIGN", "ASSOCIATION", "COLON", "COMMA", 
		"PERIOD", "ELLIPSIS", "SEMICOLON", "QUESTION", "LEFT_BRACKET", "RIGHT_BRACKET", 
		"LEFT_RIGHT_BRACKET", "PLUS", "MINUS", "STAR", "DIV", "MOD", "EQUALS", 
		"NOT_EQUALS", "GREATER", "GREATER_OR_EQUALS", "LESS", "LESS_OR_EQUALS", 
		"CONCAT", "INTEGER", "STRING", "FLOAT", "TIMESTAMP", "BOOLEAN", "NUMERIC", 
		"OBJECT", "ANY", "AND", "AS", "BY", "CAST", "DEFAULT", "EXISTS", "FALSE", 
		"FROM", "IN", "IS", "LIKE", "NOT", "NULL", "ONLY", "OR", "TO", "TRUE", 
		"VOID", "TRIM", "LEADING", "TRAILING", "BOTH", "CURRENT_DATE", "CURRENT_TIMESTAMP", 
		"INTERVAL", "YEAR", "MONTH", "DAY", "HOUR", "MINUTE", "SECOND", "MILLISECOND", 
		"POSITION", "EXTRACT", "ECHO", "ALL", "ASC", "BETWEEN", "DESC", "DISTINCT", 
		"FETCH", "FIRST", "FORMAT", "GROUP", "HAVING", "INTO", "NEXT", "OFFSET", 
		"ORDER", "ROW", "ROWS", "SELECT", "UNION", "WHERE", "TYPE", "IDENTIFIER", 
		"INTEGER_LITERAL", "FLOAT_LITERAL", "NUMERIC_LITERAL", "STRING_LITERAL", 
		"BOOLEAN_LITERAL", "SINGLE_LINE_COMMENT", "MULTILINE_COMMENT", "SPACES"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "QueryCatParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static QueryCatParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public QueryCatParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public QueryCatParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(QueryCatParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(QueryCatParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(QueryCatParser.SEMICOLON, i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			statement();
			State = 77;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 73;
					Match(SEMICOLON);
					State = 74;
					statement();
					}
					} 
				}
				State = 79;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 80;
				Match(SEMICOLON);
				}
			}

			State = 83;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StatementSelectExpressionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public StatementSelectExpressionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementSelectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementEchoContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public EchoStatementContext echoStatement() {
			return GetRuleContext<EchoStatementContext>(0);
		}
		public StatementEchoContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementEcho(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementExpressionContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementExpressionContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementFunctionCallContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public StatementFunctionCallContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 89;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new StatementSelectExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 85;
				selectStatement();
				}
				break;
			case 2:
				_localctx = new StatementFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 86;
				functionCall();
				}
				break;
			case 3:
				_localctx = new StatementEchoContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 87;
				echoStatement();
				}
				break;
			case 4:
				_localctx = new StatementExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 88;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSignatureContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(QueryCatParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext[] functionArg() {
			return GetRuleContexts<FunctionArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext functionArg(int i) {
			return GetRuleContext<FunctionArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(QueryCatParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public FunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSignature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSignature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSignatureContext functionSignature() {
		FunctionSignatureContext _localctx = new FunctionSignatureContext(Context, State);
		EnterRule(_localctx, 4, RULE_functionSignature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			_localctx.name = Match(IDENTIFIER);
			State = 92;
			Match(LEFT_PAREN);
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELLIPSIS || _la==IDENTIFIER) {
				{
				State = 93;
				functionArg();
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 94;
					Match(COMMA);
					State = 95;
					functionArg();
					}
					}
					State = 100;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 103;
			Match(RIGHT_PAREN);
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 104;
				Match(COLON);
				State = 105;
				functionType();
				}
			}

			State = 108;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(QueryCatParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(QueryCatParser.GREATER, 0); }
		public FunctionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeContext functionType() {
		FunctionTypeContext _localctx = new FunctionTypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_functionType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			type();
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LESS) {
				{
				State = 111;
				Match(LESS);
				State = 112;
				Match(IDENTIFIER);
				State = 113;
				Match(GREATER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgContext : ParserRuleContext {
		public IToken variadic;
		public IToken optional;
		public IToken isArray;
		public LiteralContext @default;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(QueryCatParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(QueryCatParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELLIPSIS() { return GetToken(QueryCatParser.ELLIPSIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUESTION() { return GetToken(QueryCatParser.QUESTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_RIGHT_BRACKET() { return GetToken(QueryCatParser.LEFT_RIGHT_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgContext functionArg() {
		FunctionArgContext _localctx = new FunctionArgContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELLIPSIS) {
				{
				State = 116;
				_localctx.variadic = Match(ELLIPSIS);
				}
			}

			State = 119;
			Match(IDENTIFIER);
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUESTION) {
				{
				State = 120;
				_localctx.optional = Match(QUESTION);
				}
			}

			State = 123;
			Match(COLON);
			State = 124;
			functionType();
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_RIGHT_BRACKET) {
				{
				State = 125;
				_localctx.isArray = Match(LEFT_RIGHT_BRACKET);
				}
			}

			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 128;
				Match(EQUALS);
				State = 129;
				_localctx.@default = literal();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementContext selectStatement() {
		SelectStatementContext _localctx = new SelectStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_selectStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			selectQueryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectQueryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryContext[] selectQuery() {
			return GetRuleContexts<SelectQueryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryContext selectQuery(int i) {
			return GetRuleContext<SelectQueryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UNION() { return GetTokens(QueryCatParser.UNION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION(int i) {
			return GetToken(QueryCatParser.UNION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectOrderByClauseContext selectOrderByClause() {
			return GetRuleContext<SelectOrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectOffsetClauseContext selectOffsetClause() {
			return GetRuleContext<SelectOffsetClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectFetchFirstClauseContext selectFetchFirstClause() {
			return GetRuleContext<SelectFetchFirstClauseContext>(0);
		}
		public SelectQueryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectQueryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQueryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectQueryExpressionContext selectQueryExpression() {
		SelectQueryExpressionContext _localctx = new SelectQueryExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_selectQueryExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			selectQuery();
			State = 139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==UNION) {
				{
				{
				State = 135;
				Match(UNION);
				State = 136;
				selectQuery();
				}
				}
				State = 141;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 142;
				selectOrderByClause();
				}
			}

			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OFFSET) {
				{
				State = 145;
				selectOffsetClause();
				}
			}

			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FETCH) {
				{
				State = 148;
				selectFetchFirstClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectOrderByClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(QueryCatParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(QueryCatParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectSortSpecificationContext[] selectSortSpecification() {
			return GetRuleContexts<SelectSortSpecificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSortSpecificationContext selectSortSpecification(int i) {
			return GetRuleContext<SelectSortSpecificationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectOrderByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectOrderByClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectOrderByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectOrderByClauseContext selectOrderByClause() {
		SelectOrderByClauseContext _localctx = new SelectOrderByClauseContext(Context, State);
		EnterRule(_localctx, 14, RULE_selectOrderByClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			Match(ORDER);
			State = 152;
			Match(BY);
			State = 153;
			selectSortSpecification();
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 154;
				Match(COMMA);
				State = 155;
				selectSortSpecification();
				}
				}
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectSortSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(QueryCatParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(QueryCatParser.DESC, 0); }
		public SelectSortSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectSortSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSortSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectSortSpecificationContext selectSortSpecification() {
		SelectSortSpecificationContext _localctx = new SelectSortSpecificationContext(Context, State);
		EnterRule(_localctx, 16, RULE_selectSortSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			expression(0);
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 162;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectAliasContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(QueryCatParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		public SelectAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectAliasContext selectAlias() {
		SelectAliasContext _localctx = new SelectAliasContext(Context, State);
		EnterRule(_localctx, 18, RULE_selectAlias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			Match(AS);
			{
			State = 166;
			_localctx.name = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIER || _la==STRING_LITERAL) ) {
				_localctx.name = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectQueryContext : ParserRuleContext {
		public SelectQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectQuery; } }
	 
		public SelectQueryContext() { }
		public virtual void CopyFrom(SelectQueryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectQueryFullContext : SelectQueryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(QueryCatParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectListContext selectList() {
			return GetRuleContext<SelectListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectFromClauseContext selectFromClause() {
			return GetRuleContext<SelectFromClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSetQuantifierContext selectSetQuantifier() {
			return GetRuleContext<SelectSetQuantifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTargetContext selectTarget() {
			return GetRuleContext<SelectTargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectOrderByClauseContext selectOrderByClause() {
			return GetRuleContext<SelectOrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectOffsetClauseContext selectOffsetClause() {
			return GetRuleContext<SelectOffsetClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectFetchFirstClauseContext selectFetchFirstClause() {
			return GetRuleContext<SelectFetchFirstClauseContext>(0);
		}
		public SelectQueryFullContext(SelectQueryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQueryFull(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectQuerySingleContext : SelectQueryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(QueryCatParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectSublistContext[] selectSublist() {
			return GetRuleContexts<SelectSublistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSublistContext selectSublist(int i) {
			return GetRuleContext<SelectSublistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTargetContext selectTarget() {
			return GetRuleContext<SelectTargetContext>(0);
		}
		public SelectQuerySingleContext(SelectQueryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectQuerySingle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectQueryContext selectQuery() {
		SelectQueryContext _localctx = new SelectQueryContext(Context, State);
		EnterRule(_localctx, 20, RULE_selectQuery);
		int _la;
		try {
			State = 198;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				_localctx = new SelectQueryFullContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 168;
				Match(SELECT);
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					State = 169;
					selectSetQuantifier();
					}
				}

				State = 172;
				selectList();
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTO) {
					{
					State = 173;
					selectTarget();
					}
				}

				State = 176;
				selectFromClause();
				State = 178;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 177;
					selectOrderByClause();
					}
					break;
				}
				State = 181;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 180;
					selectOffsetClause();
					}
					break;
				}
				State = 184;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
				case 1:
					{
					State = 183;
					selectFetchFirstClause();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new SelectQuerySingleContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 186;
				Match(SELECT);
				State = 187;
				selectSublist();
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 188;
					Match(COMMA);
					State = 189;
					selectSublist();
					}
					}
					State = 194;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTO) {
					{
					State = 195;
					selectTarget();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectSublistContext[] selectSublist() {
			return GetRuleContexts<SelectSublistContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSublistContext selectSublist(int i) {
			return GetRuleContext<SelectSublistContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectListContext selectList() {
		SelectListContext _localctx = new SelectListContext(Context, State);
		EnterRule(_localctx, 22, RULE_selectList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			selectSublist();
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 201;
				Match(COMMA);
				State = 202;
				selectSublist();
				}
				}
				State = 207;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectSetQuantifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(QueryCatParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(QueryCatParser.DISTINCT, 0); }
		public SelectSetQuantifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectSetQuantifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSetQuantifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectSetQuantifierContext selectSetQuantifier() {
		SelectSetQuantifierContext _localctx = new SelectSetQuantifierContext(Context, State);
		EnterRule(_localctx, 24, RULE_selectSetQuantifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || _la==DISTINCT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectSublistContext : ParserRuleContext {
		public SelectSublistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectSublist; } }
	 
		public SelectSublistContext() { }
		public virtual void CopyFrom(SelectSublistContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectSublistIdentifierContext : SelectSublistContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierChainContext identifierChain() {
			return GetRuleContext<IdentifierChainContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public SelectSublistIdentifierContext(SelectSublistContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSublistIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectSublistExpressionContext : SelectSublistContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public SelectSublistExpressionContext(SelectSublistContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSublistExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectSublistAllContext : SelectSublistContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(QueryCatParser.STAR, 0); }
		public SelectSublistAllContext(SelectSublistContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSublistAll(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectSublistContext selectSublist() {
		SelectSublistContext _localctx = new SelectSublistContext(Context, State);
		EnterRule(_localctx, 26, RULE_selectSublist);
		int _la;
		try {
			State = 219;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				_localctx = new SelectSublistAllContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 210;
				Match(STAR);
				}
				break;
			case 2:
				_localctx = new SelectSublistExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 211;
				expression(0);
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 212;
					selectAlias();
					}
				}

				}
				break;
			case 3:
				_localctx = new SelectSublistIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 215;
				identifierChain();
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 216;
					selectAlias();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTargetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(QueryCatParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public SelectTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTarget; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTarget(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTargetContext selectTarget() {
		SelectTargetContext _localctx = new SelectTargetContext(Context, State);
		EnterRule(_localctx, 28, RULE_selectTarget);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			Match(INTO);
			State = 222;
			functionCall();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectFromClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableReferenceListContext selectTableReferenceList() {
			return GetRuleContext<SelectTableReferenceListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSearchConditionContext selectSearchCondition() {
			return GetRuleContext<SelectSearchConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectGroupByContext selectGroupBy() {
			return GetRuleContext<SelectGroupByContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectHavingContext selectHaving() {
			return GetRuleContext<SelectHavingContext>(0);
		}
		public SelectFromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectFromClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectFromClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectFromClauseContext selectFromClause() {
		SelectFromClauseContext _localctx = new SelectFromClauseContext(Context, State);
		EnterRule(_localctx, 30, RULE_selectFromClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			selectTableReferenceList();
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 225;
				selectSearchCondition();
				}
			}

			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GROUP) {
				{
				State = 228;
				selectGroupBy();
				}
			}

			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HAVING) {
				{
				State = 231;
				selectHaving();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTableReferenceListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(QueryCatParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableReferenceContext[] selectTableReference() {
			return GetRuleContexts<SelectTableReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectTableReferenceContext selectTableReference(int i) {
			return GetRuleContext<SelectTableReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectTableReferenceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTableReferenceList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTableReferenceList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTableReferenceListContext selectTableReferenceList() {
		SelectTableReferenceListContext _localctx = new SelectTableReferenceListContext(Context, State);
		EnterRule(_localctx, 32, RULE_selectTableReferenceList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			Match(FROM);
			State = 235;
			selectTableReference();
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 236;
				Match(COMMA);
				State = 237;
				selectTableReference();
				}
				}
				State = 242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTableReferenceContext : ParserRuleContext {
		public SelectTableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTableReference; } }
	 
		public SelectTableReferenceContext() { }
		public virtual void CopyFrom(SelectTableReferenceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectTableReferenceWithFormatContext : SelectTableReferenceContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(QueryCatParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public SelectTableReferenceWithFormatContext(SelectTableReferenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTableReferenceWithFormat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectTableReferenceNoFormatContext : SelectTableReferenceContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public SelectTableReferenceNoFormatContext(SelectTableReferenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTableReferenceNoFormat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectTableReferenceSubqueryContext : SelectTableReferenceContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public SelectTableReferenceSubqueryContext(SelectTableReferenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTableReferenceSubquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTableReferenceContext selectTableReference() {
		SelectTableReferenceContext _localctx = new SelectTableReferenceContext(Context, State);
		EnterRule(_localctx, 34, RULE_selectTableReference);
		int _la;
		try {
			State = 261;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				_localctx = new SelectTableReferenceNoFormatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 243;
				functionCall();
				State = 245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 244;
					selectAlias();
					}
				}

				}
				break;
			case STRING_LITERAL:
				_localctx = new SelectTableReferenceWithFormatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 247;
				Match(STRING_LITERAL);
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FORMAT) {
					{
					State = 248;
					Match(FORMAT);
					State = 249;
					functionCall();
					}
				}

				State = 253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 252;
					selectAlias();
					}
				}

				}
				break;
			case LEFT_PAREN:
				_localctx = new SelectTableReferenceSubqueryContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 255;
				Match(LEFT_PAREN);
				State = 256;
				selectQueryExpression();
				State = 257;
				Match(RIGHT_PAREN);
				State = 259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 258;
					selectAlias();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectGroupByContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(QueryCatParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(QueryCatParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public SelectGroupByContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectGroupBy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectGroupBy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectGroupByContext selectGroupBy() {
		SelectGroupByContext _localctx = new SelectGroupByContext(Context, State);
		EnterRule(_localctx, 36, RULE_selectGroupBy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			Match(GROUP);
			State = 264;
			Match(BY);
			State = 265;
			expression(0);
			State = 270;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 266;
				Match(COMMA);
				State = 267;
				expression(0);
				}
				}
				State = 272;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectHavingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(QueryCatParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectHavingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectHaving; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectHaving(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectHavingContext selectHaving() {
		SelectHavingContext _localctx = new SelectHavingContext(Context, State);
		EnterRule(_localctx, 38, RULE_selectHaving);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			Match(HAVING);
			State = 274;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectSearchConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(QueryCatParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectSearchConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectSearchCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSearchCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectSearchConditionContext selectSearchCondition() {
		SelectSearchConditionContext _localctx = new SelectSearchConditionContext(Context, State);
		EnterRule(_localctx, 40, RULE_selectSearchCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			Match(WHERE);
			State = 277;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectOffsetClauseContext : ParserRuleContext {
		public ExpressionContext offset;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(QueryCatParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(QueryCatParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(QueryCatParser.ROWS, 0); }
		public SelectOffsetClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectOffsetClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectOffsetClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectOffsetClauseContext selectOffsetClause() {
		SelectOffsetClauseContext _localctx = new SelectOffsetClauseContext(Context, State);
		EnterRule(_localctx, 42, RULE_selectOffsetClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			Match(OFFSET);
			{
			State = 280;
			_localctx.offset = expression(0);
			}
			State = 282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ROW || _la==ROWS) {
				{
				State = 281;
				_la = TokenStream.LA(1);
				if ( !(_la==ROW || _la==ROWS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectFetchFirstClauseContext : ParserRuleContext {
		public ExpressionContext limit;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(QueryCatParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(QueryCatParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(QueryCatParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(QueryCatParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(QueryCatParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(QueryCatParser.ONLY, 0); }
		public SelectFetchFirstClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectFetchFirstClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectFetchFirstClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectFetchFirstClauseContext selectFetchFirstClause() {
		SelectFetchFirstClauseContext _localctx = new SelectFetchFirstClauseContext(Context, State);
		EnterRule(_localctx, 44, RULE_selectFetchFirstClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			Match(FETCH);
			State = 286;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FIRST || _la==NEXT) {
				{
				State = 285;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST || _la==NEXT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			{
			State = 288;
			_localctx.limit = expression(0);
			}
			State = 290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ROW || _la==ROWS) {
				{
				State = 289;
				_la = TokenStream.LA(1);
				if ( !(_la==ROW || _la==ROWS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ONLY) {
				{
				State = 292;
				_la = TokenStream.LA(1);
				if ( !(_la==ONLY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EchoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ECHO() { return GetToken(QueryCatParser.ECHO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EchoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_echoStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEchoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EchoStatementContext echoStatement() {
		EchoStatementContext _localctx = new EchoStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_echoStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			Match(ECHO);
			State = 296;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierChainContext : ParserRuleContext {
		public IdentifierChainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierChain; } }
	 
		public IdentifierChainContext() { }
		public virtual void CopyFrom(IdentifierChainContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierChainSimpleContext : IdentifierChainContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		public IdentifierChainSimpleContext(IdentifierChainContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierChainSimple(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierChainFullContext : IdentifierChainContext {
		public IToken source;
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD() { return GetToken(QueryCatParser.PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(QueryCatParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(QueryCatParser.IDENTIFIER, i);
		}
		public IdentifierChainFullContext(IdentifierChainContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierChainFull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierChainContext identifierChain() {
		IdentifierChainContext _localctx = new IdentifierChainContext(Context, State);
		EnterRule(_localctx, 48, RULE_identifierChain);
		try {
			State = 304;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				_localctx = new IdentifierChainFullContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 298;
				((IdentifierChainFullContext)_localctx).source = Match(IDENTIFIER);
				State = 299;
				Match(PERIOD);
				State = 301;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
				case 1:
					{
					State = 300;
					((IdentifierChainFullContext)_localctx).name = Match(IDENTIFIER);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new IdentifierChainSimpleContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 303;
				((IdentifierChainSimpleContext)_localctx).name = Match(IDENTIFIER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 50, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			Match(LEFT_PAREN);
			State = 307;
			expression(0);
			State = 312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 308;
				Match(COMMA);
				State = 309;
				expression(0);
				}
				}
				State = 314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 315;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalLiteralContext : ParserRuleContext {
		public IToken interval;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(QueryCatParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		public IntervalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalLiteralContext intervalLiteral() {
		IntervalLiteralContext _localctx = new IntervalLiteralContext(Context, State);
		EnterRule(_localctx, 52, RULE_intervalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			Match(INTERVAL);
			State = 318;
			_localctx.interval = Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallArgContext[] functionCallArg() {
			return GetRuleContexts<FunctionCallArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallArgContext functionCallArg(int i) {
			return GetRuleContext<FunctionCallArgContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(QueryCatParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(QueryCatParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(QueryCatParser.STAR, 0); }
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 54, RULE_functionCall);
		int _la;
		try {
			State = 337;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 320;
				Match(IDENTIFIER);
				State = 321;
				Match(LEFT_PAREN);
				State = 330;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 510139997622419458L) != 0 || (((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 528482307L) != 0) {
					{
					State = 322;
					functionCallArg();
					State = 327;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 323;
						Match(COMMA);
						State = 324;
						functionCallArg();
						}
						}
						State = 329;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 332;
				Match(RIGHT_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 333;
				Match(IDENTIFIER);
				State = 334;
				Match(LEFT_PAREN);
				State = 335;
				Match(STAR);
				State = 336;
				Match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(QueryCatParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSOCIATION() { return GetToken(QueryCatParser.ASSOCIATION, 0); }
		public FunctionCallArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallArgContext functionCallArg() {
		FunctionCallArgContext _localctx = new FunctionCallArgContext(Context, State);
		EnterRule(_localctx, 56, RULE_functionCallArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				State = 339;
				Match(IDENTIFIER);
				State = 340;
				Match(ASSOCIATION);
				}
				break;
			}
			State = 343;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastOperandContext : ParserRuleContext {
		public SimpleExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(QueryCatParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(QueryCatParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public CastOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castOperand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastOperandContext castOperand() {
		CastOperandContext _localctx = new CastOperandContext(Context, State);
		EnterRule(_localctx, 58, RULE_castOperand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			Match(CAST);
			State = 346;
			Match(LEFT_PAREN);
			State = 347;
			_localctx.value = simpleExpression(0);
			State = 348;
			Match(AS);
			State = 349;
			type();
			State = 350;
			Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandardFunctionContext : ParserRuleContext {
		public StandardFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standardFunction; } }
	 
		public StandardFunctionContext() { }
		public virtual void CopyFrom(StandardFunctionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StandardFunctionCurrentDateContext : StandardFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE() { return GetToken(QueryCatParser.CURRENT_DATE, 0); }
		public StandardFunctionCurrentDateContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardFunctionCurrentDate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StandardFunctionExtractContext : StandardFunctionContext {
		public DateTimeFieldContext extractField;
		public SimpleExpressionContext source;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACT() { return GetToken(QueryCatParser.EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(QueryCatParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DateTimeFieldContext dateTimeField() {
			return GetRuleContext<DateTimeFieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public StandardFunctionExtractContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardFunctionExtract(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StandardFunctionCurrentTimestampContext : StandardFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(QueryCatParser.CURRENT_TIMESTAMP, 0); }
		public StandardFunctionCurrentTimestampContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardFunctionCurrentTimestamp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StandardFunctionTrimContext : StandardFunctionContext {
		public IToken spec;
		public IToken characters;
		public SimpleExpressionContext target;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIM() { return GetToken(QueryCatParser.TRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(QueryCatParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEADING() { return GetToken(QueryCatParser.LEADING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAILING() { return GetToken(QueryCatParser.TRAILING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOTH() { return GetToken(QueryCatParser.BOTH, 0); }
		public StandardFunctionTrimContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardFunctionTrim(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StandardFunctionPositionContext : StandardFunctionContext {
		public IToken substring;
		public SimpleExpressionContext @string;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(QueryCatParser.POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(QueryCatParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public StandardFunctionPositionContext(StandardFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandardFunctionPosition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StandardFunctionContext standardFunction() {
		StandardFunctionContext _localctx = new StandardFunctionContext(Context, State);
		EnterRule(_localctx, 60, RULE_standardFunction);
		int _la;
		try {
			State = 382;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT_DATE:
				_localctx = new StandardFunctionCurrentDateContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 352;
				Match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIMESTAMP:
				_localctx = new StandardFunctionCurrentTimestampContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 353;
				Match(CURRENT_TIMESTAMP);
				}
				break;
			case TRIM:
				_localctx = new StandardFunctionTrimContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 354;
				Match(TRIM);
				State = 355;
				Match(LEFT_PAREN);
				State = 357;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 63050394783186944L) != 0) {
					{
					State = 356;
					((StandardFunctionTrimContext)_localctx).spec = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 63050394783186944L) != 0) ) {
						((StandardFunctionTrimContext)_localctx).spec = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 360;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
				case 1:
					{
					State = 359;
					((StandardFunctionTrimContext)_localctx).characters = Match(STRING_LITERAL);
					}
					break;
				}
				State = 363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM) {
					{
					State = 362;
					Match(FROM);
					}
				}

				State = 365;
				((StandardFunctionTrimContext)_localctx).target = simpleExpression(0);
				State = 366;
				Match(RIGHT_PAREN);
				}
				break;
			case POSITION:
				_localctx = new StandardFunctionPositionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 368;
				Match(POSITION);
				State = 369;
				Match(LEFT_PAREN);
				State = 370;
				((StandardFunctionPositionContext)_localctx).substring = Match(STRING_LITERAL);
				State = 371;
				Match(IN);
				State = 372;
				((StandardFunctionPositionContext)_localctx).@string = simpleExpression(0);
				State = 373;
				Match(RIGHT_PAREN);
				}
				break;
			case EXTRACT:
				_localctx = new StandardFunctionExtractContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 375;
				Match(EXTRACT);
				State = 376;
				Match(LEFT_PAREN);
				State = 377;
				((StandardFunctionExtractContext)_localctx).extractField = dateTimeField();
				State = 378;
				Match(FROM);
				State = 379;
				((StandardFunctionExtractContext)_localctx).source = simpleExpression(0);
				State = 380;
				Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTimeFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(QueryCatParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(QueryCatParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(QueryCatParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(QueryCatParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(QueryCatParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(QueryCatParser.SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MILLISECOND() { return GetToken(QueryCatParser.MILLISECOND, 0); }
		public DateTimeFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTimeField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateTimeField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateTimeFieldContext dateTimeField() {
		DateTimeFieldContext _localctx = new DateTimeFieldContext(Context, State);
		EnterRule(_localctx, 62, RULE_dateTimeField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384;
			_la = TokenStream.LA(1);
			if ( !((((_la - 59)) & ~0x3f) == 0 && ((1L << (_la - 59)) & 127L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(QueryCatParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(QueryCatParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(QueryCatParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(QueryCatParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(QueryCatParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(QueryCatParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC() { return GetToken(QueryCatParser.NUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT() { return GetToken(QueryCatParser.OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(QueryCatParser.ANY, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 64, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 288230393264472064L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionCastContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CastOperandContext castOperand() {
			return GetRuleContext<CastOperandContext>(0);
		}
		public ExpressionCastContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionCast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionBinaryContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(QueryCatParser.CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(QueryCatParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(QueryCatParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(QueryCatParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(QueryCatParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(QueryCatParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(QueryCatParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(QueryCatParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(QueryCatParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUALS() { return GetToken(QueryCatParser.GREATER_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(QueryCatParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUALS() { return GetToken(QueryCatParser.LESS_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(QueryCatParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(QueryCatParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(QueryCatParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(QueryCatParser.OR, 0); }
		public ExpressionBinaryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStandardFunctionCallContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public StandardFunctionContext standardFunction() {
			return GetRuleContext<StandardFunctionContext>(0);
		}
		public ExpressionStandardFunctionCallContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStandardFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionBetweenContext : ExpressionContext {
		public ExpressionContext expr;
		public IToken op;
		public SimpleExpressionContext left;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(QueryCatParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(QueryCatParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(QueryCatParser.NOT, 0); }
		public ExpressionBetweenContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionBetween(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionBinaryInContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ArrayContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(QueryCatParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(QueryCatParser.NOT, 0); }
		public ExpressionBinaryInContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionBinaryIn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionUnaryContext : ExpressionContext {
		public ExpressionContext right;
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(QueryCatParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(QueryCatParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(QueryCatParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(QueryCatParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(QueryCatParser.IS, 0); }
		public ExpressionUnaryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionUnary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionInParensContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		public ExpressionInParensContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionInParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionSelectContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		public ExpressionSelectContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionSelect(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionIdentifierContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierChainContext identifierChain() {
			return GetRuleContext<IdentifierChainContext>(0);
		}
		public ExpressionIdentifierContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionLiteralContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ExpressionLiteralContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionFunctionCallContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ExpressionFunctionCallContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionExistsContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(QueryCatParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_PAREN() { return GetToken(QueryCatParser.LEFT_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectQueryExpressionContext selectQueryExpression() {
			return GetRuleContext<SelectQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_PAREN() { return GetToken(QueryCatParser.RIGHT_PAREN, 0); }
		public ExpressionExistsContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionExists(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 66;
		EnterRecursionRule(_localctx, 66, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 411;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				_localctx = new ExpressionLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 389;
				literal();
				}
				break;
			case 2:
				{
				_localctx = new ExpressionCastContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 390;
				castOperand();
				}
				break;
			case 3:
				{
				_localctx = new ExpressionStandardFunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 391;
				standardFunction();
				}
				break;
			case 4:
				{
				_localctx = new ExpressionFunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 392;
				functionCall();
				}
				break;
			case 5:
				{
				_localctx = new ExpressionIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 393;
				identifierChain();
				}
				break;
			case 6:
				{
				_localctx = new ExpressionInParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 394;
				Match(LEFT_PAREN);
				State = 395;
				expression(0);
				State = 396;
				Match(RIGHT_PAREN);
				}
				break;
			case 7:
				{
				_localctx = new ExpressionSelectContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 398;
				Match(LEFT_PAREN);
				State = 399;
				selectQueryExpression();
				State = 400;
				Match(RIGHT_PAREN);
				}
				break;
			case 8:
				{
				_localctx = new ExpressionUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 402;
				((ExpressionUnaryContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					((ExpressionUnaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 403;
				((ExpressionUnaryContext)_localctx).right = expression(12);
				}
				break;
			case 9:
				{
				_localctx = new ExpressionExistsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 404;
				Match(EXISTS);
				State = 405;
				Match(LEFT_PAREN);
				State = 406;
				selectQueryExpression();
				State = 407;
				Match(RIGHT_PAREN);
				}
				break;
			case 10:
				{
				_localctx = new ExpressionUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 409;
				((ExpressionUnaryContext)_localctx).op = Match(NOT);
				State = 410;
				((ExpressionUnaryContext)_localctx).right = expression(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 460;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 458;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
					case 1:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 413;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 414;
						((ExpressionBinaryContext)_localctx).op = Match(CONCAT);
						State = 415;
						((ExpressionBinaryContext)_localctx).right = expression(14);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 416;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 417;
						((ExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 458752L) != 0) ) {
							((ExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 418;
						((ExpressionBinaryContext)_localctx).right = expression(12);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 419;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 420;
						((ExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((ExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 421;
						((ExpressionBinaryContext)_localctx).right = expression(11);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 422;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 423;
						((ExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 33030144L) != 0) ) {
							((ExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 424;
						((ExpressionBinaryContext)_localctx).right = expression(10);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 425;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 427;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 426;
							Match(NOT);
							}
						}

						State = 429;
						((ExpressionBinaryContext)_localctx).op = Match(LIKE);
						State = 430;
						((ExpressionBinaryContext)_localctx).right = expression(9);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionBetweenContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBetweenContext)_localctx).expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 431;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 433;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 432;
							Match(NOT);
							}
						}

						State = 435;
						((ExpressionBetweenContext)_localctx).op = Match(BETWEEN);
						State = 436;
						((ExpressionBetweenContext)_localctx).left = simpleExpression(0);
						State = 437;
						Match(AND);
						State = 438;
						((ExpressionBetweenContext)_localctx).right = expression(7);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 440;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 441;
						((ExpressionBinaryContext)_localctx).op = Match(AND);
						State = 442;
						((ExpressionBinaryContext)_localctx).right = expression(5);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionBinaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 443;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 444;
						((ExpressionBinaryContext)_localctx).op = Match(OR);
						State = 445;
						((ExpressionBinaryContext)_localctx).right = expression(4);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionBinaryInContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionBinaryInContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 446;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 448;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 447;
							Match(NOT);
							}
						}

						State = 450;
						((ExpressionBinaryInContext)_localctx).op = Match(IN);
						State = 451;
						((ExpressionBinaryInContext)_localctx).right = array();
						}
						break;
					case 10:
						{
						_localctx = new ExpressionUnaryContext(new ExpressionContext(_parentctx, _parentState));
						((ExpressionUnaryContext)_localctx).right = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 452;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 453;
						((ExpressionUnaryContext)_localctx).op = Match(IS);
						State = 455;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 454;
							Match(NOT);
							}
						}

						State = 457;
						Match(NULL);
						}
						break;
					}
					} 
				}
				State = 462;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,60,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SimpleExpressionContext : ParserRuleContext {
		public SimpleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpression; } }
	 
		public SimpleExpressionContext() { }
		public virtual void CopyFrom(SimpleExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleExpressionLiteralContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public SimpleExpressionLiteralContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionCastContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CastOperandContext castOperand() {
			return GetRuleContext<CastOperandContext>(0);
		}
		public SimpleExpressionCastContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionCast(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionStandardFunctionCallContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public StandardFunctionContext standardFunction() {
			return GetRuleContext<StandardFunctionContext>(0);
		}
		public SimpleExpressionStandardFunctionCallContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionStandardFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionBinaryContext : SimpleExpressionContext {
		public SimpleExpressionContext left;
		public IToken op;
		public SimpleExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext[] simpleExpression() {
			return GetRuleContexts<SimpleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpressionContext simpleExpression(int i) {
			return GetRuleContext<SimpleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(QueryCatParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(QueryCatParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(QueryCatParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(QueryCatParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(QueryCatParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(QueryCatParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUALS() { return GetToken(QueryCatParser.NOT_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(QueryCatParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUALS() { return GetToken(QueryCatParser.GREATER_OR_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(QueryCatParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUALS() { return GetToken(QueryCatParser.LESS_OR_EQUALS, 0); }
		public SimpleExpressionBinaryContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionFunctionCallContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public SimpleExpressionFunctionCallContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleExpressionIdentifierContext : SimpleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierChainContext identifierChain() {
			return GetRuleContext<IdentifierChainContext>(0);
		}
		public SimpleExpressionIdentifierContext(SimpleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExpressionContext simpleExpression() {
		return simpleExpression(0);
	}

	private SimpleExpressionContext simpleExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SimpleExpressionContext _localctx = new SimpleExpressionContext(Context, _parentState);
		SimpleExpressionContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_simpleExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 469;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				{
				_localctx = new SimpleExpressionLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 464;
				literal();
				}
				break;
			case 2:
				{
				_localctx = new SimpleExpressionCastContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 465;
				castOperand();
				}
				break;
			case 3:
				{
				_localctx = new SimpleExpressionStandardFunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 466;
				standardFunction();
				}
				break;
			case 4:
				{
				_localctx = new SimpleExpressionFunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 467;
				functionCall();
				}
				break;
			case 5:
				{
				_localctx = new SimpleExpressionIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 468;
				identifierChain();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 482;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 480;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
					case 1:
						{
						_localctx = new SimpleExpressionBinaryContext(new SimpleExpressionContext(_parentctx, _parentState));
						((SimpleExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpression);
						State = 471;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 472;
						((SimpleExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 458752L) != 0) ) {
							((SimpleExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 473;
						((SimpleExpressionBinaryContext)_localctx).right = simpleExpression(4);
						}
						break;
					case 2:
						{
						_localctx = new SimpleExpressionBinaryContext(new SimpleExpressionContext(_parentctx, _parentState));
						((SimpleExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpression);
						State = 474;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 475;
						((SimpleExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((SimpleExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 476;
						((SimpleExpressionBinaryContext)_localctx).right = simpleExpression(3);
						}
						break;
					case 3:
						{
						_localctx = new SimpleExpressionBinaryContext(new SimpleExpressionContext(_parentctx, _parentState));
						((SimpleExpressionBinaryContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpression);
						State = 477;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 478;
						((SimpleExpressionBinaryContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 33030144L) != 0) ) {
							((SimpleExpressionBinaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 479;
						((SimpleExpressionBinaryContext)_localctx).right = simpleExpression(2);
						}
						break;
					}
					} 
				}
				State = 484;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LiteralPlainContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_LITERAL() { return GetToken(QueryCatParser.INTEGER_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_LITERAL() { return GetToken(QueryCatParser.FLOAT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_LITERAL() { return GetToken(QueryCatParser.NUMERIC_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_LITERAL() { return GetToken(QueryCatParser.BOOLEAN_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(QueryCatParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(QueryCatParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(QueryCatParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(QueryCatParser.NULL, 0); }
		public LiteralPlainContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralPlain(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralIntervalContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntervalLiteralContext intervalLiteral() {
			return GetRuleContext<IntervalLiteralContext>(0);
		}
		public LiteralIntervalContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQueryCatParserVisitor<TResult> typedVisitor = visitor as IQueryCatParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralInterval(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 70, RULE_literal);
		try {
			State = 494;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER_LITERAL:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 485;
				Match(INTEGER_LITERAL);
				}
				break;
			case FLOAT_LITERAL:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 486;
				Match(FLOAT_LITERAL);
				}
				break;
			case NUMERIC_LITERAL:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 487;
				Match(NUMERIC_LITERAL);
				}
				break;
			case BOOLEAN_LITERAL:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 488;
				Match(BOOLEAN_LITERAL);
				}
				break;
			case STRING_LITERAL:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 489;
				Match(STRING_LITERAL);
				}
				break;
			case TRUE:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 490;
				Match(TRUE);
				}
				break;
			case FALSE:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 491;
				Match(FALSE);
				}
				break;
			case NULL:
				_localctx = new LiteralPlainContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 492;
				Match(NULL);
				}
				break;
			case INTERVAL:
				_localctx = new LiteralIntervalContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 493;
				intervalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 33: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 34: return simpleExpression_sempred((SimpleExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 13);
		case 1: return Precpred(Context, 11);
		case 2: return Precpred(Context, 10);
		case 3: return Precpred(Context, 9);
		case 4: return Precpred(Context, 8);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 4);
		case 7: return Precpred(Context, 3);
		case 8: return Precpred(Context, 7);
		case 9: return Precpred(Context, 2);
		}
		return true;
	}
	private bool simpleExpression_sempred(SimpleExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 3);
		case 11: return Precpred(Context, 2);
		case 12: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,97,497,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		1,0,1,0,1,0,5,0,76,8,0,10,0,12,0,79,9,0,1,0,3,0,82,8,0,1,0,1,0,1,1,1,1,
		1,1,1,1,3,1,90,8,1,1,2,1,2,1,2,1,2,1,2,5,2,97,8,2,10,2,12,2,100,9,2,3,
		2,102,8,2,1,2,1,2,1,2,3,2,107,8,2,1,2,1,2,1,3,1,3,1,3,1,3,3,3,115,8,3,
		1,4,3,4,118,8,4,1,4,1,4,3,4,122,8,4,1,4,1,4,1,4,3,4,127,8,4,1,4,1,4,3,
		4,131,8,4,1,5,1,5,1,6,1,6,1,6,5,6,138,8,6,10,6,12,6,141,9,6,1,6,3,6,144,
		8,6,1,6,3,6,147,8,6,1,6,3,6,150,8,6,1,7,1,7,1,7,1,7,1,7,5,7,157,8,7,10,
		7,12,7,160,9,7,1,8,1,8,3,8,164,8,8,1,9,1,9,1,9,1,10,1,10,3,10,171,8,10,
		1,10,1,10,3,10,175,8,10,1,10,1,10,3,10,179,8,10,1,10,3,10,182,8,10,1,10,
		3,10,185,8,10,1,10,1,10,1,10,1,10,5,10,191,8,10,10,10,12,10,194,9,10,1,
		10,3,10,197,8,10,3,10,199,8,10,1,11,1,11,1,11,5,11,204,8,11,10,11,12,11,
		207,9,11,1,12,1,12,1,13,1,13,1,13,3,13,214,8,13,1,13,1,13,3,13,218,8,13,
		3,13,220,8,13,1,14,1,14,1,14,1,15,1,15,3,15,227,8,15,1,15,3,15,230,8,15,
		1,15,3,15,233,8,15,1,16,1,16,1,16,1,16,5,16,239,8,16,10,16,12,16,242,9,
		16,1,17,1,17,3,17,246,8,17,1,17,1,17,1,17,3,17,251,8,17,1,17,3,17,254,
		8,17,1,17,1,17,1,17,1,17,3,17,260,8,17,3,17,262,8,17,1,18,1,18,1,18,1,
		18,1,18,5,18,269,8,18,10,18,12,18,272,9,18,1,19,1,19,1,19,1,20,1,20,1,
		20,1,21,1,21,1,21,3,21,283,8,21,1,22,1,22,3,22,287,8,22,1,22,1,22,3,22,
		291,8,22,1,22,3,22,294,8,22,1,23,1,23,1,23,1,24,1,24,1,24,3,24,302,8,24,
		1,24,3,24,305,8,24,1,25,1,25,1,25,1,25,5,25,311,8,25,10,25,12,25,314,9,
		25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,5,27,326,8,27,10,
		27,12,27,329,9,27,3,27,331,8,27,1,27,1,27,1,27,1,27,1,27,3,27,338,8,27,
		1,28,1,28,3,28,342,8,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
		30,1,30,1,30,1,30,1,30,3,30,358,8,30,1,30,3,30,361,8,30,1,30,3,30,364,
		8,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
		1,30,1,30,1,30,1,30,3,30,383,8,30,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,
		33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
		33,1,33,1,33,1,33,1,33,1,33,3,33,412,8,33,1,33,1,33,1,33,1,33,1,33,1,33,
		1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,428,8,33,1,33,1,33,1,33,1,
		33,3,33,434,8,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
		1,33,1,33,3,33,449,8,33,1,33,1,33,1,33,1,33,1,33,3,33,456,8,33,1,33,5,
		33,459,8,33,10,33,12,33,462,9,33,1,34,1,34,1,34,1,34,1,34,1,34,3,34,470,
		8,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,5,34,481,8,34,10,34,
		12,34,484,9,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,495,8,
		35,1,35,0,2,66,68,36,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
		36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,0,12,2,0,70,70,72,
		72,2,0,89,89,93,93,2,0,69,69,73,73,1,0,83,84,2,0,75,75,80,80,1,0,47,47,
		1,0,53,55,1,0,59,65,2,0,26,33,58,58,1,0,14,15,1,0,16,18,1,0,19,24,559,
		0,72,1,0,0,0,2,89,1,0,0,0,4,91,1,0,0,0,6,110,1,0,0,0,8,117,1,0,0,0,10,
		132,1,0,0,0,12,134,1,0,0,0,14,151,1,0,0,0,16,161,1,0,0,0,18,165,1,0,0,
		0,20,198,1,0,0,0,22,200,1,0,0,0,24,208,1,0,0,0,26,219,1,0,0,0,28,221,1,
		0,0,0,30,224,1,0,0,0,32,234,1,0,0,0,34,261,1,0,0,0,36,263,1,0,0,0,38,273,
		1,0,0,0,40,276,1,0,0,0,42,279,1,0,0,0,44,284,1,0,0,0,46,295,1,0,0,0,48,
		304,1,0,0,0,50,306,1,0,0,0,52,317,1,0,0,0,54,337,1,0,0,0,56,341,1,0,0,
		0,58,345,1,0,0,0,60,382,1,0,0,0,62,384,1,0,0,0,64,386,1,0,0,0,66,411,1,
		0,0,0,68,469,1,0,0,0,70,494,1,0,0,0,72,77,3,2,1,0,73,74,5,9,0,0,74,76,
		3,2,1,0,75,73,1,0,0,0,76,79,1,0,0,0,77,75,1,0,0,0,77,78,1,0,0,0,78,81,
		1,0,0,0,79,77,1,0,0,0,80,82,5,9,0,0,81,80,1,0,0,0,81,82,1,0,0,0,82,83,
		1,0,0,0,83,84,5,0,0,1,84,1,1,0,0,0,85,90,3,10,5,0,86,90,3,54,27,0,87,90,
		3,46,23,0,88,90,3,66,33,0,89,85,1,0,0,0,89,86,1,0,0,0,89,87,1,0,0,0,89,
		88,1,0,0,0,90,3,1,0,0,0,91,92,5,89,0,0,92,101,5,1,0,0,93,98,3,8,4,0,94,
		95,5,6,0,0,95,97,3,8,4,0,96,94,1,0,0,0,97,100,1,0,0,0,98,96,1,0,0,0,98,
		99,1,0,0,0,99,102,1,0,0,0,100,98,1,0,0,0,101,93,1,0,0,0,101,102,1,0,0,
		0,102,103,1,0,0,0,103,106,5,2,0,0,104,105,5,5,0,0,105,107,3,6,3,0,106,
		104,1,0,0,0,106,107,1,0,0,0,107,108,1,0,0,0,108,109,5,0,0,1,109,5,1,0,
		0,0,110,114,3,64,32,0,111,112,5,23,0,0,112,113,5,89,0,0,113,115,5,21,0,
		0,114,111,1,0,0,0,114,115,1,0,0,0,115,7,1,0,0,0,116,118,5,8,0,0,117,116,
		1,0,0,0,117,118,1,0,0,0,118,119,1,0,0,0,119,121,5,89,0,0,120,122,5,10,
		0,0,121,120,1,0,0,0,121,122,1,0,0,0,122,123,1,0,0,0,123,124,5,5,0,0,124,
		126,3,6,3,0,125,127,5,13,0,0,126,125,1,0,0,0,126,127,1,0,0,0,127,130,1,
		0,0,0,128,129,5,19,0,0,129,131,3,70,35,0,130,128,1,0,0,0,130,131,1,0,0,
		0,131,9,1,0,0,0,132,133,3,12,6,0,133,11,1,0,0,0,134,139,3,20,10,0,135,
		136,5,86,0,0,136,138,3,20,10,0,137,135,1,0,0,0,138,141,1,0,0,0,139,137,
		1,0,0,0,139,140,1,0,0,0,140,143,1,0,0,0,141,139,1,0,0,0,142,144,3,14,7,
		0,143,142,1,0,0,0,143,144,1,0,0,0,144,146,1,0,0,0,145,147,3,42,21,0,146,
		145,1,0,0,0,146,147,1,0,0,0,147,149,1,0,0,0,148,150,3,44,22,0,149,148,
		1,0,0,0,149,150,1,0,0,0,150,13,1,0,0,0,151,152,5,82,0,0,152,153,5,36,0,
		0,153,158,3,16,8,0,154,155,5,6,0,0,155,157,3,16,8,0,156,154,1,0,0,0,157,
		160,1,0,0,0,158,156,1,0,0,0,158,159,1,0,0,0,159,15,1,0,0,0,160,158,1,0,
		0,0,161,163,3,66,33,0,162,164,7,0,0,0,163,162,1,0,0,0,163,164,1,0,0,0,
		164,17,1,0,0,0,165,166,5,35,0,0,166,167,7,1,0,0,167,19,1,0,0,0,168,170,
		5,85,0,0,169,171,3,24,12,0,170,169,1,0,0,0,170,171,1,0,0,0,171,172,1,0,
		0,0,172,174,3,22,11,0,173,175,3,28,14,0,174,173,1,0,0,0,174,175,1,0,0,
		0,175,176,1,0,0,0,176,178,3,30,15,0,177,179,3,14,7,0,178,177,1,0,0,0,178,
		179,1,0,0,0,179,181,1,0,0,0,180,182,3,42,21,0,181,180,1,0,0,0,181,182,
		1,0,0,0,182,184,1,0,0,0,183,185,3,44,22,0,184,183,1,0,0,0,184,185,1,0,
		0,0,185,199,1,0,0,0,186,187,5,85,0,0,187,192,3,26,13,0,188,189,5,6,0,0,
		189,191,3,26,13,0,190,188,1,0,0,0,191,194,1,0,0,0,192,190,1,0,0,0,192,
		193,1,0,0,0,193,196,1,0,0,0,194,192,1,0,0,0,195,197,3,28,14,0,196,195,
		1,0,0,0,196,197,1,0,0,0,197,199,1,0,0,0,198,168,1,0,0,0,198,186,1,0,0,
		0,199,21,1,0,0,0,200,205,3,26,13,0,201,202,5,6,0,0,202,204,3,26,13,0,203,
		201,1,0,0,0,204,207,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,23,1,0,
		0,0,207,205,1,0,0,0,208,209,7,2,0,0,209,25,1,0,0,0,210,220,5,16,0,0,211,
		213,3,66,33,0,212,214,3,18,9,0,213,212,1,0,0,0,213,214,1,0,0,0,214,220,
		1,0,0,0,215,217,3,48,24,0,216,218,3,18,9,0,217,216,1,0,0,0,217,218,1,0,
		0,0,218,220,1,0,0,0,219,210,1,0,0,0,219,211,1,0,0,0,219,215,1,0,0,0,220,
		27,1,0,0,0,221,222,5,79,0,0,222,223,3,54,27,0,223,29,1,0,0,0,224,226,3,
		32,16,0,225,227,3,40,20,0,226,225,1,0,0,0,226,227,1,0,0,0,227,229,1,0,
		0,0,228,230,3,36,18,0,229,228,1,0,0,0,229,230,1,0,0,0,230,232,1,0,0,0,
		231,233,3,38,19,0,232,231,1,0,0,0,232,233,1,0,0,0,233,31,1,0,0,0,234,235,
		5,41,0,0,235,240,3,34,17,0,236,237,5,6,0,0,237,239,3,34,17,0,238,236,1,
		0,0,0,239,242,1,0,0,0,240,238,1,0,0,0,240,241,1,0,0,0,241,33,1,0,0,0,242,
		240,1,0,0,0,243,245,3,54,27,0,244,246,3,18,9,0,245,244,1,0,0,0,245,246,
		1,0,0,0,246,262,1,0,0,0,247,250,5,93,0,0,248,249,5,76,0,0,249,251,3,54,
		27,0,250,248,1,0,0,0,250,251,1,0,0,0,251,253,1,0,0,0,252,254,3,18,9,0,
		253,252,1,0,0,0,253,254,1,0,0,0,254,262,1,0,0,0,255,256,5,1,0,0,256,257,
		3,12,6,0,257,259,5,2,0,0,258,260,3,18,9,0,259,258,1,0,0,0,259,260,1,0,
		0,0,260,262,1,0,0,0,261,243,1,0,0,0,261,247,1,0,0,0,261,255,1,0,0,0,262,
		35,1,0,0,0,263,264,5,77,0,0,264,265,5,36,0,0,265,270,3,66,33,0,266,267,
		5,6,0,0,267,269,3,66,33,0,268,266,1,0,0,0,269,272,1,0,0,0,270,268,1,0,
		0,0,270,271,1,0,0,0,271,37,1,0,0,0,272,270,1,0,0,0,273,274,5,78,0,0,274,
		275,3,66,33,0,275,39,1,0,0,0,276,277,5,87,0,0,277,278,3,66,33,0,278,41,
		1,0,0,0,279,280,5,81,0,0,280,282,3,66,33,0,281,283,7,3,0,0,282,281,1,0,
		0,0,282,283,1,0,0,0,283,43,1,0,0,0,284,286,5,74,0,0,285,287,7,4,0,0,286,
		285,1,0,0,0,286,287,1,0,0,0,287,288,1,0,0,0,288,290,3,66,33,0,289,291,
		7,3,0,0,290,289,1,0,0,0,290,291,1,0,0,0,291,293,1,0,0,0,292,294,7,5,0,
		0,293,292,1,0,0,0,293,294,1,0,0,0,294,45,1,0,0,0,295,296,5,68,0,0,296,
		297,3,66,33,0,297,47,1,0,0,0,298,299,5,89,0,0,299,301,5,7,0,0,300,302,
		5,89,0,0,301,300,1,0,0,0,301,302,1,0,0,0,302,305,1,0,0,0,303,305,5,89,
		0,0,304,298,1,0,0,0,304,303,1,0,0,0,305,49,1,0,0,0,306,307,5,1,0,0,307,
		312,3,66,33,0,308,309,5,6,0,0,309,311,3,66,33,0,310,308,1,0,0,0,311,314,
		1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,313,315,1,0,0,0,314,312,1,0,0,
		0,315,316,5,2,0,0,316,51,1,0,0,0,317,318,5,58,0,0,318,319,5,93,0,0,319,
		53,1,0,0,0,320,321,5,89,0,0,321,330,5,1,0,0,322,327,3,56,28,0,323,324,
		5,6,0,0,324,326,3,56,28,0,325,323,1,0,0,0,326,329,1,0,0,0,327,325,1,0,
		0,0,327,328,1,0,0,0,328,331,1,0,0,0,329,327,1,0,0,0,330,322,1,0,0,0,330,
		331,1,0,0,0,331,332,1,0,0,0,332,338,5,2,0,0,333,334,5,89,0,0,334,335,5,
		1,0,0,335,336,5,16,0,0,336,338,5,2,0,0,337,320,1,0,0,0,337,333,1,0,0,0,
		338,55,1,0,0,0,339,340,5,89,0,0,340,342,5,4,0,0,341,339,1,0,0,0,341,342,
		1,0,0,0,342,343,1,0,0,0,343,344,3,66,33,0,344,57,1,0,0,0,345,346,5,37,
		0,0,346,347,5,1,0,0,347,348,3,68,34,0,348,349,5,35,0,0,349,350,3,64,32,
		0,350,351,5,2,0,0,351,59,1,0,0,0,352,383,5,56,0,0,353,383,5,57,0,0,354,
		355,5,52,0,0,355,357,5,1,0,0,356,358,7,6,0,0,357,356,1,0,0,0,357,358,1,
		0,0,0,358,360,1,0,0,0,359,361,5,93,0,0,360,359,1,0,0,0,360,361,1,0,0,0,
		361,363,1,0,0,0,362,364,5,41,0,0,363,362,1,0,0,0,363,364,1,0,0,0,364,365,
		1,0,0,0,365,366,3,68,34,0,366,367,5,2,0,0,367,383,1,0,0,0,368,369,5,66,
		0,0,369,370,5,1,0,0,370,371,5,93,0,0,371,372,5,42,0,0,372,373,3,68,34,
		0,373,374,5,2,0,0,374,383,1,0,0,0,375,376,5,67,0,0,376,377,5,1,0,0,377,
		378,3,62,31,0,378,379,5,41,0,0,379,380,3,68,34,0,380,381,5,2,0,0,381,383,
		1,0,0,0,382,352,1,0,0,0,382,353,1,0,0,0,382,354,1,0,0,0,382,368,1,0,0,
		0,382,375,1,0,0,0,383,61,1,0,0,0,384,385,7,7,0,0,385,63,1,0,0,0,386,387,
		7,8,0,0,387,65,1,0,0,0,388,389,6,33,-1,0,389,412,3,70,35,0,390,412,3,58,
		29,0,391,412,3,60,30,0,392,412,3,54,27,0,393,412,3,48,24,0,394,395,5,1,
		0,0,395,396,3,66,33,0,396,397,5,2,0,0,397,412,1,0,0,0,398,399,5,1,0,0,
		399,400,3,12,6,0,400,401,5,2,0,0,401,412,1,0,0,0,402,403,7,9,0,0,403,412,
		3,66,33,12,404,405,5,39,0,0,405,406,5,1,0,0,406,407,3,12,6,0,407,408,5,
		2,0,0,408,412,1,0,0,0,409,410,5,45,0,0,410,412,3,66,33,1,411,388,1,0,0,
		0,411,390,1,0,0,0,411,391,1,0,0,0,411,392,1,0,0,0,411,393,1,0,0,0,411,
		394,1,0,0,0,411,398,1,0,0,0,411,402,1,0,0,0,411,404,1,0,0,0,411,409,1,
		0,0,0,412,460,1,0,0,0,413,414,10,13,0,0,414,415,5,25,0,0,415,459,3,66,
		33,14,416,417,10,11,0,0,417,418,7,10,0,0,418,459,3,66,33,12,419,420,10,
		10,0,0,420,421,7,9,0,0,421,459,3,66,33,11,422,423,10,9,0,0,423,424,7,11,
		0,0,424,459,3,66,33,10,425,427,10,8,0,0,426,428,5,45,0,0,427,426,1,0,0,
		0,427,428,1,0,0,0,428,429,1,0,0,0,429,430,5,44,0,0,430,459,3,66,33,9,431,
		433,10,6,0,0,432,434,5,45,0,0,433,432,1,0,0,0,433,434,1,0,0,0,434,435,
		1,0,0,0,435,436,5,71,0,0,436,437,3,68,34,0,437,438,5,34,0,0,438,439,3,
		66,33,7,439,459,1,0,0,0,440,441,10,4,0,0,441,442,5,34,0,0,442,459,3,66,
		33,5,443,444,10,3,0,0,444,445,5,48,0,0,445,459,3,66,33,4,446,448,10,7,
		0,0,447,449,5,45,0,0,448,447,1,0,0,0,448,449,1,0,0,0,449,450,1,0,0,0,450,
		451,5,42,0,0,451,459,3,50,25,0,452,453,10,2,0,0,453,455,5,43,0,0,454,456,
		5,45,0,0,455,454,1,0,0,0,455,456,1,0,0,0,456,457,1,0,0,0,457,459,5,46,
		0,0,458,413,1,0,0,0,458,416,1,0,0,0,458,419,1,0,0,0,458,422,1,0,0,0,458,
		425,1,0,0,0,458,431,1,0,0,0,458,440,1,0,0,0,458,443,1,0,0,0,458,446,1,
		0,0,0,458,452,1,0,0,0,459,462,1,0,0,0,460,458,1,0,0,0,460,461,1,0,0,0,
		461,67,1,0,0,0,462,460,1,0,0,0,463,464,6,34,-1,0,464,470,3,70,35,0,465,
		470,3,58,29,0,466,470,3,60,30,0,467,470,3,54,27,0,468,470,3,48,24,0,469,
		463,1,0,0,0,469,465,1,0,0,0,469,466,1,0,0,0,469,467,1,0,0,0,469,468,1,
		0,0,0,470,482,1,0,0,0,471,472,10,3,0,0,472,473,7,10,0,0,473,481,3,68,34,
		4,474,475,10,2,0,0,475,476,7,9,0,0,476,481,3,68,34,3,477,478,10,1,0,0,
		478,479,7,11,0,0,479,481,3,68,34,2,480,471,1,0,0,0,480,474,1,0,0,0,480,
		477,1,0,0,0,481,484,1,0,0,0,482,480,1,0,0,0,482,483,1,0,0,0,483,69,1,0,
		0,0,484,482,1,0,0,0,485,495,5,90,0,0,486,495,5,91,0,0,487,495,5,92,0,0,
		488,495,5,94,0,0,489,495,5,93,0,0,490,495,5,50,0,0,491,495,5,40,0,0,492,
		495,5,46,0,0,493,495,3,52,26,0,494,485,1,0,0,0,494,486,1,0,0,0,494,487,
		1,0,0,0,494,488,1,0,0,0,494,489,1,0,0,0,494,490,1,0,0,0,494,491,1,0,0,
		0,494,492,1,0,0,0,494,493,1,0,0,0,495,71,1,0,0,0,65,77,81,89,98,101,106,
		114,117,121,126,130,139,143,146,149,158,163,170,174,178,181,184,192,196,
		198,205,213,217,219,226,229,232,240,245,250,253,259,261,270,282,286,290,
		293,301,304,312,327,330,337,341,357,360,363,382,411,427,433,448,455,458,
		460,469,480,482,494
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace QueryCat.Backend.Parser
