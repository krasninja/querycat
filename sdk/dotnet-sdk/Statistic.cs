/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


// Thrift code generated for net8
#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0290  // use primary CTOR
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace QueryCat.Plugins.Sdk
{

  public partial class Statistic : TBase
  {

    public long ExecutionTimeMs { get; set; } = 0;

    public long ProcessedCount { get; set; } = 0;

    public long ErrorsCount { get; set; } = 0;

    public List<global::QueryCat.Plugins.Sdk.StatisticRowError>? Errors { get; set; }

    public Statistic()
    {
    }

    public Statistic(long execution_time_ms, long processed_count, long errors_count, List<global::QueryCat.Plugins.Sdk.StatisticRowError>? @errors) : this()
    {
      this.ExecutionTimeMs = execution_time_ms;
      this.ProcessedCount = processed_count;
      this.ErrorsCount = errors_count;
      this.Errors = @errors;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_execution_time_ms = false;
        bool isset_processed_count = false;
        bool isset_errors_count = false;
        bool isset_errors = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                ExecutionTimeMs = await iprot.ReadI64Async(cancellationToken);
                isset_execution_time_ms = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                ProcessedCount = await iprot.ReadI64Async(cancellationToken);
                isset_processed_count = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                ErrorsCount = await iprot.ReadI64Async(cancellationToken);
                isset_errors_count = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.List)
              {
                {
                  var _list60 = await iprot.ReadListBeginAsync(cancellationToken);
                  Errors = new List<global::QueryCat.Plugins.Sdk.StatisticRowError>(_list60.Count);
                  for(int _i61 = 0; _i61 < _list60.Count; ++_i61)
                  {
                    global::QueryCat.Plugins.Sdk.StatisticRowError _elem62;
                    _elem62 = new global::QueryCat.Plugins.Sdk.StatisticRowError();
                    await _elem62.ReadAsync(iprot, cancellationToken);
                    Errors.Add(_elem62);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_errors = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_execution_time_ms)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_processed_count)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_errors_count)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_errors)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp63 = new TStruct("Statistic");
        await oprot.WriteStructBeginAsync(tmp63, cancellationToken);
        #pragma warning disable IDE0017  // simplified init
        var tmp64 = new TField();
        tmp64.Name = "execution_time_ms";
        tmp64.Type = TType.I64;
        tmp64.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp64, cancellationToken);
        await oprot.WriteI64Async(ExecutionTimeMs, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        tmp64.Name = "processed_count";
        tmp64.Type = TType.I64;
        tmp64.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp64, cancellationToken);
        await oprot.WriteI64Async(ProcessedCount, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        tmp64.Name = "errors_count";
        tmp64.Type = TType.I64;
        tmp64.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp64, cancellationToken);
        await oprot.WriteI64Async(ErrorsCount, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Errors != null))
        {
          tmp64.Name = "errors";
          tmp64.Type = TType.List;
          tmp64.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp64, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Errors.Count), cancellationToken);
          foreach (global::QueryCat.Plugins.Sdk.StatisticRowError _iter65 in Errors)
          {
            await _iter65.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        #pragma warning restore IDE0017  // simplified init
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object? that)
    {
      if (that is not Statistic other) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(ExecutionTimeMs, other.ExecutionTimeMs)
        && global::System.Object.Equals(ProcessedCount, other.ProcessedCount)
        && global::System.Object.Equals(ErrorsCount, other.ErrorsCount)
        && TCollections.Equals(Errors, other.Errors);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + ExecutionTimeMs.GetHashCode();
        hashcode = (hashcode * 397) + ProcessedCount.GetHashCode();
        hashcode = (hashcode * 397) + ErrorsCount.GetHashCode();
        if((Errors != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Errors);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp66 = new StringBuilder("Statistic(");
      tmp66.Append(", ExecutionTimeMs: ");
      ExecutionTimeMs.ToString(tmp66);
      tmp66.Append(", ProcessedCount: ");
      ProcessedCount.ToString(tmp66);
      tmp66.Append(", ErrorsCount: ");
      ErrorsCount.ToString(tmp66);
      if((Errors != null))
      {
        tmp66.Append(", Errors: ");
        Errors.ToString(tmp66);
      }
      tmp66.Append(')');
      return tmp66.ToString();
    }
  }

}
