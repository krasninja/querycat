/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


// Thrift code generated for net8
#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0290  // use primary CTOR
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace QueryCat.Plugins.Sdk
{
  public partial class QueryCatIO
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> CallFunctionAsync(long @token, string function_name, List<global::QueryCat.Plugins.Sdk.VariantValue>? @args, int object_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<byte[]> Blob_ReadAsync(long @token, int object_blob_handle, int @offset, int @count, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<long> Blob_WriteAsync(long @token, int object_blob_handle, byte[] @bytes, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<long> Blob_GetLengthAsync(long @token, int object_blob_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<string> Blob_GetContentTypeAsync(long @token, int object_blob_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<string> Blob_GetNameAsync(long @token, int object_blob_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.Column>> RowsSet_GetColumnsAsync(long @token, int object_rows_set_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task RowsSet_OpenAsync(long @token, int object_rows_set_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task RowsSet_CloseAsync(long @token, int object_rows_set_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task RowsSet_ResetAsync(long @token, int object_rows_set_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task RowsSet_SetContextAsync(long @token, int object_rows_set_handle, global::QueryCat.Plugins.Sdk.ContextQueryInfo? context_query_info, global::QueryCat.Plugins.Sdk.ContextInfo? context_info, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<int> RowsSet_PositionAsync(long @token, int object_rows_set_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<int> RowsSet_TotalRowsAsync(long @token, int object_rows_set_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task RowsSet_SeekAsync(long @token, int object_rows_set_handle, int @offset, global::QueryCat.Plugins.Sdk.CursorSeekOrigin @origin, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.RowsList> RowsSet_GetRowsAsync(long @token, int object_rows_set_handle, int @count, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<List<string>> RowsSet_GetUniqueKeyAsync(long @token, int object_rows_set_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.KeyColumn>> RowsSet_GetKeyColumnsAsync(long @token, int object_rows_set_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task RowsSet_SetKeyColumnValueAsync(long @token, int object_rows_set_handle, int column_index, string @operation, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task RowsSet_UnsetKeyColumnValueAsync(long @token, int object_rows_set_handle, int column_index, string @operation, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.QueryCatErrorCode> RowsSet_UpdateValueAsync(long @token, int object_rows_set_handle, int column_index, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.QueryCatErrorCode> RowsSet_WriteValuesAsync(long @token, int object_rows_set_handle, List<global::QueryCat.Plugins.Sdk.VariantValue>? @values, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.QueryCatErrorCode> RowsSet_DeleteRowAsync(long @token, int object_rows_set_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ModelDescription> RowsSet_GetDescriptionAsync(long @token, int object_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<int> RowsFormatter_OpenInputAsync(long @token, int object_rows_formatter_handle, int object_blob_handle, string? @key, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<int> RowsFormatter_OpenOutputAsync(long @token, int object_rows_formatter_handle, int object_blob_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.QuestionResponse> AnswerAgent_AskAsync(long @token, int object_answer_agent_handle, global::QueryCat.Plugins.Sdk.QuestionRequest? @request, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task Thread_CloseHandleAsync(long @token, int @handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ObjectValue> Thread_GetHandleInfoAsync(long @token, int @handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ObjectValue> Thread_GetHandleFromVariableAsync(long @token, string @name, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> CallFunctionAsync(long @token, string function_name, List<global::QueryCat.Plugins.Sdk.VariantValue>? @args, int object_handle, CancellationToken cancellationToken = default)
      {
        await send_CallFunctionAsync(@token, function_name, @args, object_handle, cancellationToken);
        return await recv_CallFunctionAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_CallFunctionAsync(long @token, string function_name, List<global::QueryCat.Plugins.Sdk.VariantValue>? @args, int object_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("CallFunction", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp134 = new InternalStructs.CallFunction_args() {
          Token = @token,
          FunctionName = function_name,
          Args = @args,
          ObjectHandle = object_handle,
        };
        
        await tmp134.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> recv_CallFunctionAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp135 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp135.Type == TMessageType.Exception)
        {
          var tmp136 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp136;
        }

        var tmp137 = new InternalStructs.CallFunction_result();
        await tmp137.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp137.__isset.success)
        {
          return tmp137.Success!;
        }
        if (tmp137.__isset.@e)
        {
          throw tmp137.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CallFunctionAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<byte[]> Blob_ReadAsync(long @token, int object_blob_handle, int @offset, int @count, CancellationToken cancellationToken = default)
      {
        await send_Blob_ReadAsync(@token, object_blob_handle, @offset, @count, cancellationToken);
        return await recv_Blob_ReadAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Blob_ReadAsync(long @token, int object_blob_handle, int @offset, int @count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Blob_Read", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp138 = new InternalStructs.Blob_Read_args() {
          Token = @token,
          ObjectBlobHandle = object_blob_handle,
          Offset = @offset,
          Count = @count,
        };
        
        await tmp138.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<byte[]> recv_Blob_ReadAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp139 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp139.Type == TMessageType.Exception)
        {
          var tmp140 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp140;
        }

        var tmp141 = new InternalStructs.Blob_Read_result();
        await tmp141.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp141.__isset.success)
        {
          return tmp141.Success!;
        }
        if (tmp141.__isset.@e)
        {
          throw tmp141.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Blob_ReadAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<long> Blob_WriteAsync(long @token, int object_blob_handle, byte[] @bytes, CancellationToken cancellationToken = default)
      {
        await send_Blob_WriteAsync(@token, object_blob_handle, @bytes, cancellationToken);
        return await recv_Blob_WriteAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Blob_WriteAsync(long @token, int object_blob_handle, byte[] @bytes, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Blob_Write", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp142 = new InternalStructs.Blob_Write_args() {
          Token = @token,
          ObjectBlobHandle = object_blob_handle,
          Bytes = @bytes,
        };
        
        await tmp142.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<long> recv_Blob_WriteAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp143 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp143.Type == TMessageType.Exception)
        {
          var tmp144 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp144;
        }

        var tmp145 = new InternalStructs.Blob_Write_result();
        await tmp145.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp145.__isset.success)
        {
          return tmp145.Success;
        }
        if (tmp145.__isset.@e)
        {
          throw tmp145.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Blob_WriteAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<long> Blob_GetLengthAsync(long @token, int object_blob_handle, CancellationToken cancellationToken = default)
      {
        await send_Blob_GetLengthAsync(@token, object_blob_handle, cancellationToken);
        return await recv_Blob_GetLengthAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Blob_GetLengthAsync(long @token, int object_blob_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Blob_GetLength", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp146 = new InternalStructs.Blob_GetLength_args() {
          Token = @token,
          ObjectBlobHandle = object_blob_handle,
        };
        
        await tmp146.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<long> recv_Blob_GetLengthAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp147 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp147.Type == TMessageType.Exception)
        {
          var tmp148 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp148;
        }

        var tmp149 = new InternalStructs.Blob_GetLength_result();
        await tmp149.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp149.__isset.success)
        {
          return tmp149.Success;
        }
        if (tmp149.__isset.@e)
        {
          throw tmp149.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Blob_GetLengthAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> Blob_GetContentTypeAsync(long @token, int object_blob_handle, CancellationToken cancellationToken = default)
      {
        await send_Blob_GetContentTypeAsync(@token, object_blob_handle, cancellationToken);
        return await recv_Blob_GetContentTypeAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Blob_GetContentTypeAsync(long @token, int object_blob_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Blob_GetContentType", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp150 = new InternalStructs.Blob_GetContentType_args() {
          Token = @token,
          ObjectBlobHandle = object_blob_handle,
        };
        
        await tmp150.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_Blob_GetContentTypeAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp151 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp151.Type == TMessageType.Exception)
        {
          var tmp152 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp152;
        }

        var tmp153 = new InternalStructs.Blob_GetContentType_result();
        await tmp153.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp153.__isset.success)
        {
          return tmp153.Success!;
        }
        if (tmp153.__isset.@e)
        {
          throw tmp153.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Blob_GetContentTypeAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> Blob_GetNameAsync(long @token, int object_blob_handle, CancellationToken cancellationToken = default)
      {
        await send_Blob_GetNameAsync(@token, object_blob_handle, cancellationToken);
        return await recv_Blob_GetNameAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Blob_GetNameAsync(long @token, int object_blob_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Blob_GetName", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp154 = new InternalStructs.Blob_GetName_args() {
          Token = @token,
          ObjectBlobHandle = object_blob_handle,
        };
        
        await tmp154.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_Blob_GetNameAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp155 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp155.Type == TMessageType.Exception)
        {
          var tmp156 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp156;
        }

        var tmp157 = new InternalStructs.Blob_GetName_result();
        await tmp157.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp157.__isset.success)
        {
          return tmp157.Success!;
        }
        if (tmp157.__isset.@e)
        {
          throw tmp157.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Blob_GetNameAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.Column>> RowsSet_GetColumnsAsync(long @token, int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_GetColumnsAsync(@token, object_rows_set_handle, cancellationToken);
        return await recv_RowsSet_GetColumnsAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_GetColumnsAsync(long @token, int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_GetColumns", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp158 = new InternalStructs.RowsSet_GetColumns_args() {
          Token = @token,
          ObjectRowsSetHandle = object_rows_set_handle,
        };
        
        await tmp158.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.Column>> recv_RowsSet_GetColumnsAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp159 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp159.Type == TMessageType.Exception)
        {
          var tmp160 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp160;
        }

        var tmp161 = new InternalStructs.RowsSet_GetColumns_result();
        await tmp161.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp161.__isset.success)
        {
          return tmp161.Success!;
        }
        if (tmp161.__isset.@e)
        {
          throw tmp161.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsSet_GetColumnsAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task RowsSet_OpenAsync(long @token, int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_OpenAsync(@token, object_rows_set_handle, cancellationToken);
        await recv_RowsSet_OpenAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_OpenAsync(long @token, int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_Open", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp162 = new InternalStructs.RowsSet_Open_args() {
          Token = @token,
          ObjectRowsSetHandle = object_rows_set_handle,
        };
        
        await tmp162.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_RowsSet_OpenAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp163 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp163.Type == TMessageType.Exception)
        {
          var tmp164 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp164;
        }

        var tmp165 = new InternalStructs.RowsSet_Open_result();
        await tmp165.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp165.__isset.@e)
        {
          throw tmp165.E!;
        }
      }

      public async global::System.Threading.Tasks.Task RowsSet_CloseAsync(long @token, int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_CloseAsync(@token, object_rows_set_handle, cancellationToken);
        await recv_RowsSet_CloseAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_CloseAsync(long @token, int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_Close", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp166 = new InternalStructs.RowsSet_Close_args() {
          Token = @token,
          ObjectRowsSetHandle = object_rows_set_handle,
        };
        
        await tmp166.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_RowsSet_CloseAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp167 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp167.Type == TMessageType.Exception)
        {
          var tmp168 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp168;
        }

        var tmp169 = new InternalStructs.RowsSet_Close_result();
        await tmp169.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp169.__isset.@e)
        {
          throw tmp169.E!;
        }
      }

      public async global::System.Threading.Tasks.Task RowsSet_ResetAsync(long @token, int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_ResetAsync(@token, object_rows_set_handle, cancellationToken);
        await recv_RowsSet_ResetAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_ResetAsync(long @token, int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_Reset", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp170 = new InternalStructs.RowsSet_Reset_args() {
          Token = @token,
          ObjectRowsSetHandle = object_rows_set_handle,
        };
        
        await tmp170.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_RowsSet_ResetAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp171 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp171.Type == TMessageType.Exception)
        {
          var tmp172 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp172;
        }

        var tmp173 = new InternalStructs.RowsSet_Reset_result();
        await tmp173.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp173.__isset.@e)
        {
          throw tmp173.E!;
        }
      }

      public async global::System.Threading.Tasks.Task RowsSet_SetContextAsync(long @token, int object_rows_set_handle, global::QueryCat.Plugins.Sdk.ContextQueryInfo? context_query_info, global::QueryCat.Plugins.Sdk.ContextInfo? context_info, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_SetContextAsync(@token, object_rows_set_handle, context_query_info, context_info, cancellationToken);
        await recv_RowsSet_SetContextAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_SetContextAsync(long @token, int object_rows_set_handle, global::QueryCat.Plugins.Sdk.ContextQueryInfo? context_query_info, global::QueryCat.Plugins.Sdk.ContextInfo? context_info, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_SetContext", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp174 = new InternalStructs.RowsSet_SetContext_args() {
          Token = @token,
          ObjectRowsSetHandle = object_rows_set_handle,
          ContextQueryInfo = context_query_info,
          ContextInfo = context_info,
        };
        
        await tmp174.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_RowsSet_SetContextAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp175 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp175.Type == TMessageType.Exception)
        {
          var tmp176 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp176;
        }

        var tmp177 = new InternalStructs.RowsSet_SetContext_result();
        await tmp177.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp177.__isset.@e)
        {
          throw tmp177.E!;
        }
      }

      public async global::System.Threading.Tasks.Task<int> RowsSet_PositionAsync(long @token, int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_PositionAsync(@token, object_rows_set_handle, cancellationToken);
        return await recv_RowsSet_PositionAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_PositionAsync(long @token, int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_Position", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp178 = new InternalStructs.RowsSet_Position_args() {
          Token = @token,
          ObjectRowsSetHandle = object_rows_set_handle,
        };
        
        await tmp178.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_RowsSet_PositionAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp179 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp179.Type == TMessageType.Exception)
        {
          var tmp180 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp180;
        }

        var tmp181 = new InternalStructs.RowsSet_Position_result();
        await tmp181.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp181.__isset.success)
        {
          return tmp181.Success;
        }
        if (tmp181.__isset.@e)
        {
          throw tmp181.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsSet_PositionAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> RowsSet_TotalRowsAsync(long @token, int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_TotalRowsAsync(@token, object_rows_set_handle, cancellationToken);
        return await recv_RowsSet_TotalRowsAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_TotalRowsAsync(long @token, int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_TotalRows", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp182 = new InternalStructs.RowsSet_TotalRows_args() {
          Token = @token,
          ObjectRowsSetHandle = object_rows_set_handle,
        };
        
        await tmp182.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_RowsSet_TotalRowsAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp183 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp183.Type == TMessageType.Exception)
        {
          var tmp184 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp184;
        }

        var tmp185 = new InternalStructs.RowsSet_TotalRows_result();
        await tmp185.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp185.__isset.success)
        {
          return tmp185.Success;
        }
        if (tmp185.__isset.@e)
        {
          throw tmp185.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsSet_TotalRowsAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task RowsSet_SeekAsync(long @token, int object_rows_set_handle, int @offset, global::QueryCat.Plugins.Sdk.CursorSeekOrigin @origin, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_SeekAsync(@token, object_rows_set_handle, @offset, @origin, cancellationToken);
        await recv_RowsSet_SeekAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_SeekAsync(long @token, int object_rows_set_handle, int @offset, global::QueryCat.Plugins.Sdk.CursorSeekOrigin @origin, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_Seek", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp186 = new InternalStructs.RowsSet_Seek_args() {
          Token = @token,
          ObjectRowsSetHandle = object_rows_set_handle,
          Offset = @offset,
          Origin = @origin,
        };
        
        await tmp186.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_RowsSet_SeekAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp187 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp187.Type == TMessageType.Exception)
        {
          var tmp188 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp188;
        }

        var tmp189 = new InternalStructs.RowsSet_Seek_result();
        await tmp189.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp189.__isset.@e)
        {
          throw tmp189.E!;
        }
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.RowsList> RowsSet_GetRowsAsync(long @token, int object_rows_set_handle, int @count, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_GetRowsAsync(@token, object_rows_set_handle, @count, cancellationToken);
        return await recv_RowsSet_GetRowsAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_GetRowsAsync(long @token, int object_rows_set_handle, int @count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_GetRows", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp190 = new InternalStructs.RowsSet_GetRows_args() {
          Token = @token,
          ObjectRowsSetHandle = object_rows_set_handle,
          Count = @count,
        };
        
        await tmp190.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.RowsList> recv_RowsSet_GetRowsAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp191 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp191.Type == TMessageType.Exception)
        {
          var tmp192 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp192;
        }

        var tmp193 = new InternalStructs.RowsSet_GetRows_result();
        await tmp193.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp193.__isset.success)
        {
          return tmp193.Success!;
        }
        if (tmp193.__isset.@e)
        {
          throw tmp193.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsSet_GetRowsAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<string>> RowsSet_GetUniqueKeyAsync(long @token, int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_GetUniqueKeyAsync(@token, object_rows_set_handle, cancellationToken);
        return await recv_RowsSet_GetUniqueKeyAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_GetUniqueKeyAsync(long @token, int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_GetUniqueKey", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp194 = new InternalStructs.RowsSet_GetUniqueKey_args() {
          Token = @token,
          ObjectRowsSetHandle = object_rows_set_handle,
        };
        
        await tmp194.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<string>> recv_RowsSet_GetUniqueKeyAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp195 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp195.Type == TMessageType.Exception)
        {
          var tmp196 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp196;
        }

        var tmp197 = new InternalStructs.RowsSet_GetUniqueKey_result();
        await tmp197.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp197.__isset.success)
        {
          return tmp197.Success!;
        }
        if (tmp197.__isset.@e)
        {
          throw tmp197.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsSet_GetUniqueKeyAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.KeyColumn>> RowsSet_GetKeyColumnsAsync(long @token, int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_GetKeyColumnsAsync(@token, object_rows_set_handle, cancellationToken);
        return await recv_RowsSet_GetKeyColumnsAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_GetKeyColumnsAsync(long @token, int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_GetKeyColumns", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp198 = new InternalStructs.RowsSet_GetKeyColumns_args() {
          Token = @token,
          ObjectRowsSetHandle = object_rows_set_handle,
        };
        
        await tmp198.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.KeyColumn>> recv_RowsSet_GetKeyColumnsAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp199 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp199.Type == TMessageType.Exception)
        {
          var tmp200 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp200;
        }

        var tmp201 = new InternalStructs.RowsSet_GetKeyColumns_result();
        await tmp201.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp201.__isset.success)
        {
          return tmp201.Success!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsSet_GetKeyColumnsAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task RowsSet_SetKeyColumnValueAsync(long @token, int object_rows_set_handle, int column_index, string @operation, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_SetKeyColumnValueAsync(@token, object_rows_set_handle, column_index, @operation, @value, cancellationToken);
        await recv_RowsSet_SetKeyColumnValueAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_SetKeyColumnValueAsync(long @token, int object_rows_set_handle, int column_index, string @operation, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_SetKeyColumnValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp202 = new InternalStructs.RowsSet_SetKeyColumnValue_args() {
          Token = @token,
          ObjectRowsSetHandle = object_rows_set_handle,
          ColumnIndex = column_index,
          Operation = @operation,
          Value = @value,
        };
        
        await tmp202.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_RowsSet_SetKeyColumnValueAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp203 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp203.Type == TMessageType.Exception)
        {
          var tmp204 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp204;
        }

        var tmp205 = new InternalStructs.RowsSet_SetKeyColumnValue_result();
        await tmp205.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_UnsetKeyColumnValueAsync(long @token, int object_rows_set_handle, int column_index, string @operation, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_UnsetKeyColumnValueAsync(@token, object_rows_set_handle, column_index, @operation, cancellationToken);
        await recv_RowsSet_UnsetKeyColumnValueAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_UnsetKeyColumnValueAsync(long @token, int object_rows_set_handle, int column_index, string @operation, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_UnsetKeyColumnValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp206 = new InternalStructs.RowsSet_UnsetKeyColumnValue_args() {
          Token = @token,
          ObjectRowsSetHandle = object_rows_set_handle,
          ColumnIndex = column_index,
          Operation = @operation,
        };
        
        await tmp206.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_RowsSet_UnsetKeyColumnValueAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp207 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp207.Type == TMessageType.Exception)
        {
          var tmp208 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp208;
        }

        var tmp209 = new InternalStructs.RowsSet_UnsetKeyColumnValue_result();
        await tmp209.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.QueryCatErrorCode> RowsSet_UpdateValueAsync(long @token, int object_rows_set_handle, int column_index, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_UpdateValueAsync(@token, object_rows_set_handle, column_index, @value, cancellationToken);
        return await recv_RowsSet_UpdateValueAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_UpdateValueAsync(long @token, int object_rows_set_handle, int column_index, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_UpdateValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp210 = new InternalStructs.RowsSet_UpdateValue_args() {
          Token = @token,
          ObjectRowsSetHandle = object_rows_set_handle,
          ColumnIndex = column_index,
          Value = @value,
        };
        
        await tmp210.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.QueryCatErrorCode> recv_RowsSet_UpdateValueAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp211 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp211.Type == TMessageType.Exception)
        {
          var tmp212 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp212;
        }

        var tmp213 = new InternalStructs.RowsSet_UpdateValue_result();
        await tmp213.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp213.__isset.success)
        {
          return tmp213.Success;
        }
        if (tmp213.__isset.@e)
        {
          throw tmp213.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsSet_UpdateValueAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.QueryCatErrorCode> RowsSet_WriteValuesAsync(long @token, int object_rows_set_handle, List<global::QueryCat.Plugins.Sdk.VariantValue>? @values, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_WriteValuesAsync(@token, object_rows_set_handle, @values, cancellationToken);
        return await recv_RowsSet_WriteValuesAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_WriteValuesAsync(long @token, int object_rows_set_handle, List<global::QueryCat.Plugins.Sdk.VariantValue>? @values, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_WriteValues", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp214 = new InternalStructs.RowsSet_WriteValues_args() {
          Token = @token,
          ObjectRowsSetHandle = object_rows_set_handle,
          Values = @values,
        };
        
        await tmp214.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.QueryCatErrorCode> recv_RowsSet_WriteValuesAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp215 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp215.Type == TMessageType.Exception)
        {
          var tmp216 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp216;
        }

        var tmp217 = new InternalStructs.RowsSet_WriteValues_result();
        await tmp217.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp217.__isset.success)
        {
          return tmp217.Success;
        }
        if (tmp217.__isset.@e)
        {
          throw tmp217.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsSet_WriteValuesAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.QueryCatErrorCode> RowsSet_DeleteRowAsync(long @token, int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_DeleteRowAsync(@token, object_rows_set_handle, cancellationToken);
        return await recv_RowsSet_DeleteRowAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_DeleteRowAsync(long @token, int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_DeleteRow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp218 = new InternalStructs.RowsSet_DeleteRow_args() {
          Token = @token,
          ObjectRowsSetHandle = object_rows_set_handle,
        };
        
        await tmp218.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.QueryCatErrorCode> recv_RowsSet_DeleteRowAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp219 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp219.Type == TMessageType.Exception)
        {
          var tmp220 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp220;
        }

        var tmp221 = new InternalStructs.RowsSet_DeleteRow_result();
        await tmp221.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp221.__isset.success)
        {
          return tmp221.Success;
        }
        if (tmp221.__isset.@e)
        {
          throw tmp221.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsSet_DeleteRowAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ModelDescription> RowsSet_GetDescriptionAsync(long @token, int object_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_GetDescriptionAsync(@token, object_handle, cancellationToken);
        return await recv_RowsSet_GetDescriptionAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_GetDescriptionAsync(long @token, int object_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_GetDescription", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp222 = new InternalStructs.RowsSet_GetDescription_args() {
          Token = @token,
          ObjectHandle = object_handle,
        };
        
        await tmp222.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ModelDescription> recv_RowsSet_GetDescriptionAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp223 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp223.Type == TMessageType.Exception)
        {
          var tmp224 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp224;
        }

        var tmp225 = new InternalStructs.RowsSet_GetDescription_result();
        await tmp225.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp225.__isset.success)
        {
          return tmp225.Success!;
        }
        if (tmp225.__isset.@e)
        {
          throw tmp225.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsSet_GetDescriptionAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> RowsFormatter_OpenInputAsync(long @token, int object_rows_formatter_handle, int object_blob_handle, string? @key, CancellationToken cancellationToken = default)
      {
        await send_RowsFormatter_OpenInputAsync(@token, object_rows_formatter_handle, object_blob_handle, @key, cancellationToken);
        return await recv_RowsFormatter_OpenInputAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsFormatter_OpenInputAsync(long @token, int object_rows_formatter_handle, int object_blob_handle, string? @key, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsFormatter_OpenInput", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp226 = new InternalStructs.RowsFormatter_OpenInput_args() {
          Token = @token,
          ObjectRowsFormatterHandle = object_rows_formatter_handle,
          ObjectBlobHandle = object_blob_handle,
          Key = @key,
        };
        
        await tmp226.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_RowsFormatter_OpenInputAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp227 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp227.Type == TMessageType.Exception)
        {
          var tmp228 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp228;
        }

        var tmp229 = new InternalStructs.RowsFormatter_OpenInput_result();
        await tmp229.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp229.__isset.success)
        {
          return tmp229.Success;
        }
        if (tmp229.__isset.@e)
        {
          throw tmp229.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsFormatter_OpenInputAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> RowsFormatter_OpenOutputAsync(long @token, int object_rows_formatter_handle, int object_blob_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsFormatter_OpenOutputAsync(@token, object_rows_formatter_handle, object_blob_handle, cancellationToken);
        return await recv_RowsFormatter_OpenOutputAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsFormatter_OpenOutputAsync(long @token, int object_rows_formatter_handle, int object_blob_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsFormatter_OpenOutput", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp230 = new InternalStructs.RowsFormatter_OpenOutput_args() {
          Token = @token,
          ObjectRowsFormatterHandle = object_rows_formatter_handle,
          ObjectBlobHandle = object_blob_handle,
        };
        
        await tmp230.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_RowsFormatter_OpenOutputAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp231 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp231.Type == TMessageType.Exception)
        {
          var tmp232 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp232;
        }

        var tmp233 = new InternalStructs.RowsFormatter_OpenOutput_result();
        await tmp233.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp233.__isset.success)
        {
          return tmp233.Success;
        }
        if (tmp233.__isset.@e)
        {
          throw tmp233.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsFormatter_OpenOutputAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.QuestionResponse> AnswerAgent_AskAsync(long @token, int object_answer_agent_handle, global::QueryCat.Plugins.Sdk.QuestionRequest? @request, CancellationToken cancellationToken = default)
      {
        await send_AnswerAgent_AskAsync(@token, object_answer_agent_handle, @request, cancellationToken);
        return await recv_AnswerAgent_AskAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_AnswerAgent_AskAsync(long @token, int object_answer_agent_handle, global::QueryCat.Plugins.Sdk.QuestionRequest? @request, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("AnswerAgent_Ask", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp234 = new InternalStructs.AnswerAgent_Ask_args() {
          Token = @token,
          ObjectAnswerAgentHandle = object_answer_agent_handle,
          Request = @request,
        };
        
        await tmp234.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.QuestionResponse> recv_AnswerAgent_AskAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp235 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp235.Type == TMessageType.Exception)
        {
          var tmp236 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp236;
        }

        var tmp237 = new InternalStructs.AnswerAgent_Ask_result();
        await tmp237.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp237.__isset.success)
        {
          return tmp237.Success!;
        }
        if (tmp237.__isset.@e)
        {
          throw tmp237.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "AnswerAgent_AskAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task Thread_CloseHandleAsync(long @token, int @handle, CancellationToken cancellationToken = default)
      {
        await send_Thread_CloseHandleAsync(@token, @handle, cancellationToken);
        await recv_Thread_CloseHandleAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Thread_CloseHandleAsync(long @token, int @handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Thread_CloseHandle", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp238 = new InternalStructs.Thread_CloseHandle_args() {
          Token = @token,
          Handle = @handle,
        };
        
        await tmp238.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_Thread_CloseHandleAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp239 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp239.Type == TMessageType.Exception)
        {
          var tmp240 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp240;
        }

        var tmp241 = new InternalStructs.Thread_CloseHandle_result();
        await tmp241.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp241.__isset.@e)
        {
          throw tmp241.E!;
        }
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ObjectValue> Thread_GetHandleInfoAsync(long @token, int @handle, CancellationToken cancellationToken = default)
      {
        await send_Thread_GetHandleInfoAsync(@token, @handle, cancellationToken);
        return await recv_Thread_GetHandleInfoAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Thread_GetHandleInfoAsync(long @token, int @handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Thread_GetHandleInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp242 = new InternalStructs.Thread_GetHandleInfo_args() {
          Token = @token,
          Handle = @handle,
        };
        
        await tmp242.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ObjectValue> recv_Thread_GetHandleInfoAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp243 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp243.Type == TMessageType.Exception)
        {
          var tmp244 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp244;
        }

        var tmp245 = new InternalStructs.Thread_GetHandleInfo_result();
        await tmp245.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp245.__isset.success)
        {
          return tmp245.Success!;
        }
        if (tmp245.__isset.@e)
        {
          throw tmp245.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Thread_GetHandleInfoAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ObjectValue> Thread_GetHandleFromVariableAsync(long @token, string @name, CancellationToken cancellationToken = default)
      {
        await send_Thread_GetHandleFromVariableAsync(@token, @name, cancellationToken);
        return await recv_Thread_GetHandleFromVariableAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Thread_GetHandleFromVariableAsync(long @token, string @name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Thread_GetHandleFromVariable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp246 = new InternalStructs.Thread_GetHandleFromVariable_args() {
          Token = @token,
          Name = @name,
        };
        
        await tmp246.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ObjectValue> recv_Thread_GetHandleFromVariableAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp247 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp247.Type == TMessageType.Exception)
        {
          var tmp248 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp248;
        }

        var tmp249 = new InternalStructs.Thread_GetHandleFromVariable_result();
        await tmp249.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp249.__isset.success)
        {
          return tmp249.Success!;
        }
        if (tmp249.__isset.@e)
        {
          throw tmp249.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Thread_GetHandleFromVariableAsync failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor>? _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor>? logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["CallFunction"] = CallFunction_ProcessAsync;
        processMap_["Blob_Read"] = Blob_Read_ProcessAsync;
        processMap_["Blob_Write"] = Blob_Write_ProcessAsync;
        processMap_["Blob_GetLength"] = Blob_GetLength_ProcessAsync;
        processMap_["Blob_GetContentType"] = Blob_GetContentType_ProcessAsync;
        processMap_["Blob_GetName"] = Blob_GetName_ProcessAsync;
        processMap_["RowsSet_GetColumns"] = RowsSet_GetColumns_ProcessAsync;
        processMap_["RowsSet_Open"] = RowsSet_Open_ProcessAsync;
        processMap_["RowsSet_Close"] = RowsSet_Close_ProcessAsync;
        processMap_["RowsSet_Reset"] = RowsSet_Reset_ProcessAsync;
        processMap_["RowsSet_SetContext"] = RowsSet_SetContext_ProcessAsync;
        processMap_["RowsSet_Position"] = RowsSet_Position_ProcessAsync;
        processMap_["RowsSet_TotalRows"] = RowsSet_TotalRows_ProcessAsync;
        processMap_["RowsSet_Seek"] = RowsSet_Seek_ProcessAsync;
        processMap_["RowsSet_GetRows"] = RowsSet_GetRows_ProcessAsync;
        processMap_["RowsSet_GetUniqueKey"] = RowsSet_GetUniqueKey_ProcessAsync;
        processMap_["RowsSet_GetKeyColumns"] = RowsSet_GetKeyColumns_ProcessAsync;
        processMap_["RowsSet_SetKeyColumnValue"] = RowsSet_SetKeyColumnValue_ProcessAsync;
        processMap_["RowsSet_UnsetKeyColumnValue"] = RowsSet_UnsetKeyColumnValue_ProcessAsync;
        processMap_["RowsSet_UpdateValue"] = RowsSet_UpdateValue_ProcessAsync;
        processMap_["RowsSet_WriteValues"] = RowsSet_WriteValues_ProcessAsync;
        processMap_["RowsSet_DeleteRow"] = RowsSet_DeleteRow_ProcessAsync;
        processMap_["RowsSet_GetDescription"] = RowsSet_GetDescription_ProcessAsync;
        processMap_["RowsFormatter_OpenInput"] = RowsFormatter_OpenInput_ProcessAsync;
        processMap_["RowsFormatter_OpenOutput"] = RowsFormatter_OpenOutput_ProcessAsync;
        processMap_["AnswerAgent_Ask"] = AnswerAgent_Ask_ProcessAsync;
        processMap_["Thread_CloseHandle"] = Thread_CloseHandle_ProcessAsync;
        processMap_["Thread_GetHandleInfo"] = Thread_GetHandleInfo_ProcessAsync;
        processMap_["Thread_GetHandleFromVariable"] = Thread_GetHandleFromVariable_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = [];

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task CallFunction_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp250 = new InternalStructs.CallFunction_args();
        await tmp250.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp251 = new InternalStructs.CallFunction_result();
        try
        {
          try
          {
            tmp251.Success = await _iAsync.CallFunctionAsync(tmp250.Token, tmp250.FunctionName, tmp250.Args, tmp250.ObjectHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp252)
          {
            tmp251.E = tmp252;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("CallFunction", TMessageType.Reply, seqid), cancellationToken); 
          await tmp251.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp253)
        {
          var tmp254 = $"Error occurred in {GetType().FullName}: {tmp253.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp253, tmp254);
          else
            Console.Error.WriteLine(tmp254);
          var tmp255 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("CallFunction", TMessageType.Exception, seqid), cancellationToken);
          await tmp255.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Blob_Read_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp256 = new InternalStructs.Blob_Read_args();
        await tmp256.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp257 = new InternalStructs.Blob_Read_result();
        try
        {
          try
          {
            tmp257.Success = await _iAsync.Blob_ReadAsync(tmp256.Token, tmp256.ObjectBlobHandle, tmp256.Offset, tmp256.Count, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp258)
          {
            tmp257.E = tmp258;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_Read", TMessageType.Reply, seqid), cancellationToken); 
          await tmp257.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp259)
        {
          var tmp260 = $"Error occurred in {GetType().FullName}: {tmp259.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp259, tmp260);
          else
            Console.Error.WriteLine(tmp260);
          var tmp261 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_Read", TMessageType.Exception, seqid), cancellationToken);
          await tmp261.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Blob_Write_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp262 = new InternalStructs.Blob_Write_args();
        await tmp262.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp263 = new InternalStructs.Blob_Write_result();
        try
        {
          try
          {
            tmp263.Success = await _iAsync.Blob_WriteAsync(tmp262.Token, tmp262.ObjectBlobHandle, tmp262.Bytes, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp264)
          {
            tmp263.E = tmp264;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_Write", TMessageType.Reply, seqid), cancellationToken); 
          await tmp263.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp265)
        {
          var tmp266 = $"Error occurred in {GetType().FullName}: {tmp265.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp265, tmp266);
          else
            Console.Error.WriteLine(tmp266);
          var tmp267 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_Write", TMessageType.Exception, seqid), cancellationToken);
          await tmp267.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Blob_GetLength_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp268 = new InternalStructs.Blob_GetLength_args();
        await tmp268.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp269 = new InternalStructs.Blob_GetLength_result();
        try
        {
          try
          {
            tmp269.Success = await _iAsync.Blob_GetLengthAsync(tmp268.Token, tmp268.ObjectBlobHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp270)
          {
            tmp269.E = tmp270;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_GetLength", TMessageType.Reply, seqid), cancellationToken); 
          await tmp269.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp271)
        {
          var tmp272 = $"Error occurred in {GetType().FullName}: {tmp271.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp271, tmp272);
          else
            Console.Error.WriteLine(tmp272);
          var tmp273 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_GetLength", TMessageType.Exception, seqid), cancellationToken);
          await tmp273.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Blob_GetContentType_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp274 = new InternalStructs.Blob_GetContentType_args();
        await tmp274.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp275 = new InternalStructs.Blob_GetContentType_result();
        try
        {
          try
          {
            tmp275.Success = await _iAsync.Blob_GetContentTypeAsync(tmp274.Token, tmp274.ObjectBlobHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp276)
          {
            tmp275.E = tmp276;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_GetContentType", TMessageType.Reply, seqid), cancellationToken); 
          await tmp275.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp277)
        {
          var tmp278 = $"Error occurred in {GetType().FullName}: {tmp277.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp277, tmp278);
          else
            Console.Error.WriteLine(tmp278);
          var tmp279 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_GetContentType", TMessageType.Exception, seqid), cancellationToken);
          await tmp279.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Blob_GetName_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp280 = new InternalStructs.Blob_GetName_args();
        await tmp280.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp281 = new InternalStructs.Blob_GetName_result();
        try
        {
          try
          {
            tmp281.Success = await _iAsync.Blob_GetNameAsync(tmp280.Token, tmp280.ObjectBlobHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp282)
          {
            tmp281.E = tmp282;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_GetName", TMessageType.Reply, seqid), cancellationToken); 
          await tmp281.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp283)
        {
          var tmp284 = $"Error occurred in {GetType().FullName}: {tmp283.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp283, tmp284);
          else
            Console.Error.WriteLine(tmp284);
          var tmp285 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_GetName", TMessageType.Exception, seqid), cancellationToken);
          await tmp285.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_GetColumns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp286 = new InternalStructs.RowsSet_GetColumns_args();
        await tmp286.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp287 = new InternalStructs.RowsSet_GetColumns_result();
        try
        {
          try
          {
            tmp287.Success = await _iAsync.RowsSet_GetColumnsAsync(tmp286.Token, tmp286.ObjectRowsSetHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp288)
          {
            tmp287.E = tmp288;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetColumns", TMessageType.Reply, seqid), cancellationToken); 
          await tmp287.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp289)
        {
          var tmp290 = $"Error occurred in {GetType().FullName}: {tmp289.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp289, tmp290);
          else
            Console.Error.WriteLine(tmp290);
          var tmp291 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetColumns", TMessageType.Exception, seqid), cancellationToken);
          await tmp291.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_Open_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp292 = new InternalStructs.RowsSet_Open_args();
        await tmp292.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp293 = new InternalStructs.RowsSet_Open_result();
        try
        {
          try
          {
            await _iAsync.RowsSet_OpenAsync(tmp292.Token, tmp292.ObjectRowsSetHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp294)
          {
            tmp293.E = tmp294;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Open", TMessageType.Reply, seqid), cancellationToken); 
          await tmp293.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp295)
        {
          var tmp296 = $"Error occurred in {GetType().FullName}: {tmp295.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp295, tmp296);
          else
            Console.Error.WriteLine(tmp296);
          var tmp297 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Open", TMessageType.Exception, seqid), cancellationToken);
          await tmp297.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_Close_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp298 = new InternalStructs.RowsSet_Close_args();
        await tmp298.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp299 = new InternalStructs.RowsSet_Close_result();
        try
        {
          try
          {
            await _iAsync.RowsSet_CloseAsync(tmp298.Token, tmp298.ObjectRowsSetHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp300)
          {
            tmp299.E = tmp300;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Close", TMessageType.Reply, seqid), cancellationToken); 
          await tmp299.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp301)
        {
          var tmp302 = $"Error occurred in {GetType().FullName}: {tmp301.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp301, tmp302);
          else
            Console.Error.WriteLine(tmp302);
          var tmp303 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Close", TMessageType.Exception, seqid), cancellationToken);
          await tmp303.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_Reset_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp304 = new InternalStructs.RowsSet_Reset_args();
        await tmp304.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp305 = new InternalStructs.RowsSet_Reset_result();
        try
        {
          try
          {
            await _iAsync.RowsSet_ResetAsync(tmp304.Token, tmp304.ObjectRowsSetHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp306)
          {
            tmp305.E = tmp306;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Reset", TMessageType.Reply, seqid), cancellationToken); 
          await tmp305.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp307)
        {
          var tmp308 = $"Error occurred in {GetType().FullName}: {tmp307.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp307, tmp308);
          else
            Console.Error.WriteLine(tmp308);
          var tmp309 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Reset", TMessageType.Exception, seqid), cancellationToken);
          await tmp309.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_SetContext_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp310 = new InternalStructs.RowsSet_SetContext_args();
        await tmp310.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp311 = new InternalStructs.RowsSet_SetContext_result();
        try
        {
          try
          {
            await _iAsync.RowsSet_SetContextAsync(tmp310.Token, tmp310.ObjectRowsSetHandle, tmp310.ContextQueryInfo, tmp310.ContextInfo, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp312)
          {
            tmp311.E = tmp312;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_SetContext", TMessageType.Reply, seqid), cancellationToken); 
          await tmp311.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp313)
        {
          var tmp314 = $"Error occurred in {GetType().FullName}: {tmp313.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp313, tmp314);
          else
            Console.Error.WriteLine(tmp314);
          var tmp315 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_SetContext", TMessageType.Exception, seqid), cancellationToken);
          await tmp315.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_Position_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp316 = new InternalStructs.RowsSet_Position_args();
        await tmp316.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp317 = new InternalStructs.RowsSet_Position_result();
        try
        {
          try
          {
            tmp317.Success = await _iAsync.RowsSet_PositionAsync(tmp316.Token, tmp316.ObjectRowsSetHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp318)
          {
            tmp317.E = tmp318;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Position", TMessageType.Reply, seqid), cancellationToken); 
          await tmp317.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp319)
        {
          var tmp320 = $"Error occurred in {GetType().FullName}: {tmp319.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp319, tmp320);
          else
            Console.Error.WriteLine(tmp320);
          var tmp321 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Position", TMessageType.Exception, seqid), cancellationToken);
          await tmp321.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_TotalRows_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp322 = new InternalStructs.RowsSet_TotalRows_args();
        await tmp322.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp323 = new InternalStructs.RowsSet_TotalRows_result();
        try
        {
          try
          {
            tmp323.Success = await _iAsync.RowsSet_TotalRowsAsync(tmp322.Token, tmp322.ObjectRowsSetHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp324)
          {
            tmp323.E = tmp324;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_TotalRows", TMessageType.Reply, seqid), cancellationToken); 
          await tmp323.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp325)
        {
          var tmp326 = $"Error occurred in {GetType().FullName}: {tmp325.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp325, tmp326);
          else
            Console.Error.WriteLine(tmp326);
          var tmp327 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_TotalRows", TMessageType.Exception, seqid), cancellationToken);
          await tmp327.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_Seek_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp328 = new InternalStructs.RowsSet_Seek_args();
        await tmp328.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp329 = new InternalStructs.RowsSet_Seek_result();
        try
        {
          try
          {
            await _iAsync.RowsSet_SeekAsync(tmp328.Token, tmp328.ObjectRowsSetHandle, tmp328.Offset, tmp328.Origin, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp330)
          {
            tmp329.E = tmp330;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Seek", TMessageType.Reply, seqid), cancellationToken); 
          await tmp329.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp331)
        {
          var tmp332 = $"Error occurred in {GetType().FullName}: {tmp331.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp331, tmp332);
          else
            Console.Error.WriteLine(tmp332);
          var tmp333 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Seek", TMessageType.Exception, seqid), cancellationToken);
          await tmp333.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_GetRows_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp334 = new InternalStructs.RowsSet_GetRows_args();
        await tmp334.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp335 = new InternalStructs.RowsSet_GetRows_result();
        try
        {
          try
          {
            tmp335.Success = await _iAsync.RowsSet_GetRowsAsync(tmp334.Token, tmp334.ObjectRowsSetHandle, tmp334.Count, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp336)
          {
            tmp335.E = tmp336;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetRows", TMessageType.Reply, seqid), cancellationToken); 
          await tmp335.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp337)
        {
          var tmp338 = $"Error occurred in {GetType().FullName}: {tmp337.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp337, tmp338);
          else
            Console.Error.WriteLine(tmp338);
          var tmp339 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetRows", TMessageType.Exception, seqid), cancellationToken);
          await tmp339.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_GetUniqueKey_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp340 = new InternalStructs.RowsSet_GetUniqueKey_args();
        await tmp340.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp341 = new InternalStructs.RowsSet_GetUniqueKey_result();
        try
        {
          try
          {
            tmp341.Success = await _iAsync.RowsSet_GetUniqueKeyAsync(tmp340.Token, tmp340.ObjectRowsSetHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp342)
          {
            tmp341.E = tmp342;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetUniqueKey", TMessageType.Reply, seqid), cancellationToken); 
          await tmp341.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp343)
        {
          var tmp344 = $"Error occurred in {GetType().FullName}: {tmp343.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp343, tmp344);
          else
            Console.Error.WriteLine(tmp344);
          var tmp345 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetUniqueKey", TMessageType.Exception, seqid), cancellationToken);
          await tmp345.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_GetKeyColumns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp346 = new InternalStructs.RowsSet_GetKeyColumns_args();
        await tmp346.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp347 = new InternalStructs.RowsSet_GetKeyColumns_result();
        try
        {
          tmp347.Success = await _iAsync.RowsSet_GetKeyColumnsAsync(tmp346.Token, tmp346.ObjectRowsSetHandle, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetKeyColumns", TMessageType.Reply, seqid), cancellationToken); 
          await tmp347.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp348)
        {
          var tmp349 = $"Error occurred in {GetType().FullName}: {tmp348.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp348, tmp349);
          else
            Console.Error.WriteLine(tmp349);
          var tmp350 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetKeyColumns", TMessageType.Exception, seqid), cancellationToken);
          await tmp350.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_SetKeyColumnValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp351 = new InternalStructs.RowsSet_SetKeyColumnValue_args();
        await tmp351.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp352 = new InternalStructs.RowsSet_SetKeyColumnValue_result();
        try
        {
          await _iAsync.RowsSet_SetKeyColumnValueAsync(tmp351.Token, tmp351.ObjectRowsSetHandle, tmp351.ColumnIndex, tmp351.Operation, tmp351.Value, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_SetKeyColumnValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp352.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp353)
        {
          var tmp354 = $"Error occurred in {GetType().FullName}: {tmp353.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp353, tmp354);
          else
            Console.Error.WriteLine(tmp354);
          var tmp355 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_SetKeyColumnValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp355.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_UnsetKeyColumnValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp356 = new InternalStructs.RowsSet_UnsetKeyColumnValue_args();
        await tmp356.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp357 = new InternalStructs.RowsSet_UnsetKeyColumnValue_result();
        try
        {
          await _iAsync.RowsSet_UnsetKeyColumnValueAsync(tmp356.Token, tmp356.ObjectRowsSetHandle, tmp356.ColumnIndex, tmp356.Operation, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_UnsetKeyColumnValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp357.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp358)
        {
          var tmp359 = $"Error occurred in {GetType().FullName}: {tmp358.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp358, tmp359);
          else
            Console.Error.WriteLine(tmp359);
          var tmp360 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_UnsetKeyColumnValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp360.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_UpdateValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp361 = new InternalStructs.RowsSet_UpdateValue_args();
        await tmp361.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp362 = new InternalStructs.RowsSet_UpdateValue_result();
        try
        {
          try
          {
            tmp362.Success = await _iAsync.RowsSet_UpdateValueAsync(tmp361.Token, tmp361.ObjectRowsSetHandle, tmp361.ColumnIndex, tmp361.Value, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp363)
          {
            tmp362.E = tmp363;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_UpdateValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp362.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp364)
        {
          var tmp365 = $"Error occurred in {GetType().FullName}: {tmp364.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp364, tmp365);
          else
            Console.Error.WriteLine(tmp365);
          var tmp366 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_UpdateValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp366.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_WriteValues_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp367 = new InternalStructs.RowsSet_WriteValues_args();
        await tmp367.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp368 = new InternalStructs.RowsSet_WriteValues_result();
        try
        {
          try
          {
            tmp368.Success = await _iAsync.RowsSet_WriteValuesAsync(tmp367.Token, tmp367.ObjectRowsSetHandle, tmp367.Values, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp369)
          {
            tmp368.E = tmp369;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_WriteValues", TMessageType.Reply, seqid), cancellationToken); 
          await tmp368.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp370)
        {
          var tmp371 = $"Error occurred in {GetType().FullName}: {tmp370.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp370, tmp371);
          else
            Console.Error.WriteLine(tmp371);
          var tmp372 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_WriteValues", TMessageType.Exception, seqid), cancellationToken);
          await tmp372.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_DeleteRow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp373 = new InternalStructs.RowsSet_DeleteRow_args();
        await tmp373.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp374 = new InternalStructs.RowsSet_DeleteRow_result();
        try
        {
          try
          {
            tmp374.Success = await _iAsync.RowsSet_DeleteRowAsync(tmp373.Token, tmp373.ObjectRowsSetHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp375)
          {
            tmp374.E = tmp375;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_DeleteRow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp374.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp376)
        {
          var tmp377 = $"Error occurred in {GetType().FullName}: {tmp376.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp376, tmp377);
          else
            Console.Error.WriteLine(tmp377);
          var tmp378 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_DeleteRow", TMessageType.Exception, seqid), cancellationToken);
          await tmp378.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_GetDescription_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp379 = new InternalStructs.RowsSet_GetDescription_args();
        await tmp379.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp380 = new InternalStructs.RowsSet_GetDescription_result();
        try
        {
          try
          {
            tmp380.Success = await _iAsync.RowsSet_GetDescriptionAsync(tmp379.Token, tmp379.ObjectHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp381)
          {
            tmp380.E = tmp381;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetDescription", TMessageType.Reply, seqid), cancellationToken); 
          await tmp380.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp382)
        {
          var tmp383 = $"Error occurred in {GetType().FullName}: {tmp382.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp382, tmp383);
          else
            Console.Error.WriteLine(tmp383);
          var tmp384 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetDescription", TMessageType.Exception, seqid), cancellationToken);
          await tmp384.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsFormatter_OpenInput_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp385 = new InternalStructs.RowsFormatter_OpenInput_args();
        await tmp385.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp386 = new InternalStructs.RowsFormatter_OpenInput_result();
        try
        {
          try
          {
            tmp386.Success = await _iAsync.RowsFormatter_OpenInputAsync(tmp385.Token, tmp385.ObjectRowsFormatterHandle, tmp385.ObjectBlobHandle, tmp385.Key, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp387)
          {
            tmp386.E = tmp387;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsFormatter_OpenInput", TMessageType.Reply, seqid), cancellationToken); 
          await tmp386.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp388)
        {
          var tmp389 = $"Error occurred in {GetType().FullName}: {tmp388.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp388, tmp389);
          else
            Console.Error.WriteLine(tmp389);
          var tmp390 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsFormatter_OpenInput", TMessageType.Exception, seqid), cancellationToken);
          await tmp390.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsFormatter_OpenOutput_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp391 = new InternalStructs.RowsFormatter_OpenOutput_args();
        await tmp391.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp392 = new InternalStructs.RowsFormatter_OpenOutput_result();
        try
        {
          try
          {
            tmp392.Success = await _iAsync.RowsFormatter_OpenOutputAsync(tmp391.Token, tmp391.ObjectRowsFormatterHandle, tmp391.ObjectBlobHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp393)
          {
            tmp392.E = tmp393;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsFormatter_OpenOutput", TMessageType.Reply, seqid), cancellationToken); 
          await tmp392.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp394)
        {
          var tmp395 = $"Error occurred in {GetType().FullName}: {tmp394.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp394, tmp395);
          else
            Console.Error.WriteLine(tmp395);
          var tmp396 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsFormatter_OpenOutput", TMessageType.Exception, seqid), cancellationToken);
          await tmp396.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task AnswerAgent_Ask_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp397 = new InternalStructs.AnswerAgent_Ask_args();
        await tmp397.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp398 = new InternalStructs.AnswerAgent_Ask_result();
        try
        {
          try
          {
            tmp398.Success = await _iAsync.AnswerAgent_AskAsync(tmp397.Token, tmp397.ObjectAnswerAgentHandle, tmp397.Request, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp399)
          {
            tmp398.E = tmp399;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("AnswerAgent_Ask", TMessageType.Reply, seqid), cancellationToken); 
          await tmp398.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp400)
        {
          var tmp401 = $"Error occurred in {GetType().FullName}: {tmp400.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp400, tmp401);
          else
            Console.Error.WriteLine(tmp401);
          var tmp402 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("AnswerAgent_Ask", TMessageType.Exception, seqid), cancellationToken);
          await tmp402.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Thread_CloseHandle_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp403 = new InternalStructs.Thread_CloseHandle_args();
        await tmp403.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp404 = new InternalStructs.Thread_CloseHandle_result();
        try
        {
          try
          {
            await _iAsync.Thread_CloseHandleAsync(tmp403.Token, tmp403.Handle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp405)
          {
            tmp404.E = tmp405;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Thread_CloseHandle", TMessageType.Reply, seqid), cancellationToken); 
          await tmp404.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp406)
        {
          var tmp407 = $"Error occurred in {GetType().FullName}: {tmp406.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp406, tmp407);
          else
            Console.Error.WriteLine(tmp407);
          var tmp408 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Thread_CloseHandle", TMessageType.Exception, seqid), cancellationToken);
          await tmp408.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Thread_GetHandleInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp409 = new InternalStructs.Thread_GetHandleInfo_args();
        await tmp409.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp410 = new InternalStructs.Thread_GetHandleInfo_result();
        try
        {
          try
          {
            tmp410.Success = await _iAsync.Thread_GetHandleInfoAsync(tmp409.Token, tmp409.Handle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp411)
          {
            tmp410.E = tmp411;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Thread_GetHandleInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp410.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp412)
        {
          var tmp413 = $"Error occurred in {GetType().FullName}: {tmp412.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp412, tmp413);
          else
            Console.Error.WriteLine(tmp413);
          var tmp414 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Thread_GetHandleInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp414.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Thread_GetHandleFromVariable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp415 = new InternalStructs.Thread_GetHandleFromVariable_args();
        await tmp415.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp416 = new InternalStructs.Thread_GetHandleFromVariable_result();
        try
        {
          try
          {
            tmp416.Success = await _iAsync.Thread_GetHandleFromVariableAsync(tmp415.Token, tmp415.Name, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp417)
          {
            tmp416.E = tmp417;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Thread_GetHandleFromVariable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp416.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp418)
        {
          var tmp419 = $"Error occurred in {GetType().FullName}: {tmp418.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp418, tmp419);
          else
            Console.Error.WriteLine(tmp419);
          var tmp420 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Thread_GetHandleFromVariable", TMessageType.Exception, seqid), cancellationToken);
          await tmp420.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class CallFunction_args : TBase
      {
        private int _object_handle;

        public long Token { get; set; } = 0;

        public string FunctionName { get; set; } = string.Empty;

        public List<global::QueryCat.Plugins.Sdk.VariantValue>? Args { get; set; }

        public int ObjectHandle
        {
          get
          {
            return _object_handle;
          }
          set
          {
            __isset.object_handle = true;
            this._object_handle = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool object_handle;
        }

        public CallFunction_args()
        {
        }

        public CallFunction_args(long @token, string function_name, List<global::QueryCat.Plugins.Sdk.VariantValue>? @args) : this()
        {
          this.Token = @token;
          this.FunctionName = function_name;
          this.Args = @args;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_function_name = false;
            bool isset_args = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    FunctionName = await iprot.ReadStringAsync(cancellationToken);
                    isset_function_name = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list421 = await iprot.ReadListBeginAsync(cancellationToken);
                      Args = new List<global::QueryCat.Plugins.Sdk.VariantValue>(_list421.Count);
                      for(int _i422 = 0; _i422 < _list421.Count; ++_i422)
                      {
                        global::QueryCat.Plugins.Sdk.VariantValue _elem423;
                        _elem423 = new global::QueryCat.Plugins.Sdk.VariantValue();
                        await _elem423.ReadAsync(iprot, cancellationToken);
                        Args.Add(_elem423);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                    isset_args = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_function_name)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_args)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp424 = new TStruct("CallFunction_args");
            await oprot.WriteStructBeginAsync(tmp424, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp425 = new TField();
            tmp425.Name = "token";
            tmp425.Type = TType.I64;
            tmp425.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp425, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((FunctionName != null))
            {
              tmp425.Name = "function_name";
              tmp425.Type = TType.String;
              tmp425.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp425, cancellationToken);
              await oprot.WriteStringAsync(FunctionName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Args != null))
            {
              tmp425.Name = "args";
              tmp425.Type = TType.List;
              tmp425.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp425, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Args.Count), cancellationToken);
              foreach (global::QueryCat.Plugins.Sdk.VariantValue _iter426 in Args)
              {
                await _iter426.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.object_handle)
            {
              tmp425.Name = "object_handle";
              tmp425.Type = TType.I32;
              tmp425.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp425, cancellationToken);
              await oprot.WriteI32Async(ObjectHandle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not CallFunction_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(FunctionName, other.FunctionName)
            && TCollections.Equals(Args, other.Args)
            && ((__isset.object_handle == other.__isset.object_handle) && ((!__isset.object_handle) || (global::System.Object.Equals(ObjectHandle, other.ObjectHandle))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            if((FunctionName != null))
            {
              hashcode = (hashcode * 397) + FunctionName.GetHashCode();
            }
            if((Args != null))
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Args);
            }
            if(__isset.object_handle)
            {
              hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp427 = new StringBuilder("CallFunction_args(");
          tmp427.Append(", Token: ");
          Token.ToString(tmp427);
          if((FunctionName != null))
          {
            tmp427.Append(", FunctionName: ");
            FunctionName.ToString(tmp427);
          }
          if((Args != null))
          {
            tmp427.Append(", Args: ");
            Args.ToString(tmp427);
          }
          if(__isset.object_handle)
          {
            tmp427.Append(", ObjectHandle: ");
            ObjectHandle.ToString(tmp427);
          }
          tmp427.Append(')');
          return tmp427.ToString();
        }
      }


      public partial class CallFunction_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.VariantValue? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.VariantValue? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public CallFunction_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp429 = new TStruct("CallFunction_result");
            await oprot.WriteStructBeginAsync(tmp429, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp430 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp430.Name = "Success";
                tmp430.Type = TType.Struct;
                tmp430.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp430, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp430.Name = "E";
                tmp430.Type = TType.Struct;
                tmp430.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp430, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not CallFunction_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp431 = new StringBuilder("CallFunction_result(");
          int tmp432 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp432++) { tmp431.Append(", "); }
            tmp431.Append("Success: ");
            Success.ToString(tmp431);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp432++) { tmp431.Append(", "); }
            tmp431.Append("E: ");
            E.ToString(tmp431);
          }
          tmp431.Append(')');
          return tmp431.ToString();
        }
      }


      public partial class Blob_Read_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ObjectBlobHandle { get; set; } = 0;

        public int Offset { get; set; } = 0;

        public int Count { get; set; } = 0;

        public Blob_Read_args()
        {
        }

        public Blob_Read_args(long @token, int object_blob_handle, int @offset, int @count) : this()
        {
          this.Token = @token;
          this.ObjectBlobHandle = object_blob_handle;
          this.Offset = @offset;
          this.Count = @count;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_blob_handle = false;
            bool isset_offset = false;
            bool isset_count = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectBlobHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_blob_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Offset = await iprot.ReadI32Async(cancellationToken);
                    isset_offset = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                    isset_count = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_blob_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_offset)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_count)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp433 = new TStruct("Blob_Read_args");
            await oprot.WriteStructBeginAsync(tmp433, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp434 = new TField();
            tmp434.Name = "token";
            tmp434.Type = TType.I64;
            tmp434.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp434, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp434.Name = "object_blob_handle";
            tmp434.Type = TType.I32;
            tmp434.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp434, cancellationToken);
            await oprot.WriteI32Async(ObjectBlobHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp434.Name = "offset";
            tmp434.Type = TType.I32;
            tmp434.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp434, cancellationToken);
            await oprot.WriteI32Async(Offset, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp434.Name = "count";
            tmp434.Type = TType.I32;
            tmp434.ID = 4;
            await oprot.WriteFieldBeginAsync(tmp434, cancellationToken);
            await oprot.WriteI32Async(Count, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_Read_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectBlobHandle, other.ObjectBlobHandle)
            && global::System.Object.Equals(Offset, other.Offset)
            && global::System.Object.Equals(Count, other.Count);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectBlobHandle.GetHashCode();
            hashcode = (hashcode * 397) + Offset.GetHashCode();
            hashcode = (hashcode * 397) + Count.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp435 = new StringBuilder("Blob_Read_args(");
          tmp435.Append(", Token: ");
          Token.ToString(tmp435);
          tmp435.Append(", ObjectBlobHandle: ");
          ObjectBlobHandle.ToString(tmp435);
          tmp435.Append(", Offset: ");
          Offset.ToString(tmp435);
          tmp435.Append(", Count: ");
          Count.ToString(tmp435);
          tmp435.Append(')');
          return tmp435.ToString();
        }
      }


      public partial class Blob_Read_result : TBase
      {
        private byte[]? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public byte[]? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public Blob_Read_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp437 = new TStruct("Blob_Read_result");
            await oprot.WriteStructBeginAsync(tmp437, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp438 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp438.Name = "Success";
                tmp438.Type = TType.String;
                tmp438.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp438, cancellationToken);
                await oprot.WriteBinaryAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp438.Name = "E";
                tmp438.Type = TType.Struct;
                tmp438.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp438, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_Read_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp439 = new StringBuilder("Blob_Read_result(");
          int tmp440 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp440++) { tmp439.Append(", "); }
            tmp439.Append("Success: ");
            Success.ToString(tmp439);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp440++) { tmp439.Append(", "); }
            tmp439.Append("E: ");
            E.ToString(tmp439);
          }
          tmp439.Append(')');
          return tmp439.ToString();
        }
      }


      public partial class Blob_Write_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ObjectBlobHandle { get; set; } = 0;

        public byte[] Bytes { get; set; }= [];

        public Blob_Write_args()
        {
        }

        public Blob_Write_args(long @token, int object_blob_handle, byte[] @bytes) : this()
        {
          this.Token = @token;
          this.ObjectBlobHandle = object_blob_handle;
          this.Bytes = @bytes;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_blob_handle = false;
            bool isset_bytes = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectBlobHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_blob_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Bytes = await iprot.ReadBinaryAsync(cancellationToken);
                    isset_bytes = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_blob_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_bytes)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp441 = new TStruct("Blob_Write_args");
            await oprot.WriteStructBeginAsync(tmp441, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp442 = new TField();
            tmp442.Name = "token";
            tmp442.Type = TType.I64;
            tmp442.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp442, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp442.Name = "object_blob_handle";
            tmp442.Type = TType.I32;
            tmp442.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp442, cancellationToken);
            await oprot.WriteI32Async(ObjectBlobHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Bytes != null))
            {
              tmp442.Name = "bytes";
              tmp442.Type = TType.String;
              tmp442.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp442, cancellationToken);
              await oprot.WriteBinaryAsync(Bytes, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_Write_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectBlobHandle, other.ObjectBlobHandle)
            && TCollections.Equals(Bytes, other.Bytes);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectBlobHandle.GetHashCode();
            if((Bytes != null))
            {
              hashcode = (hashcode * 397) + Bytes.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp443 = new StringBuilder("Blob_Write_args(");
          tmp443.Append(", Token: ");
          Token.ToString(tmp443);
          tmp443.Append(", ObjectBlobHandle: ");
          ObjectBlobHandle.ToString(tmp443);
          if((Bytes != null))
          {
            tmp443.Append(", Bytes: ");
            Bytes.ToString(tmp443);
          }
          tmp443.Append(')');
          return tmp443.ToString();
        }
      }


      public partial class Blob_Write_result : TBase
      {
        private long _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public long Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public Blob_Write_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I64)
                  {
                    Success = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp445 = new TStruct("Blob_Write_result");
            await oprot.WriteStructBeginAsync(tmp445, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp446 = new TField();

            if(this.__isset.@success)
            {
              tmp446.Name = "Success";
              tmp446.Type = TType.I64;
              tmp446.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp446, cancellationToken);
              await oprot.WriteI64Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp446.Name = "E";
                tmp446.Type = TType.Struct;
                tmp446.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp446, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_Write_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp447 = new StringBuilder("Blob_Write_result(");
          int tmp448 = 0;
          if(__isset.@success)
          {
            if(0 < tmp448++) { tmp447.Append(", "); }
            tmp447.Append("Success: ");
            Success.ToString(tmp447);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp448++) { tmp447.Append(", "); }
            tmp447.Append("E: ");
            E.ToString(tmp447);
          }
          tmp447.Append(')');
          return tmp447.ToString();
        }
      }


      public partial class Blob_GetLength_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ObjectBlobHandle { get; set; } = 0;

        public Blob_GetLength_args()
        {
        }

        public Blob_GetLength_args(long @token, int object_blob_handle) : this()
        {
          this.Token = @token;
          this.ObjectBlobHandle = object_blob_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_blob_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectBlobHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_blob_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_blob_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp449 = new TStruct("Blob_GetLength_args");
            await oprot.WriteStructBeginAsync(tmp449, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp450 = new TField();
            tmp450.Name = "token";
            tmp450.Type = TType.I64;
            tmp450.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp450, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp450.Name = "object_blob_handle";
            tmp450.Type = TType.I32;
            tmp450.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp450, cancellationToken);
            await oprot.WriteI32Async(ObjectBlobHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_GetLength_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectBlobHandle, other.ObjectBlobHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectBlobHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp451 = new StringBuilder("Blob_GetLength_args(");
          tmp451.Append(", Token: ");
          Token.ToString(tmp451);
          tmp451.Append(", ObjectBlobHandle: ");
          ObjectBlobHandle.ToString(tmp451);
          tmp451.Append(')');
          return tmp451.ToString();
        }
      }


      public partial class Blob_GetLength_result : TBase
      {
        private long _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public long Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public Blob_GetLength_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I64)
                  {
                    Success = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp453 = new TStruct("Blob_GetLength_result");
            await oprot.WriteStructBeginAsync(tmp453, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp454 = new TField();

            if(this.__isset.@success)
            {
              tmp454.Name = "Success";
              tmp454.Type = TType.I64;
              tmp454.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp454, cancellationToken);
              await oprot.WriteI64Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp454.Name = "E";
                tmp454.Type = TType.Struct;
                tmp454.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp454, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_GetLength_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp455 = new StringBuilder("Blob_GetLength_result(");
          int tmp456 = 0;
          if(__isset.@success)
          {
            if(0 < tmp456++) { tmp455.Append(", "); }
            tmp455.Append("Success: ");
            Success.ToString(tmp455);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp456++) { tmp455.Append(", "); }
            tmp455.Append("E: ");
            E.ToString(tmp455);
          }
          tmp455.Append(')');
          return tmp455.ToString();
        }
      }


      public partial class Blob_GetContentType_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ObjectBlobHandle { get; set; } = 0;

        public Blob_GetContentType_args()
        {
        }

        public Blob_GetContentType_args(long @token, int object_blob_handle) : this()
        {
          this.Token = @token;
          this.ObjectBlobHandle = object_blob_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_blob_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectBlobHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_blob_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_blob_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp457 = new TStruct("Blob_GetContentType_args");
            await oprot.WriteStructBeginAsync(tmp457, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp458 = new TField();
            tmp458.Name = "token";
            tmp458.Type = TType.I64;
            tmp458.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp458, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp458.Name = "object_blob_handle";
            tmp458.Type = TType.I32;
            tmp458.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp458, cancellationToken);
            await oprot.WriteI32Async(ObjectBlobHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_GetContentType_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectBlobHandle, other.ObjectBlobHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectBlobHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp459 = new StringBuilder("Blob_GetContentType_args(");
          tmp459.Append(", Token: ");
          Token.ToString(tmp459);
          tmp459.Append(", ObjectBlobHandle: ");
          ObjectBlobHandle.ToString(tmp459);
          tmp459.Append(')');
          return tmp459.ToString();
        }
      }


      public partial class Blob_GetContentType_result : TBase
      {
        private string? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public string? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public Blob_GetContentType_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp461 = new TStruct("Blob_GetContentType_result");
            await oprot.WriteStructBeginAsync(tmp461, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp462 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp462.Name = "Success";
                tmp462.Type = TType.String;
                tmp462.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp462, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp462.Name = "E";
                tmp462.Type = TType.Struct;
                tmp462.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp462, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_GetContentType_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp463 = new StringBuilder("Blob_GetContentType_result(");
          int tmp464 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp464++) { tmp463.Append(", "); }
            tmp463.Append("Success: ");
            Success.ToString(tmp463);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp464++) { tmp463.Append(", "); }
            tmp463.Append("E: ");
            E.ToString(tmp463);
          }
          tmp463.Append(')');
          return tmp463.ToString();
        }
      }


      public partial class Blob_GetName_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ObjectBlobHandle { get; set; } = 0;

        public Blob_GetName_args()
        {
        }

        public Blob_GetName_args(long @token, int object_blob_handle) : this()
        {
          this.Token = @token;
          this.ObjectBlobHandle = object_blob_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_blob_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectBlobHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_blob_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_blob_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp465 = new TStruct("Blob_GetName_args");
            await oprot.WriteStructBeginAsync(tmp465, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp466 = new TField();
            tmp466.Name = "token";
            tmp466.Type = TType.I64;
            tmp466.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp466, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp466.Name = "object_blob_handle";
            tmp466.Type = TType.I32;
            tmp466.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp466, cancellationToken);
            await oprot.WriteI32Async(ObjectBlobHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_GetName_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectBlobHandle, other.ObjectBlobHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectBlobHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp467 = new StringBuilder("Blob_GetName_args(");
          tmp467.Append(", Token: ");
          Token.ToString(tmp467);
          tmp467.Append(", ObjectBlobHandle: ");
          ObjectBlobHandle.ToString(tmp467);
          tmp467.Append(')');
          return tmp467.ToString();
        }
      }


      public partial class Blob_GetName_result : TBase
      {
        private string? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public string? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public Blob_GetName_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp469 = new TStruct("Blob_GetName_result");
            await oprot.WriteStructBeginAsync(tmp469, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp470 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp470.Name = "Success";
                tmp470.Type = TType.String;
                tmp470.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp470, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp470.Name = "E";
                tmp470.Type = TType.Struct;
                tmp470.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp470, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_GetName_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp471 = new StringBuilder("Blob_GetName_result(");
          int tmp472 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp472++) { tmp471.Append(", "); }
            tmp471.Append("Success: ");
            Success.ToString(tmp471);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp472++) { tmp471.Append(", "); }
            tmp471.Append("E: ");
            E.ToString(tmp471);
          }
          tmp471.Append(')');
          return tmp471.ToString();
        }
      }


      public partial class RowsSet_GetColumns_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ObjectRowsSetHandle { get; set; } = 0;

        public RowsSet_GetColumns_args()
        {
        }

        public RowsSet_GetColumns_args(long @token, int object_rows_set_handle) : this()
        {
          this.Token = @token;
          this.ObjectRowsSetHandle = object_rows_set_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_rows_set_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsSetHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_set_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_rows_set_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp473 = new TStruct("RowsSet_GetColumns_args");
            await oprot.WriteStructBeginAsync(tmp473, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp474 = new TField();
            tmp474.Name = "token";
            tmp474.Type = TType.I64;
            tmp474.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp474, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp474.Name = "object_rows_set_handle";
            tmp474.Type = TType.I32;
            tmp474.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp474, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsSetHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetColumns_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectRowsSetHandle, other.ObjectRowsSetHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectRowsSetHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp475 = new StringBuilder("RowsSet_GetColumns_args(");
          tmp475.Append(", Token: ");
          Token.ToString(tmp475);
          tmp475.Append(", ObjectRowsSetHandle: ");
          ObjectRowsSetHandle.ToString(tmp475);
          tmp475.Append(')');
          return tmp475.ToString();
        }
      }


      public partial class RowsSet_GetColumns_result : TBase
      {
        private List<global::QueryCat.Plugins.Sdk.Column>? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public List<global::QueryCat.Plugins.Sdk.Column>? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RowsSet_GetColumns_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list477 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::QueryCat.Plugins.Sdk.Column>(_list477.Count);
                      for(int _i478 = 0; _i478 < _list477.Count; ++_i478)
                      {
                        global::QueryCat.Plugins.Sdk.Column _elem479;
                        _elem479 = new global::QueryCat.Plugins.Sdk.Column();
                        await _elem479.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem479);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp480 = new TStruct("RowsSet_GetColumns_result");
            await oprot.WriteStructBeginAsync(tmp480, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp481 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp481.Name = "Success";
                tmp481.Type = TType.List;
                tmp481.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp481, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::QueryCat.Plugins.Sdk.Column _iter482 in Success)
                {
                  await _iter482.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp481.Name = "E";
                tmp481.Type = TType.Struct;
                tmp481.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp481, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetColumns_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp483 = new StringBuilder("RowsSet_GetColumns_result(");
          int tmp484 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp484++) { tmp483.Append(", "); }
            tmp483.Append("Success: ");
            Success.ToString(tmp483);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp484++) { tmp483.Append(", "); }
            tmp483.Append("E: ");
            E.ToString(tmp483);
          }
          tmp483.Append(')');
          return tmp483.ToString();
        }
      }


      public partial class RowsSet_Open_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ObjectRowsSetHandle { get; set; } = 0;

        public RowsSet_Open_args()
        {
        }

        public RowsSet_Open_args(long @token, int object_rows_set_handle) : this()
        {
          this.Token = @token;
          this.ObjectRowsSetHandle = object_rows_set_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_rows_set_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsSetHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_set_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_rows_set_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp485 = new TStruct("RowsSet_Open_args");
            await oprot.WriteStructBeginAsync(tmp485, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp486 = new TField();
            tmp486.Name = "token";
            tmp486.Type = TType.I64;
            tmp486.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp486, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp486.Name = "object_rows_set_handle";
            tmp486.Type = TType.I32;
            tmp486.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp486, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsSetHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Open_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectRowsSetHandle, other.ObjectRowsSetHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectRowsSetHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp487 = new StringBuilder("RowsSet_Open_args(");
          tmp487.Append(", Token: ");
          Token.ToString(tmp487);
          tmp487.Append(", ObjectRowsSetHandle: ");
          ObjectRowsSetHandle.ToString(tmp487);
          tmp487.Append(')');
          return tmp487.ToString();
        }
      }


      public partial class RowsSet_Open_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @e;
        }

        public RowsSet_Open_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp489 = new TStruct("RowsSet_Open_result");
            await oprot.WriteStructBeginAsync(tmp489, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp490 = new TField();

            if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp490.Name = "E";
                tmp490.Type = TType.Struct;
                tmp490.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp490, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Open_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp491 = new StringBuilder("RowsSet_Open_result(");
          int tmp492 = 0;
          if((E != null) && __isset.@e)
          {
            if(0 < tmp492++) { tmp491.Append(", "); }
            tmp491.Append("E: ");
            E.ToString(tmp491);
          }
          tmp491.Append(')');
          return tmp491.ToString();
        }
      }


      public partial class RowsSet_Close_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ObjectRowsSetHandle { get; set; } = 0;

        public RowsSet_Close_args()
        {
        }

        public RowsSet_Close_args(long @token, int object_rows_set_handle) : this()
        {
          this.Token = @token;
          this.ObjectRowsSetHandle = object_rows_set_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_rows_set_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsSetHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_set_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_rows_set_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp493 = new TStruct("RowsSet_Close_args");
            await oprot.WriteStructBeginAsync(tmp493, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp494 = new TField();
            tmp494.Name = "token";
            tmp494.Type = TType.I64;
            tmp494.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp494, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp494.Name = "object_rows_set_handle";
            tmp494.Type = TType.I32;
            tmp494.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp494, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsSetHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Close_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectRowsSetHandle, other.ObjectRowsSetHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectRowsSetHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp495 = new StringBuilder("RowsSet_Close_args(");
          tmp495.Append(", Token: ");
          Token.ToString(tmp495);
          tmp495.Append(", ObjectRowsSetHandle: ");
          ObjectRowsSetHandle.ToString(tmp495);
          tmp495.Append(')');
          return tmp495.ToString();
        }
      }


      public partial class RowsSet_Close_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @e;
        }

        public RowsSet_Close_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp497 = new TStruct("RowsSet_Close_result");
            await oprot.WriteStructBeginAsync(tmp497, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp498 = new TField();

            if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp498.Name = "E";
                tmp498.Type = TType.Struct;
                tmp498.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp498, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Close_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp499 = new StringBuilder("RowsSet_Close_result(");
          int tmp500 = 0;
          if((E != null) && __isset.@e)
          {
            if(0 < tmp500++) { tmp499.Append(", "); }
            tmp499.Append("E: ");
            E.ToString(tmp499);
          }
          tmp499.Append(')');
          return tmp499.ToString();
        }
      }


      public partial class RowsSet_Reset_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ObjectRowsSetHandle { get; set; } = 0;

        public RowsSet_Reset_args()
        {
        }

        public RowsSet_Reset_args(long @token, int object_rows_set_handle) : this()
        {
          this.Token = @token;
          this.ObjectRowsSetHandle = object_rows_set_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_rows_set_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsSetHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_set_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_rows_set_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp501 = new TStruct("RowsSet_Reset_args");
            await oprot.WriteStructBeginAsync(tmp501, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp502 = new TField();
            tmp502.Name = "token";
            tmp502.Type = TType.I64;
            tmp502.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp502, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp502.Name = "object_rows_set_handle";
            tmp502.Type = TType.I32;
            tmp502.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp502, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsSetHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Reset_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectRowsSetHandle, other.ObjectRowsSetHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectRowsSetHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp503 = new StringBuilder("RowsSet_Reset_args(");
          tmp503.Append(", Token: ");
          Token.ToString(tmp503);
          tmp503.Append(", ObjectRowsSetHandle: ");
          ObjectRowsSetHandle.ToString(tmp503);
          tmp503.Append(')');
          return tmp503.ToString();
        }
      }


      public partial class RowsSet_Reset_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @e;
        }

        public RowsSet_Reset_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp505 = new TStruct("RowsSet_Reset_result");
            await oprot.WriteStructBeginAsync(tmp505, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp506 = new TField();

            if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp506.Name = "E";
                tmp506.Type = TType.Struct;
                tmp506.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp506, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Reset_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp507 = new StringBuilder("RowsSet_Reset_result(");
          int tmp508 = 0;
          if((E != null) && __isset.@e)
          {
            if(0 < tmp508++) { tmp507.Append(", "); }
            tmp507.Append("E: ");
            E.ToString(tmp507);
          }
          tmp507.Append(')');
          return tmp507.ToString();
        }
      }


      public partial class RowsSet_SetContext_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ObjectRowsSetHandle { get; set; } = 0;

        public global::QueryCat.Plugins.Sdk.ContextQueryInfo? ContextQueryInfo { get; set; }

        public global::QueryCat.Plugins.Sdk.ContextInfo? ContextInfo { get; set; }

        public RowsSet_SetContext_args()
        {
        }

        public RowsSet_SetContext_args(long @token, int object_rows_set_handle, global::QueryCat.Plugins.Sdk.ContextQueryInfo? context_query_info, global::QueryCat.Plugins.Sdk.ContextInfo? context_info) : this()
        {
          this.Token = @token;
          this.ObjectRowsSetHandle = object_rows_set_handle;
          this.ContextQueryInfo = context_query_info;
          this.ContextInfo = context_info;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_rows_set_handle = false;
            bool isset_context_query_info = false;
            bool isset_context_info = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsSetHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_set_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    ContextQueryInfo = new global::QueryCat.Plugins.Sdk.ContextQueryInfo();
                    await ContextQueryInfo.ReadAsync(iprot, cancellationToken);
                    isset_context_query_info = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Struct)
                  {
                    ContextInfo = new global::QueryCat.Plugins.Sdk.ContextInfo();
                    await ContextInfo.ReadAsync(iprot, cancellationToken);
                    isset_context_info = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_rows_set_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_context_query_info)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_context_info)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp509 = new TStruct("RowsSet_SetContext_args");
            await oprot.WriteStructBeginAsync(tmp509, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp510 = new TField();
            tmp510.Name = "token";
            tmp510.Type = TType.I64;
            tmp510.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp510, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp510.Name = "object_rows_set_handle";
            tmp510.Type = TType.I32;
            tmp510.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp510, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsSetHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((ContextQueryInfo != null))
            {
              tmp510.Name = "context_query_info";
              tmp510.Type = TType.Struct;
              tmp510.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp510, cancellationToken);
              await ContextQueryInfo.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((ContextInfo != null))
            {
              tmp510.Name = "context_info";
              tmp510.Type = TType.Struct;
              tmp510.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp510, cancellationToken);
              await ContextInfo.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_SetContext_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectRowsSetHandle, other.ObjectRowsSetHandle)
            && global::System.Object.Equals(ContextQueryInfo, other.ContextQueryInfo)
            && global::System.Object.Equals(ContextInfo, other.ContextInfo);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectRowsSetHandle.GetHashCode();
            if((ContextQueryInfo != null))
            {
              hashcode = (hashcode * 397) + ContextQueryInfo.GetHashCode();
            }
            if((ContextInfo != null))
            {
              hashcode = (hashcode * 397) + ContextInfo.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp511 = new StringBuilder("RowsSet_SetContext_args(");
          tmp511.Append(", Token: ");
          Token.ToString(tmp511);
          tmp511.Append(", ObjectRowsSetHandle: ");
          ObjectRowsSetHandle.ToString(tmp511);
          if((ContextQueryInfo != null))
          {
            tmp511.Append(", ContextQueryInfo: ");
            ContextQueryInfo.ToString(tmp511);
          }
          if((ContextInfo != null))
          {
            tmp511.Append(", ContextInfo: ");
            ContextInfo.ToString(tmp511);
          }
          tmp511.Append(')');
          return tmp511.ToString();
        }
      }


      public partial class RowsSet_SetContext_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @e;
        }

        public RowsSet_SetContext_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp513 = new TStruct("RowsSet_SetContext_result");
            await oprot.WriteStructBeginAsync(tmp513, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp514 = new TField();

            if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp514.Name = "E";
                tmp514.Type = TType.Struct;
                tmp514.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp514, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_SetContext_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp515 = new StringBuilder("RowsSet_SetContext_result(");
          int tmp516 = 0;
          if((E != null) && __isset.@e)
          {
            if(0 < tmp516++) { tmp515.Append(", "); }
            tmp515.Append("E: ");
            E.ToString(tmp515);
          }
          tmp515.Append(')');
          return tmp515.ToString();
        }
      }


      public partial class RowsSet_Position_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ObjectRowsSetHandle { get; set; } = 0;

        public RowsSet_Position_args()
        {
        }

        public RowsSet_Position_args(long @token, int object_rows_set_handle) : this()
        {
          this.Token = @token;
          this.ObjectRowsSetHandle = object_rows_set_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_rows_set_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsSetHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_set_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_rows_set_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp517 = new TStruct("RowsSet_Position_args");
            await oprot.WriteStructBeginAsync(tmp517, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp518 = new TField();
            tmp518.Name = "token";
            tmp518.Type = TType.I64;
            tmp518.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp518, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp518.Name = "object_rows_set_handle";
            tmp518.Type = TType.I32;
            tmp518.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp518, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsSetHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Position_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectRowsSetHandle, other.ObjectRowsSetHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectRowsSetHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp519 = new StringBuilder("RowsSet_Position_args(");
          tmp519.Append(", Token: ");
          Token.ToString(tmp519);
          tmp519.Append(", ObjectRowsSetHandle: ");
          ObjectRowsSetHandle.ToString(tmp519);
          tmp519.Append(')');
          return tmp519.ToString();
        }
      }


      public partial class RowsSet_Position_result : TBase
      {
        private int _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RowsSet_Position_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp521 = new TStruct("RowsSet_Position_result");
            await oprot.WriteStructBeginAsync(tmp521, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp522 = new TField();

            if(this.__isset.@success)
            {
              tmp522.Name = "Success";
              tmp522.Type = TType.I32;
              tmp522.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp522, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp522.Name = "E";
                tmp522.Type = TType.Struct;
                tmp522.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp522, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Position_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp523 = new StringBuilder("RowsSet_Position_result(");
          int tmp524 = 0;
          if(__isset.@success)
          {
            if(0 < tmp524++) { tmp523.Append(", "); }
            tmp523.Append("Success: ");
            Success.ToString(tmp523);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp524++) { tmp523.Append(", "); }
            tmp523.Append("E: ");
            E.ToString(tmp523);
          }
          tmp523.Append(')');
          return tmp523.ToString();
        }
      }


      public partial class RowsSet_TotalRows_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ObjectRowsSetHandle { get; set; } = 0;

        public RowsSet_TotalRows_args()
        {
        }

        public RowsSet_TotalRows_args(long @token, int object_rows_set_handle) : this()
        {
          this.Token = @token;
          this.ObjectRowsSetHandle = object_rows_set_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_rows_set_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsSetHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_set_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_rows_set_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp525 = new TStruct("RowsSet_TotalRows_args");
            await oprot.WriteStructBeginAsync(tmp525, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp526 = new TField();
            tmp526.Name = "token";
            tmp526.Type = TType.I64;
            tmp526.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp526, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp526.Name = "object_rows_set_handle";
            tmp526.Type = TType.I32;
            tmp526.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp526, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsSetHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_TotalRows_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectRowsSetHandle, other.ObjectRowsSetHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectRowsSetHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp527 = new StringBuilder("RowsSet_TotalRows_args(");
          tmp527.Append(", Token: ");
          Token.ToString(tmp527);
          tmp527.Append(", ObjectRowsSetHandle: ");
          ObjectRowsSetHandle.ToString(tmp527);
          tmp527.Append(')');
          return tmp527.ToString();
        }
      }


      public partial class RowsSet_TotalRows_result : TBase
      {
        private int _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RowsSet_TotalRows_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp529 = new TStruct("RowsSet_TotalRows_result");
            await oprot.WriteStructBeginAsync(tmp529, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp530 = new TField();

            if(this.__isset.@success)
            {
              tmp530.Name = "Success";
              tmp530.Type = TType.I32;
              tmp530.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp530, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp530.Name = "E";
                tmp530.Type = TType.Struct;
                tmp530.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp530, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_TotalRows_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp531 = new StringBuilder("RowsSet_TotalRows_result(");
          int tmp532 = 0;
          if(__isset.@success)
          {
            if(0 < tmp532++) { tmp531.Append(", "); }
            tmp531.Append("Success: ");
            Success.ToString(tmp531);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp532++) { tmp531.Append(", "); }
            tmp531.Append("E: ");
            E.ToString(tmp531);
          }
          tmp531.Append(')');
          return tmp531.ToString();
        }
      }


      public partial class RowsSet_Seek_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ObjectRowsSetHandle { get; set; } = 0;

        public int Offset { get; set; } = 0;

        /// <summary>
        /// 
        /// <seealso cref="global::QueryCat.Plugins.Sdk.CursorSeekOrigin"/>
        /// </summary>
        public global::QueryCat.Plugins.Sdk.CursorSeekOrigin Origin { get; set; } = default;

        public RowsSet_Seek_args()
        {
        }

        public RowsSet_Seek_args(long @token, int object_rows_set_handle, int @offset, global::QueryCat.Plugins.Sdk.CursorSeekOrigin @origin) : this()
        {
          this.Token = @token;
          this.ObjectRowsSetHandle = object_rows_set_handle;
          this.Offset = @offset;
          this.Origin = @origin;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_rows_set_handle = false;
            bool isset_offset = false;
            bool isset_origin = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsSetHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_set_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Offset = await iprot.ReadI32Async(cancellationToken);
                    isset_offset = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.I32)
                  {
                    Origin = (global::QueryCat.Plugins.Sdk.CursorSeekOrigin)await iprot.ReadI32Async(cancellationToken);
                    isset_origin = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_rows_set_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_offset)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_origin)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp533 = new TStruct("RowsSet_Seek_args");
            await oprot.WriteStructBeginAsync(tmp533, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp534 = new TField();
            tmp534.Name = "token";
            tmp534.Type = TType.I64;
            tmp534.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp534, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp534.Name = "object_rows_set_handle";
            tmp534.Type = TType.I32;
            tmp534.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp534, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsSetHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp534.Name = "offset";
            tmp534.Type = TType.I32;
            tmp534.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp534, cancellationToken);
            await oprot.WriteI32Async(Offset, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp534.Name = "origin";
            tmp534.Type = TType.I32;
            tmp534.ID = 4;
            await oprot.WriteFieldBeginAsync(tmp534, cancellationToken);
            await oprot.WriteI32Async((int)Origin, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Seek_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectRowsSetHandle, other.ObjectRowsSetHandle)
            && global::System.Object.Equals(Offset, other.Offset)
            && global::System.Object.Equals(Origin, other.Origin);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectRowsSetHandle.GetHashCode();
            hashcode = (hashcode * 397) + Offset.GetHashCode();
            hashcode = (hashcode * 397) + Origin.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp535 = new StringBuilder("RowsSet_Seek_args(");
          tmp535.Append(", Token: ");
          Token.ToString(tmp535);
          tmp535.Append(", ObjectRowsSetHandle: ");
          ObjectRowsSetHandle.ToString(tmp535);
          tmp535.Append(", Offset: ");
          Offset.ToString(tmp535);
          tmp535.Append(", Origin: ");
          Origin.ToString(tmp535);
          tmp535.Append(')');
          return tmp535.ToString();
        }
      }


      public partial class RowsSet_Seek_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @e;
        }

        public RowsSet_Seek_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp537 = new TStruct("RowsSet_Seek_result");
            await oprot.WriteStructBeginAsync(tmp537, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp538 = new TField();

            if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp538.Name = "E";
                tmp538.Type = TType.Struct;
                tmp538.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp538, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Seek_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp539 = new StringBuilder("RowsSet_Seek_result(");
          int tmp540 = 0;
          if((E != null) && __isset.@e)
          {
            if(0 < tmp540++) { tmp539.Append(", "); }
            tmp539.Append("E: ");
            E.ToString(tmp539);
          }
          tmp539.Append(')');
          return tmp539.ToString();
        }
      }


      public partial class RowsSet_GetRows_args : TBase
      {
        private int _count;

        public long Token { get; set; } = 0;

        public int ObjectRowsSetHandle { get; set; } = 0;

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.@count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @count;
        }

        public RowsSet_GetRows_args()
        {
        }

        public RowsSet_GetRows_args(long @token, int object_rows_set_handle) : this()
        {
          this.Token = @token;
          this.ObjectRowsSetHandle = object_rows_set_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_rows_set_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsSetHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_set_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_rows_set_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp541 = new TStruct("RowsSet_GetRows_args");
            await oprot.WriteStructBeginAsync(tmp541, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp542 = new TField();
            tmp542.Name = "token";
            tmp542.Type = TType.I64;
            tmp542.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp542, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp542.Name = "object_rows_set_handle";
            tmp542.Type = TType.I32;
            tmp542.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp542, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsSetHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if(__isset.@count)
            {
              tmp542.Name = "count";
              tmp542.Type = TType.I32;
              tmp542.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp542, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetRows_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectRowsSetHandle, other.ObjectRowsSetHandle)
            && ((__isset.@count == other.__isset.@count) && ((!__isset.@count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectRowsSetHandle.GetHashCode();
            if(__isset.@count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp543 = new StringBuilder("RowsSet_GetRows_args(");
          tmp543.Append(", Token: ");
          Token.ToString(tmp543);
          tmp543.Append(", ObjectRowsSetHandle: ");
          ObjectRowsSetHandle.ToString(tmp543);
          if(__isset.@count)
          {
            tmp543.Append(", Count: ");
            Count.ToString(tmp543);
          }
          tmp543.Append(')');
          return tmp543.ToString();
        }
      }


      public partial class RowsSet_GetRows_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.RowsList? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.RowsList? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RowsSet_GetRows_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.RowsList();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp545 = new TStruct("RowsSet_GetRows_result");
            await oprot.WriteStructBeginAsync(tmp545, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp546 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp546.Name = "Success";
                tmp546.Type = TType.Struct;
                tmp546.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp546, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp546.Name = "E";
                tmp546.Type = TType.Struct;
                tmp546.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp546, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetRows_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp547 = new StringBuilder("RowsSet_GetRows_result(");
          int tmp548 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp548++) { tmp547.Append(", "); }
            tmp547.Append("Success: ");
            Success.ToString(tmp547);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp548++) { tmp547.Append(", "); }
            tmp547.Append("E: ");
            E.ToString(tmp547);
          }
          tmp547.Append(')');
          return tmp547.ToString();
        }
      }


      public partial class RowsSet_GetUniqueKey_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ObjectRowsSetHandle { get; set; } = 0;

        public RowsSet_GetUniqueKey_args()
        {
        }

        public RowsSet_GetUniqueKey_args(long @token, int object_rows_set_handle) : this()
        {
          this.Token = @token;
          this.ObjectRowsSetHandle = object_rows_set_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_rows_set_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsSetHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_set_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_rows_set_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp549 = new TStruct("RowsSet_GetUniqueKey_args");
            await oprot.WriteStructBeginAsync(tmp549, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp550 = new TField();
            tmp550.Name = "token";
            tmp550.Type = TType.I64;
            tmp550.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp550, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp550.Name = "object_rows_set_handle";
            tmp550.Type = TType.I32;
            tmp550.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp550, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsSetHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetUniqueKey_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectRowsSetHandle, other.ObjectRowsSetHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectRowsSetHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp551 = new StringBuilder("RowsSet_GetUniqueKey_args(");
          tmp551.Append(", Token: ");
          Token.ToString(tmp551);
          tmp551.Append(", ObjectRowsSetHandle: ");
          ObjectRowsSetHandle.ToString(tmp551);
          tmp551.Append(')');
          return tmp551.ToString();
        }
      }


      public partial class RowsSet_GetUniqueKey_result : TBase
      {
        private List<string>? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public List<string>? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RowsSet_GetUniqueKey_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list553 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<string>(_list553.Count);
                      for(int _i554 = 0; _i554 < _list553.Count; ++_i554)
                      {
                        string _elem555;
                        _elem555 = await iprot.ReadStringAsync(cancellationToken);
                        Success.Add(_elem555);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp556 = new TStruct("RowsSet_GetUniqueKey_result");
            await oprot.WriteStructBeginAsync(tmp556, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp557 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp557.Name = "Success";
                tmp557.Type = TType.List;
                tmp557.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp557, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
                foreach (string _iter558 in Success)
                {
                  await oprot.WriteStringAsync(_iter558, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp557.Name = "E";
                tmp557.Type = TType.Struct;
                tmp557.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp557, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetUniqueKey_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp559 = new StringBuilder("RowsSet_GetUniqueKey_result(");
          int tmp560 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp560++) { tmp559.Append(", "); }
            tmp559.Append("Success: ");
            Success.ToString(tmp559);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp560++) { tmp559.Append(", "); }
            tmp559.Append("E: ");
            E.ToString(tmp559);
          }
          tmp559.Append(')');
          return tmp559.ToString();
        }
      }


      public partial class RowsSet_GetKeyColumns_args : TBase
      {
        private int _object_rows_set_handle;

        public long Token { get; set; } = 0;

        public int ObjectRowsSetHandle
        {
          get
          {
            return _object_rows_set_handle;
          }
          set
          {
            __isset.object_rows_set_handle = true;
            this._object_rows_set_handle = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool object_rows_set_handle;
        }

        public RowsSet_GetKeyColumns_args()
        {
        }

        public RowsSet_GetKeyColumns_args(long @token) : this()
        {
          this.Token = @token;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsSetHandle = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp561 = new TStruct("RowsSet_GetKeyColumns_args");
            await oprot.WriteStructBeginAsync(tmp561, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp562 = new TField();
            tmp562.Name = "token";
            tmp562.Type = TType.I64;
            tmp562.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp562, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if(__isset.object_rows_set_handle)
            {
              tmp562.Name = "object_rows_set_handle";
              tmp562.Type = TType.I32;
              tmp562.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp562, cancellationToken);
              await oprot.WriteI32Async(ObjectRowsSetHandle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetKeyColumns_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && ((__isset.object_rows_set_handle == other.__isset.object_rows_set_handle) && ((!__isset.object_rows_set_handle) || (global::System.Object.Equals(ObjectRowsSetHandle, other.ObjectRowsSetHandle))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            if(__isset.object_rows_set_handle)
            {
              hashcode = (hashcode * 397) + ObjectRowsSetHandle.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp563 = new StringBuilder("RowsSet_GetKeyColumns_args(");
          tmp563.Append(", Token: ");
          Token.ToString(tmp563);
          if(__isset.object_rows_set_handle)
          {
            tmp563.Append(", ObjectRowsSetHandle: ");
            ObjectRowsSetHandle.ToString(tmp563);
          }
          tmp563.Append(')');
          return tmp563.ToString();
        }
      }


      public partial class RowsSet_GetKeyColumns_result : TBase
      {
        private List<global::QueryCat.Plugins.Sdk.KeyColumn>? _success;

        public List<global::QueryCat.Plugins.Sdk.KeyColumn>? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public RowsSet_GetKeyColumns_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list565 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::QueryCat.Plugins.Sdk.KeyColumn>(_list565.Count);
                      for(int _i566 = 0; _i566 < _list565.Count; ++_i566)
                      {
                        global::QueryCat.Plugins.Sdk.KeyColumn _elem567;
                        _elem567 = new global::QueryCat.Plugins.Sdk.KeyColumn();
                        await _elem567.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem567);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp568 = new TStruct("RowsSet_GetKeyColumns_result");
            await oprot.WriteStructBeginAsync(tmp568, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp569 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp569.Name = "Success";
                tmp569.Type = TType.List;
                tmp569.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp569, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::QueryCat.Plugins.Sdk.KeyColumn _iter570 in Success)
                {
                  await _iter570.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetKeyColumns_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp571 = new StringBuilder("RowsSet_GetKeyColumns_result(");
          int tmp572 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp572++) { tmp571.Append(", "); }
            tmp571.Append("Success: ");
            Success.ToString(tmp571);
          }
          tmp571.Append(')');
          return tmp571.ToString();
        }
      }


      public partial class RowsSet_SetKeyColumnValue_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ObjectRowsSetHandle { get; set; } = 0;

        public int ColumnIndex { get; set; } = 0;

        public string Operation { get; set; } = string.Empty;

        public global::QueryCat.Plugins.Sdk.VariantValue? Value { get; set; }

        public RowsSet_SetKeyColumnValue_args()
        {
        }

        public RowsSet_SetKeyColumnValue_args(long @token, int object_rows_set_handle, int column_index, string @operation, global::QueryCat.Plugins.Sdk.VariantValue? @value) : this()
        {
          this.Token = @token;
          this.ObjectRowsSetHandle = object_rows_set_handle;
          this.ColumnIndex = column_index;
          this.Operation = @operation;
          this.Value = @value;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_rows_set_handle = false;
            bool isset_column_index = false;
            bool isset_operation = false;
            bool isset_value = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsSetHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_set_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    ColumnIndex = await iprot.ReadI32Async(cancellationToken);
                    isset_column_index = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Operation = await iprot.ReadStringAsync(cancellationToken);
                    isset_operation = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 5:
                  if (field.Type == TType.Struct)
                  {
                    Value = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Value.ReadAsync(iprot, cancellationToken);
                    isset_value = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_rows_set_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_column_index)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_operation)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_value)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp573 = new TStruct("RowsSet_SetKeyColumnValue_args");
            await oprot.WriteStructBeginAsync(tmp573, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp574 = new TField();
            tmp574.Name = "token";
            tmp574.Type = TType.I64;
            tmp574.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp574, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp574.Name = "object_rows_set_handle";
            tmp574.Type = TType.I32;
            tmp574.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp574, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsSetHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp574.Name = "column_index";
            tmp574.Type = TType.I32;
            tmp574.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp574, cancellationToken);
            await oprot.WriteI32Async(ColumnIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Operation != null))
            {
              tmp574.Name = "operation";
              tmp574.Type = TType.String;
              tmp574.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp574, cancellationToken);
              await oprot.WriteStringAsync(Operation, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Value != null))
            {
              tmp574.Name = "value";
              tmp574.Type = TType.Struct;
              tmp574.ID = 5;
              await oprot.WriteFieldBeginAsync(tmp574, cancellationToken);
              await Value.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_SetKeyColumnValue_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectRowsSetHandle, other.ObjectRowsSetHandle)
            && global::System.Object.Equals(ColumnIndex, other.ColumnIndex)
            && global::System.Object.Equals(Operation, other.Operation)
            && global::System.Object.Equals(Value, other.Value);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectRowsSetHandle.GetHashCode();
            hashcode = (hashcode * 397) + ColumnIndex.GetHashCode();
            if((Operation != null))
            {
              hashcode = (hashcode * 397) + Operation.GetHashCode();
            }
            if((Value != null))
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp575 = new StringBuilder("RowsSet_SetKeyColumnValue_args(");
          tmp575.Append(", Token: ");
          Token.ToString(tmp575);
          tmp575.Append(", ObjectRowsSetHandle: ");
          ObjectRowsSetHandle.ToString(tmp575);
          tmp575.Append(", ColumnIndex: ");
          ColumnIndex.ToString(tmp575);
          if((Operation != null))
          {
            tmp575.Append(", Operation: ");
            Operation.ToString(tmp575);
          }
          if((Value != null))
          {
            tmp575.Append(", Value: ");
            Value.ToString(tmp575);
          }
          tmp575.Append(')');
          return tmp575.ToString();
        }
      }


      public partial class RowsSet_SetKeyColumnValue_result : TBase
      {

        public RowsSet_SetKeyColumnValue_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp577 = new TStruct("RowsSet_SetKeyColumnValue_result");
            await oprot.WriteStructBeginAsync(tmp577, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_SetKeyColumnValue_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp578 = new StringBuilder("RowsSet_SetKeyColumnValue_result(");
          tmp578.Append(')');
          return tmp578.ToString();
        }
      }


      public partial class RowsSet_UnsetKeyColumnValue_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ObjectRowsSetHandle { get; set; } = 0;

        public int ColumnIndex { get; set; } = 0;

        public string Operation { get; set; } = string.Empty;

        public RowsSet_UnsetKeyColumnValue_args()
        {
        }

        public RowsSet_UnsetKeyColumnValue_args(long @token, int object_rows_set_handle, int column_index, string @operation) : this()
        {
          this.Token = @token;
          this.ObjectRowsSetHandle = object_rows_set_handle;
          this.ColumnIndex = column_index;
          this.Operation = @operation;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_rows_set_handle = false;
            bool isset_column_index = false;
            bool isset_operation = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsSetHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_set_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    ColumnIndex = await iprot.ReadI32Async(cancellationToken);
                    isset_column_index = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Operation = await iprot.ReadStringAsync(cancellationToken);
                    isset_operation = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_rows_set_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_column_index)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_operation)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp580 = new TStruct("RowsSet_UnsetKeyColumnValue_args");
            await oprot.WriteStructBeginAsync(tmp580, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp581 = new TField();
            tmp581.Name = "token";
            tmp581.Type = TType.I64;
            tmp581.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp581, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp581.Name = "object_rows_set_handle";
            tmp581.Type = TType.I32;
            tmp581.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp581, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsSetHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp581.Name = "column_index";
            tmp581.Type = TType.I32;
            tmp581.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp581, cancellationToken);
            await oprot.WriteI32Async(ColumnIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Operation != null))
            {
              tmp581.Name = "operation";
              tmp581.Type = TType.String;
              tmp581.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp581, cancellationToken);
              await oprot.WriteStringAsync(Operation, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_UnsetKeyColumnValue_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectRowsSetHandle, other.ObjectRowsSetHandle)
            && global::System.Object.Equals(ColumnIndex, other.ColumnIndex)
            && global::System.Object.Equals(Operation, other.Operation);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectRowsSetHandle.GetHashCode();
            hashcode = (hashcode * 397) + ColumnIndex.GetHashCode();
            if((Operation != null))
            {
              hashcode = (hashcode * 397) + Operation.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp582 = new StringBuilder("RowsSet_UnsetKeyColumnValue_args(");
          tmp582.Append(", Token: ");
          Token.ToString(tmp582);
          tmp582.Append(", ObjectRowsSetHandle: ");
          ObjectRowsSetHandle.ToString(tmp582);
          tmp582.Append(", ColumnIndex: ");
          ColumnIndex.ToString(tmp582);
          if((Operation != null))
          {
            tmp582.Append(", Operation: ");
            Operation.ToString(tmp582);
          }
          tmp582.Append(')');
          return tmp582.ToString();
        }
      }


      public partial class RowsSet_UnsetKeyColumnValue_result : TBase
      {

        public RowsSet_UnsetKeyColumnValue_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp584 = new TStruct("RowsSet_UnsetKeyColumnValue_result");
            await oprot.WriteStructBeginAsync(tmp584, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_UnsetKeyColumnValue_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp585 = new StringBuilder("RowsSet_UnsetKeyColumnValue_result(");
          tmp585.Append(')');
          return tmp585.ToString();
        }
      }


      public partial class RowsSet_UpdateValue_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ObjectRowsSetHandle { get; set; } = 0;

        public int ColumnIndex { get; set; } = 0;

        public global::QueryCat.Plugins.Sdk.VariantValue? Value { get; set; }

        public RowsSet_UpdateValue_args()
        {
        }

        public RowsSet_UpdateValue_args(long @token, int object_rows_set_handle, int column_index, global::QueryCat.Plugins.Sdk.VariantValue? @value) : this()
        {
          this.Token = @token;
          this.ObjectRowsSetHandle = object_rows_set_handle;
          this.ColumnIndex = column_index;
          this.Value = @value;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_rows_set_handle = false;
            bool isset_column_index = false;
            bool isset_value = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsSetHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_set_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    ColumnIndex = await iprot.ReadI32Async(cancellationToken);
                    isset_column_index = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Struct)
                  {
                    Value = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Value.ReadAsync(iprot, cancellationToken);
                    isset_value = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_rows_set_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_column_index)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_value)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp587 = new TStruct("RowsSet_UpdateValue_args");
            await oprot.WriteStructBeginAsync(tmp587, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp588 = new TField();
            tmp588.Name = "token";
            tmp588.Type = TType.I64;
            tmp588.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp588, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp588.Name = "object_rows_set_handle";
            tmp588.Type = TType.I32;
            tmp588.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp588, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsSetHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp588.Name = "column_index";
            tmp588.Type = TType.I32;
            tmp588.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp588, cancellationToken);
            await oprot.WriteI32Async(ColumnIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Value != null))
            {
              tmp588.Name = "value";
              tmp588.Type = TType.Struct;
              tmp588.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp588, cancellationToken);
              await Value.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_UpdateValue_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectRowsSetHandle, other.ObjectRowsSetHandle)
            && global::System.Object.Equals(ColumnIndex, other.ColumnIndex)
            && global::System.Object.Equals(Value, other.Value);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectRowsSetHandle.GetHashCode();
            hashcode = (hashcode * 397) + ColumnIndex.GetHashCode();
            if((Value != null))
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp589 = new StringBuilder("RowsSet_UpdateValue_args(");
          tmp589.Append(", Token: ");
          Token.ToString(tmp589);
          tmp589.Append(", ObjectRowsSetHandle: ");
          ObjectRowsSetHandle.ToString(tmp589);
          tmp589.Append(", ColumnIndex: ");
          ColumnIndex.ToString(tmp589);
          if((Value != null))
          {
            tmp589.Append(", Value: ");
            Value.ToString(tmp589);
          }
          tmp589.Append(')');
          return tmp589.ToString();
        }
      }


      public partial class RowsSet_UpdateValue_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatErrorCode _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        /// <summary>
        /// 
        /// <seealso cref="global::QueryCat.Plugins.Sdk.QueryCatErrorCode"/>
        /// </summary>
        public global::QueryCat.Plugins.Sdk.QueryCatErrorCode Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RowsSet_UpdateValue_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = (global::QueryCat.Plugins.Sdk.QueryCatErrorCode)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp591 = new TStruct("RowsSet_UpdateValue_result");
            await oprot.WriteStructBeginAsync(tmp591, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp592 = new TField();

            if(this.__isset.@success)
            {
              tmp592.Name = "Success";
              tmp592.Type = TType.I32;
              tmp592.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp592, cancellationToken);
              await oprot.WriteI32Async((int)Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp592.Name = "E";
                tmp592.Type = TType.Struct;
                tmp592.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp592, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_UpdateValue_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp593 = new StringBuilder("RowsSet_UpdateValue_result(");
          int tmp594 = 0;
          if(__isset.@success)
          {
            if(0 < tmp594++) { tmp593.Append(", "); }
            tmp593.Append("Success: ");
            Success.ToString(tmp593);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp594++) { tmp593.Append(", "); }
            tmp593.Append("E: ");
            E.ToString(tmp593);
          }
          tmp593.Append(')');
          return tmp593.ToString();
        }
      }


      public partial class RowsSet_WriteValues_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ObjectRowsSetHandle { get; set; } = 0;

        public List<global::QueryCat.Plugins.Sdk.VariantValue>? Values { get; set; }

        public RowsSet_WriteValues_args()
        {
        }

        public RowsSet_WriteValues_args(long @token, int object_rows_set_handle, List<global::QueryCat.Plugins.Sdk.VariantValue>? @values) : this()
        {
          this.Token = @token;
          this.ObjectRowsSetHandle = object_rows_set_handle;
          this.Values = @values;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_rows_set_handle = false;
            bool isset_values = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsSetHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_set_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list595 = await iprot.ReadListBeginAsync(cancellationToken);
                      Values = new List<global::QueryCat.Plugins.Sdk.VariantValue>(_list595.Count);
                      for(int _i596 = 0; _i596 < _list595.Count; ++_i596)
                      {
                        global::QueryCat.Plugins.Sdk.VariantValue _elem597;
                        _elem597 = new global::QueryCat.Plugins.Sdk.VariantValue();
                        await _elem597.ReadAsync(iprot, cancellationToken);
                        Values.Add(_elem597);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                    isset_values = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_rows_set_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_values)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp598 = new TStruct("RowsSet_WriteValues_args");
            await oprot.WriteStructBeginAsync(tmp598, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp599 = new TField();
            tmp599.Name = "token";
            tmp599.Type = TType.I64;
            tmp599.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp599, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp599.Name = "object_rows_set_handle";
            tmp599.Type = TType.I32;
            tmp599.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp599, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsSetHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Values != null))
            {
              tmp599.Name = "values";
              tmp599.Type = TType.List;
              tmp599.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp599, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Values.Count), cancellationToken);
              foreach (global::QueryCat.Plugins.Sdk.VariantValue _iter600 in Values)
              {
                await _iter600.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_WriteValues_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectRowsSetHandle, other.ObjectRowsSetHandle)
            && TCollections.Equals(Values, other.Values);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectRowsSetHandle.GetHashCode();
            if((Values != null))
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Values);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp601 = new StringBuilder("RowsSet_WriteValues_args(");
          tmp601.Append(", Token: ");
          Token.ToString(tmp601);
          tmp601.Append(", ObjectRowsSetHandle: ");
          ObjectRowsSetHandle.ToString(tmp601);
          if((Values != null))
          {
            tmp601.Append(", Values: ");
            Values.ToString(tmp601);
          }
          tmp601.Append(')');
          return tmp601.ToString();
        }
      }


      public partial class RowsSet_WriteValues_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatErrorCode _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        /// <summary>
        /// 
        /// <seealso cref="global::QueryCat.Plugins.Sdk.QueryCatErrorCode"/>
        /// </summary>
        public global::QueryCat.Plugins.Sdk.QueryCatErrorCode Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RowsSet_WriteValues_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = (global::QueryCat.Plugins.Sdk.QueryCatErrorCode)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp603 = new TStruct("RowsSet_WriteValues_result");
            await oprot.WriteStructBeginAsync(tmp603, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp604 = new TField();

            if(this.__isset.@success)
            {
              tmp604.Name = "Success";
              tmp604.Type = TType.I32;
              tmp604.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp604, cancellationToken);
              await oprot.WriteI32Async((int)Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp604.Name = "E";
                tmp604.Type = TType.Struct;
                tmp604.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp604, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_WriteValues_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp605 = new StringBuilder("RowsSet_WriteValues_result(");
          int tmp606 = 0;
          if(__isset.@success)
          {
            if(0 < tmp606++) { tmp605.Append(", "); }
            tmp605.Append("Success: ");
            Success.ToString(tmp605);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp606++) { tmp605.Append(", "); }
            tmp605.Append("E: ");
            E.ToString(tmp605);
          }
          tmp605.Append(')');
          return tmp605.ToString();
        }
      }


      public partial class RowsSet_DeleteRow_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ObjectRowsSetHandle { get; set; } = 0;

        public RowsSet_DeleteRow_args()
        {
        }

        public RowsSet_DeleteRow_args(long @token, int object_rows_set_handle) : this()
        {
          this.Token = @token;
          this.ObjectRowsSetHandle = object_rows_set_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_rows_set_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsSetHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_set_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_rows_set_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp607 = new TStruct("RowsSet_DeleteRow_args");
            await oprot.WriteStructBeginAsync(tmp607, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp608 = new TField();
            tmp608.Name = "token";
            tmp608.Type = TType.I64;
            tmp608.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp608, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp608.Name = "object_rows_set_handle";
            tmp608.Type = TType.I32;
            tmp608.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp608, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsSetHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_DeleteRow_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectRowsSetHandle, other.ObjectRowsSetHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectRowsSetHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp609 = new StringBuilder("RowsSet_DeleteRow_args(");
          tmp609.Append(", Token: ");
          Token.ToString(tmp609);
          tmp609.Append(", ObjectRowsSetHandle: ");
          ObjectRowsSetHandle.ToString(tmp609);
          tmp609.Append(')');
          return tmp609.ToString();
        }
      }


      public partial class RowsSet_DeleteRow_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatErrorCode _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        /// <summary>
        /// 
        /// <seealso cref="global::QueryCat.Plugins.Sdk.QueryCatErrorCode"/>
        /// </summary>
        public global::QueryCat.Plugins.Sdk.QueryCatErrorCode Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RowsSet_DeleteRow_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = (global::QueryCat.Plugins.Sdk.QueryCatErrorCode)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp611 = new TStruct("RowsSet_DeleteRow_result");
            await oprot.WriteStructBeginAsync(tmp611, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp612 = new TField();

            if(this.__isset.@success)
            {
              tmp612.Name = "Success";
              tmp612.Type = TType.I32;
              tmp612.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp612, cancellationToken);
              await oprot.WriteI32Async((int)Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp612.Name = "E";
                tmp612.Type = TType.Struct;
                tmp612.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp612, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_DeleteRow_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp613 = new StringBuilder("RowsSet_DeleteRow_result(");
          int tmp614 = 0;
          if(__isset.@success)
          {
            if(0 < tmp614++) { tmp613.Append(", "); }
            tmp613.Append("Success: ");
            Success.ToString(tmp613);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp614++) { tmp613.Append(", "); }
            tmp613.Append("E: ");
            E.ToString(tmp613);
          }
          tmp613.Append(')');
          return tmp613.ToString();
        }
      }


      public partial class RowsSet_GetDescription_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ObjectHandle { get; set; } = 0;

        public RowsSet_GetDescription_args()
        {
        }

        public RowsSet_GetDescription_args(long @token, int object_handle) : this()
        {
          this.Token = @token;
          this.ObjectHandle = object_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp615 = new TStruct("RowsSet_GetDescription_args");
            await oprot.WriteStructBeginAsync(tmp615, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp616 = new TField();
            tmp616.Name = "token";
            tmp616.Type = TType.I64;
            tmp616.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp616, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp616.Name = "object_handle";
            tmp616.Type = TType.I32;
            tmp616.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp616, cancellationToken);
            await oprot.WriteI32Async(ObjectHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetDescription_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectHandle, other.ObjectHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp617 = new StringBuilder("RowsSet_GetDescription_args(");
          tmp617.Append(", Token: ");
          Token.ToString(tmp617);
          tmp617.Append(", ObjectHandle: ");
          ObjectHandle.ToString(tmp617);
          tmp617.Append(')');
          return tmp617.ToString();
        }
      }


      public partial class RowsSet_GetDescription_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.ModelDescription? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.ModelDescription? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RowsSet_GetDescription_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.ModelDescription();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp619 = new TStruct("RowsSet_GetDescription_result");
            await oprot.WriteStructBeginAsync(tmp619, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp620 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp620.Name = "Success";
                tmp620.Type = TType.Struct;
                tmp620.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp620, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp620.Name = "E";
                tmp620.Type = TType.Struct;
                tmp620.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp620, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetDescription_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp621 = new StringBuilder("RowsSet_GetDescription_result(");
          int tmp622 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp622++) { tmp621.Append(", "); }
            tmp621.Append("Success: ");
            Success.ToString(tmp621);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp622++) { tmp621.Append(", "); }
            tmp621.Append("E: ");
            E.ToString(tmp621);
          }
          tmp621.Append(')');
          return tmp621.ToString();
        }
      }


      public partial class RowsFormatter_OpenInput_args : TBase
      {
        private string? _key;

        public long Token { get; set; } = 0;

        public int ObjectRowsFormatterHandle { get; set; } = 0;

        public int ObjectBlobHandle { get; set; } = 0;

        public string? Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.@key = true;
            this._key = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @key;
        }

        public RowsFormatter_OpenInput_args()
        {
        }

        public RowsFormatter_OpenInput_args(long @token, int object_rows_formatter_handle, int object_blob_handle) : this()
        {
          this.Token = @token;
          this.ObjectRowsFormatterHandle = object_rows_formatter_handle;
          this.ObjectBlobHandle = object_blob_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_rows_formatter_handle = false;
            bool isset_object_blob_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsFormatterHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_formatter_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    ObjectBlobHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_blob_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_rows_formatter_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_blob_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp623 = new TStruct("RowsFormatter_OpenInput_args");
            await oprot.WriteStructBeginAsync(tmp623, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp624 = new TField();
            tmp624.Name = "token";
            tmp624.Type = TType.I64;
            tmp624.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp624, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp624.Name = "object_rows_formatter_handle";
            tmp624.Type = TType.I32;
            tmp624.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp624, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsFormatterHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp624.Name = "object_blob_handle";
            tmp624.Type = TType.I32;
            tmp624.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp624, cancellationToken);
            await oprot.WriteI32Async(ObjectBlobHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Key != null) && __isset.@key)
            {
              tmp624.Name = "key";
              tmp624.Type = TType.String;
              tmp624.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp624, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsFormatter_OpenInput_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectRowsFormatterHandle, other.ObjectRowsFormatterHandle)
            && global::System.Object.Equals(ObjectBlobHandle, other.ObjectBlobHandle)
            && ((__isset.@key == other.__isset.@key) && ((!__isset.@key) || (global::System.Object.Equals(Key, other.Key))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectRowsFormatterHandle.GetHashCode();
            hashcode = (hashcode * 397) + ObjectBlobHandle.GetHashCode();
            if((Key != null) && __isset.@key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp625 = new StringBuilder("RowsFormatter_OpenInput_args(");
          tmp625.Append(", Token: ");
          Token.ToString(tmp625);
          tmp625.Append(", ObjectRowsFormatterHandle: ");
          ObjectRowsFormatterHandle.ToString(tmp625);
          tmp625.Append(", ObjectBlobHandle: ");
          ObjectBlobHandle.ToString(tmp625);
          if((Key != null) && __isset.@key)
          {
            tmp625.Append(", Key: ");
            Key.ToString(tmp625);
          }
          tmp625.Append(')');
          return tmp625.ToString();
        }
      }


      public partial class RowsFormatter_OpenInput_result : TBase
      {
        private int _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RowsFormatter_OpenInput_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp627 = new TStruct("RowsFormatter_OpenInput_result");
            await oprot.WriteStructBeginAsync(tmp627, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp628 = new TField();

            if(this.__isset.@success)
            {
              tmp628.Name = "Success";
              tmp628.Type = TType.I32;
              tmp628.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp628, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp628.Name = "E";
                tmp628.Type = TType.Struct;
                tmp628.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp628, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsFormatter_OpenInput_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp629 = new StringBuilder("RowsFormatter_OpenInput_result(");
          int tmp630 = 0;
          if(__isset.@success)
          {
            if(0 < tmp630++) { tmp629.Append(", "); }
            tmp629.Append("Success: ");
            Success.ToString(tmp629);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp630++) { tmp629.Append(", "); }
            tmp629.Append("E: ");
            E.ToString(tmp629);
          }
          tmp629.Append(')');
          return tmp629.ToString();
        }
      }


      public partial class RowsFormatter_OpenOutput_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ObjectRowsFormatterHandle { get; set; } = 0;

        public int ObjectBlobHandle { get; set; } = 0;

        public RowsFormatter_OpenOutput_args()
        {
        }

        public RowsFormatter_OpenOutput_args(long @token, int object_rows_formatter_handle, int object_blob_handle) : this()
        {
          this.Token = @token;
          this.ObjectRowsFormatterHandle = object_rows_formatter_handle;
          this.ObjectBlobHandle = object_blob_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_rows_formatter_handle = false;
            bool isset_object_blob_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsFormatterHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_formatter_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    ObjectBlobHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_blob_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_rows_formatter_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_blob_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp631 = new TStruct("RowsFormatter_OpenOutput_args");
            await oprot.WriteStructBeginAsync(tmp631, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp632 = new TField();
            tmp632.Name = "token";
            tmp632.Type = TType.I64;
            tmp632.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp632, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp632.Name = "object_rows_formatter_handle";
            tmp632.Type = TType.I32;
            tmp632.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp632, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsFormatterHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp632.Name = "object_blob_handle";
            tmp632.Type = TType.I32;
            tmp632.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp632, cancellationToken);
            await oprot.WriteI32Async(ObjectBlobHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsFormatter_OpenOutput_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectRowsFormatterHandle, other.ObjectRowsFormatterHandle)
            && global::System.Object.Equals(ObjectBlobHandle, other.ObjectBlobHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectRowsFormatterHandle.GetHashCode();
            hashcode = (hashcode * 397) + ObjectBlobHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp633 = new StringBuilder("RowsFormatter_OpenOutput_args(");
          tmp633.Append(", Token: ");
          Token.ToString(tmp633);
          tmp633.Append(", ObjectRowsFormatterHandle: ");
          ObjectRowsFormatterHandle.ToString(tmp633);
          tmp633.Append(", ObjectBlobHandle: ");
          ObjectBlobHandle.ToString(tmp633);
          tmp633.Append(')');
          return tmp633.ToString();
        }
      }


      public partial class RowsFormatter_OpenOutput_result : TBase
      {
        private int _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RowsFormatter_OpenOutput_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp635 = new TStruct("RowsFormatter_OpenOutput_result");
            await oprot.WriteStructBeginAsync(tmp635, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp636 = new TField();

            if(this.__isset.@success)
            {
              tmp636.Name = "Success";
              tmp636.Type = TType.I32;
              tmp636.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp636, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp636.Name = "E";
                tmp636.Type = TType.Struct;
                tmp636.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp636, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsFormatter_OpenOutput_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp637 = new StringBuilder("RowsFormatter_OpenOutput_result(");
          int tmp638 = 0;
          if(__isset.@success)
          {
            if(0 < tmp638++) { tmp637.Append(", "); }
            tmp637.Append("Success: ");
            Success.ToString(tmp637);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp638++) { tmp637.Append(", "); }
            tmp637.Append("E: ");
            E.ToString(tmp637);
          }
          tmp637.Append(')');
          return tmp637.ToString();
        }
      }


      public partial class AnswerAgent_Ask_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ObjectAnswerAgentHandle { get; set; } = 0;

        public global::QueryCat.Plugins.Sdk.QuestionRequest? Request { get; set; }

        public AnswerAgent_Ask_args()
        {
        }

        public AnswerAgent_Ask_args(long @token, int object_answer_agent_handle, global::QueryCat.Plugins.Sdk.QuestionRequest? @request) : this()
        {
          this.Token = @token;
          this.ObjectAnswerAgentHandle = object_answer_agent_handle;
          this.Request = @request;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_answer_agent_handle = false;
            bool isset_request = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectAnswerAgentHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_answer_agent_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Request = new global::QueryCat.Plugins.Sdk.QuestionRequest();
                    await Request.ReadAsync(iprot, cancellationToken);
                    isset_request = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_answer_agent_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_request)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp639 = new TStruct("AnswerAgent_Ask_args");
            await oprot.WriteStructBeginAsync(tmp639, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp640 = new TField();
            tmp640.Name = "token";
            tmp640.Type = TType.I64;
            tmp640.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp640, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp640.Name = "object_answer_agent_handle";
            tmp640.Type = TType.I32;
            tmp640.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp640, cancellationToken);
            await oprot.WriteI32Async(ObjectAnswerAgentHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Request != null))
            {
              tmp640.Name = "request";
              tmp640.Type = TType.Struct;
              tmp640.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp640, cancellationToken);
              await Request.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not AnswerAgent_Ask_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectAnswerAgentHandle, other.ObjectAnswerAgentHandle)
            && global::System.Object.Equals(Request, other.Request);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectAnswerAgentHandle.GetHashCode();
            if((Request != null))
            {
              hashcode = (hashcode * 397) + Request.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp641 = new StringBuilder("AnswerAgent_Ask_args(");
          tmp641.Append(", Token: ");
          Token.ToString(tmp641);
          tmp641.Append(", ObjectAnswerAgentHandle: ");
          ObjectAnswerAgentHandle.ToString(tmp641);
          if((Request != null))
          {
            tmp641.Append(", Request: ");
            Request.ToString(tmp641);
          }
          tmp641.Append(')');
          return tmp641.ToString();
        }
      }


      public partial class AnswerAgent_Ask_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QuestionResponse? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QuestionResponse? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public AnswerAgent_Ask_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.QuestionResponse();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp643 = new TStruct("AnswerAgent_Ask_result");
            await oprot.WriteStructBeginAsync(tmp643, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp644 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp644.Name = "Success";
                tmp644.Type = TType.Struct;
                tmp644.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp644, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp644.Name = "E";
                tmp644.Type = TType.Struct;
                tmp644.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp644, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not AnswerAgent_Ask_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp645 = new StringBuilder("AnswerAgent_Ask_result(");
          int tmp646 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp646++) { tmp645.Append(", "); }
            tmp645.Append("Success: ");
            Success.ToString(tmp645);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp646++) { tmp645.Append(", "); }
            tmp645.Append("E: ");
            E.ToString(tmp645);
          }
          tmp645.Append(')');
          return tmp645.ToString();
        }
      }


      public partial class Thread_CloseHandle_args : TBase
      {

        public long Token { get; set; } = 0;

        public int Handle { get; set; } = 0;

        public Thread_CloseHandle_args()
        {
        }

        public Thread_CloseHandle_args(long @token, int @handle) : this()
        {
          this.Token = @token;
          this.Handle = @handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Handle = await iprot.ReadI32Async(cancellationToken);
                    isset_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp647 = new TStruct("Thread_CloseHandle_args");
            await oprot.WriteStructBeginAsync(tmp647, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp648 = new TField();
            tmp648.Name = "token";
            tmp648.Type = TType.I64;
            tmp648.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp648, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp648.Name = "handle";
            tmp648.Type = TType.I32;
            tmp648.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp648, cancellationToken);
            await oprot.WriteI32Async(Handle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Thread_CloseHandle_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(Handle, other.Handle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + Handle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp649 = new StringBuilder("Thread_CloseHandle_args(");
          tmp649.Append(", Token: ");
          Token.ToString(tmp649);
          tmp649.Append(", Handle: ");
          Handle.ToString(tmp649);
          tmp649.Append(')');
          return tmp649.ToString();
        }
      }


      public partial class Thread_CloseHandle_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @e;
        }

        public Thread_CloseHandle_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp651 = new TStruct("Thread_CloseHandle_result");
            await oprot.WriteStructBeginAsync(tmp651, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp652 = new TField();

            if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp652.Name = "E";
                tmp652.Type = TType.Struct;
                tmp652.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp652, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Thread_CloseHandle_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp653 = new StringBuilder("Thread_CloseHandle_result(");
          int tmp654 = 0;
          if((E != null) && __isset.@e)
          {
            if(0 < tmp654++) { tmp653.Append(", "); }
            tmp653.Append("E: ");
            E.ToString(tmp653);
          }
          tmp653.Append(')');
          return tmp653.ToString();
        }
      }


      public partial class Thread_GetHandleInfo_args : TBase
      {

        public long Token { get; set; } = 0;

        public int Handle { get; set; } = 0;

        public Thread_GetHandleInfo_args()
        {
        }

        public Thread_GetHandleInfo_args(long @token, int @handle) : this()
        {
          this.Token = @token;
          this.Handle = @handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Handle = await iprot.ReadI32Async(cancellationToken);
                    isset_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp655 = new TStruct("Thread_GetHandleInfo_args");
            await oprot.WriteStructBeginAsync(tmp655, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp656 = new TField();
            tmp656.Name = "token";
            tmp656.Type = TType.I64;
            tmp656.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp656, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp656.Name = "handle";
            tmp656.Type = TType.I32;
            tmp656.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp656, cancellationToken);
            await oprot.WriteI32Async(Handle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Thread_GetHandleInfo_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(Handle, other.Handle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + Handle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp657 = new StringBuilder("Thread_GetHandleInfo_args(");
          tmp657.Append(", Token: ");
          Token.ToString(tmp657);
          tmp657.Append(", Handle: ");
          Handle.ToString(tmp657);
          tmp657.Append(')');
          return tmp657.ToString();
        }
      }


      public partial class Thread_GetHandleInfo_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.ObjectValue? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.ObjectValue? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public Thread_GetHandleInfo_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.ObjectValue();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp659 = new TStruct("Thread_GetHandleInfo_result");
            await oprot.WriteStructBeginAsync(tmp659, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp660 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp660.Name = "Success";
                tmp660.Type = TType.Struct;
                tmp660.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp660, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp660.Name = "E";
                tmp660.Type = TType.Struct;
                tmp660.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp660, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Thread_GetHandleInfo_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp661 = new StringBuilder("Thread_GetHandleInfo_result(");
          int tmp662 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp662++) { tmp661.Append(", "); }
            tmp661.Append("Success: ");
            Success.ToString(tmp661);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp662++) { tmp661.Append(", "); }
            tmp661.Append("E: ");
            E.ToString(tmp661);
          }
          tmp661.Append(')');
          return tmp661.ToString();
        }
      }


      public partial class Thread_GetHandleFromVariable_args : TBase
      {

        public long Token { get; set; } = 0;

        public string Name { get; set; } = string.Empty;

        public Thread_GetHandleFromVariable_args()
        {
        }

        public Thread_GetHandleFromVariable_args(long @token, string @name) : this()
        {
          this.Token = @token;
          this.Name = @name;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_name = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                    isset_name = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_name)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp663 = new TStruct("Thread_GetHandleFromVariable_args");
            await oprot.WriteStructBeginAsync(tmp663, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp664 = new TField();
            tmp664.Name = "token";
            tmp664.Type = TType.I64;
            tmp664.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp664, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Name != null))
            {
              tmp664.Name = "name";
              tmp664.Type = TType.String;
              tmp664.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp664, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Thread_GetHandleFromVariable_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(Name, other.Name);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            if((Name != null))
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp665 = new StringBuilder("Thread_GetHandleFromVariable_args(");
          tmp665.Append(", Token: ");
          Token.ToString(tmp665);
          if((Name != null))
          {
            tmp665.Append(", Name: ");
            Name.ToString(tmp665);
          }
          tmp665.Append(')');
          return tmp665.ToString();
        }
      }


      public partial class Thread_GetHandleFromVariable_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.ObjectValue? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.ObjectValue? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public Thread_GetHandleFromVariable_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.ObjectValue();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp667 = new TStruct("Thread_GetHandleFromVariable_result");
            await oprot.WriteStructBeginAsync(tmp667, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp668 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp668.Name = "Success";
                tmp668.Type = TType.Struct;
                tmp668.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp668, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp668.Name = "E";
                tmp668.Type = TType.Struct;
                tmp668.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp668, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Thread_GetHandleFromVariable_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp669 = new StringBuilder("Thread_GetHandleFromVariable_result(");
          int tmp670 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp670++) { tmp669.Append(", "); }
            tmp669.Append("Success: ");
            Success.ToString(tmp669);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp670++) { tmp669.Append(", "); }
            tmp669.Append("E: ");
            E.ToString(tmp669);
          }
          tmp669.Append(')');
          return tmp669.ToString();
        }
      }

    }

  }
}
