/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


// Thrift code generated for net8
#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0290  // use primary CTOR
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace QueryCat.Plugins.Sdk
{
  public partial class Plugin
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> CallFunctionAsync(string function_name, List<global::QueryCat.Plugins.Sdk.VariantValue>? @args, int object_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task ShutdownAsync(CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.Column>> RowsSet_GetColumnsAsync(int object_rows_set_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task RowsSet_OpenAsync(int object_rows_set_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task RowsSet_CloseAsync(int object_rows_set_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task RowsSet_ResetAsync(int object_rows_set_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<int> RowsSet_PositionAsync(int object_rows_set_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<int> RowsSet_TotalRowsAsync(int object_rows_set_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task RowsSet_SeekAsync(int object_rows_set_handle, int @offset, global::QueryCat.Plugins.Sdk.CursorSeekOrigin @origin, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task RowsSet_SetContextAsync(int object_rows_set_handle, global::QueryCat.Plugins.Sdk.ContextQueryInfo? context_query_info, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.RowsList> RowsSet_GetRowsAsync(int object_rows_set_handle, int @count, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<List<string>> RowsSet_GetUniqueKeyAsync(int object_rows_set_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.KeyColumn>> RowsSet_GetKeyColumnsAsync(int object_rows_set_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task RowsSet_SetKeyColumnValueAsync(int object_rows_set_handle, int column_index, string @operation, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task RowsSet_UnsetKeyColumnValueAsync(int object_rows_set_handle, int column_index, string @operation, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.QueryCatErrorCode> RowsSet_UpdateValueAsync(int object_rows_set_handle, int column_index, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.QueryCatErrorCode> RowsSet_WriteValuesAsync(int object_rows_set_handle, List<global::QueryCat.Plugins.Sdk.VariantValue>? @values, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.QueryCatErrorCode> RowsSet_DeleteRowAsync(int object_rows_set_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<int> RowsFormatter_OpenInputAsync(int object_rows_formatter_handle, int object_blob_handle, string? @key, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<int> RowsFormatter_OpenOutputAsync(int object_rows_formatter_handle, int object_blob_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<byte[]> Blob_ReadAsync(int object_blob_handle, int @offset, int @count, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<long> Blob_WriteAsync(int object_blob_handle, byte[] @bytes, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<long> Blob_GetLengthAsync(int object_blob_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<string> ServeAsync(CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> CallFunctionAsync(string function_name, List<global::QueryCat.Plugins.Sdk.VariantValue>? @args, int object_handle, CancellationToken cancellationToken = default)
      {
        await send_CallFunctionAsync(function_name, @args, object_handle, cancellationToken);
        return await recv_CallFunctionAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_CallFunctionAsync(string function_name, List<global::QueryCat.Plugins.Sdk.VariantValue>? @args, int object_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("CallFunction", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp275 = new InternalStructs.CallFunction_args() {
          FunctionName = function_name,
          Args = @args,
          ObjectHandle = object_handle,
        };
        
        await tmp275.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> recv_CallFunctionAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp276 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp276.Type == TMessageType.Exception)
        {
          var tmp277 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp277;
        }

        var tmp278 = new InternalStructs.CallFunction_result();
        await tmp278.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp278.__isset.success)
        {
          return tmp278.Success!;
        }
        if (tmp278.__isset.@e)
        {
          throw tmp278.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CallFunctionAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task ShutdownAsync(CancellationToken cancellationToken = default)
      {
        await send_ShutdownAsync(cancellationToken);
        await recv_ShutdownAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_ShutdownAsync(CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Shutdown", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp279 = new InternalStructs.Shutdown_args() {
        };
        
        await tmp279.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_ShutdownAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp280 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp280.Type == TMessageType.Exception)
        {
          var tmp281 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp281;
        }

        var tmp282 = new InternalStructs.Shutdown_result();
        await tmp282.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp282.__isset.@e)
        {
          throw tmp282.E!;
        }
      }

      public async global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.Column>> RowsSet_GetColumnsAsync(int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_GetColumnsAsync(object_rows_set_handle, cancellationToken);
        return await recv_RowsSet_GetColumnsAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_GetColumnsAsync(int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_GetColumns", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp283 = new InternalStructs.RowsSet_GetColumns_args() {
          ObjectRowsSetHandle = object_rows_set_handle,
        };
        
        await tmp283.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.Column>> recv_RowsSet_GetColumnsAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp284 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp284.Type == TMessageType.Exception)
        {
          var tmp285 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp285;
        }

        var tmp286 = new InternalStructs.RowsSet_GetColumns_result();
        await tmp286.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp286.__isset.success)
        {
          return tmp286.Success!;
        }
        if (tmp286.__isset.@e)
        {
          throw tmp286.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsSet_GetColumnsAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task RowsSet_OpenAsync(int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_OpenAsync(object_rows_set_handle, cancellationToken);
        await recv_RowsSet_OpenAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_OpenAsync(int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_Open", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp287 = new InternalStructs.RowsSet_Open_args() {
          ObjectRowsSetHandle = object_rows_set_handle,
        };
        
        await tmp287.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_RowsSet_OpenAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp288 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp288.Type == TMessageType.Exception)
        {
          var tmp289 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp289;
        }

        var tmp290 = new InternalStructs.RowsSet_Open_result();
        await tmp290.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp290.__isset.@e)
        {
          throw tmp290.E!;
        }
      }

      public async global::System.Threading.Tasks.Task RowsSet_CloseAsync(int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_CloseAsync(object_rows_set_handle, cancellationToken);
        await recv_RowsSet_CloseAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_CloseAsync(int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_Close", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp291 = new InternalStructs.RowsSet_Close_args() {
          ObjectRowsSetHandle = object_rows_set_handle,
        };
        
        await tmp291.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_RowsSet_CloseAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp292 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp292.Type == TMessageType.Exception)
        {
          var tmp293 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp293;
        }

        var tmp294 = new InternalStructs.RowsSet_Close_result();
        await tmp294.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp294.__isset.@e)
        {
          throw tmp294.E!;
        }
      }

      public async global::System.Threading.Tasks.Task RowsSet_ResetAsync(int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_ResetAsync(object_rows_set_handle, cancellationToken);
        await recv_RowsSet_ResetAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_ResetAsync(int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_Reset", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp295 = new InternalStructs.RowsSet_Reset_args() {
          ObjectRowsSetHandle = object_rows_set_handle,
        };
        
        await tmp295.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_RowsSet_ResetAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp296 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp296.Type == TMessageType.Exception)
        {
          var tmp297 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp297;
        }

        var tmp298 = new InternalStructs.RowsSet_Reset_result();
        await tmp298.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp298.__isset.@e)
        {
          throw tmp298.E!;
        }
      }

      public async global::System.Threading.Tasks.Task<int> RowsSet_PositionAsync(int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_PositionAsync(object_rows_set_handle, cancellationToken);
        return await recv_RowsSet_PositionAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_PositionAsync(int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_Position", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp299 = new InternalStructs.RowsSet_Position_args() {
          ObjectRowsSetHandle = object_rows_set_handle,
        };
        
        await tmp299.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_RowsSet_PositionAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp300 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp300.Type == TMessageType.Exception)
        {
          var tmp301 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp301;
        }

        var tmp302 = new InternalStructs.RowsSet_Position_result();
        await tmp302.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp302.__isset.success)
        {
          return tmp302.Success;
        }
        if (tmp302.__isset.@e)
        {
          throw tmp302.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsSet_PositionAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> RowsSet_TotalRowsAsync(int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_TotalRowsAsync(object_rows_set_handle, cancellationToken);
        return await recv_RowsSet_TotalRowsAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_TotalRowsAsync(int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_TotalRows", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp303 = new InternalStructs.RowsSet_TotalRows_args() {
          ObjectRowsSetHandle = object_rows_set_handle,
        };
        
        await tmp303.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_RowsSet_TotalRowsAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp304 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp304.Type == TMessageType.Exception)
        {
          var tmp305 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp305;
        }

        var tmp306 = new InternalStructs.RowsSet_TotalRows_result();
        await tmp306.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp306.__isset.success)
        {
          return tmp306.Success;
        }
        if (tmp306.__isset.@e)
        {
          throw tmp306.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsSet_TotalRowsAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task RowsSet_SeekAsync(int object_rows_set_handle, int @offset, global::QueryCat.Plugins.Sdk.CursorSeekOrigin @origin, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_SeekAsync(object_rows_set_handle, @offset, @origin, cancellationToken);
        await recv_RowsSet_SeekAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_SeekAsync(int object_rows_set_handle, int @offset, global::QueryCat.Plugins.Sdk.CursorSeekOrigin @origin, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_Seek", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp307 = new InternalStructs.RowsSet_Seek_args() {
          ObjectRowsSetHandle = object_rows_set_handle,
          Offset = @offset,
          Origin = @origin,
        };
        
        await tmp307.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_RowsSet_SeekAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp308 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp308.Type == TMessageType.Exception)
        {
          var tmp309 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp309;
        }

        var tmp310 = new InternalStructs.RowsSet_Seek_result();
        await tmp310.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp310.__isset.@e)
        {
          throw tmp310.E!;
        }
      }

      public async global::System.Threading.Tasks.Task RowsSet_SetContextAsync(int object_rows_set_handle, global::QueryCat.Plugins.Sdk.ContextQueryInfo? context_query_info, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_SetContextAsync(object_rows_set_handle, context_query_info, cancellationToken);
        await recv_RowsSet_SetContextAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_SetContextAsync(int object_rows_set_handle, global::QueryCat.Plugins.Sdk.ContextQueryInfo? context_query_info, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_SetContext", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp311 = new InternalStructs.RowsSet_SetContext_args() {
          ObjectRowsSetHandle = object_rows_set_handle,
          ContextQueryInfo = context_query_info,
        };
        
        await tmp311.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_RowsSet_SetContextAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp312 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp312.Type == TMessageType.Exception)
        {
          var tmp313 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp313;
        }

        var tmp314 = new InternalStructs.RowsSet_SetContext_result();
        await tmp314.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp314.__isset.@e)
        {
          throw tmp314.E!;
        }
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.RowsList> RowsSet_GetRowsAsync(int object_rows_set_handle, int @count, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_GetRowsAsync(object_rows_set_handle, @count, cancellationToken);
        return await recv_RowsSet_GetRowsAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_GetRowsAsync(int object_rows_set_handle, int @count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_GetRows", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp315 = new InternalStructs.RowsSet_GetRows_args() {
          ObjectRowsSetHandle = object_rows_set_handle,
          Count = @count,
        };
        
        await tmp315.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.RowsList> recv_RowsSet_GetRowsAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp316 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp316.Type == TMessageType.Exception)
        {
          var tmp317 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp317;
        }

        var tmp318 = new InternalStructs.RowsSet_GetRows_result();
        await tmp318.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp318.__isset.success)
        {
          return tmp318.Success!;
        }
        if (tmp318.__isset.@e)
        {
          throw tmp318.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsSet_GetRowsAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<string>> RowsSet_GetUniqueKeyAsync(int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_GetUniqueKeyAsync(object_rows_set_handle, cancellationToken);
        return await recv_RowsSet_GetUniqueKeyAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_GetUniqueKeyAsync(int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_GetUniqueKey", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp319 = new InternalStructs.RowsSet_GetUniqueKey_args() {
          ObjectRowsSetHandle = object_rows_set_handle,
        };
        
        await tmp319.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<string>> recv_RowsSet_GetUniqueKeyAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp320 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp320.Type == TMessageType.Exception)
        {
          var tmp321 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp321;
        }

        var tmp322 = new InternalStructs.RowsSet_GetUniqueKey_result();
        await tmp322.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp322.__isset.success)
        {
          return tmp322.Success!;
        }
        if (tmp322.__isset.@e)
        {
          throw tmp322.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsSet_GetUniqueKeyAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.KeyColumn>> RowsSet_GetKeyColumnsAsync(int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_GetKeyColumnsAsync(object_rows_set_handle, cancellationToken);
        return await recv_RowsSet_GetKeyColumnsAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_GetKeyColumnsAsync(int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_GetKeyColumns", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp323 = new InternalStructs.RowsSet_GetKeyColumns_args() {
          ObjectRowsSetHandle = object_rows_set_handle,
        };
        
        await tmp323.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.KeyColumn>> recv_RowsSet_GetKeyColumnsAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp324 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp324.Type == TMessageType.Exception)
        {
          var tmp325 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp325;
        }

        var tmp326 = new InternalStructs.RowsSet_GetKeyColumns_result();
        await tmp326.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp326.__isset.success)
        {
          return tmp326.Success!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsSet_GetKeyColumnsAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task RowsSet_SetKeyColumnValueAsync(int object_rows_set_handle, int column_index, string @operation, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_SetKeyColumnValueAsync(object_rows_set_handle, column_index, @operation, @value, cancellationToken);
        await recv_RowsSet_SetKeyColumnValueAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_SetKeyColumnValueAsync(int object_rows_set_handle, int column_index, string @operation, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_SetKeyColumnValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp327 = new InternalStructs.RowsSet_SetKeyColumnValue_args() {
          ObjectRowsSetHandle = object_rows_set_handle,
          ColumnIndex = column_index,
          Operation = @operation,
          Value = @value,
        };
        
        await tmp327.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_RowsSet_SetKeyColumnValueAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp328 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp328.Type == TMessageType.Exception)
        {
          var tmp329 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp329;
        }

        var tmp330 = new InternalStructs.RowsSet_SetKeyColumnValue_result();
        await tmp330.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_UnsetKeyColumnValueAsync(int object_rows_set_handle, int column_index, string @operation, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_UnsetKeyColumnValueAsync(object_rows_set_handle, column_index, @operation, cancellationToken);
        await recv_RowsSet_UnsetKeyColumnValueAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_UnsetKeyColumnValueAsync(int object_rows_set_handle, int column_index, string @operation, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_UnsetKeyColumnValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp331 = new InternalStructs.RowsSet_UnsetKeyColumnValue_args() {
          ObjectRowsSetHandle = object_rows_set_handle,
          ColumnIndex = column_index,
          Operation = @operation,
        };
        
        await tmp331.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_RowsSet_UnsetKeyColumnValueAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp332 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp332.Type == TMessageType.Exception)
        {
          var tmp333 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp333;
        }

        var tmp334 = new InternalStructs.RowsSet_UnsetKeyColumnValue_result();
        await tmp334.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.QueryCatErrorCode> RowsSet_UpdateValueAsync(int object_rows_set_handle, int column_index, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_UpdateValueAsync(object_rows_set_handle, column_index, @value, cancellationToken);
        return await recv_RowsSet_UpdateValueAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_UpdateValueAsync(int object_rows_set_handle, int column_index, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_UpdateValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp335 = new InternalStructs.RowsSet_UpdateValue_args() {
          ObjectRowsSetHandle = object_rows_set_handle,
          ColumnIndex = column_index,
          Value = @value,
        };
        
        await tmp335.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.QueryCatErrorCode> recv_RowsSet_UpdateValueAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp336 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp336.Type == TMessageType.Exception)
        {
          var tmp337 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp337;
        }

        var tmp338 = new InternalStructs.RowsSet_UpdateValue_result();
        await tmp338.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp338.__isset.success)
        {
          return tmp338.Success;
        }
        if (tmp338.__isset.@e)
        {
          throw tmp338.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsSet_UpdateValueAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.QueryCatErrorCode> RowsSet_WriteValuesAsync(int object_rows_set_handle, List<global::QueryCat.Plugins.Sdk.VariantValue>? @values, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_WriteValuesAsync(object_rows_set_handle, @values, cancellationToken);
        return await recv_RowsSet_WriteValuesAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_WriteValuesAsync(int object_rows_set_handle, List<global::QueryCat.Plugins.Sdk.VariantValue>? @values, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_WriteValues", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp339 = new InternalStructs.RowsSet_WriteValues_args() {
          ObjectRowsSetHandle = object_rows_set_handle,
          Values = @values,
        };
        
        await tmp339.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.QueryCatErrorCode> recv_RowsSet_WriteValuesAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp340 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp340.Type == TMessageType.Exception)
        {
          var tmp341 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp341;
        }

        var tmp342 = new InternalStructs.RowsSet_WriteValues_result();
        await tmp342.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp342.__isset.success)
        {
          return tmp342.Success;
        }
        if (tmp342.__isset.@e)
        {
          throw tmp342.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsSet_WriteValuesAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.QueryCatErrorCode> RowsSet_DeleteRowAsync(int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_DeleteRowAsync(object_rows_set_handle, cancellationToken);
        return await recv_RowsSet_DeleteRowAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_DeleteRowAsync(int object_rows_set_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_DeleteRow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp343 = new InternalStructs.RowsSet_DeleteRow_args() {
          ObjectRowsSetHandle = object_rows_set_handle,
        };
        
        await tmp343.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.QueryCatErrorCode> recv_RowsSet_DeleteRowAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp344 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp344.Type == TMessageType.Exception)
        {
          var tmp345 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp345;
        }

        var tmp346 = new InternalStructs.RowsSet_DeleteRow_result();
        await tmp346.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp346.__isset.success)
        {
          return tmp346.Success;
        }
        if (tmp346.__isset.@e)
        {
          throw tmp346.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsSet_DeleteRowAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> RowsFormatter_OpenInputAsync(int object_rows_formatter_handle, int object_blob_handle, string? @key, CancellationToken cancellationToken = default)
      {
        await send_RowsFormatter_OpenInputAsync(object_rows_formatter_handle, object_blob_handle, @key, cancellationToken);
        return await recv_RowsFormatter_OpenInputAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsFormatter_OpenInputAsync(int object_rows_formatter_handle, int object_blob_handle, string? @key, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsFormatter_OpenInput", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp347 = new InternalStructs.RowsFormatter_OpenInput_args() {
          ObjectRowsFormatterHandle = object_rows_formatter_handle,
          ObjectBlobHandle = object_blob_handle,
          Key = @key,
        };
        
        await tmp347.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_RowsFormatter_OpenInputAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp348 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp348.Type == TMessageType.Exception)
        {
          var tmp349 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp349;
        }

        var tmp350 = new InternalStructs.RowsFormatter_OpenInput_result();
        await tmp350.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp350.__isset.success)
        {
          return tmp350.Success;
        }
        if (tmp350.__isset.@e)
        {
          throw tmp350.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsFormatter_OpenInputAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> RowsFormatter_OpenOutputAsync(int object_rows_formatter_handle, int object_blob_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsFormatter_OpenOutputAsync(object_rows_formatter_handle, object_blob_handle, cancellationToken);
        return await recv_RowsFormatter_OpenOutputAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsFormatter_OpenOutputAsync(int object_rows_formatter_handle, int object_blob_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsFormatter_OpenOutput", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp351 = new InternalStructs.RowsFormatter_OpenOutput_args() {
          ObjectRowsFormatterHandle = object_rows_formatter_handle,
          ObjectBlobHandle = object_blob_handle,
        };
        
        await tmp351.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_RowsFormatter_OpenOutputAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp352 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp352.Type == TMessageType.Exception)
        {
          var tmp353 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp353;
        }

        var tmp354 = new InternalStructs.RowsFormatter_OpenOutput_result();
        await tmp354.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp354.__isset.success)
        {
          return tmp354.Success;
        }
        if (tmp354.__isset.@e)
        {
          throw tmp354.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsFormatter_OpenOutputAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<byte[]> Blob_ReadAsync(int object_blob_handle, int @offset, int @count, CancellationToken cancellationToken = default)
      {
        await send_Blob_ReadAsync(object_blob_handle, @offset, @count, cancellationToken);
        return await recv_Blob_ReadAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Blob_ReadAsync(int object_blob_handle, int @offset, int @count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Blob_Read", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp355 = new InternalStructs.Blob_Read_args() {
          ObjectBlobHandle = object_blob_handle,
          Offset = @offset,
          Count = @count,
        };
        
        await tmp355.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<byte[]> recv_Blob_ReadAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp356 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp356.Type == TMessageType.Exception)
        {
          var tmp357 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp357;
        }

        var tmp358 = new InternalStructs.Blob_Read_result();
        await tmp358.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp358.__isset.success)
        {
          return tmp358.Success!;
        }
        if (tmp358.__isset.@e)
        {
          throw tmp358.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Blob_ReadAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<long> Blob_WriteAsync(int object_blob_handle, byte[] @bytes, CancellationToken cancellationToken = default)
      {
        await send_Blob_WriteAsync(object_blob_handle, @bytes, cancellationToken);
        return await recv_Blob_WriteAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Blob_WriteAsync(int object_blob_handle, byte[] @bytes, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Blob_Write", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp359 = new InternalStructs.Blob_Write_args() {
          ObjectBlobHandle = object_blob_handle,
          Bytes = @bytes,
        };
        
        await tmp359.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<long> recv_Blob_WriteAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp360 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp360.Type == TMessageType.Exception)
        {
          var tmp361 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp361;
        }

        var tmp362 = new InternalStructs.Blob_Write_result();
        await tmp362.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp362.__isset.success)
        {
          return tmp362.Success;
        }
        if (tmp362.__isset.@e)
        {
          throw tmp362.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Blob_WriteAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<long> Blob_GetLengthAsync(int object_blob_handle, CancellationToken cancellationToken = default)
      {
        await send_Blob_GetLengthAsync(object_blob_handle, cancellationToken);
        return await recv_Blob_GetLengthAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Blob_GetLengthAsync(int object_blob_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Blob_GetLength", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp363 = new InternalStructs.Blob_GetLength_args() {
          ObjectBlobHandle = object_blob_handle,
        };
        
        await tmp363.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<long> recv_Blob_GetLengthAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp364 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp364.Type == TMessageType.Exception)
        {
          var tmp365 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp365;
        }

        var tmp366 = new InternalStructs.Blob_GetLength_result();
        await tmp366.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp366.__isset.success)
        {
          return tmp366.Success;
        }
        if (tmp366.__isset.@e)
        {
          throw tmp366.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Blob_GetLengthAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> ServeAsync(CancellationToken cancellationToken = default)
      {
        await send_ServeAsync(cancellationToken);
        return await recv_ServeAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_ServeAsync(CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Serve", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp367 = new InternalStructs.Serve_args() {
        };
        
        await tmp367.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_ServeAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp368 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp368.Type == TMessageType.Exception)
        {
          var tmp369 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp369;
        }

        var tmp370 = new InternalStructs.Serve_result();
        await tmp370.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp370.__isset.success)
        {
          return tmp370.Success!;
        }
        if (tmp370.__isset.@e)
        {
          throw tmp370.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ServeAsync failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor>? _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor>? logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["CallFunction"] = CallFunction_ProcessAsync;
        processMap_["Shutdown"] = Shutdown_ProcessAsync;
        processMap_["RowsSet_GetColumns"] = RowsSet_GetColumns_ProcessAsync;
        processMap_["RowsSet_Open"] = RowsSet_Open_ProcessAsync;
        processMap_["RowsSet_Close"] = RowsSet_Close_ProcessAsync;
        processMap_["RowsSet_Reset"] = RowsSet_Reset_ProcessAsync;
        processMap_["RowsSet_Position"] = RowsSet_Position_ProcessAsync;
        processMap_["RowsSet_TotalRows"] = RowsSet_TotalRows_ProcessAsync;
        processMap_["RowsSet_Seek"] = RowsSet_Seek_ProcessAsync;
        processMap_["RowsSet_SetContext"] = RowsSet_SetContext_ProcessAsync;
        processMap_["RowsSet_GetRows"] = RowsSet_GetRows_ProcessAsync;
        processMap_["RowsSet_GetUniqueKey"] = RowsSet_GetUniqueKey_ProcessAsync;
        processMap_["RowsSet_GetKeyColumns"] = RowsSet_GetKeyColumns_ProcessAsync;
        processMap_["RowsSet_SetKeyColumnValue"] = RowsSet_SetKeyColumnValue_ProcessAsync;
        processMap_["RowsSet_UnsetKeyColumnValue"] = RowsSet_UnsetKeyColumnValue_ProcessAsync;
        processMap_["RowsSet_UpdateValue"] = RowsSet_UpdateValue_ProcessAsync;
        processMap_["RowsSet_WriteValues"] = RowsSet_WriteValues_ProcessAsync;
        processMap_["RowsSet_DeleteRow"] = RowsSet_DeleteRow_ProcessAsync;
        processMap_["RowsFormatter_OpenInput"] = RowsFormatter_OpenInput_ProcessAsync;
        processMap_["RowsFormatter_OpenOutput"] = RowsFormatter_OpenOutput_ProcessAsync;
        processMap_["Blob_Read"] = Blob_Read_ProcessAsync;
        processMap_["Blob_Write"] = Blob_Write_ProcessAsync;
        processMap_["Blob_GetLength"] = Blob_GetLength_ProcessAsync;
        processMap_["Serve"] = Serve_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = [];

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task CallFunction_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp371 = new InternalStructs.CallFunction_args();
        await tmp371.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp372 = new InternalStructs.CallFunction_result();
        try
        {
          try
          {
            tmp372.Success = await _iAsync.CallFunctionAsync(tmp371.FunctionName, tmp371.Args, tmp371.ObjectHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp373)
          {
            tmp372.E = tmp373;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("CallFunction", TMessageType.Reply, seqid), cancellationToken); 
          await tmp372.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp374)
        {
          var tmp375 = $"Error occurred in {GetType().FullName}: {tmp374.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp374, tmp375);
          else
            Console.Error.WriteLine(tmp375);
          var tmp376 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("CallFunction", TMessageType.Exception, seqid), cancellationToken);
          await tmp376.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Shutdown_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp377 = new InternalStructs.Shutdown_args();
        await tmp377.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp378 = new InternalStructs.Shutdown_result();
        try
        {
          try
          {
            await _iAsync.ShutdownAsync(cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp379)
          {
            tmp378.E = tmp379;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Shutdown", TMessageType.Reply, seqid), cancellationToken); 
          await tmp378.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp380)
        {
          var tmp381 = $"Error occurred in {GetType().FullName}: {tmp380.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp380, tmp381);
          else
            Console.Error.WriteLine(tmp381);
          var tmp382 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Shutdown", TMessageType.Exception, seqid), cancellationToken);
          await tmp382.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_GetColumns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp383 = new InternalStructs.RowsSet_GetColumns_args();
        await tmp383.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp384 = new InternalStructs.RowsSet_GetColumns_result();
        try
        {
          try
          {
            tmp384.Success = await _iAsync.RowsSet_GetColumnsAsync(tmp383.ObjectRowsSetHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp385)
          {
            tmp384.E = tmp385;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetColumns", TMessageType.Reply, seqid), cancellationToken); 
          await tmp384.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp386)
        {
          var tmp387 = $"Error occurred in {GetType().FullName}: {tmp386.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp386, tmp387);
          else
            Console.Error.WriteLine(tmp387);
          var tmp388 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetColumns", TMessageType.Exception, seqid), cancellationToken);
          await tmp388.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_Open_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp389 = new InternalStructs.RowsSet_Open_args();
        await tmp389.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp390 = new InternalStructs.RowsSet_Open_result();
        try
        {
          try
          {
            await _iAsync.RowsSet_OpenAsync(tmp389.ObjectRowsSetHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp391)
          {
            tmp390.E = tmp391;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Open", TMessageType.Reply, seqid), cancellationToken); 
          await tmp390.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp392)
        {
          var tmp393 = $"Error occurred in {GetType().FullName}: {tmp392.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp392, tmp393);
          else
            Console.Error.WriteLine(tmp393);
          var tmp394 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Open", TMessageType.Exception, seqid), cancellationToken);
          await tmp394.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_Close_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp395 = new InternalStructs.RowsSet_Close_args();
        await tmp395.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp396 = new InternalStructs.RowsSet_Close_result();
        try
        {
          try
          {
            await _iAsync.RowsSet_CloseAsync(tmp395.ObjectRowsSetHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp397)
          {
            tmp396.E = tmp397;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Close", TMessageType.Reply, seqid), cancellationToken); 
          await tmp396.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp398)
        {
          var tmp399 = $"Error occurred in {GetType().FullName}: {tmp398.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp398, tmp399);
          else
            Console.Error.WriteLine(tmp399);
          var tmp400 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Close", TMessageType.Exception, seqid), cancellationToken);
          await tmp400.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_Reset_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp401 = new InternalStructs.RowsSet_Reset_args();
        await tmp401.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp402 = new InternalStructs.RowsSet_Reset_result();
        try
        {
          try
          {
            await _iAsync.RowsSet_ResetAsync(tmp401.ObjectRowsSetHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp403)
          {
            tmp402.E = tmp403;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Reset", TMessageType.Reply, seqid), cancellationToken); 
          await tmp402.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp404)
        {
          var tmp405 = $"Error occurred in {GetType().FullName}: {tmp404.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp404, tmp405);
          else
            Console.Error.WriteLine(tmp405);
          var tmp406 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Reset", TMessageType.Exception, seqid), cancellationToken);
          await tmp406.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_Position_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp407 = new InternalStructs.RowsSet_Position_args();
        await tmp407.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp408 = new InternalStructs.RowsSet_Position_result();
        try
        {
          try
          {
            tmp408.Success = await _iAsync.RowsSet_PositionAsync(tmp407.ObjectRowsSetHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp409)
          {
            tmp408.E = tmp409;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Position", TMessageType.Reply, seqid), cancellationToken); 
          await tmp408.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp410)
        {
          var tmp411 = $"Error occurred in {GetType().FullName}: {tmp410.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp410, tmp411);
          else
            Console.Error.WriteLine(tmp411);
          var tmp412 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Position", TMessageType.Exception, seqid), cancellationToken);
          await tmp412.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_TotalRows_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp413 = new InternalStructs.RowsSet_TotalRows_args();
        await tmp413.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp414 = new InternalStructs.RowsSet_TotalRows_result();
        try
        {
          try
          {
            tmp414.Success = await _iAsync.RowsSet_TotalRowsAsync(tmp413.ObjectRowsSetHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp415)
          {
            tmp414.E = tmp415;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_TotalRows", TMessageType.Reply, seqid), cancellationToken); 
          await tmp414.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp416)
        {
          var tmp417 = $"Error occurred in {GetType().FullName}: {tmp416.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp416, tmp417);
          else
            Console.Error.WriteLine(tmp417);
          var tmp418 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_TotalRows", TMessageType.Exception, seqid), cancellationToken);
          await tmp418.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_Seek_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp419 = new InternalStructs.RowsSet_Seek_args();
        await tmp419.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp420 = new InternalStructs.RowsSet_Seek_result();
        try
        {
          try
          {
            await _iAsync.RowsSet_SeekAsync(tmp419.ObjectRowsSetHandle, tmp419.Offset, tmp419.Origin, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp421)
          {
            tmp420.E = tmp421;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Seek", TMessageType.Reply, seqid), cancellationToken); 
          await tmp420.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp422)
        {
          var tmp423 = $"Error occurred in {GetType().FullName}: {tmp422.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp422, tmp423);
          else
            Console.Error.WriteLine(tmp423);
          var tmp424 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Seek", TMessageType.Exception, seqid), cancellationToken);
          await tmp424.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_SetContext_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp425 = new InternalStructs.RowsSet_SetContext_args();
        await tmp425.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp426 = new InternalStructs.RowsSet_SetContext_result();
        try
        {
          try
          {
            await _iAsync.RowsSet_SetContextAsync(tmp425.ObjectRowsSetHandle, tmp425.ContextQueryInfo, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp427)
          {
            tmp426.E = tmp427;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_SetContext", TMessageType.Reply, seqid), cancellationToken); 
          await tmp426.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp428)
        {
          var tmp429 = $"Error occurred in {GetType().FullName}: {tmp428.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp428, tmp429);
          else
            Console.Error.WriteLine(tmp429);
          var tmp430 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_SetContext", TMessageType.Exception, seqid), cancellationToken);
          await tmp430.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_GetRows_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp431 = new InternalStructs.RowsSet_GetRows_args();
        await tmp431.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp432 = new InternalStructs.RowsSet_GetRows_result();
        try
        {
          try
          {
            tmp432.Success = await _iAsync.RowsSet_GetRowsAsync(tmp431.ObjectRowsSetHandle, tmp431.Count, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp433)
          {
            tmp432.E = tmp433;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetRows", TMessageType.Reply, seqid), cancellationToken); 
          await tmp432.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp434)
        {
          var tmp435 = $"Error occurred in {GetType().FullName}: {tmp434.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp434, tmp435);
          else
            Console.Error.WriteLine(tmp435);
          var tmp436 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetRows", TMessageType.Exception, seqid), cancellationToken);
          await tmp436.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_GetUniqueKey_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp437 = new InternalStructs.RowsSet_GetUniqueKey_args();
        await tmp437.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp438 = new InternalStructs.RowsSet_GetUniqueKey_result();
        try
        {
          try
          {
            tmp438.Success = await _iAsync.RowsSet_GetUniqueKeyAsync(tmp437.ObjectRowsSetHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp439)
          {
            tmp438.E = tmp439;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetUniqueKey", TMessageType.Reply, seqid), cancellationToken); 
          await tmp438.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp440)
        {
          var tmp441 = $"Error occurred in {GetType().FullName}: {tmp440.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp440, tmp441);
          else
            Console.Error.WriteLine(tmp441);
          var tmp442 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetUniqueKey", TMessageType.Exception, seqid), cancellationToken);
          await tmp442.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_GetKeyColumns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp443 = new InternalStructs.RowsSet_GetKeyColumns_args();
        await tmp443.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp444 = new InternalStructs.RowsSet_GetKeyColumns_result();
        try
        {
          tmp444.Success = await _iAsync.RowsSet_GetKeyColumnsAsync(tmp443.ObjectRowsSetHandle, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetKeyColumns", TMessageType.Reply, seqid), cancellationToken); 
          await tmp444.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp445)
        {
          var tmp446 = $"Error occurred in {GetType().FullName}: {tmp445.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp445, tmp446);
          else
            Console.Error.WriteLine(tmp446);
          var tmp447 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetKeyColumns", TMessageType.Exception, seqid), cancellationToken);
          await tmp447.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_SetKeyColumnValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp448 = new InternalStructs.RowsSet_SetKeyColumnValue_args();
        await tmp448.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp449 = new InternalStructs.RowsSet_SetKeyColumnValue_result();
        try
        {
          await _iAsync.RowsSet_SetKeyColumnValueAsync(tmp448.ObjectRowsSetHandle, tmp448.ColumnIndex, tmp448.Operation, tmp448.Value, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_SetKeyColumnValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp449.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp450)
        {
          var tmp451 = $"Error occurred in {GetType().FullName}: {tmp450.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp450, tmp451);
          else
            Console.Error.WriteLine(tmp451);
          var tmp452 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_SetKeyColumnValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp452.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_UnsetKeyColumnValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp453 = new InternalStructs.RowsSet_UnsetKeyColumnValue_args();
        await tmp453.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp454 = new InternalStructs.RowsSet_UnsetKeyColumnValue_result();
        try
        {
          await _iAsync.RowsSet_UnsetKeyColumnValueAsync(tmp453.ObjectRowsSetHandle, tmp453.ColumnIndex, tmp453.Operation, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_UnsetKeyColumnValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp454.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp455)
        {
          var tmp456 = $"Error occurred in {GetType().FullName}: {tmp455.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp455, tmp456);
          else
            Console.Error.WriteLine(tmp456);
          var tmp457 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_UnsetKeyColumnValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp457.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_UpdateValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp458 = new InternalStructs.RowsSet_UpdateValue_args();
        await tmp458.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp459 = new InternalStructs.RowsSet_UpdateValue_result();
        try
        {
          try
          {
            tmp459.Success = await _iAsync.RowsSet_UpdateValueAsync(tmp458.ObjectRowsSetHandle, tmp458.ColumnIndex, tmp458.Value, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp460)
          {
            tmp459.E = tmp460;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_UpdateValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp459.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp461)
        {
          var tmp462 = $"Error occurred in {GetType().FullName}: {tmp461.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp461, tmp462);
          else
            Console.Error.WriteLine(tmp462);
          var tmp463 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_UpdateValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp463.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_WriteValues_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp464 = new InternalStructs.RowsSet_WriteValues_args();
        await tmp464.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp465 = new InternalStructs.RowsSet_WriteValues_result();
        try
        {
          try
          {
            tmp465.Success = await _iAsync.RowsSet_WriteValuesAsync(tmp464.ObjectRowsSetHandle, tmp464.Values, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp466)
          {
            tmp465.E = tmp466;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_WriteValues", TMessageType.Reply, seqid), cancellationToken); 
          await tmp465.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp467)
        {
          var tmp468 = $"Error occurred in {GetType().FullName}: {tmp467.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp467, tmp468);
          else
            Console.Error.WriteLine(tmp468);
          var tmp469 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_WriteValues", TMessageType.Exception, seqid), cancellationToken);
          await tmp469.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_DeleteRow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp470 = new InternalStructs.RowsSet_DeleteRow_args();
        await tmp470.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp471 = new InternalStructs.RowsSet_DeleteRow_result();
        try
        {
          try
          {
            tmp471.Success = await _iAsync.RowsSet_DeleteRowAsync(tmp470.ObjectRowsSetHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp472)
          {
            tmp471.E = tmp472;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_DeleteRow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp471.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp473)
        {
          var tmp474 = $"Error occurred in {GetType().FullName}: {tmp473.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp473, tmp474);
          else
            Console.Error.WriteLine(tmp474);
          var tmp475 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_DeleteRow", TMessageType.Exception, seqid), cancellationToken);
          await tmp475.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsFormatter_OpenInput_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp476 = new InternalStructs.RowsFormatter_OpenInput_args();
        await tmp476.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp477 = new InternalStructs.RowsFormatter_OpenInput_result();
        try
        {
          try
          {
            tmp477.Success = await _iAsync.RowsFormatter_OpenInputAsync(tmp476.ObjectRowsFormatterHandle, tmp476.ObjectBlobHandle, tmp476.Key, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp478)
          {
            tmp477.E = tmp478;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsFormatter_OpenInput", TMessageType.Reply, seqid), cancellationToken); 
          await tmp477.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp479)
        {
          var tmp480 = $"Error occurred in {GetType().FullName}: {tmp479.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp479, tmp480);
          else
            Console.Error.WriteLine(tmp480);
          var tmp481 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsFormatter_OpenInput", TMessageType.Exception, seqid), cancellationToken);
          await tmp481.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsFormatter_OpenOutput_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp482 = new InternalStructs.RowsFormatter_OpenOutput_args();
        await tmp482.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp483 = new InternalStructs.RowsFormatter_OpenOutput_result();
        try
        {
          try
          {
            tmp483.Success = await _iAsync.RowsFormatter_OpenOutputAsync(tmp482.ObjectRowsFormatterHandle, tmp482.ObjectBlobHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp484)
          {
            tmp483.E = tmp484;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsFormatter_OpenOutput", TMessageType.Reply, seqid), cancellationToken); 
          await tmp483.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp485)
        {
          var tmp486 = $"Error occurred in {GetType().FullName}: {tmp485.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp485, tmp486);
          else
            Console.Error.WriteLine(tmp486);
          var tmp487 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsFormatter_OpenOutput", TMessageType.Exception, seqid), cancellationToken);
          await tmp487.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Blob_Read_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp488 = new InternalStructs.Blob_Read_args();
        await tmp488.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp489 = new InternalStructs.Blob_Read_result();
        try
        {
          try
          {
            tmp489.Success = await _iAsync.Blob_ReadAsync(tmp488.ObjectBlobHandle, tmp488.Offset, tmp488.Count, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp490)
          {
            tmp489.E = tmp490;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_Read", TMessageType.Reply, seqid), cancellationToken); 
          await tmp489.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp491)
        {
          var tmp492 = $"Error occurred in {GetType().FullName}: {tmp491.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp491, tmp492);
          else
            Console.Error.WriteLine(tmp492);
          var tmp493 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_Read", TMessageType.Exception, seqid), cancellationToken);
          await tmp493.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Blob_Write_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp494 = new InternalStructs.Blob_Write_args();
        await tmp494.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp495 = new InternalStructs.Blob_Write_result();
        try
        {
          try
          {
            tmp495.Success = await _iAsync.Blob_WriteAsync(tmp494.ObjectBlobHandle, tmp494.Bytes, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp496)
          {
            tmp495.E = tmp496;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_Write", TMessageType.Reply, seqid), cancellationToken); 
          await tmp495.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp497)
        {
          var tmp498 = $"Error occurred in {GetType().FullName}: {tmp497.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp497, tmp498);
          else
            Console.Error.WriteLine(tmp498);
          var tmp499 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_Write", TMessageType.Exception, seqid), cancellationToken);
          await tmp499.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Blob_GetLength_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp500 = new InternalStructs.Blob_GetLength_args();
        await tmp500.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp501 = new InternalStructs.Blob_GetLength_result();
        try
        {
          try
          {
            tmp501.Success = await _iAsync.Blob_GetLengthAsync(tmp500.ObjectBlobHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp502)
          {
            tmp501.E = tmp502;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_GetLength", TMessageType.Reply, seqid), cancellationToken); 
          await tmp501.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp503)
        {
          var tmp504 = $"Error occurred in {GetType().FullName}: {tmp503.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp503, tmp504);
          else
            Console.Error.WriteLine(tmp504);
          var tmp505 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_GetLength", TMessageType.Exception, seqid), cancellationToken);
          await tmp505.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Serve_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp506 = new InternalStructs.Serve_args();
        await tmp506.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp507 = new InternalStructs.Serve_result();
        try
        {
          try
          {
            tmp507.Success = await _iAsync.ServeAsync(cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp508)
          {
            tmp507.E = tmp508;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Serve", TMessageType.Reply, seqid), cancellationToken); 
          await tmp507.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp509)
        {
          var tmp510 = $"Error occurred in {GetType().FullName}: {tmp509.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp509, tmp510);
          else
            Console.Error.WriteLine(tmp510);
          var tmp511 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Serve", TMessageType.Exception, seqid), cancellationToken);
          await tmp511.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class CallFunction_args : TBase
      {
        private int _object_handle;

        public string FunctionName { get; set; } = string.Empty;

        public List<global::QueryCat.Plugins.Sdk.VariantValue>? Args { get; set; }

        public int ObjectHandle
        {
          get
          {
            return _object_handle;
          }
          set
          {
            __isset.object_handle = true;
            this._object_handle = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool object_handle;
        }

        public CallFunction_args()
        {
        }

        public CallFunction_args(string function_name, List<global::QueryCat.Plugins.Sdk.VariantValue>? @args) : this()
        {
          this.FunctionName = function_name;
          this.Args = @args;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_function_name = false;
            bool isset_args = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    FunctionName = await iprot.ReadStringAsync(cancellationToken);
                    isset_function_name = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list512 = await iprot.ReadListBeginAsync(cancellationToken);
                      Args = new List<global::QueryCat.Plugins.Sdk.VariantValue>(_list512.Count);
                      for(int _i513 = 0; _i513 < _list512.Count; ++_i513)
                      {
                        global::QueryCat.Plugins.Sdk.VariantValue _elem514;
                        _elem514 = new global::QueryCat.Plugins.Sdk.VariantValue();
                        await _elem514.ReadAsync(iprot, cancellationToken);
                        Args.Add(_elem514);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                    isset_args = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_function_name)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_args)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp515 = new TStruct("CallFunction_args");
            await oprot.WriteStructBeginAsync(tmp515, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp516 = new TField();
            if((FunctionName != null))
            {
              tmp516.Name = "function_name";
              tmp516.Type = TType.String;
              tmp516.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp516, cancellationToken);
              await oprot.WriteStringAsync(FunctionName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Args != null))
            {
              tmp516.Name = "args";
              tmp516.Type = TType.List;
              tmp516.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp516, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Args.Count), cancellationToken);
              foreach (global::QueryCat.Plugins.Sdk.VariantValue _iter517 in Args)
              {
                await _iter517.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.object_handle)
            {
              tmp516.Name = "object_handle";
              tmp516.Type = TType.I32;
              tmp516.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp516, cancellationToken);
              await oprot.WriteI32Async(ObjectHandle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not CallFunction_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(FunctionName, other.FunctionName)
            && TCollections.Equals(Args, other.Args)
            && ((__isset.object_handle == other.__isset.object_handle) && ((!__isset.object_handle) || (global::System.Object.Equals(ObjectHandle, other.ObjectHandle))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((FunctionName != null))
            {
              hashcode = (hashcode * 397) + FunctionName.GetHashCode();
            }
            if((Args != null))
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Args);
            }
            if(__isset.object_handle)
            {
              hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp518 = new StringBuilder("CallFunction_args(");
          if((FunctionName != null))
          {
            tmp518.Append(", FunctionName: ");
            FunctionName.ToString(tmp518);
          }
          if((Args != null))
          {
            tmp518.Append(", Args: ");
            Args.ToString(tmp518);
          }
          if(__isset.object_handle)
          {
            tmp518.Append(", ObjectHandle: ");
            ObjectHandle.ToString(tmp518);
          }
          tmp518.Append(')');
          return tmp518.ToString();
        }
      }


      public partial class CallFunction_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.VariantValue? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.VariantValue? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public CallFunction_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp520 = new TStruct("CallFunction_result");
            await oprot.WriteStructBeginAsync(tmp520, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp521 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp521.Name = "Success";
                tmp521.Type = TType.Struct;
                tmp521.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp521, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp521.Name = "E";
                tmp521.Type = TType.Struct;
                tmp521.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp521, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not CallFunction_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp522 = new StringBuilder("CallFunction_result(");
          int tmp523 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp523++) { tmp522.Append(", "); }
            tmp522.Append("Success: ");
            Success.ToString(tmp522);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp523++) { tmp522.Append(", "); }
            tmp522.Append("E: ");
            E.ToString(tmp522);
          }
          tmp522.Append(')');
          return tmp522.ToString();
        }
      }


      public partial class Shutdown_args : TBase
      {

        public Shutdown_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp524 = new TStruct("Shutdown_args");
            await oprot.WriteStructBeginAsync(tmp524, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Shutdown_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp525 = new StringBuilder("Shutdown_args(");
          tmp525.Append(')');
          return tmp525.ToString();
        }
      }


      public partial class Shutdown_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @e;
        }

        public Shutdown_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp527 = new TStruct("Shutdown_result");
            await oprot.WriteStructBeginAsync(tmp527, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp528 = new TField();

            if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp528.Name = "E";
                tmp528.Type = TType.Struct;
                tmp528.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp528, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Shutdown_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp529 = new StringBuilder("Shutdown_result(");
          int tmp530 = 0;
          if((E != null) && __isset.@e)
          {
            if(0 < tmp530++) { tmp529.Append(", "); }
            tmp529.Append("E: ");
            E.ToString(tmp529);
          }
          tmp529.Append(')');
          return tmp529.ToString();
        }
      }


      public partial class RowsSet_GetColumns_args : TBase
      {

        public int ObjectRowsSetHandle { get; set; } = 0;

        public RowsSet_GetColumns_args()
        {
        }

        public RowsSet_GetColumns_args(int object_rows_set_handle) : this()
        {
          this.ObjectRowsSetHandle = object_rows_set_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_rows_set_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsSetHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_set_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_rows_set_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp531 = new TStruct("RowsSet_GetColumns_args");
            await oprot.WriteStructBeginAsync(tmp531, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp532 = new TField();
            tmp532.Name = "object_rows_set_handle";
            tmp532.Type = TType.I32;
            tmp532.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp532, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsSetHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetColumns_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectRowsSetHandle, other.ObjectRowsSetHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectRowsSetHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp533 = new StringBuilder("RowsSet_GetColumns_args(");
          tmp533.Append(", ObjectRowsSetHandle: ");
          ObjectRowsSetHandle.ToString(tmp533);
          tmp533.Append(')');
          return tmp533.ToString();
        }
      }


      public partial class RowsSet_GetColumns_result : TBase
      {
        private List<global::QueryCat.Plugins.Sdk.Column>? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public List<global::QueryCat.Plugins.Sdk.Column>? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RowsSet_GetColumns_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list535 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::QueryCat.Plugins.Sdk.Column>(_list535.Count);
                      for(int _i536 = 0; _i536 < _list535.Count; ++_i536)
                      {
                        global::QueryCat.Plugins.Sdk.Column _elem537;
                        _elem537 = new global::QueryCat.Plugins.Sdk.Column();
                        await _elem537.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem537);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp538 = new TStruct("RowsSet_GetColumns_result");
            await oprot.WriteStructBeginAsync(tmp538, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp539 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp539.Name = "Success";
                tmp539.Type = TType.List;
                tmp539.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp539, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::QueryCat.Plugins.Sdk.Column _iter540 in Success)
                {
                  await _iter540.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp539.Name = "E";
                tmp539.Type = TType.Struct;
                tmp539.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp539, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetColumns_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp541 = new StringBuilder("RowsSet_GetColumns_result(");
          int tmp542 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp542++) { tmp541.Append(", "); }
            tmp541.Append("Success: ");
            Success.ToString(tmp541);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp542++) { tmp541.Append(", "); }
            tmp541.Append("E: ");
            E.ToString(tmp541);
          }
          tmp541.Append(')');
          return tmp541.ToString();
        }
      }


      public partial class RowsSet_Open_args : TBase
      {

        public int ObjectRowsSetHandle { get; set; } = 0;

        public RowsSet_Open_args()
        {
        }

        public RowsSet_Open_args(int object_rows_set_handle) : this()
        {
          this.ObjectRowsSetHandle = object_rows_set_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_rows_set_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsSetHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_set_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_rows_set_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp543 = new TStruct("RowsSet_Open_args");
            await oprot.WriteStructBeginAsync(tmp543, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp544 = new TField();
            tmp544.Name = "object_rows_set_handle";
            tmp544.Type = TType.I32;
            tmp544.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp544, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsSetHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Open_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectRowsSetHandle, other.ObjectRowsSetHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectRowsSetHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp545 = new StringBuilder("RowsSet_Open_args(");
          tmp545.Append(", ObjectRowsSetHandle: ");
          ObjectRowsSetHandle.ToString(tmp545);
          tmp545.Append(')');
          return tmp545.ToString();
        }
      }


      public partial class RowsSet_Open_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @e;
        }

        public RowsSet_Open_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp547 = new TStruct("RowsSet_Open_result");
            await oprot.WriteStructBeginAsync(tmp547, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp548 = new TField();

            if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp548.Name = "E";
                tmp548.Type = TType.Struct;
                tmp548.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp548, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Open_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp549 = new StringBuilder("RowsSet_Open_result(");
          int tmp550 = 0;
          if((E != null) && __isset.@e)
          {
            if(0 < tmp550++) { tmp549.Append(", "); }
            tmp549.Append("E: ");
            E.ToString(tmp549);
          }
          tmp549.Append(')');
          return tmp549.ToString();
        }
      }


      public partial class RowsSet_Close_args : TBase
      {

        public int ObjectRowsSetHandle { get; set; } = 0;

        public RowsSet_Close_args()
        {
        }

        public RowsSet_Close_args(int object_rows_set_handle) : this()
        {
          this.ObjectRowsSetHandle = object_rows_set_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_rows_set_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsSetHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_set_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_rows_set_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp551 = new TStruct("RowsSet_Close_args");
            await oprot.WriteStructBeginAsync(tmp551, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp552 = new TField();
            tmp552.Name = "object_rows_set_handle";
            tmp552.Type = TType.I32;
            tmp552.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp552, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsSetHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Close_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectRowsSetHandle, other.ObjectRowsSetHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectRowsSetHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp553 = new StringBuilder("RowsSet_Close_args(");
          tmp553.Append(", ObjectRowsSetHandle: ");
          ObjectRowsSetHandle.ToString(tmp553);
          tmp553.Append(')');
          return tmp553.ToString();
        }
      }


      public partial class RowsSet_Close_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @e;
        }

        public RowsSet_Close_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp555 = new TStruct("RowsSet_Close_result");
            await oprot.WriteStructBeginAsync(tmp555, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp556 = new TField();

            if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp556.Name = "E";
                tmp556.Type = TType.Struct;
                tmp556.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp556, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Close_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp557 = new StringBuilder("RowsSet_Close_result(");
          int tmp558 = 0;
          if((E != null) && __isset.@e)
          {
            if(0 < tmp558++) { tmp557.Append(", "); }
            tmp557.Append("E: ");
            E.ToString(tmp557);
          }
          tmp557.Append(')');
          return tmp557.ToString();
        }
      }


      public partial class RowsSet_Reset_args : TBase
      {

        public int ObjectRowsSetHandle { get; set; } = 0;

        public RowsSet_Reset_args()
        {
        }

        public RowsSet_Reset_args(int object_rows_set_handle) : this()
        {
          this.ObjectRowsSetHandle = object_rows_set_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_rows_set_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsSetHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_set_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_rows_set_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp559 = new TStruct("RowsSet_Reset_args");
            await oprot.WriteStructBeginAsync(tmp559, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp560 = new TField();
            tmp560.Name = "object_rows_set_handle";
            tmp560.Type = TType.I32;
            tmp560.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp560, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsSetHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Reset_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectRowsSetHandle, other.ObjectRowsSetHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectRowsSetHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp561 = new StringBuilder("RowsSet_Reset_args(");
          tmp561.Append(", ObjectRowsSetHandle: ");
          ObjectRowsSetHandle.ToString(tmp561);
          tmp561.Append(')');
          return tmp561.ToString();
        }
      }


      public partial class RowsSet_Reset_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @e;
        }

        public RowsSet_Reset_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp563 = new TStruct("RowsSet_Reset_result");
            await oprot.WriteStructBeginAsync(tmp563, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp564 = new TField();

            if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp564.Name = "E";
                tmp564.Type = TType.Struct;
                tmp564.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp564, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Reset_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp565 = new StringBuilder("RowsSet_Reset_result(");
          int tmp566 = 0;
          if((E != null) && __isset.@e)
          {
            if(0 < tmp566++) { tmp565.Append(", "); }
            tmp565.Append("E: ");
            E.ToString(tmp565);
          }
          tmp565.Append(')');
          return tmp565.ToString();
        }
      }


      public partial class RowsSet_Position_args : TBase
      {

        public int ObjectRowsSetHandle { get; set; } = 0;

        public RowsSet_Position_args()
        {
        }

        public RowsSet_Position_args(int object_rows_set_handle) : this()
        {
          this.ObjectRowsSetHandle = object_rows_set_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_rows_set_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsSetHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_set_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_rows_set_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp567 = new TStruct("RowsSet_Position_args");
            await oprot.WriteStructBeginAsync(tmp567, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp568 = new TField();
            tmp568.Name = "object_rows_set_handle";
            tmp568.Type = TType.I32;
            tmp568.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp568, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsSetHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Position_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectRowsSetHandle, other.ObjectRowsSetHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectRowsSetHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp569 = new StringBuilder("RowsSet_Position_args(");
          tmp569.Append(", ObjectRowsSetHandle: ");
          ObjectRowsSetHandle.ToString(tmp569);
          tmp569.Append(')');
          return tmp569.ToString();
        }
      }


      public partial class RowsSet_Position_result : TBase
      {
        private int _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RowsSet_Position_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp571 = new TStruct("RowsSet_Position_result");
            await oprot.WriteStructBeginAsync(tmp571, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp572 = new TField();

            if(this.__isset.@success)
            {
              tmp572.Name = "Success";
              tmp572.Type = TType.I32;
              tmp572.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp572, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp572.Name = "E";
                tmp572.Type = TType.Struct;
                tmp572.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp572, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Position_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp573 = new StringBuilder("RowsSet_Position_result(");
          int tmp574 = 0;
          if(__isset.@success)
          {
            if(0 < tmp574++) { tmp573.Append(", "); }
            tmp573.Append("Success: ");
            Success.ToString(tmp573);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp574++) { tmp573.Append(", "); }
            tmp573.Append("E: ");
            E.ToString(tmp573);
          }
          tmp573.Append(')');
          return tmp573.ToString();
        }
      }


      public partial class RowsSet_TotalRows_args : TBase
      {

        public int ObjectRowsSetHandle { get; set; } = 0;

        public RowsSet_TotalRows_args()
        {
        }

        public RowsSet_TotalRows_args(int object_rows_set_handle) : this()
        {
          this.ObjectRowsSetHandle = object_rows_set_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_rows_set_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsSetHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_set_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_rows_set_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp575 = new TStruct("RowsSet_TotalRows_args");
            await oprot.WriteStructBeginAsync(tmp575, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp576 = new TField();
            tmp576.Name = "object_rows_set_handle";
            tmp576.Type = TType.I32;
            tmp576.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp576, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsSetHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_TotalRows_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectRowsSetHandle, other.ObjectRowsSetHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectRowsSetHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp577 = new StringBuilder("RowsSet_TotalRows_args(");
          tmp577.Append(", ObjectRowsSetHandle: ");
          ObjectRowsSetHandle.ToString(tmp577);
          tmp577.Append(')');
          return tmp577.ToString();
        }
      }


      public partial class RowsSet_TotalRows_result : TBase
      {
        private int _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RowsSet_TotalRows_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp579 = new TStruct("RowsSet_TotalRows_result");
            await oprot.WriteStructBeginAsync(tmp579, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp580 = new TField();

            if(this.__isset.@success)
            {
              tmp580.Name = "Success";
              tmp580.Type = TType.I32;
              tmp580.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp580, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp580.Name = "E";
                tmp580.Type = TType.Struct;
                tmp580.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp580, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_TotalRows_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp581 = new StringBuilder("RowsSet_TotalRows_result(");
          int tmp582 = 0;
          if(__isset.@success)
          {
            if(0 < tmp582++) { tmp581.Append(", "); }
            tmp581.Append("Success: ");
            Success.ToString(tmp581);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp582++) { tmp581.Append(", "); }
            tmp581.Append("E: ");
            E.ToString(tmp581);
          }
          tmp581.Append(')');
          return tmp581.ToString();
        }
      }


      public partial class RowsSet_Seek_args : TBase
      {

        public int ObjectRowsSetHandle { get; set; } = 0;

        public int Offset { get; set; } = 0;

        /// <summary>
        /// 
        /// <seealso cref="global::QueryCat.Plugins.Sdk.CursorSeekOrigin"/>
        /// </summary>
        public global::QueryCat.Plugins.Sdk.CursorSeekOrigin Origin { get; set; } = default;

        public RowsSet_Seek_args()
        {
        }

        public RowsSet_Seek_args(int object_rows_set_handle, int @offset, global::QueryCat.Plugins.Sdk.CursorSeekOrigin @origin) : this()
        {
          this.ObjectRowsSetHandle = object_rows_set_handle;
          this.Offset = @offset;
          this.Origin = @origin;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_rows_set_handle = false;
            bool isset_offset = false;
            bool isset_origin = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsSetHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_set_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Offset = await iprot.ReadI32Async(cancellationToken);
                    isset_offset = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Origin = (global::QueryCat.Plugins.Sdk.CursorSeekOrigin)await iprot.ReadI32Async(cancellationToken);
                    isset_origin = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_rows_set_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_offset)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_origin)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp583 = new TStruct("RowsSet_Seek_args");
            await oprot.WriteStructBeginAsync(tmp583, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp584 = new TField();
            tmp584.Name = "object_rows_set_handle";
            tmp584.Type = TType.I32;
            tmp584.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp584, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsSetHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp584.Name = "offset";
            tmp584.Type = TType.I32;
            tmp584.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp584, cancellationToken);
            await oprot.WriteI32Async(Offset, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp584.Name = "origin";
            tmp584.Type = TType.I32;
            tmp584.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp584, cancellationToken);
            await oprot.WriteI32Async((int)Origin, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Seek_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectRowsSetHandle, other.ObjectRowsSetHandle)
            && global::System.Object.Equals(Offset, other.Offset)
            && global::System.Object.Equals(Origin, other.Origin);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectRowsSetHandle.GetHashCode();
            hashcode = (hashcode * 397) + Offset.GetHashCode();
            hashcode = (hashcode * 397) + Origin.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp585 = new StringBuilder("RowsSet_Seek_args(");
          tmp585.Append(", ObjectRowsSetHandle: ");
          ObjectRowsSetHandle.ToString(tmp585);
          tmp585.Append(", Offset: ");
          Offset.ToString(tmp585);
          tmp585.Append(", Origin: ");
          Origin.ToString(tmp585);
          tmp585.Append(')');
          return tmp585.ToString();
        }
      }


      public partial class RowsSet_Seek_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @e;
        }

        public RowsSet_Seek_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp587 = new TStruct("RowsSet_Seek_result");
            await oprot.WriteStructBeginAsync(tmp587, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp588 = new TField();

            if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp588.Name = "E";
                tmp588.Type = TType.Struct;
                tmp588.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp588, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Seek_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp589 = new StringBuilder("RowsSet_Seek_result(");
          int tmp590 = 0;
          if((E != null) && __isset.@e)
          {
            if(0 < tmp590++) { tmp589.Append(", "); }
            tmp589.Append("E: ");
            E.ToString(tmp589);
          }
          tmp589.Append(')');
          return tmp589.ToString();
        }
      }


      public partial class RowsSet_SetContext_args : TBase
      {

        public int ObjectRowsSetHandle { get; set; } = 0;

        public global::QueryCat.Plugins.Sdk.ContextQueryInfo? ContextQueryInfo { get; set; }

        public RowsSet_SetContext_args()
        {
        }

        public RowsSet_SetContext_args(int object_rows_set_handle, global::QueryCat.Plugins.Sdk.ContextQueryInfo? context_query_info) : this()
        {
          this.ObjectRowsSetHandle = object_rows_set_handle;
          this.ContextQueryInfo = context_query_info;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_rows_set_handle = false;
            bool isset_context_query_info = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsSetHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_set_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    ContextQueryInfo = new global::QueryCat.Plugins.Sdk.ContextQueryInfo();
                    await ContextQueryInfo.ReadAsync(iprot, cancellationToken);
                    isset_context_query_info = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_rows_set_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_context_query_info)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp591 = new TStruct("RowsSet_SetContext_args");
            await oprot.WriteStructBeginAsync(tmp591, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp592 = new TField();
            tmp592.Name = "object_rows_set_handle";
            tmp592.Type = TType.I32;
            tmp592.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp592, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsSetHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((ContextQueryInfo != null))
            {
              tmp592.Name = "context_query_info";
              tmp592.Type = TType.Struct;
              tmp592.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp592, cancellationToken);
              await ContextQueryInfo.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_SetContext_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectRowsSetHandle, other.ObjectRowsSetHandle)
            && global::System.Object.Equals(ContextQueryInfo, other.ContextQueryInfo);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectRowsSetHandle.GetHashCode();
            if((ContextQueryInfo != null))
            {
              hashcode = (hashcode * 397) + ContextQueryInfo.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp593 = new StringBuilder("RowsSet_SetContext_args(");
          tmp593.Append(", ObjectRowsSetHandle: ");
          ObjectRowsSetHandle.ToString(tmp593);
          if((ContextQueryInfo != null))
          {
            tmp593.Append(", ContextQueryInfo: ");
            ContextQueryInfo.ToString(tmp593);
          }
          tmp593.Append(')');
          return tmp593.ToString();
        }
      }


      public partial class RowsSet_SetContext_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @e;
        }

        public RowsSet_SetContext_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp595 = new TStruct("RowsSet_SetContext_result");
            await oprot.WriteStructBeginAsync(tmp595, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp596 = new TField();

            if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp596.Name = "E";
                tmp596.Type = TType.Struct;
                tmp596.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp596, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_SetContext_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp597 = new StringBuilder("RowsSet_SetContext_result(");
          int tmp598 = 0;
          if((E != null) && __isset.@e)
          {
            if(0 < tmp598++) { tmp597.Append(", "); }
            tmp597.Append("E: ");
            E.ToString(tmp597);
          }
          tmp597.Append(')');
          return tmp597.ToString();
        }
      }


      public partial class RowsSet_GetRows_args : TBase
      {
        private int _count;

        public int ObjectRowsSetHandle { get; set; } = 0;

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.@count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @count;
        }

        public RowsSet_GetRows_args()
        {
        }

        public RowsSet_GetRows_args(int object_rows_set_handle) : this()
        {
          this.ObjectRowsSetHandle = object_rows_set_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_rows_set_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsSetHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_set_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_rows_set_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp599 = new TStruct("RowsSet_GetRows_args");
            await oprot.WriteStructBeginAsync(tmp599, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp600 = new TField();
            tmp600.Name = "object_rows_set_handle";
            tmp600.Type = TType.I32;
            tmp600.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp600, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsSetHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if(__isset.@count)
            {
              tmp600.Name = "count";
              tmp600.Type = TType.I32;
              tmp600.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp600, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetRows_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectRowsSetHandle, other.ObjectRowsSetHandle)
            && ((__isset.@count == other.__isset.@count) && ((!__isset.@count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectRowsSetHandle.GetHashCode();
            if(__isset.@count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp601 = new StringBuilder("RowsSet_GetRows_args(");
          tmp601.Append(", ObjectRowsSetHandle: ");
          ObjectRowsSetHandle.ToString(tmp601);
          if(__isset.@count)
          {
            tmp601.Append(", Count: ");
            Count.ToString(tmp601);
          }
          tmp601.Append(')');
          return tmp601.ToString();
        }
      }


      public partial class RowsSet_GetRows_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.RowsList? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.RowsList? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RowsSet_GetRows_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.RowsList();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp603 = new TStruct("RowsSet_GetRows_result");
            await oprot.WriteStructBeginAsync(tmp603, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp604 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp604.Name = "Success";
                tmp604.Type = TType.Struct;
                tmp604.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp604, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp604.Name = "E";
                tmp604.Type = TType.Struct;
                tmp604.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp604, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetRows_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp605 = new StringBuilder("RowsSet_GetRows_result(");
          int tmp606 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp606++) { tmp605.Append(", "); }
            tmp605.Append("Success: ");
            Success.ToString(tmp605);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp606++) { tmp605.Append(", "); }
            tmp605.Append("E: ");
            E.ToString(tmp605);
          }
          tmp605.Append(')');
          return tmp605.ToString();
        }
      }


      public partial class RowsSet_GetUniqueKey_args : TBase
      {

        public int ObjectRowsSetHandle { get; set; } = 0;

        public RowsSet_GetUniqueKey_args()
        {
        }

        public RowsSet_GetUniqueKey_args(int object_rows_set_handle) : this()
        {
          this.ObjectRowsSetHandle = object_rows_set_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_rows_set_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsSetHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_set_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_rows_set_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp607 = new TStruct("RowsSet_GetUniqueKey_args");
            await oprot.WriteStructBeginAsync(tmp607, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp608 = new TField();
            tmp608.Name = "object_rows_set_handle";
            tmp608.Type = TType.I32;
            tmp608.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp608, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsSetHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetUniqueKey_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectRowsSetHandle, other.ObjectRowsSetHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectRowsSetHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp609 = new StringBuilder("RowsSet_GetUniqueKey_args(");
          tmp609.Append(", ObjectRowsSetHandle: ");
          ObjectRowsSetHandle.ToString(tmp609);
          tmp609.Append(')');
          return tmp609.ToString();
        }
      }


      public partial class RowsSet_GetUniqueKey_result : TBase
      {
        private List<string>? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public List<string>? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RowsSet_GetUniqueKey_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list611 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<string>(_list611.Count);
                      for(int _i612 = 0; _i612 < _list611.Count; ++_i612)
                      {
                        string _elem613;
                        _elem613 = await iprot.ReadStringAsync(cancellationToken);
                        Success.Add(_elem613);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp614 = new TStruct("RowsSet_GetUniqueKey_result");
            await oprot.WriteStructBeginAsync(tmp614, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp615 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp615.Name = "Success";
                tmp615.Type = TType.List;
                tmp615.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp615, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
                foreach (string _iter616 in Success)
                {
                  await oprot.WriteStringAsync(_iter616, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp615.Name = "E";
                tmp615.Type = TType.Struct;
                tmp615.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp615, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetUniqueKey_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp617 = new StringBuilder("RowsSet_GetUniqueKey_result(");
          int tmp618 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp618++) { tmp617.Append(", "); }
            tmp617.Append("Success: ");
            Success.ToString(tmp617);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp618++) { tmp617.Append(", "); }
            tmp617.Append("E: ");
            E.ToString(tmp617);
          }
          tmp617.Append(')');
          return tmp617.ToString();
        }
      }


      public partial class RowsSet_GetKeyColumns_args : TBase
      {
        private int _object_rows_set_handle;

        public int ObjectRowsSetHandle
        {
          get
          {
            return _object_rows_set_handle;
          }
          set
          {
            __isset.object_rows_set_handle = true;
            this._object_rows_set_handle = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool object_rows_set_handle;
        }

        public RowsSet_GetKeyColumns_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsSetHandle = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp619 = new TStruct("RowsSet_GetKeyColumns_args");
            await oprot.WriteStructBeginAsync(tmp619, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp620 = new TField();
            if(__isset.object_rows_set_handle)
            {
              tmp620.Name = "object_rows_set_handle";
              tmp620.Type = TType.I32;
              tmp620.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp620, cancellationToken);
              await oprot.WriteI32Async(ObjectRowsSetHandle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetKeyColumns_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.object_rows_set_handle == other.__isset.object_rows_set_handle) && ((!__isset.object_rows_set_handle) || (global::System.Object.Equals(ObjectRowsSetHandle, other.ObjectRowsSetHandle))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.object_rows_set_handle)
            {
              hashcode = (hashcode * 397) + ObjectRowsSetHandle.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp621 = new StringBuilder("RowsSet_GetKeyColumns_args(");
          int tmp622 = 0;
          if(__isset.object_rows_set_handle)
          {
            if(0 < tmp622++) { tmp621.Append(", "); }
            tmp621.Append("ObjectRowsSetHandle: ");
            ObjectRowsSetHandle.ToString(tmp621);
          }
          tmp621.Append(')');
          return tmp621.ToString();
        }
      }


      public partial class RowsSet_GetKeyColumns_result : TBase
      {
        private List<global::QueryCat.Plugins.Sdk.KeyColumn>? _success;

        public List<global::QueryCat.Plugins.Sdk.KeyColumn>? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public RowsSet_GetKeyColumns_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list623 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::QueryCat.Plugins.Sdk.KeyColumn>(_list623.Count);
                      for(int _i624 = 0; _i624 < _list623.Count; ++_i624)
                      {
                        global::QueryCat.Plugins.Sdk.KeyColumn _elem625;
                        _elem625 = new global::QueryCat.Plugins.Sdk.KeyColumn();
                        await _elem625.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem625);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp626 = new TStruct("RowsSet_GetKeyColumns_result");
            await oprot.WriteStructBeginAsync(tmp626, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp627 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp627.Name = "Success";
                tmp627.Type = TType.List;
                tmp627.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp627, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::QueryCat.Plugins.Sdk.KeyColumn _iter628 in Success)
                {
                  await _iter628.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetKeyColumns_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp629 = new StringBuilder("RowsSet_GetKeyColumns_result(");
          int tmp630 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp630++) { tmp629.Append(", "); }
            tmp629.Append("Success: ");
            Success.ToString(tmp629);
          }
          tmp629.Append(')');
          return tmp629.ToString();
        }
      }


      public partial class RowsSet_SetKeyColumnValue_args : TBase
      {

        public int ObjectRowsSetHandle { get; set; } = 0;

        public int ColumnIndex { get; set; } = 0;

        public string Operation { get; set; } = string.Empty;

        public global::QueryCat.Plugins.Sdk.VariantValue? Value { get; set; }

        public RowsSet_SetKeyColumnValue_args()
        {
        }

        public RowsSet_SetKeyColumnValue_args(int object_rows_set_handle, int column_index, string @operation, global::QueryCat.Plugins.Sdk.VariantValue? @value) : this()
        {
          this.ObjectRowsSetHandle = object_rows_set_handle;
          this.ColumnIndex = column_index;
          this.Operation = @operation;
          this.Value = @value;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_rows_set_handle = false;
            bool isset_column_index = false;
            bool isset_operation = false;
            bool isset_value = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsSetHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_set_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ColumnIndex = await iprot.ReadI32Async(cancellationToken);
                    isset_column_index = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Operation = await iprot.ReadStringAsync(cancellationToken);
                    isset_operation = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Struct)
                  {
                    Value = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Value.ReadAsync(iprot, cancellationToken);
                    isset_value = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_rows_set_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_column_index)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_operation)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_value)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp631 = new TStruct("RowsSet_SetKeyColumnValue_args");
            await oprot.WriteStructBeginAsync(tmp631, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp632 = new TField();
            tmp632.Name = "object_rows_set_handle";
            tmp632.Type = TType.I32;
            tmp632.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp632, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsSetHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp632.Name = "column_index";
            tmp632.Type = TType.I32;
            tmp632.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp632, cancellationToken);
            await oprot.WriteI32Async(ColumnIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Operation != null))
            {
              tmp632.Name = "operation";
              tmp632.Type = TType.String;
              tmp632.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp632, cancellationToken);
              await oprot.WriteStringAsync(Operation, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Value != null))
            {
              tmp632.Name = "value";
              tmp632.Type = TType.Struct;
              tmp632.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp632, cancellationToken);
              await Value.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_SetKeyColumnValue_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectRowsSetHandle, other.ObjectRowsSetHandle)
            && global::System.Object.Equals(ColumnIndex, other.ColumnIndex)
            && global::System.Object.Equals(Operation, other.Operation)
            && global::System.Object.Equals(Value, other.Value);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectRowsSetHandle.GetHashCode();
            hashcode = (hashcode * 397) + ColumnIndex.GetHashCode();
            if((Operation != null))
            {
              hashcode = (hashcode * 397) + Operation.GetHashCode();
            }
            if((Value != null))
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp633 = new StringBuilder("RowsSet_SetKeyColumnValue_args(");
          tmp633.Append(", ObjectRowsSetHandle: ");
          ObjectRowsSetHandle.ToString(tmp633);
          tmp633.Append(", ColumnIndex: ");
          ColumnIndex.ToString(tmp633);
          if((Operation != null))
          {
            tmp633.Append(", Operation: ");
            Operation.ToString(tmp633);
          }
          if((Value != null))
          {
            tmp633.Append(", Value: ");
            Value.ToString(tmp633);
          }
          tmp633.Append(')');
          return tmp633.ToString();
        }
      }


      public partial class RowsSet_SetKeyColumnValue_result : TBase
      {

        public RowsSet_SetKeyColumnValue_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp635 = new TStruct("RowsSet_SetKeyColumnValue_result");
            await oprot.WriteStructBeginAsync(tmp635, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_SetKeyColumnValue_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp636 = new StringBuilder("RowsSet_SetKeyColumnValue_result(");
          tmp636.Append(')');
          return tmp636.ToString();
        }
      }


      public partial class RowsSet_UnsetKeyColumnValue_args : TBase
      {

        public int ObjectRowsSetHandle { get; set; } = 0;

        public int ColumnIndex { get; set; } = 0;

        public string Operation { get; set; } = string.Empty;

        public RowsSet_UnsetKeyColumnValue_args()
        {
        }

        public RowsSet_UnsetKeyColumnValue_args(int object_rows_set_handle, int column_index, string @operation) : this()
        {
          this.ObjectRowsSetHandle = object_rows_set_handle;
          this.ColumnIndex = column_index;
          this.Operation = @operation;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_rows_set_handle = false;
            bool isset_column_index = false;
            bool isset_operation = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsSetHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_set_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ColumnIndex = await iprot.ReadI32Async(cancellationToken);
                    isset_column_index = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Operation = await iprot.ReadStringAsync(cancellationToken);
                    isset_operation = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_rows_set_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_column_index)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_operation)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp638 = new TStruct("RowsSet_UnsetKeyColumnValue_args");
            await oprot.WriteStructBeginAsync(tmp638, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp639 = new TField();
            tmp639.Name = "object_rows_set_handle";
            tmp639.Type = TType.I32;
            tmp639.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp639, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsSetHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp639.Name = "column_index";
            tmp639.Type = TType.I32;
            tmp639.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp639, cancellationToken);
            await oprot.WriteI32Async(ColumnIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Operation != null))
            {
              tmp639.Name = "operation";
              tmp639.Type = TType.String;
              tmp639.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp639, cancellationToken);
              await oprot.WriteStringAsync(Operation, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_UnsetKeyColumnValue_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectRowsSetHandle, other.ObjectRowsSetHandle)
            && global::System.Object.Equals(ColumnIndex, other.ColumnIndex)
            && global::System.Object.Equals(Operation, other.Operation);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectRowsSetHandle.GetHashCode();
            hashcode = (hashcode * 397) + ColumnIndex.GetHashCode();
            if((Operation != null))
            {
              hashcode = (hashcode * 397) + Operation.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp640 = new StringBuilder("RowsSet_UnsetKeyColumnValue_args(");
          tmp640.Append(", ObjectRowsSetHandle: ");
          ObjectRowsSetHandle.ToString(tmp640);
          tmp640.Append(", ColumnIndex: ");
          ColumnIndex.ToString(tmp640);
          if((Operation != null))
          {
            tmp640.Append(", Operation: ");
            Operation.ToString(tmp640);
          }
          tmp640.Append(')');
          return tmp640.ToString();
        }
      }


      public partial class RowsSet_UnsetKeyColumnValue_result : TBase
      {

        public RowsSet_UnsetKeyColumnValue_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp642 = new TStruct("RowsSet_UnsetKeyColumnValue_result");
            await oprot.WriteStructBeginAsync(tmp642, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_UnsetKeyColumnValue_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp643 = new StringBuilder("RowsSet_UnsetKeyColumnValue_result(");
          tmp643.Append(')');
          return tmp643.ToString();
        }
      }


      public partial class RowsSet_UpdateValue_args : TBase
      {

        public int ObjectRowsSetHandle { get; set; } = 0;

        public int ColumnIndex { get; set; } = 0;

        public global::QueryCat.Plugins.Sdk.VariantValue? Value { get; set; }

        public RowsSet_UpdateValue_args()
        {
        }

        public RowsSet_UpdateValue_args(int object_rows_set_handle, int column_index, global::QueryCat.Plugins.Sdk.VariantValue? @value) : this()
        {
          this.ObjectRowsSetHandle = object_rows_set_handle;
          this.ColumnIndex = column_index;
          this.Value = @value;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_rows_set_handle = false;
            bool isset_column_index = false;
            bool isset_value = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsSetHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_set_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ColumnIndex = await iprot.ReadI32Async(cancellationToken);
                    isset_column_index = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Value = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Value.ReadAsync(iprot, cancellationToken);
                    isset_value = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_rows_set_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_column_index)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_value)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp645 = new TStruct("RowsSet_UpdateValue_args");
            await oprot.WriteStructBeginAsync(tmp645, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp646 = new TField();
            tmp646.Name = "object_rows_set_handle";
            tmp646.Type = TType.I32;
            tmp646.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp646, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsSetHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp646.Name = "column_index";
            tmp646.Type = TType.I32;
            tmp646.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp646, cancellationToken);
            await oprot.WriteI32Async(ColumnIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Value != null))
            {
              tmp646.Name = "value";
              tmp646.Type = TType.Struct;
              tmp646.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp646, cancellationToken);
              await Value.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_UpdateValue_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectRowsSetHandle, other.ObjectRowsSetHandle)
            && global::System.Object.Equals(ColumnIndex, other.ColumnIndex)
            && global::System.Object.Equals(Value, other.Value);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectRowsSetHandle.GetHashCode();
            hashcode = (hashcode * 397) + ColumnIndex.GetHashCode();
            if((Value != null))
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp647 = new StringBuilder("RowsSet_UpdateValue_args(");
          tmp647.Append(", ObjectRowsSetHandle: ");
          ObjectRowsSetHandle.ToString(tmp647);
          tmp647.Append(", ColumnIndex: ");
          ColumnIndex.ToString(tmp647);
          if((Value != null))
          {
            tmp647.Append(", Value: ");
            Value.ToString(tmp647);
          }
          tmp647.Append(')');
          return tmp647.ToString();
        }
      }


      public partial class RowsSet_UpdateValue_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatErrorCode _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        /// <summary>
        /// 
        /// <seealso cref="global::QueryCat.Plugins.Sdk.QueryCatErrorCode"/>
        /// </summary>
        public global::QueryCat.Plugins.Sdk.QueryCatErrorCode Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RowsSet_UpdateValue_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = (global::QueryCat.Plugins.Sdk.QueryCatErrorCode)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp649 = new TStruct("RowsSet_UpdateValue_result");
            await oprot.WriteStructBeginAsync(tmp649, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp650 = new TField();

            if(this.__isset.@success)
            {
              tmp650.Name = "Success";
              tmp650.Type = TType.I32;
              tmp650.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp650, cancellationToken);
              await oprot.WriteI32Async((int)Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp650.Name = "E";
                tmp650.Type = TType.Struct;
                tmp650.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp650, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_UpdateValue_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp651 = new StringBuilder("RowsSet_UpdateValue_result(");
          int tmp652 = 0;
          if(__isset.@success)
          {
            if(0 < tmp652++) { tmp651.Append(", "); }
            tmp651.Append("Success: ");
            Success.ToString(tmp651);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp652++) { tmp651.Append(", "); }
            tmp651.Append("E: ");
            E.ToString(tmp651);
          }
          tmp651.Append(')');
          return tmp651.ToString();
        }
      }


      public partial class RowsSet_WriteValues_args : TBase
      {

        public int ObjectRowsSetHandle { get; set; } = 0;

        public List<global::QueryCat.Plugins.Sdk.VariantValue>? Values { get; set; }

        public RowsSet_WriteValues_args()
        {
        }

        public RowsSet_WriteValues_args(int object_rows_set_handle, List<global::QueryCat.Plugins.Sdk.VariantValue>? @values) : this()
        {
          this.ObjectRowsSetHandle = object_rows_set_handle;
          this.Values = @values;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_rows_set_handle = false;
            bool isset_values = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsSetHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_set_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list653 = await iprot.ReadListBeginAsync(cancellationToken);
                      Values = new List<global::QueryCat.Plugins.Sdk.VariantValue>(_list653.Count);
                      for(int _i654 = 0; _i654 < _list653.Count; ++_i654)
                      {
                        global::QueryCat.Plugins.Sdk.VariantValue _elem655;
                        _elem655 = new global::QueryCat.Plugins.Sdk.VariantValue();
                        await _elem655.ReadAsync(iprot, cancellationToken);
                        Values.Add(_elem655);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                    isset_values = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_rows_set_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_values)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp656 = new TStruct("RowsSet_WriteValues_args");
            await oprot.WriteStructBeginAsync(tmp656, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp657 = new TField();
            tmp657.Name = "object_rows_set_handle";
            tmp657.Type = TType.I32;
            tmp657.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp657, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsSetHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Values != null))
            {
              tmp657.Name = "values";
              tmp657.Type = TType.List;
              tmp657.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp657, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Values.Count), cancellationToken);
              foreach (global::QueryCat.Plugins.Sdk.VariantValue _iter658 in Values)
              {
                await _iter658.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_WriteValues_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectRowsSetHandle, other.ObjectRowsSetHandle)
            && TCollections.Equals(Values, other.Values);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectRowsSetHandle.GetHashCode();
            if((Values != null))
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Values);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp659 = new StringBuilder("RowsSet_WriteValues_args(");
          tmp659.Append(", ObjectRowsSetHandle: ");
          ObjectRowsSetHandle.ToString(tmp659);
          if((Values != null))
          {
            tmp659.Append(", Values: ");
            Values.ToString(tmp659);
          }
          tmp659.Append(')');
          return tmp659.ToString();
        }
      }


      public partial class RowsSet_WriteValues_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatErrorCode _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        /// <summary>
        /// 
        /// <seealso cref="global::QueryCat.Plugins.Sdk.QueryCatErrorCode"/>
        /// </summary>
        public global::QueryCat.Plugins.Sdk.QueryCatErrorCode Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RowsSet_WriteValues_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = (global::QueryCat.Plugins.Sdk.QueryCatErrorCode)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp661 = new TStruct("RowsSet_WriteValues_result");
            await oprot.WriteStructBeginAsync(tmp661, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp662 = new TField();

            if(this.__isset.@success)
            {
              tmp662.Name = "Success";
              tmp662.Type = TType.I32;
              tmp662.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp662, cancellationToken);
              await oprot.WriteI32Async((int)Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp662.Name = "E";
                tmp662.Type = TType.Struct;
                tmp662.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp662, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_WriteValues_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp663 = new StringBuilder("RowsSet_WriteValues_result(");
          int tmp664 = 0;
          if(__isset.@success)
          {
            if(0 < tmp664++) { tmp663.Append(", "); }
            tmp663.Append("Success: ");
            Success.ToString(tmp663);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp664++) { tmp663.Append(", "); }
            tmp663.Append("E: ");
            E.ToString(tmp663);
          }
          tmp663.Append(')');
          return tmp663.ToString();
        }
      }


      public partial class RowsSet_DeleteRow_args : TBase
      {

        public int ObjectRowsSetHandle { get; set; } = 0;

        public RowsSet_DeleteRow_args()
        {
        }

        public RowsSet_DeleteRow_args(int object_rows_set_handle) : this()
        {
          this.ObjectRowsSetHandle = object_rows_set_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_rows_set_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsSetHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_set_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_rows_set_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp665 = new TStruct("RowsSet_DeleteRow_args");
            await oprot.WriteStructBeginAsync(tmp665, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp666 = new TField();
            tmp666.Name = "object_rows_set_handle";
            tmp666.Type = TType.I32;
            tmp666.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp666, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsSetHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_DeleteRow_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectRowsSetHandle, other.ObjectRowsSetHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectRowsSetHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp667 = new StringBuilder("RowsSet_DeleteRow_args(");
          tmp667.Append(", ObjectRowsSetHandle: ");
          ObjectRowsSetHandle.ToString(tmp667);
          tmp667.Append(')');
          return tmp667.ToString();
        }
      }


      public partial class RowsSet_DeleteRow_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatErrorCode _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        /// <summary>
        /// 
        /// <seealso cref="global::QueryCat.Plugins.Sdk.QueryCatErrorCode"/>
        /// </summary>
        public global::QueryCat.Plugins.Sdk.QueryCatErrorCode Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RowsSet_DeleteRow_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = (global::QueryCat.Plugins.Sdk.QueryCatErrorCode)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp669 = new TStruct("RowsSet_DeleteRow_result");
            await oprot.WriteStructBeginAsync(tmp669, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp670 = new TField();

            if(this.__isset.@success)
            {
              tmp670.Name = "Success";
              tmp670.Type = TType.I32;
              tmp670.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp670, cancellationToken);
              await oprot.WriteI32Async((int)Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp670.Name = "E";
                tmp670.Type = TType.Struct;
                tmp670.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp670, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_DeleteRow_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp671 = new StringBuilder("RowsSet_DeleteRow_result(");
          int tmp672 = 0;
          if(__isset.@success)
          {
            if(0 < tmp672++) { tmp671.Append(", "); }
            tmp671.Append("Success: ");
            Success.ToString(tmp671);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp672++) { tmp671.Append(", "); }
            tmp671.Append("E: ");
            E.ToString(tmp671);
          }
          tmp671.Append(')');
          return tmp671.ToString();
        }
      }


      public partial class RowsFormatter_OpenInput_args : TBase
      {
        private string? _key;

        public int ObjectRowsFormatterHandle { get; set; } = 0;

        public int ObjectBlobHandle { get; set; } = 0;

        public string? Key
        {
          get
          {
            return _key;
          }
          set
          {
            __isset.@key = true;
            this._key = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @key;
        }

        public RowsFormatter_OpenInput_args()
        {
        }

        public RowsFormatter_OpenInput_args(int object_rows_formatter_handle, int object_blob_handle) : this()
        {
          this.ObjectRowsFormatterHandle = object_rows_formatter_handle;
          this.ObjectBlobHandle = object_blob_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_rows_formatter_handle = false;
            bool isset_object_blob_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsFormatterHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_formatter_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectBlobHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_blob_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_rows_formatter_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_blob_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp673 = new TStruct("RowsFormatter_OpenInput_args");
            await oprot.WriteStructBeginAsync(tmp673, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp674 = new TField();
            tmp674.Name = "object_rows_formatter_handle";
            tmp674.Type = TType.I32;
            tmp674.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp674, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsFormatterHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp674.Name = "object_blob_handle";
            tmp674.Type = TType.I32;
            tmp674.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp674, cancellationToken);
            await oprot.WriteI32Async(ObjectBlobHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Key != null) && __isset.@key)
            {
              tmp674.Name = "key";
              tmp674.Type = TType.String;
              tmp674.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp674, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsFormatter_OpenInput_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectRowsFormatterHandle, other.ObjectRowsFormatterHandle)
            && global::System.Object.Equals(ObjectBlobHandle, other.ObjectBlobHandle)
            && ((__isset.@key == other.__isset.@key) && ((!__isset.@key) || (global::System.Object.Equals(Key, other.Key))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectRowsFormatterHandle.GetHashCode();
            hashcode = (hashcode * 397) + ObjectBlobHandle.GetHashCode();
            if((Key != null) && __isset.@key)
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp675 = new StringBuilder("RowsFormatter_OpenInput_args(");
          tmp675.Append(", ObjectRowsFormatterHandle: ");
          ObjectRowsFormatterHandle.ToString(tmp675);
          tmp675.Append(", ObjectBlobHandle: ");
          ObjectBlobHandle.ToString(tmp675);
          if((Key != null) && __isset.@key)
          {
            tmp675.Append(", Key: ");
            Key.ToString(tmp675);
          }
          tmp675.Append(')');
          return tmp675.ToString();
        }
      }


      public partial class RowsFormatter_OpenInput_result : TBase
      {
        private int _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RowsFormatter_OpenInput_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp677 = new TStruct("RowsFormatter_OpenInput_result");
            await oprot.WriteStructBeginAsync(tmp677, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp678 = new TField();

            if(this.__isset.@success)
            {
              tmp678.Name = "Success";
              tmp678.Type = TType.I32;
              tmp678.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp678, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp678.Name = "E";
                tmp678.Type = TType.Struct;
                tmp678.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp678, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsFormatter_OpenInput_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp679 = new StringBuilder("RowsFormatter_OpenInput_result(");
          int tmp680 = 0;
          if(__isset.@success)
          {
            if(0 < tmp680++) { tmp679.Append(", "); }
            tmp679.Append("Success: ");
            Success.ToString(tmp679);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp680++) { tmp679.Append(", "); }
            tmp679.Append("E: ");
            E.ToString(tmp679);
          }
          tmp679.Append(')');
          return tmp679.ToString();
        }
      }


      public partial class RowsFormatter_OpenOutput_args : TBase
      {

        public int ObjectRowsFormatterHandle { get; set; } = 0;

        public int ObjectBlobHandle { get; set; } = 0;

        public RowsFormatter_OpenOutput_args()
        {
        }

        public RowsFormatter_OpenOutput_args(int object_rows_formatter_handle, int object_blob_handle) : this()
        {
          this.ObjectRowsFormatterHandle = object_rows_formatter_handle;
          this.ObjectBlobHandle = object_blob_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_rows_formatter_handle = false;
            bool isset_object_blob_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectRowsFormatterHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_rows_formatter_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectBlobHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_blob_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_rows_formatter_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_blob_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp681 = new TStruct("RowsFormatter_OpenOutput_args");
            await oprot.WriteStructBeginAsync(tmp681, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp682 = new TField();
            tmp682.Name = "object_rows_formatter_handle";
            tmp682.Type = TType.I32;
            tmp682.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp682, cancellationToken);
            await oprot.WriteI32Async(ObjectRowsFormatterHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp682.Name = "object_blob_handle";
            tmp682.Type = TType.I32;
            tmp682.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp682, cancellationToken);
            await oprot.WriteI32Async(ObjectBlobHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsFormatter_OpenOutput_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectRowsFormatterHandle, other.ObjectRowsFormatterHandle)
            && global::System.Object.Equals(ObjectBlobHandle, other.ObjectBlobHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectRowsFormatterHandle.GetHashCode();
            hashcode = (hashcode * 397) + ObjectBlobHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp683 = new StringBuilder("RowsFormatter_OpenOutput_args(");
          tmp683.Append(", ObjectRowsFormatterHandle: ");
          ObjectRowsFormatterHandle.ToString(tmp683);
          tmp683.Append(", ObjectBlobHandle: ");
          ObjectBlobHandle.ToString(tmp683);
          tmp683.Append(')');
          return tmp683.ToString();
        }
      }


      public partial class RowsFormatter_OpenOutput_result : TBase
      {
        private int _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RowsFormatter_OpenOutput_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp685 = new TStruct("RowsFormatter_OpenOutput_result");
            await oprot.WriteStructBeginAsync(tmp685, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp686 = new TField();

            if(this.__isset.@success)
            {
              tmp686.Name = "Success";
              tmp686.Type = TType.I32;
              tmp686.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp686, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp686.Name = "E";
                tmp686.Type = TType.Struct;
                tmp686.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp686, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsFormatter_OpenOutput_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp687 = new StringBuilder("RowsFormatter_OpenOutput_result(");
          int tmp688 = 0;
          if(__isset.@success)
          {
            if(0 < tmp688++) { tmp687.Append(", "); }
            tmp687.Append("Success: ");
            Success.ToString(tmp687);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp688++) { tmp687.Append(", "); }
            tmp687.Append("E: ");
            E.ToString(tmp687);
          }
          tmp687.Append(')');
          return tmp687.ToString();
        }
      }


      public partial class Blob_Read_args : TBase
      {

        public int ObjectBlobHandle { get; set; } = 0;

        public int Offset { get; set; } = 0;

        public int Count { get; set; } = 0;

        public Blob_Read_args()
        {
        }

        public Blob_Read_args(int object_blob_handle, int @offset, int @count) : this()
        {
          this.ObjectBlobHandle = object_blob_handle;
          this.Offset = @offset;
          this.Count = @count;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_blob_handle = false;
            bool isset_offset = false;
            bool isset_count = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectBlobHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_blob_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Offset = await iprot.ReadI32Async(cancellationToken);
                    isset_offset = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                    isset_count = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_blob_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_offset)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_count)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp689 = new TStruct("Blob_Read_args");
            await oprot.WriteStructBeginAsync(tmp689, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp690 = new TField();
            tmp690.Name = "object_blob_handle";
            tmp690.Type = TType.I32;
            tmp690.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp690, cancellationToken);
            await oprot.WriteI32Async(ObjectBlobHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp690.Name = "offset";
            tmp690.Type = TType.I32;
            tmp690.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp690, cancellationToken);
            await oprot.WriteI32Async(Offset, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp690.Name = "count";
            tmp690.Type = TType.I32;
            tmp690.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp690, cancellationToken);
            await oprot.WriteI32Async(Count, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_Read_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectBlobHandle, other.ObjectBlobHandle)
            && global::System.Object.Equals(Offset, other.Offset)
            && global::System.Object.Equals(Count, other.Count);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectBlobHandle.GetHashCode();
            hashcode = (hashcode * 397) + Offset.GetHashCode();
            hashcode = (hashcode * 397) + Count.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp691 = new StringBuilder("Blob_Read_args(");
          tmp691.Append(", ObjectBlobHandle: ");
          ObjectBlobHandle.ToString(tmp691);
          tmp691.Append(", Offset: ");
          Offset.ToString(tmp691);
          tmp691.Append(", Count: ");
          Count.ToString(tmp691);
          tmp691.Append(')');
          return tmp691.ToString();
        }
      }


      public partial class Blob_Read_result : TBase
      {
        private byte[]? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public byte[]? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public Blob_Read_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp693 = new TStruct("Blob_Read_result");
            await oprot.WriteStructBeginAsync(tmp693, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp694 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp694.Name = "Success";
                tmp694.Type = TType.String;
                tmp694.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp694, cancellationToken);
                await oprot.WriteBinaryAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp694.Name = "E";
                tmp694.Type = TType.Struct;
                tmp694.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp694, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_Read_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp695 = new StringBuilder("Blob_Read_result(");
          int tmp696 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp696++) { tmp695.Append(", "); }
            tmp695.Append("Success: ");
            Success.ToString(tmp695);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp696++) { tmp695.Append(", "); }
            tmp695.Append("E: ");
            E.ToString(tmp695);
          }
          tmp695.Append(')');
          return tmp695.ToString();
        }
      }


      public partial class Blob_Write_args : TBase
      {

        public int ObjectBlobHandle { get; set; } = 0;

        public byte[] Bytes { get; set; }= [];

        public Blob_Write_args()
        {
        }

        public Blob_Write_args(int object_blob_handle, byte[] @bytes) : this()
        {
          this.ObjectBlobHandle = object_blob_handle;
          this.Bytes = @bytes;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_blob_handle = false;
            bool isset_bytes = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectBlobHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_blob_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Bytes = await iprot.ReadBinaryAsync(cancellationToken);
                    isset_bytes = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_blob_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_bytes)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp697 = new TStruct("Blob_Write_args");
            await oprot.WriteStructBeginAsync(tmp697, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp698 = new TField();
            tmp698.Name = "object_blob_handle";
            tmp698.Type = TType.I32;
            tmp698.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp698, cancellationToken);
            await oprot.WriteI32Async(ObjectBlobHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Bytes != null))
            {
              tmp698.Name = "bytes";
              tmp698.Type = TType.String;
              tmp698.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp698, cancellationToken);
              await oprot.WriteBinaryAsync(Bytes, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_Write_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectBlobHandle, other.ObjectBlobHandle)
            && TCollections.Equals(Bytes, other.Bytes);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectBlobHandle.GetHashCode();
            if((Bytes != null))
            {
              hashcode = (hashcode * 397) + Bytes.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp699 = new StringBuilder("Blob_Write_args(");
          tmp699.Append(", ObjectBlobHandle: ");
          ObjectBlobHandle.ToString(tmp699);
          if((Bytes != null))
          {
            tmp699.Append(", Bytes: ");
            Bytes.ToString(tmp699);
          }
          tmp699.Append(')');
          return tmp699.ToString();
        }
      }


      public partial class Blob_Write_result : TBase
      {
        private long _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public long Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public Blob_Write_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I64)
                  {
                    Success = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp701 = new TStruct("Blob_Write_result");
            await oprot.WriteStructBeginAsync(tmp701, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp702 = new TField();

            if(this.__isset.@success)
            {
              tmp702.Name = "Success";
              tmp702.Type = TType.I64;
              tmp702.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp702, cancellationToken);
              await oprot.WriteI64Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp702.Name = "E";
                tmp702.Type = TType.Struct;
                tmp702.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp702, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_Write_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp703 = new StringBuilder("Blob_Write_result(");
          int tmp704 = 0;
          if(__isset.@success)
          {
            if(0 < tmp704++) { tmp703.Append(", "); }
            tmp703.Append("Success: ");
            Success.ToString(tmp703);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp704++) { tmp703.Append(", "); }
            tmp703.Append("E: ");
            E.ToString(tmp703);
          }
          tmp703.Append(')');
          return tmp703.ToString();
        }
      }


      public partial class Blob_GetLength_args : TBase
      {

        public int ObjectBlobHandle { get; set; } = 0;

        public Blob_GetLength_args()
        {
        }

        public Blob_GetLength_args(int object_blob_handle) : this()
        {
          this.ObjectBlobHandle = object_blob_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_blob_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectBlobHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_blob_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_blob_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp705 = new TStruct("Blob_GetLength_args");
            await oprot.WriteStructBeginAsync(tmp705, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp706 = new TField();
            tmp706.Name = "object_blob_handle";
            tmp706.Type = TType.I32;
            tmp706.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp706, cancellationToken);
            await oprot.WriteI32Async(ObjectBlobHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_GetLength_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectBlobHandle, other.ObjectBlobHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectBlobHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp707 = new StringBuilder("Blob_GetLength_args(");
          tmp707.Append(", ObjectBlobHandle: ");
          ObjectBlobHandle.ToString(tmp707);
          tmp707.Append(')');
          return tmp707.ToString();
        }
      }


      public partial class Blob_GetLength_result : TBase
      {
        private long _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public long Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public Blob_GetLength_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I64)
                  {
                    Success = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp709 = new TStruct("Blob_GetLength_result");
            await oprot.WriteStructBeginAsync(tmp709, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp710 = new TField();

            if(this.__isset.@success)
            {
              tmp710.Name = "Success";
              tmp710.Type = TType.I64;
              tmp710.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp710, cancellationToken);
              await oprot.WriteI64Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp710.Name = "E";
                tmp710.Type = TType.Struct;
                tmp710.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp710, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_GetLength_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp711 = new StringBuilder("Blob_GetLength_result(");
          int tmp712 = 0;
          if(__isset.@success)
          {
            if(0 < tmp712++) { tmp711.Append(", "); }
            tmp711.Append("Success: ");
            Success.ToString(tmp711);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp712++) { tmp711.Append(", "); }
            tmp711.Append("E: ");
            E.ToString(tmp711);
          }
          tmp711.Append(')');
          return tmp711.ToString();
        }
      }


      public partial class Serve_args : TBase
      {

        public Serve_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp713 = new TStruct("Serve_args");
            await oprot.WriteStructBeginAsync(tmp713, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Serve_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp714 = new StringBuilder("Serve_args(");
          tmp714.Append(')');
          return tmp714.ToString();
        }
      }


      public partial class Serve_result : TBase
      {
        private string? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public string? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public Serve_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp716 = new TStruct("Serve_result");
            await oprot.WriteStructBeginAsync(tmp716, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp717 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp717.Name = "Success";
                tmp717.Type = TType.String;
                tmp717.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp717, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp717.Name = "E";
                tmp717.Type = TType.Struct;
                tmp717.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp717, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Serve_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp718 = new StringBuilder("Serve_result(");
          int tmp719 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp719++) { tmp718.Append(", "); }
            tmp718.Append("Success: ");
            Success.ToString(tmp718);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp719++) { tmp718.Append(", "); }
            tmp718.Append("E: ");
            E.ToString(tmp718);
          }
          tmp718.Append(')');
          return tmp718.ToString();
        }
      }

    }

  }
}
