/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


// Thrift code generated for net8
#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0290  // use primary CTOR
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace QueryCat.Plugins.Sdk
{
  public partial class Plugin
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> CallFunctionAsync(string function_name, List<global::QueryCat.Plugins.Sdk.VariantValue>? @args, int object_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task ShutdownAsync(CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.Column>> RowsSet_GetColumnsAsync(int object_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task RowsSet_OpenAsync(int object_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task RowsSet_CloseAsync(int object_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task RowsSet_ResetAsync(int object_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<int> RowsSet_PositionAsync(int object_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<int> RowsSet_TotalRowsAsync(int object_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task RowsSet_SeekAsync(int object_handle, int @offset, global::QueryCat.Plugins.Sdk.CursorSeekOrigin @origin, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task RowsSet_SetContextAsync(int object_handle, global::QueryCat.Plugins.Sdk.ContextQueryInfo? context_query_info, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.RowsList> RowsSet_GetRowsAsync(int object_handle, int @count, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<List<string>> RowsSet_GetUniqueKeyAsync(int object_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.KeyColumn>> RowsSet_GetKeyColumnsAsync(int object_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task RowsSet_SetKeyColumnValueAsync(int object_handle, int column_index, string @operation, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task RowsSet_UnsetKeyColumnValueAsync(int object_handle, int column_index, string @operation, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.QueryCatErrorCode> RowsSet_UpdateValueAsync(int object_handle, int column_index, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.QueryCatErrorCode> RowsSet_WriteValuesAsync(int object_handle, List<global::QueryCat.Plugins.Sdk.VariantValue>? @values, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.QueryCatErrorCode> RowsSet_DeleteRowAsync(int object_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<byte[]> Blob_ReadAsync(int object_handle, int @offset, int @count, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<long> Blob_GetLengthAsync(int object_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> OfferConnectionAsync(string @uri, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> CallFunctionAsync(string function_name, List<global::QueryCat.Plugins.Sdk.VariantValue>? @args, int object_handle, CancellationToken cancellationToken = default)
      {
        await send_CallFunctionAsync(function_name, @args, object_handle, cancellationToken);
        return await recv_CallFunctionAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_CallFunctionAsync(string function_name, List<global::QueryCat.Plugins.Sdk.VariantValue>? @args, int object_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("CallFunction", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp221 = new InternalStructs.CallFunction_args() {
          FunctionName = function_name,
          Args = @args,
          ObjectHandle = object_handle,
        };
        
        await tmp221.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> recv_CallFunctionAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp222 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp222.Type == TMessageType.Exception)
        {
          var tmp223 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp223;
        }

        var tmp224 = new InternalStructs.CallFunction_result();
        await tmp224.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp224.__isset.success)
        {
          return tmp224.Success!;
        }
        if (tmp224.__isset.@e)
        {
          throw tmp224.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CallFunctionAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task ShutdownAsync(CancellationToken cancellationToken = default)
      {
        await send_ShutdownAsync(cancellationToken);
        await recv_ShutdownAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_ShutdownAsync(CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Shutdown", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp225 = new InternalStructs.Shutdown_args() {
        };
        
        await tmp225.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_ShutdownAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp226 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp226.Type == TMessageType.Exception)
        {
          var tmp227 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp227;
        }

        var tmp228 = new InternalStructs.Shutdown_result();
        await tmp228.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp228.__isset.@e)
        {
          throw tmp228.E!;
        }
      }

      public async global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.Column>> RowsSet_GetColumnsAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_GetColumnsAsync(object_handle, cancellationToken);
        return await recv_RowsSet_GetColumnsAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_GetColumnsAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_GetColumns", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp229 = new InternalStructs.RowsSet_GetColumns_args() {
          ObjectHandle = object_handle,
        };
        
        await tmp229.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.Column>> recv_RowsSet_GetColumnsAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp230 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp230.Type == TMessageType.Exception)
        {
          var tmp231 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp231;
        }

        var tmp232 = new InternalStructs.RowsSet_GetColumns_result();
        await tmp232.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp232.__isset.success)
        {
          return tmp232.Success!;
        }
        if (tmp232.__isset.@e)
        {
          throw tmp232.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsSet_GetColumnsAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task RowsSet_OpenAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_OpenAsync(object_handle, cancellationToken);
        await recv_RowsSet_OpenAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_OpenAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_Open", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp233 = new InternalStructs.RowsSet_Open_args() {
          ObjectHandle = object_handle,
        };
        
        await tmp233.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_RowsSet_OpenAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp234 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp234.Type == TMessageType.Exception)
        {
          var tmp235 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp235;
        }

        var tmp236 = new InternalStructs.RowsSet_Open_result();
        await tmp236.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp236.__isset.@e)
        {
          throw tmp236.E!;
        }
      }

      public async global::System.Threading.Tasks.Task RowsSet_CloseAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_CloseAsync(object_handle, cancellationToken);
        await recv_RowsSet_CloseAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_CloseAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_Close", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp237 = new InternalStructs.RowsSet_Close_args() {
          ObjectHandle = object_handle,
        };
        
        await tmp237.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_RowsSet_CloseAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp238 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp238.Type == TMessageType.Exception)
        {
          var tmp239 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp239;
        }

        var tmp240 = new InternalStructs.RowsSet_Close_result();
        await tmp240.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp240.__isset.@e)
        {
          throw tmp240.E!;
        }
      }

      public async global::System.Threading.Tasks.Task RowsSet_ResetAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_ResetAsync(object_handle, cancellationToken);
        await recv_RowsSet_ResetAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_ResetAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_Reset", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp241 = new InternalStructs.RowsSet_Reset_args() {
          ObjectHandle = object_handle,
        };
        
        await tmp241.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_RowsSet_ResetAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp242 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp242.Type == TMessageType.Exception)
        {
          var tmp243 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp243;
        }

        var tmp244 = new InternalStructs.RowsSet_Reset_result();
        await tmp244.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp244.__isset.@e)
        {
          throw tmp244.E!;
        }
      }

      public async global::System.Threading.Tasks.Task<int> RowsSet_PositionAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_PositionAsync(object_handle, cancellationToken);
        return await recv_RowsSet_PositionAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_PositionAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_Position", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp245 = new InternalStructs.RowsSet_Position_args() {
          ObjectHandle = object_handle,
        };
        
        await tmp245.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_RowsSet_PositionAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp246 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp246.Type == TMessageType.Exception)
        {
          var tmp247 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp247;
        }

        var tmp248 = new InternalStructs.RowsSet_Position_result();
        await tmp248.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp248.__isset.success)
        {
          return tmp248.Success;
        }
        if (tmp248.__isset.@e)
        {
          throw tmp248.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsSet_PositionAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<int> RowsSet_TotalRowsAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_TotalRowsAsync(object_handle, cancellationToken);
        return await recv_RowsSet_TotalRowsAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_TotalRowsAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_TotalRows", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp249 = new InternalStructs.RowsSet_TotalRows_args() {
          ObjectHandle = object_handle,
        };
        
        await tmp249.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<int> recv_RowsSet_TotalRowsAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp250 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp250.Type == TMessageType.Exception)
        {
          var tmp251 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp251;
        }

        var tmp252 = new InternalStructs.RowsSet_TotalRows_result();
        await tmp252.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp252.__isset.success)
        {
          return tmp252.Success;
        }
        if (tmp252.__isset.@e)
        {
          throw tmp252.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsSet_TotalRowsAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task RowsSet_SeekAsync(int object_handle, int @offset, global::QueryCat.Plugins.Sdk.CursorSeekOrigin @origin, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_SeekAsync(object_handle, @offset, @origin, cancellationToken);
        await recv_RowsSet_SeekAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_SeekAsync(int object_handle, int @offset, global::QueryCat.Plugins.Sdk.CursorSeekOrigin @origin, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_Seek", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp253 = new InternalStructs.RowsSet_Seek_args() {
          ObjectHandle = object_handle,
          Offset = @offset,
          Origin = @origin,
        };
        
        await tmp253.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_RowsSet_SeekAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp254 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp254.Type == TMessageType.Exception)
        {
          var tmp255 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp255;
        }

        var tmp256 = new InternalStructs.RowsSet_Seek_result();
        await tmp256.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp256.__isset.@e)
        {
          throw tmp256.E!;
        }
      }

      public async global::System.Threading.Tasks.Task RowsSet_SetContextAsync(int object_handle, global::QueryCat.Plugins.Sdk.ContextQueryInfo? context_query_info, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_SetContextAsync(object_handle, context_query_info, cancellationToken);
        await recv_RowsSet_SetContextAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_SetContextAsync(int object_handle, global::QueryCat.Plugins.Sdk.ContextQueryInfo? context_query_info, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_SetContext", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp257 = new InternalStructs.RowsSet_SetContext_args() {
          ObjectHandle = object_handle,
          ContextQueryInfo = context_query_info,
        };
        
        await tmp257.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_RowsSet_SetContextAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp258 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp258.Type == TMessageType.Exception)
        {
          var tmp259 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp259;
        }

        var tmp260 = new InternalStructs.RowsSet_SetContext_result();
        await tmp260.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp260.__isset.@e)
        {
          throw tmp260.E!;
        }
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.RowsList> RowsSet_GetRowsAsync(int object_handle, int @count, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_GetRowsAsync(object_handle, @count, cancellationToken);
        return await recv_RowsSet_GetRowsAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_GetRowsAsync(int object_handle, int @count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_GetRows", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp261 = new InternalStructs.RowsSet_GetRows_args() {
          ObjectHandle = object_handle,
          Count = @count,
        };
        
        await tmp261.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.RowsList> recv_RowsSet_GetRowsAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp262 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp262.Type == TMessageType.Exception)
        {
          var tmp263 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp263;
        }

        var tmp264 = new InternalStructs.RowsSet_GetRows_result();
        await tmp264.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp264.__isset.success)
        {
          return tmp264.Success!;
        }
        if (tmp264.__isset.@e)
        {
          throw tmp264.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsSet_GetRowsAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<string>> RowsSet_GetUniqueKeyAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_GetUniqueKeyAsync(object_handle, cancellationToken);
        return await recv_RowsSet_GetUniqueKeyAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_GetUniqueKeyAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_GetUniqueKey", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp265 = new InternalStructs.RowsSet_GetUniqueKey_args() {
          ObjectHandle = object_handle,
        };
        
        await tmp265.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<string>> recv_RowsSet_GetUniqueKeyAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp266 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp266.Type == TMessageType.Exception)
        {
          var tmp267 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp267;
        }

        var tmp268 = new InternalStructs.RowsSet_GetUniqueKey_result();
        await tmp268.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp268.__isset.success)
        {
          return tmp268.Success!;
        }
        if (tmp268.__isset.@e)
        {
          throw tmp268.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsSet_GetUniqueKeyAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.KeyColumn>> RowsSet_GetKeyColumnsAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_GetKeyColumnsAsync(object_handle, cancellationToken);
        return await recv_RowsSet_GetKeyColumnsAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_GetKeyColumnsAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_GetKeyColumns", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp269 = new InternalStructs.RowsSet_GetKeyColumns_args() {
          ObjectHandle = object_handle,
        };
        
        await tmp269.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.KeyColumn>> recv_RowsSet_GetKeyColumnsAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp270 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp270.Type == TMessageType.Exception)
        {
          var tmp271 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp271;
        }

        var tmp272 = new InternalStructs.RowsSet_GetKeyColumns_result();
        await tmp272.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp272.__isset.success)
        {
          return tmp272.Success!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsSet_GetKeyColumnsAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task RowsSet_SetKeyColumnValueAsync(int object_handle, int column_index, string @operation, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_SetKeyColumnValueAsync(object_handle, column_index, @operation, @value, cancellationToken);
        await recv_RowsSet_SetKeyColumnValueAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_SetKeyColumnValueAsync(int object_handle, int column_index, string @operation, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_SetKeyColumnValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp273 = new InternalStructs.RowsSet_SetKeyColumnValue_args() {
          ObjectHandle = object_handle,
          ColumnIndex = column_index,
          Operation = @operation,
          Value = @value,
        };
        
        await tmp273.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_RowsSet_SetKeyColumnValueAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp274 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp274.Type == TMessageType.Exception)
        {
          var tmp275 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp275;
        }

        var tmp276 = new InternalStructs.RowsSet_SetKeyColumnValue_result();
        await tmp276.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_UnsetKeyColumnValueAsync(int object_handle, int column_index, string @operation, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_UnsetKeyColumnValueAsync(object_handle, column_index, @operation, cancellationToken);
        await recv_RowsSet_UnsetKeyColumnValueAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_UnsetKeyColumnValueAsync(int object_handle, int column_index, string @operation, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_UnsetKeyColumnValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp277 = new InternalStructs.RowsSet_UnsetKeyColumnValue_args() {
          ObjectHandle = object_handle,
          ColumnIndex = column_index,
          Operation = @operation,
        };
        
        await tmp277.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_RowsSet_UnsetKeyColumnValueAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp278 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp278.Type == TMessageType.Exception)
        {
          var tmp279 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp279;
        }

        var tmp280 = new InternalStructs.RowsSet_UnsetKeyColumnValue_result();
        await tmp280.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.QueryCatErrorCode> RowsSet_UpdateValueAsync(int object_handle, int column_index, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_UpdateValueAsync(object_handle, column_index, @value, cancellationToken);
        return await recv_RowsSet_UpdateValueAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_UpdateValueAsync(int object_handle, int column_index, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_UpdateValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp281 = new InternalStructs.RowsSet_UpdateValue_args() {
          ObjectHandle = object_handle,
          ColumnIndex = column_index,
          Value = @value,
        };
        
        await tmp281.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.QueryCatErrorCode> recv_RowsSet_UpdateValueAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp282 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp282.Type == TMessageType.Exception)
        {
          var tmp283 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp283;
        }

        var tmp284 = new InternalStructs.RowsSet_UpdateValue_result();
        await tmp284.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp284.__isset.success)
        {
          return tmp284.Success;
        }
        if (tmp284.__isset.@e)
        {
          throw tmp284.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsSet_UpdateValueAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.QueryCatErrorCode> RowsSet_WriteValuesAsync(int object_handle, List<global::QueryCat.Plugins.Sdk.VariantValue>? @values, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_WriteValuesAsync(object_handle, @values, cancellationToken);
        return await recv_RowsSet_WriteValuesAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_WriteValuesAsync(int object_handle, List<global::QueryCat.Plugins.Sdk.VariantValue>? @values, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_WriteValues", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp285 = new InternalStructs.RowsSet_WriteValues_args() {
          ObjectHandle = object_handle,
          Values = @values,
        };
        
        await tmp285.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.QueryCatErrorCode> recv_RowsSet_WriteValuesAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp286 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp286.Type == TMessageType.Exception)
        {
          var tmp287 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp287;
        }

        var tmp288 = new InternalStructs.RowsSet_WriteValues_result();
        await tmp288.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp288.__isset.success)
        {
          return tmp288.Success;
        }
        if (tmp288.__isset.@e)
        {
          throw tmp288.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsSet_WriteValuesAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.QueryCatErrorCode> RowsSet_DeleteRowAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_DeleteRowAsync(object_handle, cancellationToken);
        return await recv_RowsSet_DeleteRowAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_DeleteRowAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_DeleteRow", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp289 = new InternalStructs.RowsSet_DeleteRow_args() {
          ObjectHandle = object_handle,
        };
        
        await tmp289.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.QueryCatErrorCode> recv_RowsSet_DeleteRowAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp290 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp290.Type == TMessageType.Exception)
        {
          var tmp291 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp291;
        }

        var tmp292 = new InternalStructs.RowsSet_DeleteRow_result();
        await tmp292.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp292.__isset.success)
        {
          return tmp292.Success;
        }
        if (tmp292.__isset.@e)
        {
          throw tmp292.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsSet_DeleteRowAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<byte[]> Blob_ReadAsync(int object_handle, int @offset, int @count, CancellationToken cancellationToken = default)
      {
        await send_Blob_ReadAsync(object_handle, @offset, @count, cancellationToken);
        return await recv_Blob_ReadAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Blob_ReadAsync(int object_handle, int @offset, int @count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Blob_Read", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp293 = new InternalStructs.Blob_Read_args() {
          ObjectHandle = object_handle,
          Offset = @offset,
          Count = @count,
        };
        
        await tmp293.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<byte[]> recv_Blob_ReadAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp294 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp294.Type == TMessageType.Exception)
        {
          var tmp295 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp295;
        }

        var tmp296 = new InternalStructs.Blob_Read_result();
        await tmp296.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp296.__isset.success)
        {
          return tmp296.Success!;
        }
        if (tmp296.__isset.@e)
        {
          throw tmp296.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Blob_ReadAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<long> Blob_GetLengthAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await send_Blob_GetLengthAsync(object_handle, cancellationToken);
        return await recv_Blob_GetLengthAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Blob_GetLengthAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Blob_GetLength", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp297 = new InternalStructs.Blob_GetLength_args() {
          ObjectHandle = object_handle,
        };
        
        await tmp297.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<long> recv_Blob_GetLengthAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp298 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp298.Type == TMessageType.Exception)
        {
          var tmp299 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp299;
        }

        var tmp300 = new InternalStructs.Blob_GetLength_result();
        await tmp300.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp300.__isset.success)
        {
          return tmp300.Success;
        }
        if (tmp300.__isset.@e)
        {
          throw tmp300.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Blob_GetLengthAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> OfferConnectionAsync(string @uri, CancellationToken cancellationToken = default)
      {
        await send_OfferConnectionAsync(@uri, cancellationToken);
        return await recv_OfferConnectionAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_OfferConnectionAsync(string @uri, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("OfferConnection", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp301 = new InternalStructs.OfferConnection_args() {
          Uri = @uri,
        };
        
        await tmp301.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_OfferConnectionAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp302 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp302.Type == TMessageType.Exception)
        {
          var tmp303 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp303;
        }

        var tmp304 = new InternalStructs.OfferConnection_result();
        await tmp304.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp304.__isset.success)
        {
          return tmp304.Success;
        }
        if (tmp304.__isset.@e)
        {
          throw tmp304.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "OfferConnectionAsync failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor>? _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor>? logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["CallFunction"] = CallFunction_ProcessAsync;
        processMap_["Shutdown"] = Shutdown_ProcessAsync;
        processMap_["RowsSet_GetColumns"] = RowsSet_GetColumns_ProcessAsync;
        processMap_["RowsSet_Open"] = RowsSet_Open_ProcessAsync;
        processMap_["RowsSet_Close"] = RowsSet_Close_ProcessAsync;
        processMap_["RowsSet_Reset"] = RowsSet_Reset_ProcessAsync;
        processMap_["RowsSet_Position"] = RowsSet_Position_ProcessAsync;
        processMap_["RowsSet_TotalRows"] = RowsSet_TotalRows_ProcessAsync;
        processMap_["RowsSet_Seek"] = RowsSet_Seek_ProcessAsync;
        processMap_["RowsSet_SetContext"] = RowsSet_SetContext_ProcessAsync;
        processMap_["RowsSet_GetRows"] = RowsSet_GetRows_ProcessAsync;
        processMap_["RowsSet_GetUniqueKey"] = RowsSet_GetUniqueKey_ProcessAsync;
        processMap_["RowsSet_GetKeyColumns"] = RowsSet_GetKeyColumns_ProcessAsync;
        processMap_["RowsSet_SetKeyColumnValue"] = RowsSet_SetKeyColumnValue_ProcessAsync;
        processMap_["RowsSet_UnsetKeyColumnValue"] = RowsSet_UnsetKeyColumnValue_ProcessAsync;
        processMap_["RowsSet_UpdateValue"] = RowsSet_UpdateValue_ProcessAsync;
        processMap_["RowsSet_WriteValues"] = RowsSet_WriteValues_ProcessAsync;
        processMap_["RowsSet_DeleteRow"] = RowsSet_DeleteRow_ProcessAsync;
        processMap_["Blob_Read"] = Blob_Read_ProcessAsync;
        processMap_["Blob_GetLength"] = Blob_GetLength_ProcessAsync;
        processMap_["OfferConnection"] = OfferConnection_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = [];

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task CallFunction_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp305 = new InternalStructs.CallFunction_args();
        await tmp305.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp306 = new InternalStructs.CallFunction_result();
        try
        {
          try
          {
            tmp306.Success = await _iAsync.CallFunctionAsync(tmp305.FunctionName, tmp305.Args, tmp305.ObjectHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp307)
          {
            tmp306.E = tmp307;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("CallFunction", TMessageType.Reply, seqid), cancellationToken); 
          await tmp306.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp308)
        {
          var tmp309 = $"Error occurred in {GetType().FullName}: {tmp308.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp308, tmp309);
          else
            Console.Error.WriteLine(tmp309);
          var tmp310 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("CallFunction", TMessageType.Exception, seqid), cancellationToken);
          await tmp310.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Shutdown_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp311 = new InternalStructs.Shutdown_args();
        await tmp311.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp312 = new InternalStructs.Shutdown_result();
        try
        {
          try
          {
            await _iAsync.ShutdownAsync(cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp313)
          {
            tmp312.E = tmp313;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Shutdown", TMessageType.Reply, seqid), cancellationToken); 
          await tmp312.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp314)
        {
          var tmp315 = $"Error occurred in {GetType().FullName}: {tmp314.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp314, tmp315);
          else
            Console.Error.WriteLine(tmp315);
          var tmp316 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Shutdown", TMessageType.Exception, seqid), cancellationToken);
          await tmp316.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_GetColumns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp317 = new InternalStructs.RowsSet_GetColumns_args();
        await tmp317.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp318 = new InternalStructs.RowsSet_GetColumns_result();
        try
        {
          try
          {
            tmp318.Success = await _iAsync.RowsSet_GetColumnsAsync(tmp317.ObjectHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp319)
          {
            tmp318.E = tmp319;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetColumns", TMessageType.Reply, seqid), cancellationToken); 
          await tmp318.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp320)
        {
          var tmp321 = $"Error occurred in {GetType().FullName}: {tmp320.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp320, tmp321);
          else
            Console.Error.WriteLine(tmp321);
          var tmp322 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetColumns", TMessageType.Exception, seqid), cancellationToken);
          await tmp322.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_Open_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp323 = new InternalStructs.RowsSet_Open_args();
        await tmp323.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp324 = new InternalStructs.RowsSet_Open_result();
        try
        {
          try
          {
            await _iAsync.RowsSet_OpenAsync(tmp323.ObjectHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp325)
          {
            tmp324.E = tmp325;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Open", TMessageType.Reply, seqid), cancellationToken); 
          await tmp324.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp326)
        {
          var tmp327 = $"Error occurred in {GetType().FullName}: {tmp326.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp326, tmp327);
          else
            Console.Error.WriteLine(tmp327);
          var tmp328 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Open", TMessageType.Exception, seqid), cancellationToken);
          await tmp328.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_Close_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp329 = new InternalStructs.RowsSet_Close_args();
        await tmp329.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp330 = new InternalStructs.RowsSet_Close_result();
        try
        {
          try
          {
            await _iAsync.RowsSet_CloseAsync(tmp329.ObjectHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp331)
          {
            tmp330.E = tmp331;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Close", TMessageType.Reply, seqid), cancellationToken); 
          await tmp330.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp332)
        {
          var tmp333 = $"Error occurred in {GetType().FullName}: {tmp332.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp332, tmp333);
          else
            Console.Error.WriteLine(tmp333);
          var tmp334 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Close", TMessageType.Exception, seqid), cancellationToken);
          await tmp334.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_Reset_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp335 = new InternalStructs.RowsSet_Reset_args();
        await tmp335.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp336 = new InternalStructs.RowsSet_Reset_result();
        try
        {
          try
          {
            await _iAsync.RowsSet_ResetAsync(tmp335.ObjectHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp337)
          {
            tmp336.E = tmp337;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Reset", TMessageType.Reply, seqid), cancellationToken); 
          await tmp336.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp338)
        {
          var tmp339 = $"Error occurred in {GetType().FullName}: {tmp338.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp338, tmp339);
          else
            Console.Error.WriteLine(tmp339);
          var tmp340 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Reset", TMessageType.Exception, seqid), cancellationToken);
          await tmp340.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_Position_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp341 = new InternalStructs.RowsSet_Position_args();
        await tmp341.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp342 = new InternalStructs.RowsSet_Position_result();
        try
        {
          try
          {
            tmp342.Success = await _iAsync.RowsSet_PositionAsync(tmp341.ObjectHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp343)
          {
            tmp342.E = tmp343;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Position", TMessageType.Reply, seqid), cancellationToken); 
          await tmp342.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp344)
        {
          var tmp345 = $"Error occurred in {GetType().FullName}: {tmp344.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp344, tmp345);
          else
            Console.Error.WriteLine(tmp345);
          var tmp346 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Position", TMessageType.Exception, seqid), cancellationToken);
          await tmp346.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_TotalRows_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp347 = new InternalStructs.RowsSet_TotalRows_args();
        await tmp347.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp348 = new InternalStructs.RowsSet_TotalRows_result();
        try
        {
          try
          {
            tmp348.Success = await _iAsync.RowsSet_TotalRowsAsync(tmp347.ObjectHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp349)
          {
            tmp348.E = tmp349;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_TotalRows", TMessageType.Reply, seqid), cancellationToken); 
          await tmp348.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp350)
        {
          var tmp351 = $"Error occurred in {GetType().FullName}: {tmp350.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp350, tmp351);
          else
            Console.Error.WriteLine(tmp351);
          var tmp352 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_TotalRows", TMessageType.Exception, seqid), cancellationToken);
          await tmp352.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_Seek_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp353 = new InternalStructs.RowsSet_Seek_args();
        await tmp353.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp354 = new InternalStructs.RowsSet_Seek_result();
        try
        {
          try
          {
            await _iAsync.RowsSet_SeekAsync(tmp353.ObjectHandle, tmp353.Offset, tmp353.Origin, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp355)
          {
            tmp354.E = tmp355;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Seek", TMessageType.Reply, seqid), cancellationToken); 
          await tmp354.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp356)
        {
          var tmp357 = $"Error occurred in {GetType().FullName}: {tmp356.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp356, tmp357);
          else
            Console.Error.WriteLine(tmp357);
          var tmp358 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Seek", TMessageType.Exception, seqid), cancellationToken);
          await tmp358.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_SetContext_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp359 = new InternalStructs.RowsSet_SetContext_args();
        await tmp359.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp360 = new InternalStructs.RowsSet_SetContext_result();
        try
        {
          try
          {
            await _iAsync.RowsSet_SetContextAsync(tmp359.ObjectHandle, tmp359.ContextQueryInfo, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp361)
          {
            tmp360.E = tmp361;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_SetContext", TMessageType.Reply, seqid), cancellationToken); 
          await tmp360.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp362)
        {
          var tmp363 = $"Error occurred in {GetType().FullName}: {tmp362.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp362, tmp363);
          else
            Console.Error.WriteLine(tmp363);
          var tmp364 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_SetContext", TMessageType.Exception, seqid), cancellationToken);
          await tmp364.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_GetRows_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp365 = new InternalStructs.RowsSet_GetRows_args();
        await tmp365.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp366 = new InternalStructs.RowsSet_GetRows_result();
        try
        {
          try
          {
            tmp366.Success = await _iAsync.RowsSet_GetRowsAsync(tmp365.ObjectHandle, tmp365.Count, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp367)
          {
            tmp366.E = tmp367;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetRows", TMessageType.Reply, seqid), cancellationToken); 
          await tmp366.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp368)
        {
          var tmp369 = $"Error occurred in {GetType().FullName}: {tmp368.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp368, tmp369);
          else
            Console.Error.WriteLine(tmp369);
          var tmp370 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetRows", TMessageType.Exception, seqid), cancellationToken);
          await tmp370.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_GetUniqueKey_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp371 = new InternalStructs.RowsSet_GetUniqueKey_args();
        await tmp371.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp372 = new InternalStructs.RowsSet_GetUniqueKey_result();
        try
        {
          try
          {
            tmp372.Success = await _iAsync.RowsSet_GetUniqueKeyAsync(tmp371.ObjectHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp373)
          {
            tmp372.E = tmp373;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetUniqueKey", TMessageType.Reply, seqid), cancellationToken); 
          await tmp372.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp374)
        {
          var tmp375 = $"Error occurred in {GetType().FullName}: {tmp374.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp374, tmp375);
          else
            Console.Error.WriteLine(tmp375);
          var tmp376 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetUniqueKey", TMessageType.Exception, seqid), cancellationToken);
          await tmp376.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_GetKeyColumns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp377 = new InternalStructs.RowsSet_GetKeyColumns_args();
        await tmp377.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp378 = new InternalStructs.RowsSet_GetKeyColumns_result();
        try
        {
          tmp378.Success = await _iAsync.RowsSet_GetKeyColumnsAsync(tmp377.ObjectHandle, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetKeyColumns", TMessageType.Reply, seqid), cancellationToken); 
          await tmp378.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp379)
        {
          var tmp380 = $"Error occurred in {GetType().FullName}: {tmp379.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp379, tmp380);
          else
            Console.Error.WriteLine(tmp380);
          var tmp381 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetKeyColumns", TMessageType.Exception, seqid), cancellationToken);
          await tmp381.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_SetKeyColumnValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp382 = new InternalStructs.RowsSet_SetKeyColumnValue_args();
        await tmp382.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp383 = new InternalStructs.RowsSet_SetKeyColumnValue_result();
        try
        {
          await _iAsync.RowsSet_SetKeyColumnValueAsync(tmp382.ObjectHandle, tmp382.ColumnIndex, tmp382.Operation, tmp382.Value, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_SetKeyColumnValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp383.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp384)
        {
          var tmp385 = $"Error occurred in {GetType().FullName}: {tmp384.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp384, tmp385);
          else
            Console.Error.WriteLine(tmp385);
          var tmp386 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_SetKeyColumnValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp386.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_UnsetKeyColumnValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp387 = new InternalStructs.RowsSet_UnsetKeyColumnValue_args();
        await tmp387.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp388 = new InternalStructs.RowsSet_UnsetKeyColumnValue_result();
        try
        {
          await _iAsync.RowsSet_UnsetKeyColumnValueAsync(tmp387.ObjectHandle, tmp387.ColumnIndex, tmp387.Operation, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_UnsetKeyColumnValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp388.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp389)
        {
          var tmp390 = $"Error occurred in {GetType().FullName}: {tmp389.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp389, tmp390);
          else
            Console.Error.WriteLine(tmp390);
          var tmp391 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_UnsetKeyColumnValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp391.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_UpdateValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp392 = new InternalStructs.RowsSet_UpdateValue_args();
        await tmp392.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp393 = new InternalStructs.RowsSet_UpdateValue_result();
        try
        {
          try
          {
            tmp393.Success = await _iAsync.RowsSet_UpdateValueAsync(tmp392.ObjectHandle, tmp392.ColumnIndex, tmp392.Value, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp394)
          {
            tmp393.E = tmp394;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_UpdateValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp393.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp395)
        {
          var tmp396 = $"Error occurred in {GetType().FullName}: {tmp395.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp395, tmp396);
          else
            Console.Error.WriteLine(tmp396);
          var tmp397 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_UpdateValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp397.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_WriteValues_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp398 = new InternalStructs.RowsSet_WriteValues_args();
        await tmp398.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp399 = new InternalStructs.RowsSet_WriteValues_result();
        try
        {
          try
          {
            tmp399.Success = await _iAsync.RowsSet_WriteValuesAsync(tmp398.ObjectHandle, tmp398.Values, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp400)
          {
            tmp399.E = tmp400;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_WriteValues", TMessageType.Reply, seqid), cancellationToken); 
          await tmp399.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp401)
        {
          var tmp402 = $"Error occurred in {GetType().FullName}: {tmp401.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp401, tmp402);
          else
            Console.Error.WriteLine(tmp402);
          var tmp403 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_WriteValues", TMessageType.Exception, seqid), cancellationToken);
          await tmp403.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_DeleteRow_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp404 = new InternalStructs.RowsSet_DeleteRow_args();
        await tmp404.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp405 = new InternalStructs.RowsSet_DeleteRow_result();
        try
        {
          try
          {
            tmp405.Success = await _iAsync.RowsSet_DeleteRowAsync(tmp404.ObjectHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp406)
          {
            tmp405.E = tmp406;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_DeleteRow", TMessageType.Reply, seqid), cancellationToken); 
          await tmp405.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp407)
        {
          var tmp408 = $"Error occurred in {GetType().FullName}: {tmp407.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp407, tmp408);
          else
            Console.Error.WriteLine(tmp408);
          var tmp409 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_DeleteRow", TMessageType.Exception, seqid), cancellationToken);
          await tmp409.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Blob_Read_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp410 = new InternalStructs.Blob_Read_args();
        await tmp410.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp411 = new InternalStructs.Blob_Read_result();
        try
        {
          try
          {
            tmp411.Success = await _iAsync.Blob_ReadAsync(tmp410.ObjectHandle, tmp410.Offset, tmp410.Count, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp412)
          {
            tmp411.E = tmp412;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_Read", TMessageType.Reply, seqid), cancellationToken); 
          await tmp411.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp413)
        {
          var tmp414 = $"Error occurred in {GetType().FullName}: {tmp413.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp413, tmp414);
          else
            Console.Error.WriteLine(tmp414);
          var tmp415 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_Read", TMessageType.Exception, seqid), cancellationToken);
          await tmp415.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Blob_GetLength_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp416 = new InternalStructs.Blob_GetLength_args();
        await tmp416.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp417 = new InternalStructs.Blob_GetLength_result();
        try
        {
          try
          {
            tmp417.Success = await _iAsync.Blob_GetLengthAsync(tmp416.ObjectHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp418)
          {
            tmp417.E = tmp418;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_GetLength", TMessageType.Reply, seqid), cancellationToken); 
          await tmp417.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp419)
        {
          var tmp420 = $"Error occurred in {GetType().FullName}: {tmp419.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp419, tmp420);
          else
            Console.Error.WriteLine(tmp420);
          var tmp421 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_GetLength", TMessageType.Exception, seqid), cancellationToken);
          await tmp421.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task OfferConnection_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp422 = new InternalStructs.OfferConnection_args();
        await tmp422.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp423 = new InternalStructs.OfferConnection_result();
        try
        {
          try
          {
            tmp423.Success = await _iAsync.OfferConnectionAsync(tmp422.Uri, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp424)
          {
            tmp423.E = tmp424;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("OfferConnection", TMessageType.Reply, seqid), cancellationToken); 
          await tmp423.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp425)
        {
          var tmp426 = $"Error occurred in {GetType().FullName}: {tmp425.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp425, tmp426);
          else
            Console.Error.WriteLine(tmp426);
          var tmp427 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("OfferConnection", TMessageType.Exception, seqid), cancellationToken);
          await tmp427.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class CallFunction_args : TBase
      {
        private int _object_handle;

        public string FunctionName { get; set; } = string.Empty;

        public List<global::QueryCat.Plugins.Sdk.VariantValue>? Args { get; set; }

        public int ObjectHandle
        {
          get
          {
            return _object_handle;
          }
          set
          {
            __isset.object_handle = true;
            this._object_handle = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool object_handle;
        }

        public CallFunction_args()
        {
        }

        public CallFunction_args(string function_name, List<global::QueryCat.Plugins.Sdk.VariantValue>? @args) : this()
        {
          this.FunctionName = function_name;
          this.Args = @args;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_function_name = false;
            bool isset_args = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    FunctionName = await iprot.ReadStringAsync(cancellationToken);
                    isset_function_name = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list428 = await iprot.ReadListBeginAsync(cancellationToken);
                      Args = new List<global::QueryCat.Plugins.Sdk.VariantValue>(_list428.Count);
                      for(int _i429 = 0; _i429 < _list428.Count; ++_i429)
                      {
                        global::QueryCat.Plugins.Sdk.VariantValue _elem430;
                        _elem430 = new global::QueryCat.Plugins.Sdk.VariantValue();
                        await _elem430.ReadAsync(iprot, cancellationToken);
                        Args.Add(_elem430);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                    isset_args = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_function_name)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_args)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp431 = new TStruct("CallFunction_args");
            await oprot.WriteStructBeginAsync(tmp431, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp432 = new TField();
            if((FunctionName != null))
            {
              tmp432.Name = "function_name";
              tmp432.Type = TType.String;
              tmp432.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp432, cancellationToken);
              await oprot.WriteStringAsync(FunctionName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Args != null))
            {
              tmp432.Name = "args";
              tmp432.Type = TType.List;
              tmp432.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp432, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Args.Count), cancellationToken);
              foreach (global::QueryCat.Plugins.Sdk.VariantValue _iter433 in Args)
              {
                await _iter433.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.object_handle)
            {
              tmp432.Name = "object_handle";
              tmp432.Type = TType.I32;
              tmp432.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp432, cancellationToken);
              await oprot.WriteI32Async(ObjectHandle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not CallFunction_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(FunctionName, other.FunctionName)
            && TCollections.Equals(Args, other.Args)
            && ((__isset.object_handle == other.__isset.object_handle) && ((!__isset.object_handle) || (global::System.Object.Equals(ObjectHandle, other.ObjectHandle))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((FunctionName != null))
            {
              hashcode = (hashcode * 397) + FunctionName.GetHashCode();
            }
            if((Args != null))
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Args);
            }
            if(__isset.object_handle)
            {
              hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp434 = new StringBuilder("CallFunction_args(");
          if((FunctionName != null))
          {
            tmp434.Append(", FunctionName: ");
            FunctionName.ToString(tmp434);
          }
          if((Args != null))
          {
            tmp434.Append(", Args: ");
            Args.ToString(tmp434);
          }
          if(__isset.object_handle)
          {
            tmp434.Append(", ObjectHandle: ");
            ObjectHandle.ToString(tmp434);
          }
          tmp434.Append(')');
          return tmp434.ToString();
        }
      }


      public partial class CallFunction_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.VariantValue? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.VariantValue? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public CallFunction_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp436 = new TStruct("CallFunction_result");
            await oprot.WriteStructBeginAsync(tmp436, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp437 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp437.Name = "Success";
                tmp437.Type = TType.Struct;
                tmp437.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp437, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp437.Name = "E";
                tmp437.Type = TType.Struct;
                tmp437.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp437, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not CallFunction_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp438 = new StringBuilder("CallFunction_result(");
          int tmp439 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp439++) { tmp438.Append(", "); }
            tmp438.Append("Success: ");
            Success.ToString(tmp438);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp439++) { tmp438.Append(", "); }
            tmp438.Append("E: ");
            E.ToString(tmp438);
          }
          tmp438.Append(')');
          return tmp438.ToString();
        }
      }


      public partial class Shutdown_args : TBase
      {

        public Shutdown_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp440 = new TStruct("Shutdown_args");
            await oprot.WriteStructBeginAsync(tmp440, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Shutdown_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp441 = new StringBuilder("Shutdown_args(");
          tmp441.Append(')');
          return tmp441.ToString();
        }
      }


      public partial class Shutdown_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @e;
        }

        public Shutdown_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp443 = new TStruct("Shutdown_result");
            await oprot.WriteStructBeginAsync(tmp443, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp444 = new TField();

            if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp444.Name = "E";
                tmp444.Type = TType.Struct;
                tmp444.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp444, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Shutdown_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp445 = new StringBuilder("Shutdown_result(");
          int tmp446 = 0;
          if((E != null) && __isset.@e)
          {
            if(0 < tmp446++) { tmp445.Append(", "); }
            tmp445.Append("E: ");
            E.ToString(tmp445);
          }
          tmp445.Append(')');
          return tmp445.ToString();
        }
      }


      public partial class RowsSet_GetColumns_args : TBase
      {

        public int ObjectHandle { get; set; } = 0;

        public RowsSet_GetColumns_args()
        {
        }

        public RowsSet_GetColumns_args(int object_handle) : this()
        {
          this.ObjectHandle = object_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp447 = new TStruct("RowsSet_GetColumns_args");
            await oprot.WriteStructBeginAsync(tmp447, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp448 = new TField();
            tmp448.Name = "object_handle";
            tmp448.Type = TType.I32;
            tmp448.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp448, cancellationToken);
            await oprot.WriteI32Async(ObjectHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetColumns_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectHandle, other.ObjectHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp449 = new StringBuilder("RowsSet_GetColumns_args(");
          tmp449.Append(", ObjectHandle: ");
          ObjectHandle.ToString(tmp449);
          tmp449.Append(')');
          return tmp449.ToString();
        }
      }


      public partial class RowsSet_GetColumns_result : TBase
      {
        private List<global::QueryCat.Plugins.Sdk.Column>? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public List<global::QueryCat.Plugins.Sdk.Column>? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RowsSet_GetColumns_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list451 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::QueryCat.Plugins.Sdk.Column>(_list451.Count);
                      for(int _i452 = 0; _i452 < _list451.Count; ++_i452)
                      {
                        global::QueryCat.Plugins.Sdk.Column _elem453;
                        _elem453 = new global::QueryCat.Plugins.Sdk.Column();
                        await _elem453.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem453);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp454 = new TStruct("RowsSet_GetColumns_result");
            await oprot.WriteStructBeginAsync(tmp454, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp455 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp455.Name = "Success";
                tmp455.Type = TType.List;
                tmp455.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp455, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::QueryCat.Plugins.Sdk.Column _iter456 in Success)
                {
                  await _iter456.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp455.Name = "E";
                tmp455.Type = TType.Struct;
                tmp455.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp455, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetColumns_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp457 = new StringBuilder("RowsSet_GetColumns_result(");
          int tmp458 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp458++) { tmp457.Append(", "); }
            tmp457.Append("Success: ");
            Success.ToString(tmp457);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp458++) { tmp457.Append(", "); }
            tmp457.Append("E: ");
            E.ToString(tmp457);
          }
          tmp457.Append(')');
          return tmp457.ToString();
        }
      }


      public partial class RowsSet_Open_args : TBase
      {

        public int ObjectHandle { get; set; } = 0;

        public RowsSet_Open_args()
        {
        }

        public RowsSet_Open_args(int object_handle) : this()
        {
          this.ObjectHandle = object_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp459 = new TStruct("RowsSet_Open_args");
            await oprot.WriteStructBeginAsync(tmp459, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp460 = new TField();
            tmp460.Name = "object_handle";
            tmp460.Type = TType.I32;
            tmp460.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp460, cancellationToken);
            await oprot.WriteI32Async(ObjectHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Open_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectHandle, other.ObjectHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp461 = new StringBuilder("RowsSet_Open_args(");
          tmp461.Append(", ObjectHandle: ");
          ObjectHandle.ToString(tmp461);
          tmp461.Append(')');
          return tmp461.ToString();
        }
      }


      public partial class RowsSet_Open_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @e;
        }

        public RowsSet_Open_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp463 = new TStruct("RowsSet_Open_result");
            await oprot.WriteStructBeginAsync(tmp463, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp464 = new TField();

            if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp464.Name = "E";
                tmp464.Type = TType.Struct;
                tmp464.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp464, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Open_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp465 = new StringBuilder("RowsSet_Open_result(");
          int tmp466 = 0;
          if((E != null) && __isset.@e)
          {
            if(0 < tmp466++) { tmp465.Append(", "); }
            tmp465.Append("E: ");
            E.ToString(tmp465);
          }
          tmp465.Append(')');
          return tmp465.ToString();
        }
      }


      public partial class RowsSet_Close_args : TBase
      {

        public int ObjectHandle { get; set; } = 0;

        public RowsSet_Close_args()
        {
        }

        public RowsSet_Close_args(int object_handle) : this()
        {
          this.ObjectHandle = object_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp467 = new TStruct("RowsSet_Close_args");
            await oprot.WriteStructBeginAsync(tmp467, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp468 = new TField();
            tmp468.Name = "object_handle";
            tmp468.Type = TType.I32;
            tmp468.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp468, cancellationToken);
            await oprot.WriteI32Async(ObjectHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Close_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectHandle, other.ObjectHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp469 = new StringBuilder("RowsSet_Close_args(");
          tmp469.Append(", ObjectHandle: ");
          ObjectHandle.ToString(tmp469);
          tmp469.Append(')');
          return tmp469.ToString();
        }
      }


      public partial class RowsSet_Close_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @e;
        }

        public RowsSet_Close_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp471 = new TStruct("RowsSet_Close_result");
            await oprot.WriteStructBeginAsync(tmp471, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp472 = new TField();

            if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp472.Name = "E";
                tmp472.Type = TType.Struct;
                tmp472.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp472, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Close_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp473 = new StringBuilder("RowsSet_Close_result(");
          int tmp474 = 0;
          if((E != null) && __isset.@e)
          {
            if(0 < tmp474++) { tmp473.Append(", "); }
            tmp473.Append("E: ");
            E.ToString(tmp473);
          }
          tmp473.Append(')');
          return tmp473.ToString();
        }
      }


      public partial class RowsSet_Reset_args : TBase
      {

        public int ObjectHandle { get; set; } = 0;

        public RowsSet_Reset_args()
        {
        }

        public RowsSet_Reset_args(int object_handle) : this()
        {
          this.ObjectHandle = object_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp475 = new TStruct("RowsSet_Reset_args");
            await oprot.WriteStructBeginAsync(tmp475, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp476 = new TField();
            tmp476.Name = "object_handle";
            tmp476.Type = TType.I32;
            tmp476.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp476, cancellationToken);
            await oprot.WriteI32Async(ObjectHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Reset_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectHandle, other.ObjectHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp477 = new StringBuilder("RowsSet_Reset_args(");
          tmp477.Append(", ObjectHandle: ");
          ObjectHandle.ToString(tmp477);
          tmp477.Append(')');
          return tmp477.ToString();
        }
      }


      public partial class RowsSet_Reset_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @e;
        }

        public RowsSet_Reset_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp479 = new TStruct("RowsSet_Reset_result");
            await oprot.WriteStructBeginAsync(tmp479, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp480 = new TField();

            if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp480.Name = "E";
                tmp480.Type = TType.Struct;
                tmp480.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp480, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Reset_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp481 = new StringBuilder("RowsSet_Reset_result(");
          int tmp482 = 0;
          if((E != null) && __isset.@e)
          {
            if(0 < tmp482++) { tmp481.Append(", "); }
            tmp481.Append("E: ");
            E.ToString(tmp481);
          }
          tmp481.Append(')');
          return tmp481.ToString();
        }
      }


      public partial class RowsSet_Position_args : TBase
      {

        public int ObjectHandle { get; set; } = 0;

        public RowsSet_Position_args()
        {
        }

        public RowsSet_Position_args(int object_handle) : this()
        {
          this.ObjectHandle = object_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp483 = new TStruct("RowsSet_Position_args");
            await oprot.WriteStructBeginAsync(tmp483, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp484 = new TField();
            tmp484.Name = "object_handle";
            tmp484.Type = TType.I32;
            tmp484.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp484, cancellationToken);
            await oprot.WriteI32Async(ObjectHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Position_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectHandle, other.ObjectHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp485 = new StringBuilder("RowsSet_Position_args(");
          tmp485.Append(", ObjectHandle: ");
          ObjectHandle.ToString(tmp485);
          tmp485.Append(')');
          return tmp485.ToString();
        }
      }


      public partial class RowsSet_Position_result : TBase
      {
        private int _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RowsSet_Position_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp487 = new TStruct("RowsSet_Position_result");
            await oprot.WriteStructBeginAsync(tmp487, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp488 = new TField();

            if(this.__isset.@success)
            {
              tmp488.Name = "Success";
              tmp488.Type = TType.I32;
              tmp488.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp488, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp488.Name = "E";
                tmp488.Type = TType.Struct;
                tmp488.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp488, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Position_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp489 = new StringBuilder("RowsSet_Position_result(");
          int tmp490 = 0;
          if(__isset.@success)
          {
            if(0 < tmp490++) { tmp489.Append(", "); }
            tmp489.Append("Success: ");
            Success.ToString(tmp489);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp490++) { tmp489.Append(", "); }
            tmp489.Append("E: ");
            E.ToString(tmp489);
          }
          tmp489.Append(')');
          return tmp489.ToString();
        }
      }


      public partial class RowsSet_TotalRows_args : TBase
      {

        public int ObjectHandle { get; set; } = 0;

        public RowsSet_TotalRows_args()
        {
        }

        public RowsSet_TotalRows_args(int object_handle) : this()
        {
          this.ObjectHandle = object_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp491 = new TStruct("RowsSet_TotalRows_args");
            await oprot.WriteStructBeginAsync(tmp491, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp492 = new TField();
            tmp492.Name = "object_handle";
            tmp492.Type = TType.I32;
            tmp492.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp492, cancellationToken);
            await oprot.WriteI32Async(ObjectHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_TotalRows_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectHandle, other.ObjectHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp493 = new StringBuilder("RowsSet_TotalRows_args(");
          tmp493.Append(", ObjectHandle: ");
          ObjectHandle.ToString(tmp493);
          tmp493.Append(')');
          return tmp493.ToString();
        }
      }


      public partial class RowsSet_TotalRows_result : TBase
      {
        private int _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public int Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RowsSet_TotalRows_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp495 = new TStruct("RowsSet_TotalRows_result");
            await oprot.WriteStructBeginAsync(tmp495, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp496 = new TField();

            if(this.__isset.@success)
            {
              tmp496.Name = "Success";
              tmp496.Type = TType.I32;
              tmp496.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp496, cancellationToken);
              await oprot.WriteI32Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp496.Name = "E";
                tmp496.Type = TType.Struct;
                tmp496.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp496, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_TotalRows_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp497 = new StringBuilder("RowsSet_TotalRows_result(");
          int tmp498 = 0;
          if(__isset.@success)
          {
            if(0 < tmp498++) { tmp497.Append(", "); }
            tmp497.Append("Success: ");
            Success.ToString(tmp497);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp498++) { tmp497.Append(", "); }
            tmp497.Append("E: ");
            E.ToString(tmp497);
          }
          tmp497.Append(')');
          return tmp497.ToString();
        }
      }


      public partial class RowsSet_Seek_args : TBase
      {

        public int ObjectHandle { get; set; } = 0;

        public int Offset { get; set; } = 0;

        /// <summary>
        /// 
        /// <seealso cref="global::QueryCat.Plugins.Sdk.CursorSeekOrigin"/>
        /// </summary>
        public global::QueryCat.Plugins.Sdk.CursorSeekOrigin Origin { get; set; } = default;

        public RowsSet_Seek_args()
        {
        }

        public RowsSet_Seek_args(int object_handle, int @offset, global::QueryCat.Plugins.Sdk.CursorSeekOrigin @origin) : this()
        {
          this.ObjectHandle = object_handle;
          this.Offset = @offset;
          this.Origin = @origin;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_handle = false;
            bool isset_offset = false;
            bool isset_origin = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Offset = await iprot.ReadI32Async(cancellationToken);
                    isset_offset = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Origin = (global::QueryCat.Plugins.Sdk.CursorSeekOrigin)await iprot.ReadI32Async(cancellationToken);
                    isset_origin = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_offset)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_origin)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp499 = new TStruct("RowsSet_Seek_args");
            await oprot.WriteStructBeginAsync(tmp499, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp500 = new TField();
            tmp500.Name = "object_handle";
            tmp500.Type = TType.I32;
            tmp500.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp500, cancellationToken);
            await oprot.WriteI32Async(ObjectHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp500.Name = "offset";
            tmp500.Type = TType.I32;
            tmp500.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp500, cancellationToken);
            await oprot.WriteI32Async(Offset, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp500.Name = "origin";
            tmp500.Type = TType.I32;
            tmp500.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp500, cancellationToken);
            await oprot.WriteI32Async((int)Origin, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Seek_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectHandle, other.ObjectHandle)
            && global::System.Object.Equals(Offset, other.Offset)
            && global::System.Object.Equals(Origin, other.Origin);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
            hashcode = (hashcode * 397) + Offset.GetHashCode();
            hashcode = (hashcode * 397) + Origin.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp501 = new StringBuilder("RowsSet_Seek_args(");
          tmp501.Append(", ObjectHandle: ");
          ObjectHandle.ToString(tmp501);
          tmp501.Append(", Offset: ");
          Offset.ToString(tmp501);
          tmp501.Append(", Origin: ");
          Origin.ToString(tmp501);
          tmp501.Append(')');
          return tmp501.ToString();
        }
      }


      public partial class RowsSet_Seek_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @e;
        }

        public RowsSet_Seek_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp503 = new TStruct("RowsSet_Seek_result");
            await oprot.WriteStructBeginAsync(tmp503, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp504 = new TField();

            if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp504.Name = "E";
                tmp504.Type = TType.Struct;
                tmp504.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp504, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Seek_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp505 = new StringBuilder("RowsSet_Seek_result(");
          int tmp506 = 0;
          if((E != null) && __isset.@e)
          {
            if(0 < tmp506++) { tmp505.Append(", "); }
            tmp505.Append("E: ");
            E.ToString(tmp505);
          }
          tmp505.Append(')');
          return tmp505.ToString();
        }
      }


      public partial class RowsSet_SetContext_args : TBase
      {

        public int ObjectHandle { get; set; } = 0;

        public global::QueryCat.Plugins.Sdk.ContextQueryInfo? ContextQueryInfo { get; set; }

        public RowsSet_SetContext_args()
        {
        }

        public RowsSet_SetContext_args(int object_handle, global::QueryCat.Plugins.Sdk.ContextQueryInfo? context_query_info) : this()
        {
          this.ObjectHandle = object_handle;
          this.ContextQueryInfo = context_query_info;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_handle = false;
            bool isset_context_query_info = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    ContextQueryInfo = new global::QueryCat.Plugins.Sdk.ContextQueryInfo();
                    await ContextQueryInfo.ReadAsync(iprot, cancellationToken);
                    isset_context_query_info = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_context_query_info)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp507 = new TStruct("RowsSet_SetContext_args");
            await oprot.WriteStructBeginAsync(tmp507, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp508 = new TField();
            tmp508.Name = "object_handle";
            tmp508.Type = TType.I32;
            tmp508.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp508, cancellationToken);
            await oprot.WriteI32Async(ObjectHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((ContextQueryInfo != null))
            {
              tmp508.Name = "context_query_info";
              tmp508.Type = TType.Struct;
              tmp508.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp508, cancellationToken);
              await ContextQueryInfo.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_SetContext_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectHandle, other.ObjectHandle)
            && global::System.Object.Equals(ContextQueryInfo, other.ContextQueryInfo);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
            if((ContextQueryInfo != null))
            {
              hashcode = (hashcode * 397) + ContextQueryInfo.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp509 = new StringBuilder("RowsSet_SetContext_args(");
          tmp509.Append(", ObjectHandle: ");
          ObjectHandle.ToString(tmp509);
          if((ContextQueryInfo != null))
          {
            tmp509.Append(", ContextQueryInfo: ");
            ContextQueryInfo.ToString(tmp509);
          }
          tmp509.Append(')');
          return tmp509.ToString();
        }
      }


      public partial class RowsSet_SetContext_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @e;
        }

        public RowsSet_SetContext_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp511 = new TStruct("RowsSet_SetContext_result");
            await oprot.WriteStructBeginAsync(tmp511, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp512 = new TField();

            if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp512.Name = "E";
                tmp512.Type = TType.Struct;
                tmp512.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp512, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_SetContext_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp513 = new StringBuilder("RowsSet_SetContext_result(");
          int tmp514 = 0;
          if((E != null) && __isset.@e)
          {
            if(0 < tmp514++) { tmp513.Append(", "); }
            tmp513.Append("E: ");
            E.ToString(tmp513);
          }
          tmp513.Append(')');
          return tmp513.ToString();
        }
      }


      public partial class RowsSet_GetRows_args : TBase
      {
        private int _count;

        public int ObjectHandle { get; set; } = 0;

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.@count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @count;
        }

        public RowsSet_GetRows_args()
        {
        }

        public RowsSet_GetRows_args(int object_handle) : this()
        {
          this.ObjectHandle = object_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp515 = new TStruct("RowsSet_GetRows_args");
            await oprot.WriteStructBeginAsync(tmp515, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp516 = new TField();
            tmp516.Name = "object_handle";
            tmp516.Type = TType.I32;
            tmp516.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp516, cancellationToken);
            await oprot.WriteI32Async(ObjectHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if(__isset.@count)
            {
              tmp516.Name = "count";
              tmp516.Type = TType.I32;
              tmp516.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp516, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetRows_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectHandle, other.ObjectHandle)
            && ((__isset.@count == other.__isset.@count) && ((!__isset.@count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
            if(__isset.@count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp517 = new StringBuilder("RowsSet_GetRows_args(");
          tmp517.Append(", ObjectHandle: ");
          ObjectHandle.ToString(tmp517);
          if(__isset.@count)
          {
            tmp517.Append(", Count: ");
            Count.ToString(tmp517);
          }
          tmp517.Append(')');
          return tmp517.ToString();
        }
      }


      public partial class RowsSet_GetRows_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.RowsList? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.RowsList? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RowsSet_GetRows_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.RowsList();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp519 = new TStruct("RowsSet_GetRows_result");
            await oprot.WriteStructBeginAsync(tmp519, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp520 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp520.Name = "Success";
                tmp520.Type = TType.Struct;
                tmp520.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp520, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp520.Name = "E";
                tmp520.Type = TType.Struct;
                tmp520.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp520, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetRows_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp521 = new StringBuilder("RowsSet_GetRows_result(");
          int tmp522 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp522++) { tmp521.Append(", "); }
            tmp521.Append("Success: ");
            Success.ToString(tmp521);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp522++) { tmp521.Append(", "); }
            tmp521.Append("E: ");
            E.ToString(tmp521);
          }
          tmp521.Append(')');
          return tmp521.ToString();
        }
      }


      public partial class RowsSet_GetUniqueKey_args : TBase
      {

        public int ObjectHandle { get; set; } = 0;

        public RowsSet_GetUniqueKey_args()
        {
        }

        public RowsSet_GetUniqueKey_args(int object_handle) : this()
        {
          this.ObjectHandle = object_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp523 = new TStruct("RowsSet_GetUniqueKey_args");
            await oprot.WriteStructBeginAsync(tmp523, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp524 = new TField();
            tmp524.Name = "object_handle";
            tmp524.Type = TType.I32;
            tmp524.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp524, cancellationToken);
            await oprot.WriteI32Async(ObjectHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetUniqueKey_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectHandle, other.ObjectHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp525 = new StringBuilder("RowsSet_GetUniqueKey_args(");
          tmp525.Append(", ObjectHandle: ");
          ObjectHandle.ToString(tmp525);
          tmp525.Append(')');
          return tmp525.ToString();
        }
      }


      public partial class RowsSet_GetUniqueKey_result : TBase
      {
        private List<string>? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public List<string>? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RowsSet_GetUniqueKey_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list527 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<string>(_list527.Count);
                      for(int _i528 = 0; _i528 < _list527.Count; ++_i528)
                      {
                        string _elem529;
                        _elem529 = await iprot.ReadStringAsync(cancellationToken);
                        Success.Add(_elem529);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp530 = new TStruct("RowsSet_GetUniqueKey_result");
            await oprot.WriteStructBeginAsync(tmp530, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp531 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp531.Name = "Success";
                tmp531.Type = TType.List;
                tmp531.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp531, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
                foreach (string _iter532 in Success)
                {
                  await oprot.WriteStringAsync(_iter532, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp531.Name = "E";
                tmp531.Type = TType.Struct;
                tmp531.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp531, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetUniqueKey_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp533 = new StringBuilder("RowsSet_GetUniqueKey_result(");
          int tmp534 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp534++) { tmp533.Append(", "); }
            tmp533.Append("Success: ");
            Success.ToString(tmp533);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp534++) { tmp533.Append(", "); }
            tmp533.Append("E: ");
            E.ToString(tmp533);
          }
          tmp533.Append(')');
          return tmp533.ToString();
        }
      }


      public partial class RowsSet_GetKeyColumns_args : TBase
      {
        private int _object_handle;

        public int ObjectHandle
        {
          get
          {
            return _object_handle;
          }
          set
          {
            __isset.object_handle = true;
            this._object_handle = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool object_handle;
        }

        public RowsSet_GetKeyColumns_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp535 = new TStruct("RowsSet_GetKeyColumns_args");
            await oprot.WriteStructBeginAsync(tmp535, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp536 = new TField();
            if(__isset.object_handle)
            {
              tmp536.Name = "object_handle";
              tmp536.Type = TType.I32;
              tmp536.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp536, cancellationToken);
              await oprot.WriteI32Async(ObjectHandle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetKeyColumns_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.object_handle == other.__isset.object_handle) && ((!__isset.object_handle) || (global::System.Object.Equals(ObjectHandle, other.ObjectHandle))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.object_handle)
            {
              hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp537 = new StringBuilder("RowsSet_GetKeyColumns_args(");
          int tmp538 = 0;
          if(__isset.object_handle)
          {
            if(0 < tmp538++) { tmp537.Append(", "); }
            tmp537.Append("ObjectHandle: ");
            ObjectHandle.ToString(tmp537);
          }
          tmp537.Append(')');
          return tmp537.ToString();
        }
      }


      public partial class RowsSet_GetKeyColumns_result : TBase
      {
        private List<global::QueryCat.Plugins.Sdk.KeyColumn>? _success;

        public List<global::QueryCat.Plugins.Sdk.KeyColumn>? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public RowsSet_GetKeyColumns_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list539 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::QueryCat.Plugins.Sdk.KeyColumn>(_list539.Count);
                      for(int _i540 = 0; _i540 < _list539.Count; ++_i540)
                      {
                        global::QueryCat.Plugins.Sdk.KeyColumn _elem541;
                        _elem541 = new global::QueryCat.Plugins.Sdk.KeyColumn();
                        await _elem541.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem541);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp542 = new TStruct("RowsSet_GetKeyColumns_result");
            await oprot.WriteStructBeginAsync(tmp542, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp543 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp543.Name = "Success";
                tmp543.Type = TType.List;
                tmp543.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp543, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::QueryCat.Plugins.Sdk.KeyColumn _iter544 in Success)
                {
                  await _iter544.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetKeyColumns_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp545 = new StringBuilder("RowsSet_GetKeyColumns_result(");
          int tmp546 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp546++) { tmp545.Append(", "); }
            tmp545.Append("Success: ");
            Success.ToString(tmp545);
          }
          tmp545.Append(')');
          return tmp545.ToString();
        }
      }


      public partial class RowsSet_SetKeyColumnValue_args : TBase
      {

        public int ObjectHandle { get; set; } = 0;

        public int ColumnIndex { get; set; } = 0;

        public string Operation { get; set; } = string.Empty;

        public global::QueryCat.Plugins.Sdk.VariantValue? Value { get; set; }

        public RowsSet_SetKeyColumnValue_args()
        {
        }

        public RowsSet_SetKeyColumnValue_args(int object_handle, int column_index, string @operation, global::QueryCat.Plugins.Sdk.VariantValue? @value) : this()
        {
          this.ObjectHandle = object_handle;
          this.ColumnIndex = column_index;
          this.Operation = @operation;
          this.Value = @value;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_handle = false;
            bool isset_column_index = false;
            bool isset_operation = false;
            bool isset_value = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ColumnIndex = await iprot.ReadI32Async(cancellationToken);
                    isset_column_index = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Operation = await iprot.ReadStringAsync(cancellationToken);
                    isset_operation = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Struct)
                  {
                    Value = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Value.ReadAsync(iprot, cancellationToken);
                    isset_value = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_column_index)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_operation)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_value)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp547 = new TStruct("RowsSet_SetKeyColumnValue_args");
            await oprot.WriteStructBeginAsync(tmp547, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp548 = new TField();
            tmp548.Name = "object_handle";
            tmp548.Type = TType.I32;
            tmp548.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp548, cancellationToken);
            await oprot.WriteI32Async(ObjectHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp548.Name = "column_index";
            tmp548.Type = TType.I32;
            tmp548.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp548, cancellationToken);
            await oprot.WriteI32Async(ColumnIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Operation != null))
            {
              tmp548.Name = "operation";
              tmp548.Type = TType.String;
              tmp548.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp548, cancellationToken);
              await oprot.WriteStringAsync(Operation, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Value != null))
            {
              tmp548.Name = "value";
              tmp548.Type = TType.Struct;
              tmp548.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp548, cancellationToken);
              await Value.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_SetKeyColumnValue_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectHandle, other.ObjectHandle)
            && global::System.Object.Equals(ColumnIndex, other.ColumnIndex)
            && global::System.Object.Equals(Operation, other.Operation)
            && global::System.Object.Equals(Value, other.Value);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
            hashcode = (hashcode * 397) + ColumnIndex.GetHashCode();
            if((Operation != null))
            {
              hashcode = (hashcode * 397) + Operation.GetHashCode();
            }
            if((Value != null))
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp549 = new StringBuilder("RowsSet_SetKeyColumnValue_args(");
          tmp549.Append(", ObjectHandle: ");
          ObjectHandle.ToString(tmp549);
          tmp549.Append(", ColumnIndex: ");
          ColumnIndex.ToString(tmp549);
          if((Operation != null))
          {
            tmp549.Append(", Operation: ");
            Operation.ToString(tmp549);
          }
          if((Value != null))
          {
            tmp549.Append(", Value: ");
            Value.ToString(tmp549);
          }
          tmp549.Append(')');
          return tmp549.ToString();
        }
      }


      public partial class RowsSet_SetKeyColumnValue_result : TBase
      {

        public RowsSet_SetKeyColumnValue_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp551 = new TStruct("RowsSet_SetKeyColumnValue_result");
            await oprot.WriteStructBeginAsync(tmp551, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_SetKeyColumnValue_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp552 = new StringBuilder("RowsSet_SetKeyColumnValue_result(");
          tmp552.Append(')');
          return tmp552.ToString();
        }
      }


      public partial class RowsSet_UnsetKeyColumnValue_args : TBase
      {

        public int ObjectHandle { get; set; } = 0;

        public int ColumnIndex { get; set; } = 0;

        public string Operation { get; set; } = string.Empty;

        public RowsSet_UnsetKeyColumnValue_args()
        {
        }

        public RowsSet_UnsetKeyColumnValue_args(int object_handle, int column_index, string @operation) : this()
        {
          this.ObjectHandle = object_handle;
          this.ColumnIndex = column_index;
          this.Operation = @operation;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_handle = false;
            bool isset_column_index = false;
            bool isset_operation = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ColumnIndex = await iprot.ReadI32Async(cancellationToken);
                    isset_column_index = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Operation = await iprot.ReadStringAsync(cancellationToken);
                    isset_operation = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_column_index)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_operation)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp554 = new TStruct("RowsSet_UnsetKeyColumnValue_args");
            await oprot.WriteStructBeginAsync(tmp554, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp555 = new TField();
            tmp555.Name = "object_handle";
            tmp555.Type = TType.I32;
            tmp555.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp555, cancellationToken);
            await oprot.WriteI32Async(ObjectHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp555.Name = "column_index";
            tmp555.Type = TType.I32;
            tmp555.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp555, cancellationToken);
            await oprot.WriteI32Async(ColumnIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Operation != null))
            {
              tmp555.Name = "operation";
              tmp555.Type = TType.String;
              tmp555.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp555, cancellationToken);
              await oprot.WriteStringAsync(Operation, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_UnsetKeyColumnValue_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectHandle, other.ObjectHandle)
            && global::System.Object.Equals(ColumnIndex, other.ColumnIndex)
            && global::System.Object.Equals(Operation, other.Operation);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
            hashcode = (hashcode * 397) + ColumnIndex.GetHashCode();
            if((Operation != null))
            {
              hashcode = (hashcode * 397) + Operation.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp556 = new StringBuilder("RowsSet_UnsetKeyColumnValue_args(");
          tmp556.Append(", ObjectHandle: ");
          ObjectHandle.ToString(tmp556);
          tmp556.Append(", ColumnIndex: ");
          ColumnIndex.ToString(tmp556);
          if((Operation != null))
          {
            tmp556.Append(", Operation: ");
            Operation.ToString(tmp556);
          }
          tmp556.Append(')');
          return tmp556.ToString();
        }
      }


      public partial class RowsSet_UnsetKeyColumnValue_result : TBase
      {

        public RowsSet_UnsetKeyColumnValue_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp558 = new TStruct("RowsSet_UnsetKeyColumnValue_result");
            await oprot.WriteStructBeginAsync(tmp558, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_UnsetKeyColumnValue_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp559 = new StringBuilder("RowsSet_UnsetKeyColumnValue_result(");
          tmp559.Append(')');
          return tmp559.ToString();
        }
      }


      public partial class RowsSet_UpdateValue_args : TBase
      {

        public int ObjectHandle { get; set; } = 0;

        public int ColumnIndex { get; set; } = 0;

        public global::QueryCat.Plugins.Sdk.VariantValue? Value { get; set; }

        public RowsSet_UpdateValue_args()
        {
        }

        public RowsSet_UpdateValue_args(int object_handle, int column_index, global::QueryCat.Plugins.Sdk.VariantValue? @value) : this()
        {
          this.ObjectHandle = object_handle;
          this.ColumnIndex = column_index;
          this.Value = @value;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_handle = false;
            bool isset_column_index = false;
            bool isset_value = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ColumnIndex = await iprot.ReadI32Async(cancellationToken);
                    isset_column_index = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Value = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Value.ReadAsync(iprot, cancellationToken);
                    isset_value = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_column_index)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_value)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp561 = new TStruct("RowsSet_UpdateValue_args");
            await oprot.WriteStructBeginAsync(tmp561, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp562 = new TField();
            tmp562.Name = "object_handle";
            tmp562.Type = TType.I32;
            tmp562.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp562, cancellationToken);
            await oprot.WriteI32Async(ObjectHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp562.Name = "column_index";
            tmp562.Type = TType.I32;
            tmp562.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp562, cancellationToken);
            await oprot.WriteI32Async(ColumnIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Value != null))
            {
              tmp562.Name = "value";
              tmp562.Type = TType.Struct;
              tmp562.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp562, cancellationToken);
              await Value.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_UpdateValue_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectHandle, other.ObjectHandle)
            && global::System.Object.Equals(ColumnIndex, other.ColumnIndex)
            && global::System.Object.Equals(Value, other.Value);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
            hashcode = (hashcode * 397) + ColumnIndex.GetHashCode();
            if((Value != null))
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp563 = new StringBuilder("RowsSet_UpdateValue_args(");
          tmp563.Append(", ObjectHandle: ");
          ObjectHandle.ToString(tmp563);
          tmp563.Append(", ColumnIndex: ");
          ColumnIndex.ToString(tmp563);
          if((Value != null))
          {
            tmp563.Append(", Value: ");
            Value.ToString(tmp563);
          }
          tmp563.Append(')');
          return tmp563.ToString();
        }
      }


      public partial class RowsSet_UpdateValue_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatErrorCode _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        /// <summary>
        /// 
        /// <seealso cref="global::QueryCat.Plugins.Sdk.QueryCatErrorCode"/>
        /// </summary>
        public global::QueryCat.Plugins.Sdk.QueryCatErrorCode Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RowsSet_UpdateValue_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = (global::QueryCat.Plugins.Sdk.QueryCatErrorCode)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp565 = new TStruct("RowsSet_UpdateValue_result");
            await oprot.WriteStructBeginAsync(tmp565, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp566 = new TField();

            if(this.__isset.@success)
            {
              tmp566.Name = "Success";
              tmp566.Type = TType.I32;
              tmp566.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp566, cancellationToken);
              await oprot.WriteI32Async((int)Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp566.Name = "E";
                tmp566.Type = TType.Struct;
                tmp566.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp566, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_UpdateValue_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp567 = new StringBuilder("RowsSet_UpdateValue_result(");
          int tmp568 = 0;
          if(__isset.@success)
          {
            if(0 < tmp568++) { tmp567.Append(", "); }
            tmp567.Append("Success: ");
            Success.ToString(tmp567);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp568++) { tmp567.Append(", "); }
            tmp567.Append("E: ");
            E.ToString(tmp567);
          }
          tmp567.Append(')');
          return tmp567.ToString();
        }
      }


      public partial class RowsSet_WriteValues_args : TBase
      {

        public int ObjectHandle { get; set; } = 0;

        public List<global::QueryCat.Plugins.Sdk.VariantValue>? Values { get; set; }

        public RowsSet_WriteValues_args()
        {
        }

        public RowsSet_WriteValues_args(int object_handle, List<global::QueryCat.Plugins.Sdk.VariantValue>? @values) : this()
        {
          this.ObjectHandle = object_handle;
          this.Values = @values;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_handle = false;
            bool isset_values = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list569 = await iprot.ReadListBeginAsync(cancellationToken);
                      Values = new List<global::QueryCat.Plugins.Sdk.VariantValue>(_list569.Count);
                      for(int _i570 = 0; _i570 < _list569.Count; ++_i570)
                      {
                        global::QueryCat.Plugins.Sdk.VariantValue _elem571;
                        _elem571 = new global::QueryCat.Plugins.Sdk.VariantValue();
                        await _elem571.ReadAsync(iprot, cancellationToken);
                        Values.Add(_elem571);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                    isset_values = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_values)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp572 = new TStruct("RowsSet_WriteValues_args");
            await oprot.WriteStructBeginAsync(tmp572, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp573 = new TField();
            tmp573.Name = "object_handle";
            tmp573.Type = TType.I32;
            tmp573.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp573, cancellationToken);
            await oprot.WriteI32Async(ObjectHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Values != null))
            {
              tmp573.Name = "values";
              tmp573.Type = TType.List;
              tmp573.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp573, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Values.Count), cancellationToken);
              foreach (global::QueryCat.Plugins.Sdk.VariantValue _iter574 in Values)
              {
                await _iter574.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_WriteValues_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectHandle, other.ObjectHandle)
            && TCollections.Equals(Values, other.Values);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
            if((Values != null))
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Values);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp575 = new StringBuilder("RowsSet_WriteValues_args(");
          tmp575.Append(", ObjectHandle: ");
          ObjectHandle.ToString(tmp575);
          if((Values != null))
          {
            tmp575.Append(", Values: ");
            Values.ToString(tmp575);
          }
          tmp575.Append(')');
          return tmp575.ToString();
        }
      }


      public partial class RowsSet_WriteValues_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatErrorCode _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        /// <summary>
        /// 
        /// <seealso cref="global::QueryCat.Plugins.Sdk.QueryCatErrorCode"/>
        /// </summary>
        public global::QueryCat.Plugins.Sdk.QueryCatErrorCode Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RowsSet_WriteValues_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = (global::QueryCat.Plugins.Sdk.QueryCatErrorCode)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp577 = new TStruct("RowsSet_WriteValues_result");
            await oprot.WriteStructBeginAsync(tmp577, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp578 = new TField();

            if(this.__isset.@success)
            {
              tmp578.Name = "Success";
              tmp578.Type = TType.I32;
              tmp578.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp578, cancellationToken);
              await oprot.WriteI32Async((int)Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp578.Name = "E";
                tmp578.Type = TType.Struct;
                tmp578.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp578, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_WriteValues_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp579 = new StringBuilder("RowsSet_WriteValues_result(");
          int tmp580 = 0;
          if(__isset.@success)
          {
            if(0 < tmp580++) { tmp579.Append(", "); }
            tmp579.Append("Success: ");
            Success.ToString(tmp579);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp580++) { tmp579.Append(", "); }
            tmp579.Append("E: ");
            E.ToString(tmp579);
          }
          tmp579.Append(')');
          return tmp579.ToString();
        }
      }


      public partial class RowsSet_DeleteRow_args : TBase
      {

        public int ObjectHandle { get; set; } = 0;

        public RowsSet_DeleteRow_args()
        {
        }

        public RowsSet_DeleteRow_args(int object_handle) : this()
        {
          this.ObjectHandle = object_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp581 = new TStruct("RowsSet_DeleteRow_args");
            await oprot.WriteStructBeginAsync(tmp581, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp582 = new TField();
            tmp582.Name = "object_handle";
            tmp582.Type = TType.I32;
            tmp582.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp582, cancellationToken);
            await oprot.WriteI32Async(ObjectHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_DeleteRow_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectHandle, other.ObjectHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp583 = new StringBuilder("RowsSet_DeleteRow_args(");
          tmp583.Append(", ObjectHandle: ");
          ObjectHandle.ToString(tmp583);
          tmp583.Append(')');
          return tmp583.ToString();
        }
      }


      public partial class RowsSet_DeleteRow_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatErrorCode _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        /// <summary>
        /// 
        /// <seealso cref="global::QueryCat.Plugins.Sdk.QueryCatErrorCode"/>
        /// </summary>
        public global::QueryCat.Plugins.Sdk.QueryCatErrorCode Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RowsSet_DeleteRow_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I32)
                  {
                    Success = (global::QueryCat.Plugins.Sdk.QueryCatErrorCode)await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp585 = new TStruct("RowsSet_DeleteRow_result");
            await oprot.WriteStructBeginAsync(tmp585, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp586 = new TField();

            if(this.__isset.@success)
            {
              tmp586.Name = "Success";
              tmp586.Type = TType.I32;
              tmp586.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp586, cancellationToken);
              await oprot.WriteI32Async((int)Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp586.Name = "E";
                tmp586.Type = TType.Struct;
                tmp586.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp586, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_DeleteRow_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp587 = new StringBuilder("RowsSet_DeleteRow_result(");
          int tmp588 = 0;
          if(__isset.@success)
          {
            if(0 < tmp588++) { tmp587.Append(", "); }
            tmp587.Append("Success: ");
            Success.ToString(tmp587);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp588++) { tmp587.Append(", "); }
            tmp587.Append("E: ");
            E.ToString(tmp587);
          }
          tmp587.Append(')');
          return tmp587.ToString();
        }
      }


      public partial class Blob_Read_args : TBase
      {

        public int ObjectHandle { get; set; } = 0;

        public int Offset { get; set; } = 0;

        public int Count { get; set; } = 0;

        public Blob_Read_args()
        {
        }

        public Blob_Read_args(int object_handle, int @offset, int @count) : this()
        {
          this.ObjectHandle = object_handle;
          this.Offset = @offset;
          this.Count = @count;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_handle = false;
            bool isset_offset = false;
            bool isset_count = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Offset = await iprot.ReadI32Async(cancellationToken);
                    isset_offset = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                    isset_count = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_offset)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_count)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp589 = new TStruct("Blob_Read_args");
            await oprot.WriteStructBeginAsync(tmp589, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp590 = new TField();
            tmp590.Name = "object_handle";
            tmp590.Type = TType.I32;
            tmp590.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp590, cancellationToken);
            await oprot.WriteI32Async(ObjectHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp590.Name = "offset";
            tmp590.Type = TType.I32;
            tmp590.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp590, cancellationToken);
            await oprot.WriteI32Async(Offset, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp590.Name = "count";
            tmp590.Type = TType.I32;
            tmp590.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp590, cancellationToken);
            await oprot.WriteI32Async(Count, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_Read_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectHandle, other.ObjectHandle)
            && global::System.Object.Equals(Offset, other.Offset)
            && global::System.Object.Equals(Count, other.Count);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
            hashcode = (hashcode * 397) + Offset.GetHashCode();
            hashcode = (hashcode * 397) + Count.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp591 = new StringBuilder("Blob_Read_args(");
          tmp591.Append(", ObjectHandle: ");
          ObjectHandle.ToString(tmp591);
          tmp591.Append(", Offset: ");
          Offset.ToString(tmp591);
          tmp591.Append(", Count: ");
          Count.ToString(tmp591);
          tmp591.Append(')');
          return tmp591.ToString();
        }
      }


      public partial class Blob_Read_result : TBase
      {
        private byte[]? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public byte[]? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public Blob_Read_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp593 = new TStruct("Blob_Read_result");
            await oprot.WriteStructBeginAsync(tmp593, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp594 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp594.Name = "Success";
                tmp594.Type = TType.String;
                tmp594.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp594, cancellationToken);
                await oprot.WriteBinaryAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp594.Name = "E";
                tmp594.Type = TType.Struct;
                tmp594.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp594, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_Read_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp595 = new StringBuilder("Blob_Read_result(");
          int tmp596 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp596++) { tmp595.Append(", "); }
            tmp595.Append("Success: ");
            Success.ToString(tmp595);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp596++) { tmp595.Append(", "); }
            tmp595.Append("E: ");
            E.ToString(tmp595);
          }
          tmp595.Append(')');
          return tmp595.ToString();
        }
      }


      public partial class Blob_GetLength_args : TBase
      {

        public int ObjectHandle { get; set; } = 0;

        public Blob_GetLength_args()
        {
        }

        public Blob_GetLength_args(int object_handle) : this()
        {
          this.ObjectHandle = object_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp597 = new TStruct("Blob_GetLength_args");
            await oprot.WriteStructBeginAsync(tmp597, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp598 = new TField();
            tmp598.Name = "object_handle";
            tmp598.Type = TType.I32;
            tmp598.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp598, cancellationToken);
            await oprot.WriteI32Async(ObjectHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_GetLength_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectHandle, other.ObjectHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp599 = new StringBuilder("Blob_GetLength_args(");
          tmp599.Append(", ObjectHandle: ");
          ObjectHandle.ToString(tmp599);
          tmp599.Append(')');
          return tmp599.ToString();
        }
      }


      public partial class Blob_GetLength_result : TBase
      {
        private long _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public long Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public Blob_GetLength_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I64)
                  {
                    Success = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp601 = new TStruct("Blob_GetLength_result");
            await oprot.WriteStructBeginAsync(tmp601, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp602 = new TField();

            if(this.__isset.@success)
            {
              tmp602.Name = "Success";
              tmp602.Type = TType.I64;
              tmp602.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp602, cancellationToken);
              await oprot.WriteI64Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp602.Name = "E";
                tmp602.Type = TType.Struct;
                tmp602.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp602, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_GetLength_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp603 = new StringBuilder("Blob_GetLength_result(");
          int tmp604 = 0;
          if(__isset.@success)
          {
            if(0 < tmp604++) { tmp603.Append(", "); }
            tmp603.Append("Success: ");
            Success.ToString(tmp603);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp604++) { tmp603.Append(", "); }
            tmp603.Append("E: ");
            E.ToString(tmp603);
          }
          tmp603.Append(')');
          return tmp603.ToString();
        }
      }


      public partial class OfferConnection_args : TBase
      {

        public string Uri { get; set; } = string.Empty;

        public OfferConnection_args()
        {
        }

        public OfferConnection_args(string @uri) : this()
        {
          this.Uri = @uri;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_uri = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Uri = await iprot.ReadStringAsync(cancellationToken);
                    isset_uri = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_uri)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp605 = new TStruct("OfferConnection_args");
            await oprot.WriteStructBeginAsync(tmp605, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp606 = new TField();
            if((Uri != null))
            {
              tmp606.Name = "uri";
              tmp606.Type = TType.String;
              tmp606.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp606, cancellationToken);
              await oprot.WriteStringAsync(Uri, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not OfferConnection_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Uri, other.Uri);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Uri != null))
            {
              hashcode = (hashcode * 397) + Uri.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp607 = new StringBuilder("OfferConnection_args(");
          if((Uri != null))
          {
            tmp607.Append(", Uri: ");
            Uri.ToString(tmp607);
          }
          tmp607.Append(')');
          return tmp607.ToString();
        }
      }


      public partial class OfferConnection_result : TBase
      {
        private bool _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public OfferConnection_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp609 = new TStruct("OfferConnection_result");
            await oprot.WriteStructBeginAsync(tmp609, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp610 = new TField();

            if(this.__isset.@success)
            {
              tmp610.Name = "Success";
              tmp610.Type = TType.Bool;
              tmp610.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp610, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp610.Name = "E";
                tmp610.Type = TType.Struct;
                tmp610.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp610, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not OfferConnection_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp611 = new StringBuilder("OfferConnection_result(");
          int tmp612 = 0;
          if(__isset.@success)
          {
            if(0 < tmp612++) { tmp611.Append(", "); }
            tmp611.Append("Success: ");
            Success.ToString(tmp611);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp612++) { tmp611.Append(", "); }
            tmp611.Append("E: ");
            E.ToString(tmp611);
          }
          tmp611.Append(')');
          return tmp611.ToString();
        }
      }

    }

  }
}
