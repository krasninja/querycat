/**
 * Autogenerated by Thrift Compiler (0.19.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace QueryCat.Plugins.Sdk
{
  public partial class Plugin
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> CallFunctionAsync(string function_name, List<global::QueryCat.Plugins.Sdk.VariantValue>? @args, int object_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task InitializeAsync(CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task ShutdownAsync(CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.Column>> RowsSet_GetColumnsAsync(int object_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task RowsSet_OpenAsync(int object_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task RowsSet_CloseAsync(int object_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task RowsSet_ResetAsync(int object_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task RowsSet_SetContextAsync(int object_handle, global::QueryCat.Plugins.Sdk.ContextQueryInfo? context_query_info, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.RowsList> RowsSet_GetRowsAsync(int object_handle, int @count, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<List<string>> RowsSet_GetUniqueKeyAsync(int object_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.KeyColumn>> RowsSet_GetKeyColumnsAsync(int object_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task RowsSet_SetKeyColumnValueAsync(int object_handle, string column_name, string @operation, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> RowsSet_UpdateValueAsync(int object_handle, int column_index, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task RowsSet_WriteValueAsync(int object_handle, List<global::QueryCat.Plugins.Sdk.VariantValue>? @values, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<byte[]> Blob_ReadAsync(int object_handle, int @offset, int @count, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<long> Blob_GetLengthAsync(int object_handle, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> CallFunctionAsync(string function_name, List<global::QueryCat.Plugins.Sdk.VariantValue>? @args, int object_handle, CancellationToken cancellationToken = default)
      {
        await send_CallFunctionAsync(function_name, @args, object_handle, cancellationToken);
        return await recv_CallFunctionAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_CallFunctionAsync(string function_name, List<global::QueryCat.Plugins.Sdk.VariantValue>? @args, int object_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("CallFunction", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp180 = new InternalStructs.CallFunction_args() {
          FunctionName = function_name,
          Args = @args,
          ObjectHandle = object_handle,
        };
        
        await tmp180.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> recv_CallFunctionAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp181 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp181.Type == TMessageType.Exception)
        {
          var tmp182 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp182;
        }

        var tmp183 = new InternalStructs.CallFunction_result();
        await tmp183.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp183.__isset.success)
        {
          return tmp183.Success!;
        }
        if (tmp183.__isset.@e)
        {
          throw tmp183.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CallFunctionAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task InitializeAsync(CancellationToken cancellationToken = default)
      {
        await send_InitializeAsync(cancellationToken);
        await recv_InitializeAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_InitializeAsync(CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Initialize", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp184 = new InternalStructs.Initialize_args() {
        };
        
        await tmp184.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_InitializeAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp185 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp185.Type == TMessageType.Exception)
        {
          var tmp186 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp186;
        }

        var tmp187 = new InternalStructs.Initialize_result();
        await tmp187.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp187.__isset.@e)
        {
          throw tmp187.E!;
        }
      }

      public async global::System.Threading.Tasks.Task ShutdownAsync(CancellationToken cancellationToken = default)
      {
        await send_ShutdownAsync(cancellationToken);
        await recv_ShutdownAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_ShutdownAsync(CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Shutdown", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp188 = new InternalStructs.Shutdown_args() {
        };
        
        await tmp188.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_ShutdownAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp189 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp189.Type == TMessageType.Exception)
        {
          var tmp190 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp190;
        }

        var tmp191 = new InternalStructs.Shutdown_result();
        await tmp191.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp191.__isset.@e)
        {
          throw tmp191.E!;
        }
      }

      public async global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.Column>> RowsSet_GetColumnsAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_GetColumnsAsync(object_handle, cancellationToken);
        return await recv_RowsSet_GetColumnsAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_GetColumnsAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_GetColumns", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp192 = new InternalStructs.RowsSet_GetColumns_args() {
          ObjectHandle = object_handle,
        };
        
        await tmp192.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.Column>> recv_RowsSet_GetColumnsAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp193 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp193.Type == TMessageType.Exception)
        {
          var tmp194 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp194;
        }

        var tmp195 = new InternalStructs.RowsSet_GetColumns_result();
        await tmp195.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp195.__isset.success)
        {
          return tmp195.Success!;
        }
        if (tmp195.__isset.@e)
        {
          throw tmp195.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsSet_GetColumnsAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task RowsSet_OpenAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_OpenAsync(object_handle, cancellationToken);
        await recv_RowsSet_OpenAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_OpenAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_Open", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp196 = new InternalStructs.RowsSet_Open_args() {
          ObjectHandle = object_handle,
        };
        
        await tmp196.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_RowsSet_OpenAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp197 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp197.Type == TMessageType.Exception)
        {
          var tmp198 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp198;
        }

        var tmp199 = new InternalStructs.RowsSet_Open_result();
        await tmp199.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp199.__isset.@e)
        {
          throw tmp199.E!;
        }
      }

      public async global::System.Threading.Tasks.Task RowsSet_CloseAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_CloseAsync(object_handle, cancellationToken);
        await recv_RowsSet_CloseAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_CloseAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_Close", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp200 = new InternalStructs.RowsSet_Close_args() {
          ObjectHandle = object_handle,
        };
        
        await tmp200.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_RowsSet_CloseAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp201 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp201.Type == TMessageType.Exception)
        {
          var tmp202 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp202;
        }

        var tmp203 = new InternalStructs.RowsSet_Close_result();
        await tmp203.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp203.__isset.@e)
        {
          throw tmp203.E!;
        }
      }

      public async global::System.Threading.Tasks.Task RowsSet_ResetAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_ResetAsync(object_handle, cancellationToken);
        await recv_RowsSet_ResetAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_ResetAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_Reset", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp204 = new InternalStructs.RowsSet_Reset_args() {
          ObjectHandle = object_handle,
        };
        
        await tmp204.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_RowsSet_ResetAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp205 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp205.Type == TMessageType.Exception)
        {
          var tmp206 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp206;
        }

        var tmp207 = new InternalStructs.RowsSet_Reset_result();
        await tmp207.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp207.__isset.@e)
        {
          throw tmp207.E!;
        }
      }

      public async global::System.Threading.Tasks.Task RowsSet_SetContextAsync(int object_handle, global::QueryCat.Plugins.Sdk.ContextQueryInfo? context_query_info, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_SetContextAsync(object_handle, context_query_info, cancellationToken);
        await recv_RowsSet_SetContextAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_SetContextAsync(int object_handle, global::QueryCat.Plugins.Sdk.ContextQueryInfo? context_query_info, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_SetContext", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp208 = new InternalStructs.RowsSet_SetContext_args() {
          ObjectHandle = object_handle,
          ContextQueryInfo = context_query_info,
        };
        
        await tmp208.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_RowsSet_SetContextAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp209 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp209.Type == TMessageType.Exception)
        {
          var tmp210 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp210;
        }

        var tmp211 = new InternalStructs.RowsSet_SetContext_result();
        await tmp211.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp211.__isset.@e)
        {
          throw tmp211.E!;
        }
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.RowsList> RowsSet_GetRowsAsync(int object_handle, int @count, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_GetRowsAsync(object_handle, @count, cancellationToken);
        return await recv_RowsSet_GetRowsAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_GetRowsAsync(int object_handle, int @count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_GetRows", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp212 = new InternalStructs.RowsSet_GetRows_args() {
          ObjectHandle = object_handle,
          Count = @count,
        };
        
        await tmp212.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.RowsList> recv_RowsSet_GetRowsAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp213 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp213.Type == TMessageType.Exception)
        {
          var tmp214 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp214;
        }

        var tmp215 = new InternalStructs.RowsSet_GetRows_result();
        await tmp215.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp215.__isset.success)
        {
          return tmp215.Success!;
        }
        if (tmp215.__isset.@e)
        {
          throw tmp215.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsSet_GetRowsAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<string>> RowsSet_GetUniqueKeyAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_GetUniqueKeyAsync(object_handle, cancellationToken);
        return await recv_RowsSet_GetUniqueKeyAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_GetUniqueKeyAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_GetUniqueKey", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp216 = new InternalStructs.RowsSet_GetUniqueKey_args() {
          ObjectHandle = object_handle,
        };
        
        await tmp216.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<string>> recv_RowsSet_GetUniqueKeyAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp217 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp217.Type == TMessageType.Exception)
        {
          var tmp218 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp218;
        }

        var tmp219 = new InternalStructs.RowsSet_GetUniqueKey_result();
        await tmp219.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp219.__isset.success)
        {
          return tmp219.Success!;
        }
        if (tmp219.__isset.@e)
        {
          throw tmp219.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsSet_GetUniqueKeyAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.KeyColumn>> RowsSet_GetKeyColumnsAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_GetKeyColumnsAsync(object_handle, cancellationToken);
        return await recv_RowsSet_GetKeyColumnsAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_GetKeyColumnsAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_GetKeyColumns", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp220 = new InternalStructs.RowsSet_GetKeyColumns_args() {
          ObjectHandle = object_handle,
        };
        
        await tmp220.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.KeyColumn>> recv_RowsSet_GetKeyColumnsAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp221 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp221.Type == TMessageType.Exception)
        {
          var tmp222 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp222;
        }

        var tmp223 = new InternalStructs.RowsSet_GetKeyColumns_result();
        await tmp223.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp223.__isset.success)
        {
          return tmp223.Success!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsSet_GetKeyColumnsAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task RowsSet_SetKeyColumnValueAsync(int object_handle, string column_name, string @operation, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_SetKeyColumnValueAsync(object_handle, column_name, @operation, @value, cancellationToken);
        await recv_RowsSet_SetKeyColumnValueAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_SetKeyColumnValueAsync(int object_handle, string column_name, string @operation, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_SetKeyColumnValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp224 = new InternalStructs.RowsSet_SetKeyColumnValue_args() {
          ObjectHandle = object_handle,
          ColumnName = column_name,
          Operation = @operation,
          Value = @value,
        };
        
        await tmp224.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_RowsSet_SetKeyColumnValueAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp225 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp225.Type == TMessageType.Exception)
        {
          var tmp226 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp226;
        }

        var tmp227 = new InternalStructs.RowsSet_SetKeyColumnValue_result();
        await tmp227.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> RowsSet_UpdateValueAsync(int object_handle, int column_index, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_UpdateValueAsync(object_handle, column_index, @value, cancellationToken);
        return await recv_RowsSet_UpdateValueAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_UpdateValueAsync(int object_handle, int column_index, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_UpdateValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp228 = new InternalStructs.RowsSet_UpdateValue_args() {
          ObjectHandle = object_handle,
          ColumnIndex = column_index,
          Value = @value,
        };
        
        await tmp228.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_RowsSet_UpdateValueAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp229 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp229.Type == TMessageType.Exception)
        {
          var tmp230 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp230;
        }

        var tmp231 = new InternalStructs.RowsSet_UpdateValue_result();
        await tmp231.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp231.__isset.success)
        {
          return tmp231.Success;
        }
        if (tmp231.__isset.@e)
        {
          throw tmp231.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RowsSet_UpdateValueAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task RowsSet_WriteValueAsync(int object_handle, List<global::QueryCat.Plugins.Sdk.VariantValue>? @values, CancellationToken cancellationToken = default)
      {
        await send_RowsSet_WriteValueAsync(object_handle, @values, cancellationToken);
        await recv_RowsSet_WriteValueAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RowsSet_WriteValueAsync(int object_handle, List<global::QueryCat.Plugins.Sdk.VariantValue>? @values, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RowsSet_WriteValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp232 = new InternalStructs.RowsSet_WriteValue_args() {
          ObjectHandle = object_handle,
          Values = @values,
        };
        
        await tmp232.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_RowsSet_WriteValueAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp233 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp233.Type == TMessageType.Exception)
        {
          var tmp234 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp234;
        }

        var tmp235 = new InternalStructs.RowsSet_WriteValue_result();
        await tmp235.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp235.__isset.@e)
        {
          throw tmp235.E!;
        }
      }

      public async global::System.Threading.Tasks.Task<byte[]> Blob_ReadAsync(int object_handle, int @offset, int @count, CancellationToken cancellationToken = default)
      {
        await send_Blob_ReadAsync(object_handle, @offset, @count, cancellationToken);
        return await recv_Blob_ReadAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Blob_ReadAsync(int object_handle, int @offset, int @count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Blob_Read", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp236 = new InternalStructs.Blob_Read_args() {
          ObjectHandle = object_handle,
          Offset = @offset,
          Count = @count,
        };
        
        await tmp236.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<byte[]> recv_Blob_ReadAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp237 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp237.Type == TMessageType.Exception)
        {
          var tmp238 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp238;
        }

        var tmp239 = new InternalStructs.Blob_Read_result();
        await tmp239.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp239.__isset.success)
        {
          return tmp239.Success!;
        }
        if (tmp239.__isset.@e)
        {
          throw tmp239.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Blob_ReadAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<long> Blob_GetLengthAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await send_Blob_GetLengthAsync(object_handle, cancellationToken);
        return await recv_Blob_GetLengthAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Blob_GetLengthAsync(int object_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Blob_GetLength", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp240 = new InternalStructs.Blob_GetLength_args() {
          ObjectHandle = object_handle,
        };
        
        await tmp240.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<long> recv_Blob_GetLengthAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp241 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp241.Type == TMessageType.Exception)
        {
          var tmp242 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp242;
        }

        var tmp243 = new InternalStructs.Blob_GetLength_result();
        await tmp243.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp243.__isset.success)
        {
          return tmp243.Success;
        }
        if (tmp243.__isset.@e)
        {
          throw tmp243.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Blob_GetLengthAsync failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor>? _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor>? logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["CallFunction"] = CallFunction_ProcessAsync;
        processMap_["Initialize"] = Initialize_ProcessAsync;
        processMap_["Shutdown"] = Shutdown_ProcessAsync;
        processMap_["RowsSet_GetColumns"] = RowsSet_GetColumns_ProcessAsync;
        processMap_["RowsSet_Open"] = RowsSet_Open_ProcessAsync;
        processMap_["RowsSet_Close"] = RowsSet_Close_ProcessAsync;
        processMap_["RowsSet_Reset"] = RowsSet_Reset_ProcessAsync;
        processMap_["RowsSet_SetContext"] = RowsSet_SetContext_ProcessAsync;
        processMap_["RowsSet_GetRows"] = RowsSet_GetRows_ProcessAsync;
        processMap_["RowsSet_GetUniqueKey"] = RowsSet_GetUniqueKey_ProcessAsync;
        processMap_["RowsSet_GetKeyColumns"] = RowsSet_GetKeyColumns_ProcessAsync;
        processMap_["RowsSet_SetKeyColumnValue"] = RowsSet_SetKeyColumnValue_ProcessAsync;
        processMap_["RowsSet_UpdateValue"] = RowsSet_UpdateValue_ProcessAsync;
        processMap_["RowsSet_WriteValue"] = RowsSet_WriteValue_ProcessAsync;
        processMap_["Blob_Read"] = Blob_Read_ProcessAsync;
        processMap_["Blob_GetLength"] = Blob_GetLength_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task CallFunction_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp244 = new InternalStructs.CallFunction_args();
        await tmp244.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp245 = new InternalStructs.CallFunction_result();
        try
        {
          try
          {
            tmp245.Success = await _iAsync.CallFunctionAsync(tmp244.FunctionName, tmp244.Args, tmp244.ObjectHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp246)
          {
            tmp245.E = tmp246;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("CallFunction", TMessageType.Reply, seqid), cancellationToken); 
          await tmp245.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp247)
        {
          var tmp248 = $"Error occurred in {GetType().FullName}: {tmp247.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp247, tmp248);
          else
            Console.Error.WriteLine(tmp248);
          var tmp249 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("CallFunction", TMessageType.Exception, seqid), cancellationToken);
          await tmp249.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Initialize_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp250 = new InternalStructs.Initialize_args();
        await tmp250.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp251 = new InternalStructs.Initialize_result();
        try
        {
          try
          {
            await _iAsync.InitializeAsync(cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp252)
          {
            tmp251.E = tmp252;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Initialize", TMessageType.Reply, seqid), cancellationToken); 
          await tmp251.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp253)
        {
          var tmp254 = $"Error occurred in {GetType().FullName}: {tmp253.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp253, tmp254);
          else
            Console.Error.WriteLine(tmp254);
          var tmp255 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Initialize", TMessageType.Exception, seqid), cancellationToken);
          await tmp255.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Shutdown_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp256 = new InternalStructs.Shutdown_args();
        await tmp256.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp257 = new InternalStructs.Shutdown_result();
        try
        {
          try
          {
            await _iAsync.ShutdownAsync(cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp258)
          {
            tmp257.E = tmp258;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Shutdown", TMessageType.Reply, seqid), cancellationToken); 
          await tmp257.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp259)
        {
          var tmp260 = $"Error occurred in {GetType().FullName}: {tmp259.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp259, tmp260);
          else
            Console.Error.WriteLine(tmp260);
          var tmp261 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Shutdown", TMessageType.Exception, seqid), cancellationToken);
          await tmp261.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_GetColumns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp262 = new InternalStructs.RowsSet_GetColumns_args();
        await tmp262.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp263 = new InternalStructs.RowsSet_GetColumns_result();
        try
        {
          try
          {
            tmp263.Success = await _iAsync.RowsSet_GetColumnsAsync(tmp262.ObjectHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp264)
          {
            tmp263.E = tmp264;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetColumns", TMessageType.Reply, seqid), cancellationToken); 
          await tmp263.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp265)
        {
          var tmp266 = $"Error occurred in {GetType().FullName}: {tmp265.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp265, tmp266);
          else
            Console.Error.WriteLine(tmp266);
          var tmp267 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetColumns", TMessageType.Exception, seqid), cancellationToken);
          await tmp267.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_Open_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp268 = new InternalStructs.RowsSet_Open_args();
        await tmp268.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp269 = new InternalStructs.RowsSet_Open_result();
        try
        {
          try
          {
            await _iAsync.RowsSet_OpenAsync(tmp268.ObjectHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp270)
          {
            tmp269.E = tmp270;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Open", TMessageType.Reply, seqid), cancellationToken); 
          await tmp269.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp271)
        {
          var tmp272 = $"Error occurred in {GetType().FullName}: {tmp271.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp271, tmp272);
          else
            Console.Error.WriteLine(tmp272);
          var tmp273 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Open", TMessageType.Exception, seqid), cancellationToken);
          await tmp273.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_Close_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp274 = new InternalStructs.RowsSet_Close_args();
        await tmp274.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp275 = new InternalStructs.RowsSet_Close_result();
        try
        {
          try
          {
            await _iAsync.RowsSet_CloseAsync(tmp274.ObjectHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp276)
          {
            tmp275.E = tmp276;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Close", TMessageType.Reply, seqid), cancellationToken); 
          await tmp275.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp277)
        {
          var tmp278 = $"Error occurred in {GetType().FullName}: {tmp277.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp277, tmp278);
          else
            Console.Error.WriteLine(tmp278);
          var tmp279 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Close", TMessageType.Exception, seqid), cancellationToken);
          await tmp279.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_Reset_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp280 = new InternalStructs.RowsSet_Reset_args();
        await tmp280.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp281 = new InternalStructs.RowsSet_Reset_result();
        try
        {
          try
          {
            await _iAsync.RowsSet_ResetAsync(tmp280.ObjectHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp282)
          {
            tmp281.E = tmp282;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Reset", TMessageType.Reply, seqid), cancellationToken); 
          await tmp281.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp283)
        {
          var tmp284 = $"Error occurred in {GetType().FullName}: {tmp283.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp283, tmp284);
          else
            Console.Error.WriteLine(tmp284);
          var tmp285 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_Reset", TMessageType.Exception, seqid), cancellationToken);
          await tmp285.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_SetContext_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp286 = new InternalStructs.RowsSet_SetContext_args();
        await tmp286.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp287 = new InternalStructs.RowsSet_SetContext_result();
        try
        {
          try
          {
            await _iAsync.RowsSet_SetContextAsync(tmp286.ObjectHandle, tmp286.ContextQueryInfo, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp288)
          {
            tmp287.E = tmp288;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_SetContext", TMessageType.Reply, seqid), cancellationToken); 
          await tmp287.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp289)
        {
          var tmp290 = $"Error occurred in {GetType().FullName}: {tmp289.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp289, tmp290);
          else
            Console.Error.WriteLine(tmp290);
          var tmp291 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_SetContext", TMessageType.Exception, seqid), cancellationToken);
          await tmp291.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_GetRows_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp292 = new InternalStructs.RowsSet_GetRows_args();
        await tmp292.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp293 = new InternalStructs.RowsSet_GetRows_result();
        try
        {
          try
          {
            tmp293.Success = await _iAsync.RowsSet_GetRowsAsync(tmp292.ObjectHandle, tmp292.Count, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp294)
          {
            tmp293.E = tmp294;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetRows", TMessageType.Reply, seqid), cancellationToken); 
          await tmp293.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp295)
        {
          var tmp296 = $"Error occurred in {GetType().FullName}: {tmp295.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp295, tmp296);
          else
            Console.Error.WriteLine(tmp296);
          var tmp297 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetRows", TMessageType.Exception, seqid), cancellationToken);
          await tmp297.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_GetUniqueKey_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp298 = new InternalStructs.RowsSet_GetUniqueKey_args();
        await tmp298.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp299 = new InternalStructs.RowsSet_GetUniqueKey_result();
        try
        {
          try
          {
            tmp299.Success = await _iAsync.RowsSet_GetUniqueKeyAsync(tmp298.ObjectHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp300)
          {
            tmp299.E = tmp300;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetUniqueKey", TMessageType.Reply, seqid), cancellationToken); 
          await tmp299.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp301)
        {
          var tmp302 = $"Error occurred in {GetType().FullName}: {tmp301.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp301, tmp302);
          else
            Console.Error.WriteLine(tmp302);
          var tmp303 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetUniqueKey", TMessageType.Exception, seqid), cancellationToken);
          await tmp303.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_GetKeyColumns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp304 = new InternalStructs.RowsSet_GetKeyColumns_args();
        await tmp304.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp305 = new InternalStructs.RowsSet_GetKeyColumns_result();
        try
        {
          tmp305.Success = await _iAsync.RowsSet_GetKeyColumnsAsync(tmp304.ObjectHandle, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetKeyColumns", TMessageType.Reply, seqid), cancellationToken); 
          await tmp305.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp306)
        {
          var tmp307 = $"Error occurred in {GetType().FullName}: {tmp306.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp306, tmp307);
          else
            Console.Error.WriteLine(tmp307);
          var tmp308 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_GetKeyColumns", TMessageType.Exception, seqid), cancellationToken);
          await tmp308.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_SetKeyColumnValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp309 = new InternalStructs.RowsSet_SetKeyColumnValue_args();
        await tmp309.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp310 = new InternalStructs.RowsSet_SetKeyColumnValue_result();
        try
        {
          await _iAsync.RowsSet_SetKeyColumnValueAsync(tmp309.ObjectHandle, tmp309.ColumnName, tmp309.Operation, tmp309.Value, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_SetKeyColumnValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp310.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp311)
        {
          var tmp312 = $"Error occurred in {GetType().FullName}: {tmp311.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp311, tmp312);
          else
            Console.Error.WriteLine(tmp312);
          var tmp313 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_SetKeyColumnValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp313.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_UpdateValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp314 = new InternalStructs.RowsSet_UpdateValue_args();
        await tmp314.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp315 = new InternalStructs.RowsSet_UpdateValue_result();
        try
        {
          try
          {
            tmp315.Success = await _iAsync.RowsSet_UpdateValueAsync(tmp314.ObjectHandle, tmp314.ColumnIndex, tmp314.Value, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp316)
          {
            tmp315.E = tmp316;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_UpdateValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp315.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp317)
        {
          var tmp318 = $"Error occurred in {GetType().FullName}: {tmp317.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp317, tmp318);
          else
            Console.Error.WriteLine(tmp318);
          var tmp319 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_UpdateValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp319.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RowsSet_WriteValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp320 = new InternalStructs.RowsSet_WriteValue_args();
        await tmp320.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp321 = new InternalStructs.RowsSet_WriteValue_result();
        try
        {
          try
          {
            await _iAsync.RowsSet_WriteValueAsync(tmp320.ObjectHandle, tmp320.Values, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp322)
          {
            tmp321.E = tmp322;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_WriteValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp321.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp323)
        {
          var tmp324 = $"Error occurred in {GetType().FullName}: {tmp323.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp323, tmp324);
          else
            Console.Error.WriteLine(tmp324);
          var tmp325 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RowsSet_WriteValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp325.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Blob_Read_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp326 = new InternalStructs.Blob_Read_args();
        await tmp326.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp327 = new InternalStructs.Blob_Read_result();
        try
        {
          try
          {
            tmp327.Success = await _iAsync.Blob_ReadAsync(tmp326.ObjectHandle, tmp326.Offset, tmp326.Count, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp328)
          {
            tmp327.E = tmp328;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_Read", TMessageType.Reply, seqid), cancellationToken); 
          await tmp327.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp329)
        {
          var tmp330 = $"Error occurred in {GetType().FullName}: {tmp329.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp329, tmp330);
          else
            Console.Error.WriteLine(tmp330);
          var tmp331 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_Read", TMessageType.Exception, seqid), cancellationToken);
          await tmp331.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Blob_GetLength_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp332 = new InternalStructs.Blob_GetLength_args();
        await tmp332.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp333 = new InternalStructs.Blob_GetLength_result();
        try
        {
          try
          {
            tmp333.Success = await _iAsync.Blob_GetLengthAsync(tmp332.ObjectHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp334)
          {
            tmp333.E = tmp334;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_GetLength", TMessageType.Reply, seqid), cancellationToken); 
          await tmp333.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp335)
        {
          var tmp336 = $"Error occurred in {GetType().FullName}: {tmp335.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp335, tmp336);
          else
            Console.Error.WriteLine(tmp336);
          var tmp337 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_GetLength", TMessageType.Exception, seqid), cancellationToken);
          await tmp337.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class CallFunction_args : TBase
      {
        private int _object_handle;

        public string FunctionName { get; set; } = string.Empty;

        public List<global::QueryCat.Plugins.Sdk.VariantValue>? Args { get; set; }

        public int ObjectHandle
        {
          get
          {
            return _object_handle;
          }
          set
          {
            __isset.object_handle = true;
            this._object_handle = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool object_handle;
        }

        public CallFunction_args()
        {
        }

        public CallFunction_args(string function_name, List<global::QueryCat.Plugins.Sdk.VariantValue>? @args) : this()
        {
          this.FunctionName = function_name;
          this.Args = @args;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_function_name = false;
            bool isset_args = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    FunctionName = await iprot.ReadStringAsync(cancellationToken);
                    isset_function_name = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list338 = await iprot.ReadListBeginAsync(cancellationToken);
                      Args = new List<global::QueryCat.Plugins.Sdk.VariantValue>(_list338.Count);
                      for(int _i339 = 0; _i339 < _list338.Count; ++_i339)
                      {
                        global::QueryCat.Plugins.Sdk.VariantValue _elem340;
                        _elem340 = new global::QueryCat.Plugins.Sdk.VariantValue();
                        await _elem340.ReadAsync(iprot, cancellationToken);
                        Args.Add(_elem340);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                    isset_args = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_function_name)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_args)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp341 = new TStruct("CallFunction_args");
            await oprot.WriteStructBeginAsync(tmp341, cancellationToken);
            var tmp342 = new TField();
            if((FunctionName != null))
            {
              tmp342.Name = "function_name";
              tmp342.Type = TType.String;
              tmp342.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp342, cancellationToken);
              await oprot.WriteStringAsync(FunctionName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Args != null))
            {
              tmp342.Name = "args";
              tmp342.Type = TType.List;
              tmp342.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp342, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Args.Count), cancellationToken);
              foreach (global::QueryCat.Plugins.Sdk.VariantValue _iter343 in Args)
              {
                await _iter343.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.object_handle)
            {
              tmp342.Name = "object_handle";
              tmp342.Type = TType.I32;
              tmp342.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp342, cancellationToken);
              await oprot.WriteI32Async(ObjectHandle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not CallFunction_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(FunctionName, other.FunctionName)
            && TCollections.Equals(Args, other.Args)
            && ((__isset.object_handle == other.__isset.object_handle) && ((!__isset.object_handle) || (global::System.Object.Equals(ObjectHandle, other.ObjectHandle))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((FunctionName != null))
            {
              hashcode = (hashcode * 397) + FunctionName.GetHashCode();
            }
            if((Args != null))
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Args);
            }
            if(__isset.object_handle)
            {
              hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp344 = new StringBuilder("CallFunction_args(");
          if((FunctionName != null))
          {
            tmp344.Append(", FunctionName: ");
            FunctionName.ToString(tmp344);
          }
          if((Args != null))
          {
            tmp344.Append(", Args: ");
            Args.ToString(tmp344);
          }
          if(__isset.object_handle)
          {
            tmp344.Append(", ObjectHandle: ");
            ObjectHandle.ToString(tmp344);
          }
          tmp344.Append(')');
          return tmp344.ToString();
        }
      }


      public partial class CallFunction_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.VariantValue? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.VariantValue? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public CallFunction_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp346 = new TStruct("CallFunction_result");
            await oprot.WriteStructBeginAsync(tmp346, cancellationToken);
            var tmp347 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp347.Name = "Success";
                tmp347.Type = TType.Struct;
                tmp347.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp347, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp347.Name = "E";
                tmp347.Type = TType.Struct;
                tmp347.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp347, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not CallFunction_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp348 = new StringBuilder("CallFunction_result(");
          int tmp349 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp349++) { tmp348.Append(", "); }
            tmp348.Append("Success: ");
            Success.ToString(tmp348);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp349++) { tmp348.Append(", "); }
            tmp348.Append("E: ");
            E.ToString(tmp348);
          }
          tmp348.Append(')');
          return tmp348.ToString();
        }
      }


      public partial class Initialize_args : TBase
      {

        public Initialize_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp350 = new TStruct("Initialize_args");
            await oprot.WriteStructBeginAsync(tmp350, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Initialize_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp351 = new StringBuilder("Initialize_args(");
          tmp351.Append(')');
          return tmp351.ToString();
        }
      }


      public partial class Initialize_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @e;
        }

        public Initialize_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp353 = new TStruct("Initialize_result");
            await oprot.WriteStructBeginAsync(tmp353, cancellationToken);
            var tmp354 = new TField();

            if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp354.Name = "E";
                tmp354.Type = TType.Struct;
                tmp354.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp354, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Initialize_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp355 = new StringBuilder("Initialize_result(");
          int tmp356 = 0;
          if((E != null) && __isset.@e)
          {
            if(0 < tmp356++) { tmp355.Append(", "); }
            tmp355.Append("E: ");
            E.ToString(tmp355);
          }
          tmp355.Append(')');
          return tmp355.ToString();
        }
      }


      public partial class Shutdown_args : TBase
      {

        public Shutdown_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp357 = new TStruct("Shutdown_args");
            await oprot.WriteStructBeginAsync(tmp357, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Shutdown_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp358 = new StringBuilder("Shutdown_args(");
          tmp358.Append(')');
          return tmp358.ToString();
        }
      }


      public partial class Shutdown_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @e;
        }

        public Shutdown_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp360 = new TStruct("Shutdown_result");
            await oprot.WriteStructBeginAsync(tmp360, cancellationToken);
            var tmp361 = new TField();

            if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp361.Name = "E";
                tmp361.Type = TType.Struct;
                tmp361.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp361, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Shutdown_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp362 = new StringBuilder("Shutdown_result(");
          int tmp363 = 0;
          if((E != null) && __isset.@e)
          {
            if(0 < tmp363++) { tmp362.Append(", "); }
            tmp362.Append("E: ");
            E.ToString(tmp362);
          }
          tmp362.Append(')');
          return tmp362.ToString();
        }
      }


      public partial class RowsSet_GetColumns_args : TBase
      {

        public int ObjectHandle { get; set; } = 0;

        public RowsSet_GetColumns_args()
        {
        }

        public RowsSet_GetColumns_args(int object_handle) : this()
        {
          this.ObjectHandle = object_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp364 = new TStruct("RowsSet_GetColumns_args");
            await oprot.WriteStructBeginAsync(tmp364, cancellationToken);
            var tmp365 = new TField();
            tmp365.Name = "object_handle";
            tmp365.Type = TType.I32;
            tmp365.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp365, cancellationToken);
            await oprot.WriteI32Async(ObjectHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetColumns_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectHandle, other.ObjectHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp366 = new StringBuilder("RowsSet_GetColumns_args(");
          tmp366.Append(", ObjectHandle: ");
          ObjectHandle.ToString(tmp366);
          tmp366.Append(')');
          return tmp366.ToString();
        }
      }


      public partial class RowsSet_GetColumns_result : TBase
      {
        private List<global::QueryCat.Plugins.Sdk.Column>? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public List<global::QueryCat.Plugins.Sdk.Column>? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RowsSet_GetColumns_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list368 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::QueryCat.Plugins.Sdk.Column>(_list368.Count);
                      for(int _i369 = 0; _i369 < _list368.Count; ++_i369)
                      {
                        global::QueryCat.Plugins.Sdk.Column _elem370;
                        _elem370 = new global::QueryCat.Plugins.Sdk.Column();
                        await _elem370.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem370);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp371 = new TStruct("RowsSet_GetColumns_result");
            await oprot.WriteStructBeginAsync(tmp371, cancellationToken);
            var tmp372 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp372.Name = "Success";
                tmp372.Type = TType.List;
                tmp372.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp372, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::QueryCat.Plugins.Sdk.Column _iter373 in Success)
                {
                  await _iter373.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp372.Name = "E";
                tmp372.Type = TType.Struct;
                tmp372.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp372, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetColumns_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp374 = new StringBuilder("RowsSet_GetColumns_result(");
          int tmp375 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp375++) { tmp374.Append(", "); }
            tmp374.Append("Success: ");
            Success.ToString(tmp374);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp375++) { tmp374.Append(", "); }
            tmp374.Append("E: ");
            E.ToString(tmp374);
          }
          tmp374.Append(')');
          return tmp374.ToString();
        }
      }


      public partial class RowsSet_Open_args : TBase
      {

        public int ObjectHandle { get; set; } = 0;

        public RowsSet_Open_args()
        {
        }

        public RowsSet_Open_args(int object_handle) : this()
        {
          this.ObjectHandle = object_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp376 = new TStruct("RowsSet_Open_args");
            await oprot.WriteStructBeginAsync(tmp376, cancellationToken);
            var tmp377 = new TField();
            tmp377.Name = "object_handle";
            tmp377.Type = TType.I32;
            tmp377.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp377, cancellationToken);
            await oprot.WriteI32Async(ObjectHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Open_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectHandle, other.ObjectHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp378 = new StringBuilder("RowsSet_Open_args(");
          tmp378.Append(", ObjectHandle: ");
          ObjectHandle.ToString(tmp378);
          tmp378.Append(')');
          return tmp378.ToString();
        }
      }


      public partial class RowsSet_Open_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @e;
        }

        public RowsSet_Open_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp380 = new TStruct("RowsSet_Open_result");
            await oprot.WriteStructBeginAsync(tmp380, cancellationToken);
            var tmp381 = new TField();

            if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp381.Name = "E";
                tmp381.Type = TType.Struct;
                tmp381.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp381, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Open_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp382 = new StringBuilder("RowsSet_Open_result(");
          int tmp383 = 0;
          if((E != null) && __isset.@e)
          {
            if(0 < tmp383++) { tmp382.Append(", "); }
            tmp382.Append("E: ");
            E.ToString(tmp382);
          }
          tmp382.Append(')');
          return tmp382.ToString();
        }
      }


      public partial class RowsSet_Close_args : TBase
      {

        public int ObjectHandle { get; set; } = 0;

        public RowsSet_Close_args()
        {
        }

        public RowsSet_Close_args(int object_handle) : this()
        {
          this.ObjectHandle = object_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp384 = new TStruct("RowsSet_Close_args");
            await oprot.WriteStructBeginAsync(tmp384, cancellationToken);
            var tmp385 = new TField();
            tmp385.Name = "object_handle";
            tmp385.Type = TType.I32;
            tmp385.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp385, cancellationToken);
            await oprot.WriteI32Async(ObjectHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Close_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectHandle, other.ObjectHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp386 = new StringBuilder("RowsSet_Close_args(");
          tmp386.Append(", ObjectHandle: ");
          ObjectHandle.ToString(tmp386);
          tmp386.Append(')');
          return tmp386.ToString();
        }
      }


      public partial class RowsSet_Close_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @e;
        }

        public RowsSet_Close_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp388 = new TStruct("RowsSet_Close_result");
            await oprot.WriteStructBeginAsync(tmp388, cancellationToken);
            var tmp389 = new TField();

            if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp389.Name = "E";
                tmp389.Type = TType.Struct;
                tmp389.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp389, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Close_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp390 = new StringBuilder("RowsSet_Close_result(");
          int tmp391 = 0;
          if((E != null) && __isset.@e)
          {
            if(0 < tmp391++) { tmp390.Append(", "); }
            tmp390.Append("E: ");
            E.ToString(tmp390);
          }
          tmp390.Append(')');
          return tmp390.ToString();
        }
      }


      public partial class RowsSet_Reset_args : TBase
      {

        public int ObjectHandle { get; set; } = 0;

        public RowsSet_Reset_args()
        {
        }

        public RowsSet_Reset_args(int object_handle) : this()
        {
          this.ObjectHandle = object_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp392 = new TStruct("RowsSet_Reset_args");
            await oprot.WriteStructBeginAsync(tmp392, cancellationToken);
            var tmp393 = new TField();
            tmp393.Name = "object_handle";
            tmp393.Type = TType.I32;
            tmp393.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp393, cancellationToken);
            await oprot.WriteI32Async(ObjectHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Reset_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectHandle, other.ObjectHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp394 = new StringBuilder("RowsSet_Reset_args(");
          tmp394.Append(", ObjectHandle: ");
          ObjectHandle.ToString(tmp394);
          tmp394.Append(')');
          return tmp394.ToString();
        }
      }


      public partial class RowsSet_Reset_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @e;
        }

        public RowsSet_Reset_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp396 = new TStruct("RowsSet_Reset_result");
            await oprot.WriteStructBeginAsync(tmp396, cancellationToken);
            var tmp397 = new TField();

            if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp397.Name = "E";
                tmp397.Type = TType.Struct;
                tmp397.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp397, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_Reset_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp398 = new StringBuilder("RowsSet_Reset_result(");
          int tmp399 = 0;
          if((E != null) && __isset.@e)
          {
            if(0 < tmp399++) { tmp398.Append(", "); }
            tmp398.Append("E: ");
            E.ToString(tmp398);
          }
          tmp398.Append(')');
          return tmp398.ToString();
        }
      }


      public partial class RowsSet_SetContext_args : TBase
      {

        public int ObjectHandle { get; set; } = 0;

        public global::QueryCat.Plugins.Sdk.ContextQueryInfo? ContextQueryInfo { get; set; }

        public RowsSet_SetContext_args()
        {
        }

        public RowsSet_SetContext_args(int object_handle, global::QueryCat.Plugins.Sdk.ContextQueryInfo? context_query_info) : this()
        {
          this.ObjectHandle = object_handle;
          this.ContextQueryInfo = context_query_info;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_handle = false;
            bool isset_context_query_info = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.Struct)
                  {
                    ContextQueryInfo = new global::QueryCat.Plugins.Sdk.ContextQueryInfo();
                    await ContextQueryInfo.ReadAsync(iprot, cancellationToken);
                    isset_context_query_info = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_context_query_info)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp400 = new TStruct("RowsSet_SetContext_args");
            await oprot.WriteStructBeginAsync(tmp400, cancellationToken);
            var tmp401 = new TField();
            tmp401.Name = "object_handle";
            tmp401.Type = TType.I32;
            tmp401.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp401, cancellationToken);
            await oprot.WriteI32Async(ObjectHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((ContextQueryInfo != null))
            {
              tmp401.Name = "context_query_info";
              tmp401.Type = TType.Struct;
              tmp401.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp401, cancellationToken);
              await ContextQueryInfo.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_SetContext_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectHandle, other.ObjectHandle)
            && global::System.Object.Equals(ContextQueryInfo, other.ContextQueryInfo);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
            if((ContextQueryInfo != null))
            {
              hashcode = (hashcode * 397) + ContextQueryInfo.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp402 = new StringBuilder("RowsSet_SetContext_args(");
          tmp402.Append(", ObjectHandle: ");
          ObjectHandle.ToString(tmp402);
          if((ContextQueryInfo != null))
          {
            tmp402.Append(", ContextQueryInfo: ");
            ContextQueryInfo.ToString(tmp402);
          }
          tmp402.Append(')');
          return tmp402.ToString();
        }
      }


      public partial class RowsSet_SetContext_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @e;
        }

        public RowsSet_SetContext_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp404 = new TStruct("RowsSet_SetContext_result");
            await oprot.WriteStructBeginAsync(tmp404, cancellationToken);
            var tmp405 = new TField();

            if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp405.Name = "E";
                tmp405.Type = TType.Struct;
                tmp405.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp405, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_SetContext_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp406 = new StringBuilder("RowsSet_SetContext_result(");
          int tmp407 = 0;
          if((E != null) && __isset.@e)
          {
            if(0 < tmp407++) { tmp406.Append(", "); }
            tmp406.Append("E: ");
            E.ToString(tmp406);
          }
          tmp406.Append(')');
          return tmp406.ToString();
        }
      }


      public partial class RowsSet_GetRows_args : TBase
      {
        private int _count;

        public int ObjectHandle { get; set; } = 0;

        public int Count
        {
          get
          {
            return _count;
          }
          set
          {
            __isset.@count = true;
            this._count = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @count;
        }

        public RowsSet_GetRows_args()
        {
        }

        public RowsSet_GetRows_args(int object_handle) : this()
        {
          this.ObjectHandle = object_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp408 = new TStruct("RowsSet_GetRows_args");
            await oprot.WriteStructBeginAsync(tmp408, cancellationToken);
            var tmp409 = new TField();
            tmp409.Name = "object_handle";
            tmp409.Type = TType.I32;
            tmp409.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp409, cancellationToken);
            await oprot.WriteI32Async(ObjectHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if(__isset.@count)
            {
              tmp409.Name = "count";
              tmp409.Type = TType.I32;
              tmp409.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp409, cancellationToken);
              await oprot.WriteI32Async(Count, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetRows_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectHandle, other.ObjectHandle)
            && ((__isset.@count == other.__isset.@count) && ((!__isset.@count) || (global::System.Object.Equals(Count, other.Count))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
            if(__isset.@count)
            {
              hashcode = (hashcode * 397) + Count.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp410 = new StringBuilder("RowsSet_GetRows_args(");
          tmp410.Append(", ObjectHandle: ");
          ObjectHandle.ToString(tmp410);
          if(__isset.@count)
          {
            tmp410.Append(", Count: ");
            Count.ToString(tmp410);
          }
          tmp410.Append(')');
          return tmp410.ToString();
        }
      }


      public partial class RowsSet_GetRows_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.RowsList? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.RowsList? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RowsSet_GetRows_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.RowsList();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp412 = new TStruct("RowsSet_GetRows_result");
            await oprot.WriteStructBeginAsync(tmp412, cancellationToken);
            var tmp413 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp413.Name = "Success";
                tmp413.Type = TType.Struct;
                tmp413.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp413, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp413.Name = "E";
                tmp413.Type = TType.Struct;
                tmp413.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp413, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetRows_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp414 = new StringBuilder("RowsSet_GetRows_result(");
          int tmp415 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp415++) { tmp414.Append(", "); }
            tmp414.Append("Success: ");
            Success.ToString(tmp414);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp415++) { tmp414.Append(", "); }
            tmp414.Append("E: ");
            E.ToString(tmp414);
          }
          tmp414.Append(')');
          return tmp414.ToString();
        }
      }


      public partial class RowsSet_GetUniqueKey_args : TBase
      {

        public int ObjectHandle { get; set; } = 0;

        public RowsSet_GetUniqueKey_args()
        {
        }

        public RowsSet_GetUniqueKey_args(int object_handle) : this()
        {
          this.ObjectHandle = object_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp416 = new TStruct("RowsSet_GetUniqueKey_args");
            await oprot.WriteStructBeginAsync(tmp416, cancellationToken);
            var tmp417 = new TField();
            tmp417.Name = "object_handle";
            tmp417.Type = TType.I32;
            tmp417.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp417, cancellationToken);
            await oprot.WriteI32Async(ObjectHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetUniqueKey_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectHandle, other.ObjectHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp418 = new StringBuilder("RowsSet_GetUniqueKey_args(");
          tmp418.Append(", ObjectHandle: ");
          ObjectHandle.ToString(tmp418);
          tmp418.Append(')');
          return tmp418.ToString();
        }
      }


      public partial class RowsSet_GetUniqueKey_result : TBase
      {
        private List<string>? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public List<string>? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RowsSet_GetUniqueKey_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list420 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<string>(_list420.Count);
                      for(int _i421 = 0; _i421 < _list420.Count; ++_i421)
                      {
                        string _elem422;
                        _elem422 = await iprot.ReadStringAsync(cancellationToken);
                        Success.Add(_elem422);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp423 = new TStruct("RowsSet_GetUniqueKey_result");
            await oprot.WriteStructBeginAsync(tmp423, cancellationToken);
            var tmp424 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp424.Name = "Success";
                tmp424.Type = TType.List;
                tmp424.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp424, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.String, Success.Count), cancellationToken);
                foreach (string _iter425 in Success)
                {
                  await oprot.WriteStringAsync(_iter425, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp424.Name = "E";
                tmp424.Type = TType.Struct;
                tmp424.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp424, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetUniqueKey_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp426 = new StringBuilder("RowsSet_GetUniqueKey_result(");
          int tmp427 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp427++) { tmp426.Append(", "); }
            tmp426.Append("Success: ");
            Success.ToString(tmp426);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp427++) { tmp426.Append(", "); }
            tmp426.Append("E: ");
            E.ToString(tmp426);
          }
          tmp426.Append(')');
          return tmp426.ToString();
        }
      }


      public partial class RowsSet_GetKeyColumns_args : TBase
      {
        private int _object_handle;

        public int ObjectHandle
        {
          get
          {
            return _object_handle;
          }
          set
          {
            __isset.object_handle = true;
            this._object_handle = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool object_handle;
        }

        public RowsSet_GetKeyColumns_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp428 = new TStruct("RowsSet_GetKeyColumns_args");
            await oprot.WriteStructBeginAsync(tmp428, cancellationToken);
            var tmp429 = new TField();
            if(__isset.object_handle)
            {
              tmp429.Name = "object_handle";
              tmp429.Type = TType.I32;
              tmp429.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp429, cancellationToken);
              await oprot.WriteI32Async(ObjectHandle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetKeyColumns_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.object_handle == other.__isset.object_handle) && ((!__isset.object_handle) || (global::System.Object.Equals(ObjectHandle, other.ObjectHandle))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.object_handle)
            {
              hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp430 = new StringBuilder("RowsSet_GetKeyColumns_args(");
          int tmp431 = 0;
          if(__isset.object_handle)
          {
            if(0 < tmp431++) { tmp430.Append(", "); }
            tmp430.Append("ObjectHandle: ");
            ObjectHandle.ToString(tmp430);
          }
          tmp430.Append(')');
          return tmp430.ToString();
        }
      }


      public partial class RowsSet_GetKeyColumns_result : TBase
      {
        private List<global::QueryCat.Plugins.Sdk.KeyColumn>? _success;

        public List<global::QueryCat.Plugins.Sdk.KeyColumn>? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public RowsSet_GetKeyColumns_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list432 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::QueryCat.Plugins.Sdk.KeyColumn>(_list432.Count);
                      for(int _i433 = 0; _i433 < _list432.Count; ++_i433)
                      {
                        global::QueryCat.Plugins.Sdk.KeyColumn _elem434;
                        _elem434 = new global::QueryCat.Plugins.Sdk.KeyColumn();
                        await _elem434.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem434);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp435 = new TStruct("RowsSet_GetKeyColumns_result");
            await oprot.WriteStructBeginAsync(tmp435, cancellationToken);
            var tmp436 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp436.Name = "Success";
                tmp436.Type = TType.List;
                tmp436.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp436, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::QueryCat.Plugins.Sdk.KeyColumn _iter437 in Success)
                {
                  await _iter437.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_GetKeyColumns_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp438 = new StringBuilder("RowsSet_GetKeyColumns_result(");
          int tmp439 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp439++) { tmp438.Append(", "); }
            tmp438.Append("Success: ");
            Success.ToString(tmp438);
          }
          tmp438.Append(')');
          return tmp438.ToString();
        }
      }


      public partial class RowsSet_SetKeyColumnValue_args : TBase
      {

        public int ObjectHandle { get; set; } = 0;

        public string ColumnName { get; set; } = string.Empty;

        public string Operation { get; set; } = string.Empty;

        public global::QueryCat.Plugins.Sdk.VariantValue? Value { get; set; }

        public RowsSet_SetKeyColumnValue_args()
        {
        }

        public RowsSet_SetKeyColumnValue_args(int object_handle, string column_name, string @operation, global::QueryCat.Plugins.Sdk.VariantValue? @value) : this()
        {
          this.ObjectHandle = object_handle;
          this.ColumnName = column_name;
          this.Operation = @operation;
          this.Value = @value;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_handle = false;
            bool isset_column_name = false;
            bool isset_operation = false;
            bool isset_value = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    ColumnName = await iprot.ReadStringAsync(cancellationToken);
                    isset_column_name = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Operation = await iprot.ReadStringAsync(cancellationToken);
                    isset_operation = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.Struct)
                  {
                    Value = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Value.ReadAsync(iprot, cancellationToken);
                    isset_value = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_column_name)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_operation)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_value)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp440 = new TStruct("RowsSet_SetKeyColumnValue_args");
            await oprot.WriteStructBeginAsync(tmp440, cancellationToken);
            var tmp441 = new TField();
            tmp441.Name = "object_handle";
            tmp441.Type = TType.I32;
            tmp441.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp441, cancellationToken);
            await oprot.WriteI32Async(ObjectHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((ColumnName != null))
            {
              tmp441.Name = "column_name";
              tmp441.Type = TType.String;
              tmp441.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp441, cancellationToken);
              await oprot.WriteStringAsync(ColumnName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Operation != null))
            {
              tmp441.Name = "operation";
              tmp441.Type = TType.String;
              tmp441.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp441, cancellationToken);
              await oprot.WriteStringAsync(Operation, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Value != null))
            {
              tmp441.Name = "value";
              tmp441.Type = TType.Struct;
              tmp441.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp441, cancellationToken);
              await Value.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_SetKeyColumnValue_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectHandle, other.ObjectHandle)
            && global::System.Object.Equals(ColumnName, other.ColumnName)
            && global::System.Object.Equals(Operation, other.Operation)
            && global::System.Object.Equals(Value, other.Value);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
            if((ColumnName != null))
            {
              hashcode = (hashcode * 397) + ColumnName.GetHashCode();
            }
            if((Operation != null))
            {
              hashcode = (hashcode * 397) + Operation.GetHashCode();
            }
            if((Value != null))
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp442 = new StringBuilder("RowsSet_SetKeyColumnValue_args(");
          tmp442.Append(", ObjectHandle: ");
          ObjectHandle.ToString(tmp442);
          if((ColumnName != null))
          {
            tmp442.Append(", ColumnName: ");
            ColumnName.ToString(tmp442);
          }
          if((Operation != null))
          {
            tmp442.Append(", Operation: ");
            Operation.ToString(tmp442);
          }
          if((Value != null))
          {
            tmp442.Append(", Value: ");
            Value.ToString(tmp442);
          }
          tmp442.Append(')');
          return tmp442.ToString();
        }
      }


      public partial class RowsSet_SetKeyColumnValue_result : TBase
      {

        public RowsSet_SetKeyColumnValue_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp444 = new TStruct("RowsSet_SetKeyColumnValue_result");
            await oprot.WriteStructBeginAsync(tmp444, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_SetKeyColumnValue_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp445 = new StringBuilder("RowsSet_SetKeyColumnValue_result(");
          tmp445.Append(')');
          return tmp445.ToString();
        }
      }


      public partial class RowsSet_UpdateValue_args : TBase
      {

        public int ObjectHandle { get; set; } = 0;

        public int ColumnIndex { get; set; } = 0;

        public global::QueryCat.Plugins.Sdk.VariantValue? Value { get; set; }

        public RowsSet_UpdateValue_args()
        {
        }

        public RowsSet_UpdateValue_args(int object_handle, int column_index, global::QueryCat.Plugins.Sdk.VariantValue? @value) : this()
        {
          this.ObjectHandle = object_handle;
          this.ColumnIndex = column_index;
          this.Value = @value;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_handle = false;
            bool isset_column_index = false;
            bool isset_value = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ColumnIndex = await iprot.ReadI32Async(cancellationToken);
                    isset_column_index = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Value = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Value.ReadAsync(iprot, cancellationToken);
                    isset_value = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_column_index)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_value)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp447 = new TStruct("RowsSet_UpdateValue_args");
            await oprot.WriteStructBeginAsync(tmp447, cancellationToken);
            var tmp448 = new TField();
            tmp448.Name = "object_handle";
            tmp448.Type = TType.I32;
            tmp448.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp448, cancellationToken);
            await oprot.WriteI32Async(ObjectHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp448.Name = "column_index";
            tmp448.Type = TType.I32;
            tmp448.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp448, cancellationToken);
            await oprot.WriteI32Async(ColumnIndex, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Value != null))
            {
              tmp448.Name = "value";
              tmp448.Type = TType.Struct;
              tmp448.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp448, cancellationToken);
              await Value.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_UpdateValue_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectHandle, other.ObjectHandle)
            && global::System.Object.Equals(ColumnIndex, other.ColumnIndex)
            && global::System.Object.Equals(Value, other.Value);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
            hashcode = (hashcode * 397) + ColumnIndex.GetHashCode();
            if((Value != null))
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp449 = new StringBuilder("RowsSet_UpdateValue_args(");
          tmp449.Append(", ObjectHandle: ");
          ObjectHandle.ToString(tmp449);
          tmp449.Append(", ColumnIndex: ");
          ColumnIndex.ToString(tmp449);
          if((Value != null))
          {
            tmp449.Append(", Value: ");
            Value.ToString(tmp449);
          }
          tmp449.Append(')');
          return tmp449.ToString();
        }
      }


      public partial class RowsSet_UpdateValue_result : TBase
      {
        private bool _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RowsSet_UpdateValue_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp451 = new TStruct("RowsSet_UpdateValue_result");
            await oprot.WriteStructBeginAsync(tmp451, cancellationToken);
            var tmp452 = new TField();

            if(this.__isset.@success)
            {
              tmp452.Name = "Success";
              tmp452.Type = TType.Bool;
              tmp452.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp452, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp452.Name = "E";
                tmp452.Type = TType.Struct;
                tmp452.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp452, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_UpdateValue_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp453 = new StringBuilder("RowsSet_UpdateValue_result(");
          int tmp454 = 0;
          if(__isset.@success)
          {
            if(0 < tmp454++) { tmp453.Append(", "); }
            tmp453.Append("Success: ");
            Success.ToString(tmp453);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp454++) { tmp453.Append(", "); }
            tmp453.Append("E: ");
            E.ToString(tmp453);
          }
          tmp453.Append(')');
          return tmp453.ToString();
        }
      }


      public partial class RowsSet_WriteValue_args : TBase
      {

        public int ObjectHandle { get; set; } = 0;

        public List<global::QueryCat.Plugins.Sdk.VariantValue>? Values { get; set; }

        public RowsSet_WriteValue_args()
        {
        }

        public RowsSet_WriteValue_args(int object_handle, List<global::QueryCat.Plugins.Sdk.VariantValue>? @values) : this()
        {
          this.ObjectHandle = object_handle;
          this.Values = @values;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_handle = false;
            bool isset_values = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list455 = await iprot.ReadListBeginAsync(cancellationToken);
                      Values = new List<global::QueryCat.Plugins.Sdk.VariantValue>(_list455.Count);
                      for(int _i456 = 0; _i456 < _list455.Count; ++_i456)
                      {
                        global::QueryCat.Plugins.Sdk.VariantValue _elem457;
                        _elem457 = new global::QueryCat.Plugins.Sdk.VariantValue();
                        await _elem457.ReadAsync(iprot, cancellationToken);
                        Values.Add(_elem457);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                    isset_values = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_values)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp458 = new TStruct("RowsSet_WriteValue_args");
            await oprot.WriteStructBeginAsync(tmp458, cancellationToken);
            var tmp459 = new TField();
            tmp459.Name = "object_handle";
            tmp459.Type = TType.I32;
            tmp459.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp459, cancellationToken);
            await oprot.WriteI32Async(ObjectHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Values != null))
            {
              tmp459.Name = "values";
              tmp459.Type = TType.List;
              tmp459.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp459, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Values.Count), cancellationToken);
              foreach (global::QueryCat.Plugins.Sdk.VariantValue _iter460 in Values)
              {
                await _iter460.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_WriteValue_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectHandle, other.ObjectHandle)
            && TCollections.Equals(Values, other.Values);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
            if((Values != null))
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Values);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp461 = new StringBuilder("RowsSet_WriteValue_args(");
          tmp461.Append(", ObjectHandle: ");
          ObjectHandle.ToString(tmp461);
          if((Values != null))
          {
            tmp461.Append(", Values: ");
            Values.ToString(tmp461);
          }
          tmp461.Append(')');
          return tmp461.ToString();
        }
      }


      public partial class RowsSet_WriteValue_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @e;
        }

        public RowsSet_WriteValue_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp463 = new TStruct("RowsSet_WriteValue_result");
            await oprot.WriteStructBeginAsync(tmp463, cancellationToken);
            var tmp464 = new TField();

            if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp464.Name = "E";
                tmp464.Type = TType.Struct;
                tmp464.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp464, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RowsSet_WriteValue_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp465 = new StringBuilder("RowsSet_WriteValue_result(");
          int tmp466 = 0;
          if((E != null) && __isset.@e)
          {
            if(0 < tmp466++) { tmp465.Append(", "); }
            tmp465.Append("E: ");
            E.ToString(tmp465);
          }
          tmp465.Append(')');
          return tmp465.ToString();
        }
      }


      public partial class Blob_Read_args : TBase
      {

        public int ObjectHandle { get; set; } = 0;

        public int Offset { get; set; } = 0;

        public int Count { get; set; } = 0;

        public Blob_Read_args()
        {
        }

        public Blob_Read_args(int object_handle, int @offset, int @count) : this()
        {
          this.ObjectHandle = object_handle;
          this.Offset = @offset;
          this.Count = @count;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_handle = false;
            bool isset_offset = false;
            bool isset_count = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Offset = await iprot.ReadI32Async(cancellationToken);
                    isset_offset = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                    isset_count = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_offset)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_count)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp467 = new TStruct("Blob_Read_args");
            await oprot.WriteStructBeginAsync(tmp467, cancellationToken);
            var tmp468 = new TField();
            tmp468.Name = "object_handle";
            tmp468.Type = TType.I32;
            tmp468.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp468, cancellationToken);
            await oprot.WriteI32Async(ObjectHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp468.Name = "offset";
            tmp468.Type = TType.I32;
            tmp468.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp468, cancellationToken);
            await oprot.WriteI32Async(Offset, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp468.Name = "count";
            tmp468.Type = TType.I32;
            tmp468.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp468, cancellationToken);
            await oprot.WriteI32Async(Count, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_Read_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectHandle, other.ObjectHandle)
            && global::System.Object.Equals(Offset, other.Offset)
            && global::System.Object.Equals(Count, other.Count);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
            hashcode = (hashcode * 397) + Offset.GetHashCode();
            hashcode = (hashcode * 397) + Count.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp469 = new StringBuilder("Blob_Read_args(");
          tmp469.Append(", ObjectHandle: ");
          ObjectHandle.ToString(tmp469);
          tmp469.Append(", Offset: ");
          Offset.ToString(tmp469);
          tmp469.Append(", Count: ");
          Count.ToString(tmp469);
          tmp469.Append(')');
          return tmp469.ToString();
        }
      }


      public partial class Blob_Read_result : TBase
      {
        private byte[]? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public byte[]? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public Blob_Read_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp471 = new TStruct("Blob_Read_result");
            await oprot.WriteStructBeginAsync(tmp471, cancellationToken);
            var tmp472 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp472.Name = "Success";
                tmp472.Type = TType.String;
                tmp472.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp472, cancellationToken);
                await oprot.WriteBinaryAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp472.Name = "E";
                tmp472.Type = TType.Struct;
                tmp472.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp472, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_Read_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp473 = new StringBuilder("Blob_Read_result(");
          int tmp474 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp474++) { tmp473.Append(", "); }
            tmp473.Append("Success: ");
            Success.ToString(tmp473);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp474++) { tmp473.Append(", "); }
            tmp473.Append("E: ");
            E.ToString(tmp473);
          }
          tmp473.Append(')');
          return tmp473.ToString();
        }
      }


      public partial class Blob_GetLength_args : TBase
      {

        public int ObjectHandle { get; set; } = 0;

        public Blob_GetLength_args()
        {
        }

        public Blob_GetLength_args(int object_handle) : this()
        {
          this.ObjectHandle = object_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_object_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_object_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp475 = new TStruct("Blob_GetLength_args");
            await oprot.WriteStructBeginAsync(tmp475, cancellationToken);
            var tmp476 = new TField();
            tmp476.Name = "object_handle";
            tmp476.Type = TType.I32;
            tmp476.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp476, cancellationToken);
            await oprot.WriteI32Async(ObjectHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_GetLength_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(ObjectHandle, other.ObjectHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp477 = new StringBuilder("Blob_GetLength_args(");
          tmp477.Append(", ObjectHandle: ");
          ObjectHandle.ToString(tmp477);
          tmp477.Append(')');
          return tmp477.ToString();
        }
      }


      public partial class Blob_GetLength_result : TBase
      {
        private long _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public long Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public Blob_GetLength_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I64)
                  {
                    Success = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp479 = new TStruct("Blob_GetLength_result");
            await oprot.WriteStructBeginAsync(tmp479, cancellationToken);
            var tmp480 = new TField();

            if(this.__isset.@success)
            {
              tmp480.Name = "Success";
              tmp480.Type = TType.I64;
              tmp480.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp480, cancellationToken);
              await oprot.WriteI64Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp480.Name = "E";
                tmp480.Type = TType.Struct;
                tmp480.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp480, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_GetLength_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp481 = new StringBuilder("Blob_GetLength_result(");
          int tmp482 = 0;
          if(__isset.@success)
          {
            if(0 < tmp482++) { tmp481.Append(", "); }
            tmp481.Append("Success: ");
            Success.ToString(tmp481);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp482++) { tmp481.Append(", "); }
            tmp481.Append("E: ");
            E.ToString(tmp481);
          }
          tmp481.Append(')');
          return tmp481.ToString();
        }
      }

    }

  }
}
