/**
 * Autogenerated by Thrift Compiler (0.21.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


// targeting net 8
#if( !NET8_0_OR_GREATER)
#error Unexpected target platform. See 'thrift --help' for details.
#endif

// Thrift code generated for net8
#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0290  // use primary CTOR
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace QueryCat.Plugins.Sdk
{

  public partial class RegistrationResult : TBase
  {

    public string Version { get; set; } = string.Empty;

    public List<int>? FunctionsIds { get; set; }

    public RegistrationResult()
    {
    }

    public RegistrationResult(string @version, List<int>? functions_ids) : this()
    {
      this.Version = @version;
      this.FunctionsIds = functions_ids;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_version = false;
        bool isset_functions_ids = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Version = await iprot.ReadStringAsync(cancellationToken);
                isset_version = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  var _list32 = await iprot.ReadListBeginAsync(cancellationToken);
                  FunctionsIds = new List<int>(_list32.Count);
                  for(int _i33 = 0; _i33 < _list32.Count; ++_i33)
                  {
                    int _elem34;
                    _elem34 = await iprot.ReadI32Async(cancellationToken);
                    FunctionsIds.Add(_elem34);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_functions_ids = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_version)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_functions_ids)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp35 = new TStruct("RegistrationResult");
        await oprot.WriteStructBeginAsync(tmp35, cancellationToken);
        #pragma warning disable IDE0017  // simplified init
        var tmp36 = new TField();
        if((Version != null))
        {
          tmp36.Name = "version";
          tmp36.Type = TType.String;
          tmp36.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp36, cancellationToken);
          await oprot.WriteStringAsync(Version, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((FunctionsIds != null))
        {
          tmp36.Name = "functions_ids";
          tmp36.Type = TType.List;
          tmp36.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp36, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.I32, FunctionsIds.Count), cancellationToken);
          foreach (int _iter37 in FunctionsIds)
          {
            await oprot.WriteI32Async(_iter37, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        #pragma warning restore IDE0017  // simplified init
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object? that)
    {
      if (that is not RegistrationResult other) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Version, other.Version)
        && TCollections.Equals(FunctionsIds, other.FunctionsIds);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Version != null))
        {
          hashcode = (hashcode * 397) + Version.GetHashCode();
        }
        if((FunctionsIds != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(FunctionsIds);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp38 = new StringBuilder("RegistrationResult(");
      if((Version != null))
      {
        tmp38.Append(", Version: ");
        Version.ToString(tmp38);
      }
      if((FunctionsIds != null))
      {
        tmp38.Append(", FunctionsIds: ");
        FunctionsIds.ToString(tmp38);
      }
      tmp38.Append(')');
      return tmp38.ToString();
    }
  }

}
