/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


// Thrift code generated for net8
#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0290  // use primary CTOR
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace QueryCat.Plugins.Sdk
{

  public partial class QuestionResponse : TBase
  {

    public string Answer { get; set; } = string.Empty;

    public string MessageId { get; set; } = string.Empty;

    public QuestionResponse()
    {
    }

    public QuestionResponse(string @answer, string message_id) : this()
    {
      this.Answer = @answer;
      this.MessageId = message_id;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_answer = false;
        bool isset_message_id = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Answer = await iprot.ReadStringAsync(cancellationToken);
                isset_answer = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                MessageId = await iprot.ReadStringAsync(cancellationToken);
                isset_message_id = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_answer)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_message_id)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp84 = new TStruct("QuestionResponse");
        await oprot.WriteStructBeginAsync(tmp84, cancellationToken);
        #pragma warning disable IDE0017  // simplified init
        var tmp85 = new TField();
        if((Answer != null))
        {
          tmp85.Name = "answer";
          tmp85.Type = TType.String;
          tmp85.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp85, cancellationToken);
          await oprot.WriteStringAsync(Answer, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((MessageId != null))
        {
          tmp85.Name = "message_id";
          tmp85.Type = TType.String;
          tmp85.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp85, cancellationToken);
          await oprot.WriteStringAsync(MessageId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        #pragma warning restore IDE0017  // simplified init
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object? that)
    {
      if (that is not QuestionResponse other) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Answer, other.Answer)
        && global::System.Object.Equals(MessageId, other.MessageId);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Answer != null))
        {
          hashcode = (hashcode * 397) + Answer.GetHashCode();
        }
        if((MessageId != null))
        {
          hashcode = (hashcode * 397) + MessageId.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp86 = new StringBuilder("QuestionResponse(");
      if((Answer != null))
      {
        tmp86.Append(", Answer: ");
        Answer.ToString(tmp86);
      }
      if((MessageId != null))
      {
        tmp86.Append(", MessageId: ");
        MessageId.ToString(tmp86);
      }
      tmp86.Append(')');
      return tmp86.ToString();
    }
  }

}
