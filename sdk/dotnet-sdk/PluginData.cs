/**
 * Autogenerated by Thrift Compiler (0.18.1)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace QueryCat.Plugins.Sdk
{

  public partial class PluginData : TBase
  {

    public List<string>? Functions { get; set; }

    public string Name { get; set; } = string.Empty;

    public string Version { get; set; } = string.Empty;

    public PluginData()
    {
    }

    public PluginData(List<string>? functions, string name, string version) : this()
    {
      this.Functions = functions;
      this.Name = name;
      this.Version = version;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_functions = false;
        bool isset_name = false;
        bool isset_version = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  var _list16 = await iprot.ReadListBeginAsync(cancellationToken);
                  Functions = new List<string>(_list16.Count);
                  for(int _i17 = 0; _i17 < _list16.Count; ++_i17)
                  {
                    string _elem18;
                    _elem18 = await iprot.ReadStringAsync(cancellationToken);
                    Functions.Add(_elem18);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_functions = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Name = await iprot.ReadStringAsync(cancellationToken);
                isset_name = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Version = await iprot.ReadStringAsync(cancellationToken);
                isset_version = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_functions)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_name)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_version)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp19 = new TStruct("PluginData");
        await oprot.WriteStructBeginAsync(tmp19, cancellationToken);
        var tmp20 = new TField();
        if((Functions != null))
        {
          tmp20.Name = "functions";
          tmp20.Type = TType.List;
          tmp20.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp20, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.String, Functions.Count), cancellationToken);
          foreach (string _iter21 in Functions)
          {
            await oprot.WriteStringAsync(_iter21, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Name != null))
        {
          tmp20.Name = "name";
          tmp20.Type = TType.String;
          tmp20.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp20, cancellationToken);
          await oprot.WriteStringAsync(Name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Version != null))
        {
          tmp20.Name = "version";
          tmp20.Type = TType.String;
          tmp20.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp20, cancellationToken);
          await oprot.WriteStringAsync(Version, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object? that)
    {
      if (that is not PluginData other) return false;
      if (ReferenceEquals(this, other)) return true;
      return TCollections.Equals(Functions, other.Functions)
        && global::System.Object.Equals(Name, other.Name)
        && global::System.Object.Equals(Version, other.Version);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Functions != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Functions);
        }
        if((Name != null))
        {
          hashcode = (hashcode * 397) + Name.GetHashCode();
        }
        if((Version != null))
        {
          hashcode = (hashcode * 397) + Version.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp22 = new StringBuilder("PluginData(");
      if((Functions != null))
      {
        tmp22.Append(", Functions: ");
        Functions.ToString(tmp22);
      }
      if((Name != null))
      {
        tmp22.Append(", Name: ");
        Name.ToString(tmp22);
      }
      if((Version != null))
      {
        tmp22.Append(", Version: ");
        Version.ToString(tmp22);
      }
      tmp22.Append(')');
      return tmp22.ToString();
    }
  }

}
