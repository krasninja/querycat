/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


// Thrift code generated for net8
#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0290  // use primary CTOR
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace QueryCat.Plugins.Sdk
{

  public partial class CompletionResult : TBase
  {

    /// <summary>
    /// 
    /// <seealso cref="global::QueryCat.Plugins.Sdk.CompletionKind"/>
    /// </summary>
    public global::QueryCat.Plugins.Sdk.CompletionKind Kind { get; set; } = default;

    public string Label { get; set; } = string.Empty;

    public string Documentation { get; set; } = string.Empty;

    public double Relevance { get; set; } = 0.0;

    public List<global::QueryCat.Plugins.Sdk.CompletionTextEdit>? Edits { get; set; }

    public CompletionResult()
    {
    }

    public CompletionResult(global::QueryCat.Plugins.Sdk.CompletionKind @kind, string @label, string @documentation, double @relevance, List<global::QueryCat.Plugins.Sdk.CompletionTextEdit>? @edits) : this()
    {
      this.Kind = @kind;
      this.Label = @label;
      this.Documentation = @documentation;
      this.Relevance = @relevance;
      this.Edits = @edits;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_kind = false;
        bool isset_label = false;
        bool isset_documentation = false;
        bool isset_relevance = false;
        bool isset_edits = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Kind = (global::QueryCat.Plugins.Sdk.CompletionKind)await iprot.ReadI32Async(cancellationToken);
                isset_kind = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Label = await iprot.ReadStringAsync(cancellationToken);
                isset_label = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Documentation = await iprot.ReadStringAsync(cancellationToken);
                isset_documentation = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Double)
              {
                Relevance = await iprot.ReadDoubleAsync(cancellationToken);
                isset_relevance = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.List)
              {
                {
                  var _list48 = await iprot.ReadListBeginAsync(cancellationToken);
                  Edits = new List<global::QueryCat.Plugins.Sdk.CompletionTextEdit>(_list48.Count);
                  for(int _i49 = 0; _i49 < _list48.Count; ++_i49)
                  {
                    global::QueryCat.Plugins.Sdk.CompletionTextEdit _elem50;
                    _elem50 = new global::QueryCat.Plugins.Sdk.CompletionTextEdit();
                    await _elem50.ReadAsync(iprot, cancellationToken);
                    Edits.Add(_elem50);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_edits = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_kind)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_label)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_documentation)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_relevance)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_edits)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp51 = new TStruct("CompletionResult");
        await oprot.WriteStructBeginAsync(tmp51, cancellationToken);
        #pragma warning disable IDE0017  // simplified init
        var tmp52 = new TField();
        tmp52.Name = "kind";
        tmp52.Type = TType.I32;
        tmp52.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp52, cancellationToken);
        await oprot.WriteI32Async((int)Kind, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Label != null))
        {
          tmp52.Name = "label";
          tmp52.Type = TType.String;
          tmp52.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp52, cancellationToken);
          await oprot.WriteStringAsync(Label, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Documentation != null))
        {
          tmp52.Name = "documentation";
          tmp52.Type = TType.String;
          tmp52.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp52, cancellationToken);
          await oprot.WriteStringAsync(Documentation, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        tmp52.Name = "relevance";
        tmp52.Type = TType.Double;
        tmp52.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp52, cancellationToken);
        await oprot.WriteDoubleAsync(Relevance, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Edits != null))
        {
          tmp52.Name = "edits";
          tmp52.Type = TType.List;
          tmp52.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp52, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Edits.Count), cancellationToken);
          foreach (global::QueryCat.Plugins.Sdk.CompletionTextEdit _iter53 in Edits)
          {
            await _iter53.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        #pragma warning restore IDE0017  // simplified init
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object? that)
    {
      if (that is not CompletionResult other) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Kind, other.Kind)
        && global::System.Object.Equals(Label, other.Label)
        && global::System.Object.Equals(Documentation, other.Documentation)
        && global::System.Object.Equals(Relevance, other.Relevance)
        && TCollections.Equals(Edits, other.Edits);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + Kind.GetHashCode();
        if((Label != null))
        {
          hashcode = (hashcode * 397) + Label.GetHashCode();
        }
        if((Documentation != null))
        {
          hashcode = (hashcode * 397) + Documentation.GetHashCode();
        }
        hashcode = (hashcode * 397) + Relevance.GetHashCode();
        if((Edits != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Edits);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp54 = new StringBuilder("CompletionResult(");
      tmp54.Append(", Kind: ");
      Kind.ToString(tmp54);
      if((Label != null))
      {
        tmp54.Append(", Label: ");
        Label.ToString(tmp54);
      }
      if((Documentation != null))
      {
        tmp54.Append(", Documentation: ");
        Documentation.ToString(tmp54);
      }
      tmp54.Append(", Relevance: ");
      Relevance.ToString(tmp54);
      if((Edits != null))
      {
        tmp54.Append(", Edits: ");
        Edits.ToString(tmp54);
      }
      tmp54.Append(')');
      return tmp54.ToString();
    }
  }

}
