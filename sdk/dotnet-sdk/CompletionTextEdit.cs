/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


// Thrift code generated for net8
#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0290  // use primary CTOR
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace QueryCat.Plugins.Sdk
{

  public partial class CompletionTextEdit : TBase
  {

    public int Start { get; set; } = 0;

    public int End { get; set; } = 0;

    public string NewText { get; set; } = string.Empty;

    public CompletionTextEdit()
    {
    }

    public CompletionTextEdit(int @start, int @end, string new_text) : this()
    {
      this.Start = @start;
      this.End = @end;
      this.NewText = new_text;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_start = false;
        bool isset_end = false;
        bool isset_new_text = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Start = await iprot.ReadI32Async(cancellationToken);
                isset_start = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                End = await iprot.ReadI32Async(cancellationToken);
                isset_end = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                NewText = await iprot.ReadStringAsync(cancellationToken);
                isset_new_text = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_start)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_end)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_new_text)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp58 = new TStruct("CompletionTextEdit");
        await oprot.WriteStructBeginAsync(tmp58, cancellationToken);
        #pragma warning disable IDE0017  // simplified init
        var tmp59 = new TField();
        tmp59.Name = "start";
        tmp59.Type = TType.I32;
        tmp59.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp59, cancellationToken);
        await oprot.WriteI32Async(Start, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        tmp59.Name = "end";
        tmp59.Type = TType.I32;
        tmp59.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp59, cancellationToken);
        await oprot.WriteI32Async(End, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((NewText != null))
        {
          tmp59.Name = "new_text";
          tmp59.Type = TType.String;
          tmp59.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp59, cancellationToken);
          await oprot.WriteStringAsync(NewText, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        #pragma warning restore IDE0017  // simplified init
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object? that)
    {
      if (that is not CompletionTextEdit other) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Start, other.Start)
        && global::System.Object.Equals(End, other.End)
        && global::System.Object.Equals(NewText, other.NewText);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + Start.GetHashCode();
        hashcode = (hashcode * 397) + End.GetHashCode();
        if((NewText != null))
        {
          hashcode = (hashcode * 397) + NewText.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp60 = new StringBuilder("CompletionTextEdit(");
      tmp60.Append(", Start: ");
      Start.ToString(tmp60);
      tmp60.Append(", End: ");
      End.ToString(tmp60);
      if((NewText != null))
      {
        tmp60.Append(", NewText: ");
        NewText.ToString(tmp60);
      }
      tmp60.Append(')');
      return tmp60.ToString();
    }
  }

}
