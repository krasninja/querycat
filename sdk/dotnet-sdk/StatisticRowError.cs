/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


// Thrift code generated for net8
#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0290  // use primary CTOR
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace QueryCat.Plugins.Sdk
{

  public partial class StatisticRowError : TBase
  {
    private string? _value;

    /// <summary>
    /// 
    /// <seealso cref="global::QueryCat.Plugins.Sdk.QueryCatErrorCode"/>
    /// </summary>
    public global::QueryCat.Plugins.Sdk.QueryCatErrorCode ErrorCode { get; set; } = default;

    public long RowIndex { get; set; } = 0;

    public int ColumnIndex { get; set; } = 0;

    public string? Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool @value;
    }

    public StatisticRowError()
    {
    }

    public StatisticRowError(global::QueryCat.Plugins.Sdk.QueryCatErrorCode error_code, long row_index, int column_index) : this()
    {
      this.ErrorCode = error_code;
      this.RowIndex = row_index;
      this.ColumnIndex = column_index;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_error_code = false;
        bool isset_row_index = false;
        bool isset_column_index = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                ErrorCode = (global::QueryCat.Plugins.Sdk.QueryCatErrorCode)await iprot.ReadI32Async(cancellationToken);
                isset_error_code = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                RowIndex = await iprot.ReadI64Async(cancellationToken);
                isset_row_index = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                ColumnIndex = await iprot.ReadI32Async(cancellationToken);
                isset_column_index = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Value = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_error_code)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_row_index)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_column_index)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp70 = new TStruct("StatisticRowError");
        await oprot.WriteStructBeginAsync(tmp70, cancellationToken);
        #pragma warning disable IDE0017  // simplified init
        var tmp71 = new TField();
        tmp71.Name = "error_code";
        tmp71.Type = TType.I32;
        tmp71.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp71, cancellationToken);
        await oprot.WriteI32Async((int)ErrorCode, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        tmp71.Name = "row_index";
        tmp71.Type = TType.I64;
        tmp71.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp71, cancellationToken);
        await oprot.WriteI64Async(RowIndex, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        tmp71.Name = "column_index";
        tmp71.Type = TType.I32;
        tmp71.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp71, cancellationToken);
        await oprot.WriteI32Async(ColumnIndex, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Value != null) && __isset.@value)
        {
          tmp71.Name = "value";
          tmp71.Type = TType.String;
          tmp71.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp71, cancellationToken);
          await oprot.WriteStringAsync(Value, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        #pragma warning restore IDE0017  // simplified init
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object? that)
    {
      if (that is not StatisticRowError other) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(ErrorCode, other.ErrorCode)
        && global::System.Object.Equals(RowIndex, other.RowIndex)
        && global::System.Object.Equals(ColumnIndex, other.ColumnIndex)
        && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + ErrorCode.GetHashCode();
        hashcode = (hashcode * 397) + RowIndex.GetHashCode();
        hashcode = (hashcode * 397) + ColumnIndex.GetHashCode();
        if((Value != null) && __isset.@value)
        {
          hashcode = (hashcode * 397) + Value.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp72 = new StringBuilder("StatisticRowError(");
      tmp72.Append(", ErrorCode: ");
      ErrorCode.ToString(tmp72);
      tmp72.Append(", RowIndex: ");
      RowIndex.ToString(tmp72);
      tmp72.Append(", ColumnIndex: ");
      ColumnIndex.ToString(tmp72);
      if((Value != null) && __isset.@value)
      {
        tmp72.Append(", Value: ");
        Value.ToString(tmp72);
      }
      tmp72.Append(')');
      return tmp72.ToString();
    }
  }

}
