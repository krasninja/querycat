/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


// Thrift code generated for net8
#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0290  // use primary CTOR
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace QueryCat.Plugins.Sdk
{
  public partial class PluginsManager
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.RegistrationResult> RegisterPluginAsync(string registration_token, string callback_uri, global::QueryCat.Plugins.Sdk.PluginData? plugin_data, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> CallFunctionAsync(long @token, string function_name, List<global::QueryCat.Plugins.Sdk.VariantValue>? @args, int object_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> RunQueryAsync(long @token, string @query, Dictionary<string, global::QueryCat.Plugins.Sdk.VariantValue>? @parameters, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task SetConfigValueAsync(long @token, string @key, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> GetConfigValueAsync(long @token, string @key, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> GetVariableAsync(long @token, string @name, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> SetVariableAsync(long @token, string @name, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<byte[]> Blob_ReadAsync(long @token, int object_blob_handle, int @offset, int @count, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<long> Blob_WriteAsync(long @token, int object_blob_handle, byte[] @bytes, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<long> Blob_GetLengthAsync(long @token, int object_blob_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task LogAsync(long @token, global::QueryCat.Plugins.Sdk.LogLevel @level, string @message, List<string>? @arguments, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.RegistrationResult> RegisterPluginAsync(string registration_token, string callback_uri, global::QueryCat.Plugins.Sdk.PluginData? plugin_data, CancellationToken cancellationToken = default)
      {
        await send_RegisterPluginAsync(registration_token, callback_uri, plugin_data, cancellationToken);
        return await recv_RegisterPluginAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RegisterPluginAsync(string registration_token, string callback_uri, global::QueryCat.Plugins.Sdk.PluginData? plugin_data, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RegisterPlugin", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp64 = new InternalStructs.RegisterPlugin_args() {
          RegistrationToken = registration_token,
          CallbackUri = callback_uri,
          PluginData = plugin_data,
        };
        
        await tmp64.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.RegistrationResult> recv_RegisterPluginAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp65 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp65.Type == TMessageType.Exception)
        {
          var tmp66 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp66;
        }

        var tmp67 = new InternalStructs.RegisterPlugin_result();
        await tmp67.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp67.__isset.success)
        {
          return tmp67.Success!;
        }
        if (tmp67.__isset.@e)
        {
          throw tmp67.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RegisterPluginAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> CallFunctionAsync(long @token, string function_name, List<global::QueryCat.Plugins.Sdk.VariantValue>? @args, int object_handle, CancellationToken cancellationToken = default)
      {
        await send_CallFunctionAsync(@token, function_name, @args, object_handle, cancellationToken);
        return await recv_CallFunctionAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_CallFunctionAsync(long @token, string function_name, List<global::QueryCat.Plugins.Sdk.VariantValue>? @args, int object_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("CallFunction", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp68 = new InternalStructs.CallFunction_args() {
          Token = @token,
          FunctionName = function_name,
          Args = @args,
          ObjectHandle = object_handle,
        };
        
        await tmp68.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> recv_CallFunctionAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp69 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp69.Type == TMessageType.Exception)
        {
          var tmp70 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp70;
        }

        var tmp71 = new InternalStructs.CallFunction_result();
        await tmp71.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp71.__isset.success)
        {
          return tmp71.Success!;
        }
        if (tmp71.__isset.@e)
        {
          throw tmp71.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CallFunctionAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> RunQueryAsync(long @token, string @query, Dictionary<string, global::QueryCat.Plugins.Sdk.VariantValue>? @parameters, CancellationToken cancellationToken = default)
      {
        await send_RunQueryAsync(@token, @query, @parameters, cancellationToken);
        return await recv_RunQueryAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RunQueryAsync(long @token, string @query, Dictionary<string, global::QueryCat.Plugins.Sdk.VariantValue>? @parameters, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RunQuery", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp72 = new InternalStructs.RunQuery_args() {
          Token = @token,
          Query = @query,
          Parameters = @parameters,
        };
        
        await tmp72.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> recv_RunQueryAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp73 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp73.Type == TMessageType.Exception)
        {
          var tmp74 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp74;
        }

        var tmp75 = new InternalStructs.RunQuery_result();
        await tmp75.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp75.__isset.success)
        {
          return tmp75.Success!;
        }
        if (tmp75.__isset.@e)
        {
          throw tmp75.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RunQueryAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task SetConfigValueAsync(long @token, string @key, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default)
      {
        await send_SetConfigValueAsync(@token, @key, @value, cancellationToken);
        await recv_SetConfigValueAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_SetConfigValueAsync(long @token, string @key, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SetConfigValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp76 = new InternalStructs.SetConfigValue_args() {
          Token = @token,
          Key = @key,
          Value = @value,
        };
        
        await tmp76.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_SetConfigValueAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp77 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp77.Type == TMessageType.Exception)
        {
          var tmp78 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp78;
        }

        var tmp79 = new InternalStructs.SetConfigValue_result();
        await tmp79.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp79.__isset.@e)
        {
          throw tmp79.E!;
        }
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> GetConfigValueAsync(long @token, string @key, CancellationToken cancellationToken = default)
      {
        await send_GetConfigValueAsync(@token, @key, cancellationToken);
        return await recv_GetConfigValueAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetConfigValueAsync(long @token, string @key, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetConfigValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp80 = new InternalStructs.GetConfigValue_args() {
          Token = @token,
          Key = @key,
        };
        
        await tmp80.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> recv_GetConfigValueAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp81 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp81.Type == TMessageType.Exception)
        {
          var tmp82 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp82;
        }

        var tmp83 = new InternalStructs.GetConfigValue_result();
        await tmp83.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp83.__isset.success)
        {
          return tmp83.Success!;
        }
        if (tmp83.__isset.@e)
        {
          throw tmp83.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetConfigValueAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> GetVariableAsync(long @token, string @name, CancellationToken cancellationToken = default)
      {
        await send_GetVariableAsync(@token, @name, cancellationToken);
        return await recv_GetVariableAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetVariableAsync(long @token, string @name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetVariable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp84 = new InternalStructs.GetVariable_args() {
          Token = @token,
          Name = @name,
        };
        
        await tmp84.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> recv_GetVariableAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp85 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp85.Type == TMessageType.Exception)
        {
          var tmp86 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp86;
        }

        var tmp87 = new InternalStructs.GetVariable_result();
        await tmp87.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp87.__isset.success)
        {
          return tmp87.Success!;
        }
        if (tmp87.__isset.@e)
        {
          throw tmp87.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetVariableAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> SetVariableAsync(long @token, string @name, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default)
      {
        await send_SetVariableAsync(@token, @name, @value, cancellationToken);
        return await recv_SetVariableAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_SetVariableAsync(long @token, string @name, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SetVariable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp88 = new InternalStructs.SetVariable_args() {
          Token = @token,
          Name = @name,
          Value = @value,
        };
        
        await tmp88.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> recv_SetVariableAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp89 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp89.Type == TMessageType.Exception)
        {
          var tmp90 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp90;
        }

        var tmp91 = new InternalStructs.SetVariable_result();
        await tmp91.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp91.__isset.success)
        {
          return tmp91.Success!;
        }
        if (tmp91.__isset.@e)
        {
          throw tmp91.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetVariableAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<byte[]> Blob_ReadAsync(long @token, int object_blob_handle, int @offset, int @count, CancellationToken cancellationToken = default)
      {
        await send_Blob_ReadAsync(@token, object_blob_handle, @offset, @count, cancellationToken);
        return await recv_Blob_ReadAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Blob_ReadAsync(long @token, int object_blob_handle, int @offset, int @count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Blob_Read", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp92 = new InternalStructs.Blob_Read_args() {
          Token = @token,
          ObjectBlobHandle = object_blob_handle,
          Offset = @offset,
          Count = @count,
        };
        
        await tmp92.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<byte[]> recv_Blob_ReadAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp93 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp93.Type == TMessageType.Exception)
        {
          var tmp94 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp94;
        }

        var tmp95 = new InternalStructs.Blob_Read_result();
        await tmp95.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp95.__isset.success)
        {
          return tmp95.Success!;
        }
        if (tmp95.__isset.@e)
        {
          throw tmp95.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Blob_ReadAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<long> Blob_WriteAsync(long @token, int object_blob_handle, byte[] @bytes, CancellationToken cancellationToken = default)
      {
        await send_Blob_WriteAsync(@token, object_blob_handle, @bytes, cancellationToken);
        return await recv_Blob_WriteAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Blob_WriteAsync(long @token, int object_blob_handle, byte[] @bytes, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Blob_Write", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp96 = new InternalStructs.Blob_Write_args() {
          Token = @token,
          ObjectBlobHandle = object_blob_handle,
          Bytes = @bytes,
        };
        
        await tmp96.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<long> recv_Blob_WriteAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp97 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp97.Type == TMessageType.Exception)
        {
          var tmp98 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp98;
        }

        var tmp99 = new InternalStructs.Blob_Write_result();
        await tmp99.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp99.__isset.success)
        {
          return tmp99.Success;
        }
        if (tmp99.__isset.@e)
        {
          throw tmp99.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Blob_WriteAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<long> Blob_GetLengthAsync(long @token, int object_blob_handle, CancellationToken cancellationToken = default)
      {
        await send_Blob_GetLengthAsync(@token, object_blob_handle, cancellationToken);
        return await recv_Blob_GetLengthAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Blob_GetLengthAsync(long @token, int object_blob_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Blob_GetLength", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp100 = new InternalStructs.Blob_GetLength_args() {
          Token = @token,
          ObjectBlobHandle = object_blob_handle,
        };
        
        await tmp100.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<long> recv_Blob_GetLengthAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp101 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp101.Type == TMessageType.Exception)
        {
          var tmp102 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp102;
        }

        var tmp103 = new InternalStructs.Blob_GetLength_result();
        await tmp103.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp103.__isset.success)
        {
          return tmp103.Success;
        }
        if (tmp103.__isset.@e)
        {
          throw tmp103.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Blob_GetLengthAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task LogAsync(long @token, global::QueryCat.Plugins.Sdk.LogLevel @level, string @message, List<string>? @arguments, CancellationToken cancellationToken = default)
      {
        await send_LogAsync(@token, @level, @message, @arguments, cancellationToken);
        await recv_LogAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_LogAsync(long @token, global::QueryCat.Plugins.Sdk.LogLevel @level, string @message, List<string>? @arguments, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Log", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp104 = new InternalStructs.Log_args() {
          Token = @token,
          Level = @level,
          Message = @message,
          Arguments = @arguments,
        };
        
        await tmp104.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_LogAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp105 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp105.Type == TMessageType.Exception)
        {
          var tmp106 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp106;
        }

        var tmp107 = new InternalStructs.Log_result();
        await tmp107.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp107.__isset.@e)
        {
          throw tmp107.E!;
        }
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor>? _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor>? logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["RegisterPlugin"] = RegisterPlugin_ProcessAsync;
        processMap_["CallFunction"] = CallFunction_ProcessAsync;
        processMap_["RunQuery"] = RunQuery_ProcessAsync;
        processMap_["SetConfigValue"] = SetConfigValue_ProcessAsync;
        processMap_["GetConfigValue"] = GetConfigValue_ProcessAsync;
        processMap_["GetVariable"] = GetVariable_ProcessAsync;
        processMap_["SetVariable"] = SetVariable_ProcessAsync;
        processMap_["Blob_Read"] = Blob_Read_ProcessAsync;
        processMap_["Blob_Write"] = Blob_Write_ProcessAsync;
        processMap_["Blob_GetLength"] = Blob_GetLength_ProcessAsync;
        processMap_["Log"] = Log_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = [];

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task RegisterPlugin_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp108 = new InternalStructs.RegisterPlugin_args();
        await tmp108.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp109 = new InternalStructs.RegisterPlugin_result();
        try
        {
          try
          {
            tmp109.Success = await _iAsync.RegisterPluginAsync(tmp108.RegistrationToken, tmp108.CallbackUri, tmp108.PluginData, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp110)
          {
            tmp109.E = tmp110;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RegisterPlugin", TMessageType.Reply, seqid), cancellationToken); 
          await tmp109.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp111)
        {
          var tmp112 = $"Error occurred in {GetType().FullName}: {tmp111.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp111, tmp112);
          else
            Console.Error.WriteLine(tmp112);
          var tmp113 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RegisterPlugin", TMessageType.Exception, seqid), cancellationToken);
          await tmp113.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task CallFunction_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp114 = new InternalStructs.CallFunction_args();
        await tmp114.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp115 = new InternalStructs.CallFunction_result();
        try
        {
          try
          {
            tmp115.Success = await _iAsync.CallFunctionAsync(tmp114.Token, tmp114.FunctionName, tmp114.Args, tmp114.ObjectHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp116)
          {
            tmp115.E = tmp116;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("CallFunction", TMessageType.Reply, seqid), cancellationToken); 
          await tmp115.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp117)
        {
          var tmp118 = $"Error occurred in {GetType().FullName}: {tmp117.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp117, tmp118);
          else
            Console.Error.WriteLine(tmp118);
          var tmp119 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("CallFunction", TMessageType.Exception, seqid), cancellationToken);
          await tmp119.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RunQuery_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp120 = new InternalStructs.RunQuery_args();
        await tmp120.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp121 = new InternalStructs.RunQuery_result();
        try
        {
          try
          {
            tmp121.Success = await _iAsync.RunQueryAsync(tmp120.Token, tmp120.Query, tmp120.Parameters, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp122)
          {
            tmp121.E = tmp122;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RunQuery", TMessageType.Reply, seqid), cancellationToken); 
          await tmp121.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp123)
        {
          var tmp124 = $"Error occurred in {GetType().FullName}: {tmp123.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp123, tmp124);
          else
            Console.Error.WriteLine(tmp124);
          var tmp125 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RunQuery", TMessageType.Exception, seqid), cancellationToken);
          await tmp125.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SetConfigValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp126 = new InternalStructs.SetConfigValue_args();
        await tmp126.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp127 = new InternalStructs.SetConfigValue_result();
        try
        {
          try
          {
            await _iAsync.SetConfigValueAsync(tmp126.Token, tmp126.Key, tmp126.Value, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp128)
          {
            tmp127.E = tmp128;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("SetConfigValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp127.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp129)
        {
          var tmp130 = $"Error occurred in {GetType().FullName}: {tmp129.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp129, tmp130);
          else
            Console.Error.WriteLine(tmp130);
          var tmp131 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SetConfigValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp131.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetConfigValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp132 = new InternalStructs.GetConfigValue_args();
        await tmp132.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp133 = new InternalStructs.GetConfigValue_result();
        try
        {
          try
          {
            tmp133.Success = await _iAsync.GetConfigValueAsync(tmp132.Token, tmp132.Key, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp134)
          {
            tmp133.E = tmp134;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("GetConfigValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp133.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp135)
        {
          var tmp136 = $"Error occurred in {GetType().FullName}: {tmp135.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp135, tmp136);
          else
            Console.Error.WriteLine(tmp136);
          var tmp137 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetConfigValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp137.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetVariable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp138 = new InternalStructs.GetVariable_args();
        await tmp138.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp139 = new InternalStructs.GetVariable_result();
        try
        {
          try
          {
            tmp139.Success = await _iAsync.GetVariableAsync(tmp138.Token, tmp138.Name, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp140)
          {
            tmp139.E = tmp140;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("GetVariable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp139.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp141)
        {
          var tmp142 = $"Error occurred in {GetType().FullName}: {tmp141.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp141, tmp142);
          else
            Console.Error.WriteLine(tmp142);
          var tmp143 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetVariable", TMessageType.Exception, seqid), cancellationToken);
          await tmp143.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SetVariable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp144 = new InternalStructs.SetVariable_args();
        await tmp144.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp145 = new InternalStructs.SetVariable_result();
        try
        {
          try
          {
            tmp145.Success = await _iAsync.SetVariableAsync(tmp144.Token, tmp144.Name, tmp144.Value, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp146)
          {
            tmp145.E = tmp146;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("SetVariable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp145.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp147)
        {
          var tmp148 = $"Error occurred in {GetType().FullName}: {tmp147.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp147, tmp148);
          else
            Console.Error.WriteLine(tmp148);
          var tmp149 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SetVariable", TMessageType.Exception, seqid), cancellationToken);
          await tmp149.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Blob_Read_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp150 = new InternalStructs.Blob_Read_args();
        await tmp150.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp151 = new InternalStructs.Blob_Read_result();
        try
        {
          try
          {
            tmp151.Success = await _iAsync.Blob_ReadAsync(tmp150.Token, tmp150.ObjectBlobHandle, tmp150.Offset, tmp150.Count, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp152)
          {
            tmp151.E = tmp152;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_Read", TMessageType.Reply, seqid), cancellationToken); 
          await tmp151.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp153)
        {
          var tmp154 = $"Error occurred in {GetType().FullName}: {tmp153.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp153, tmp154);
          else
            Console.Error.WriteLine(tmp154);
          var tmp155 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_Read", TMessageType.Exception, seqid), cancellationToken);
          await tmp155.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Blob_Write_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp156 = new InternalStructs.Blob_Write_args();
        await tmp156.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp157 = new InternalStructs.Blob_Write_result();
        try
        {
          try
          {
            tmp157.Success = await _iAsync.Blob_WriteAsync(tmp156.Token, tmp156.ObjectBlobHandle, tmp156.Bytes, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp158)
          {
            tmp157.E = tmp158;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_Write", TMessageType.Reply, seqid), cancellationToken); 
          await tmp157.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp159)
        {
          var tmp160 = $"Error occurred in {GetType().FullName}: {tmp159.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp159, tmp160);
          else
            Console.Error.WriteLine(tmp160);
          var tmp161 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_Write", TMessageType.Exception, seqid), cancellationToken);
          await tmp161.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Blob_GetLength_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp162 = new InternalStructs.Blob_GetLength_args();
        await tmp162.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp163 = new InternalStructs.Blob_GetLength_result();
        try
        {
          try
          {
            tmp163.Success = await _iAsync.Blob_GetLengthAsync(tmp162.Token, tmp162.ObjectBlobHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp164)
          {
            tmp163.E = tmp164;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_GetLength", TMessageType.Reply, seqid), cancellationToken); 
          await tmp163.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp165)
        {
          var tmp166 = $"Error occurred in {GetType().FullName}: {tmp165.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp165, tmp166);
          else
            Console.Error.WriteLine(tmp166);
          var tmp167 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_GetLength", TMessageType.Exception, seqid), cancellationToken);
          await tmp167.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Log_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp168 = new InternalStructs.Log_args();
        await tmp168.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp169 = new InternalStructs.Log_result();
        try
        {
          try
          {
            await _iAsync.LogAsync(tmp168.Token, tmp168.Level, tmp168.Message, tmp168.Arguments, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp170)
          {
            tmp169.E = tmp170;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Log", TMessageType.Reply, seqid), cancellationToken); 
          await tmp169.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp171)
        {
          var tmp172 = $"Error occurred in {GetType().FullName}: {tmp171.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp171, tmp172);
          else
            Console.Error.WriteLine(tmp172);
          var tmp173 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Log", TMessageType.Exception, seqid), cancellationToken);
          await tmp173.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class RegisterPlugin_args : TBase
      {

        public string RegistrationToken { get; set; } = string.Empty;

        public string CallbackUri { get; set; } = string.Empty;

        public global::QueryCat.Plugins.Sdk.PluginData? PluginData { get; set; }

        public RegisterPlugin_args()
        {
        }

        public RegisterPlugin_args(string registration_token, string callback_uri, global::QueryCat.Plugins.Sdk.PluginData? plugin_data) : this()
        {
          this.RegistrationToken = registration_token;
          this.CallbackUri = callback_uri;
          this.PluginData = plugin_data;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_registration_token = false;
            bool isset_callback_uri = false;
            bool isset_plugin_data = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    RegistrationToken = await iprot.ReadStringAsync(cancellationToken);
                    isset_registration_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    CallbackUri = await iprot.ReadStringAsync(cancellationToken);
                    isset_callback_uri = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    PluginData = new global::QueryCat.Plugins.Sdk.PluginData();
                    await PluginData.ReadAsync(iprot, cancellationToken);
                    isset_plugin_data = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_registration_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_callback_uri)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_plugin_data)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp174 = new TStruct("RegisterPlugin_args");
            await oprot.WriteStructBeginAsync(tmp174, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp175 = new TField();
            if((RegistrationToken != null))
            {
              tmp175.Name = "registration_token";
              tmp175.Type = TType.String;
              tmp175.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp175, cancellationToken);
              await oprot.WriteStringAsync(RegistrationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((CallbackUri != null))
            {
              tmp175.Name = "callback_uri";
              tmp175.Type = TType.String;
              tmp175.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp175, cancellationToken);
              await oprot.WriteStringAsync(CallbackUri, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((PluginData != null))
            {
              tmp175.Name = "plugin_data";
              tmp175.Type = TType.Struct;
              tmp175.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp175, cancellationToken);
              await PluginData.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RegisterPlugin_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(RegistrationToken, other.RegistrationToken)
            && global::System.Object.Equals(CallbackUri, other.CallbackUri)
            && global::System.Object.Equals(PluginData, other.PluginData);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((RegistrationToken != null))
            {
              hashcode = (hashcode * 397) + RegistrationToken.GetHashCode();
            }
            if((CallbackUri != null))
            {
              hashcode = (hashcode * 397) + CallbackUri.GetHashCode();
            }
            if((PluginData != null))
            {
              hashcode = (hashcode * 397) + PluginData.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp176 = new StringBuilder("RegisterPlugin_args(");
          if((RegistrationToken != null))
          {
            tmp176.Append(", RegistrationToken: ");
            RegistrationToken.ToString(tmp176);
          }
          if((CallbackUri != null))
          {
            tmp176.Append(", CallbackUri: ");
            CallbackUri.ToString(tmp176);
          }
          if((PluginData != null))
          {
            tmp176.Append(", PluginData: ");
            PluginData.ToString(tmp176);
          }
          tmp176.Append(')');
          return tmp176.ToString();
        }
      }


      public partial class RegisterPlugin_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.RegistrationResult? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.RegistrationResult? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RegisterPlugin_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.RegistrationResult();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp178 = new TStruct("RegisterPlugin_result");
            await oprot.WriteStructBeginAsync(tmp178, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp179 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp179.Name = "Success";
                tmp179.Type = TType.Struct;
                tmp179.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp179, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp179.Name = "E";
                tmp179.Type = TType.Struct;
                tmp179.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp179, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RegisterPlugin_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp180 = new StringBuilder("RegisterPlugin_result(");
          int tmp181 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp181++) { tmp180.Append(", "); }
            tmp180.Append("Success: ");
            Success.ToString(tmp180);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp181++) { tmp180.Append(", "); }
            tmp180.Append("E: ");
            E.ToString(tmp180);
          }
          tmp180.Append(')');
          return tmp180.ToString();
        }
      }


      public partial class CallFunction_args : TBase
      {
        private int _object_handle;

        public long Token { get; set; } = 0;

        public string FunctionName { get; set; } = string.Empty;

        public List<global::QueryCat.Plugins.Sdk.VariantValue>? Args { get; set; }

        public int ObjectHandle
        {
          get
          {
            return _object_handle;
          }
          set
          {
            __isset.object_handle = true;
            this._object_handle = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool object_handle;
        }

        public CallFunction_args()
        {
        }

        public CallFunction_args(long @token, string function_name, List<global::QueryCat.Plugins.Sdk.VariantValue>? @args) : this()
        {
          this.Token = @token;
          this.FunctionName = function_name;
          this.Args = @args;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_function_name = false;
            bool isset_args = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    FunctionName = await iprot.ReadStringAsync(cancellationToken);
                    isset_function_name = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list182 = await iprot.ReadListBeginAsync(cancellationToken);
                      Args = new List<global::QueryCat.Plugins.Sdk.VariantValue>(_list182.Count);
                      for(int _i183 = 0; _i183 < _list182.Count; ++_i183)
                      {
                        global::QueryCat.Plugins.Sdk.VariantValue _elem184;
                        _elem184 = new global::QueryCat.Plugins.Sdk.VariantValue();
                        await _elem184.ReadAsync(iprot, cancellationToken);
                        Args.Add(_elem184);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                    isset_args = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_function_name)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_args)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp185 = new TStruct("CallFunction_args");
            await oprot.WriteStructBeginAsync(tmp185, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp186 = new TField();
            tmp186.Name = "token";
            tmp186.Type = TType.I64;
            tmp186.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp186, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((FunctionName != null))
            {
              tmp186.Name = "function_name";
              tmp186.Type = TType.String;
              tmp186.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp186, cancellationToken);
              await oprot.WriteStringAsync(FunctionName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Args != null))
            {
              tmp186.Name = "args";
              tmp186.Type = TType.List;
              tmp186.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp186, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Args.Count), cancellationToken);
              foreach (global::QueryCat.Plugins.Sdk.VariantValue _iter187 in Args)
              {
                await _iter187.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.object_handle)
            {
              tmp186.Name = "object_handle";
              tmp186.Type = TType.I32;
              tmp186.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp186, cancellationToken);
              await oprot.WriteI32Async(ObjectHandle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not CallFunction_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(FunctionName, other.FunctionName)
            && TCollections.Equals(Args, other.Args)
            && ((__isset.object_handle == other.__isset.object_handle) && ((!__isset.object_handle) || (global::System.Object.Equals(ObjectHandle, other.ObjectHandle))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            if((FunctionName != null))
            {
              hashcode = (hashcode * 397) + FunctionName.GetHashCode();
            }
            if((Args != null))
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Args);
            }
            if(__isset.object_handle)
            {
              hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp188 = new StringBuilder("CallFunction_args(");
          tmp188.Append(", Token: ");
          Token.ToString(tmp188);
          if((FunctionName != null))
          {
            tmp188.Append(", FunctionName: ");
            FunctionName.ToString(tmp188);
          }
          if((Args != null))
          {
            tmp188.Append(", Args: ");
            Args.ToString(tmp188);
          }
          if(__isset.object_handle)
          {
            tmp188.Append(", ObjectHandle: ");
            ObjectHandle.ToString(tmp188);
          }
          tmp188.Append(')');
          return tmp188.ToString();
        }
      }


      public partial class CallFunction_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.VariantValue? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.VariantValue? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public CallFunction_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp190 = new TStruct("CallFunction_result");
            await oprot.WriteStructBeginAsync(tmp190, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp191 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp191.Name = "Success";
                tmp191.Type = TType.Struct;
                tmp191.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp191, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp191.Name = "E";
                tmp191.Type = TType.Struct;
                tmp191.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp191, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not CallFunction_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp192 = new StringBuilder("CallFunction_result(");
          int tmp193 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp193++) { tmp192.Append(", "); }
            tmp192.Append("Success: ");
            Success.ToString(tmp192);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp193++) { tmp192.Append(", "); }
            tmp192.Append("E: ");
            E.ToString(tmp192);
          }
          tmp192.Append(')');
          return tmp192.ToString();
        }
      }


      public partial class RunQuery_args : TBase
      {
        private Dictionary<string, global::QueryCat.Plugins.Sdk.VariantValue>? _parameters;

        public long Token { get; set; } = 0;

        public string Query { get; set; } = string.Empty;

        public Dictionary<string, global::QueryCat.Plugins.Sdk.VariantValue>? Parameters
        {
          get
          {
            return _parameters;
          }
          set
          {
            __isset.@parameters = true;
            this._parameters = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @parameters;
        }

        public RunQuery_args()
        {
        }

        public RunQuery_args(long @token, string @query) : this()
        {
          this.Token = @token;
          this.Query = @query;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_query = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Query = await iprot.ReadStringAsync(cancellationToken);
                    isset_query = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Map)
                  {
                    {
                      var _map194 = await iprot.ReadMapBeginAsync(cancellationToken);
                      Parameters = new Dictionary<string, global::QueryCat.Plugins.Sdk.VariantValue>(_map194.Count);
                      for(int _i195 = 0; _i195 < _map194.Count; ++_i195)
                      {
                        string _key196;
                        global::QueryCat.Plugins.Sdk.VariantValue _val197;
                        _key196 = await iprot.ReadStringAsync(cancellationToken);
                        _val197 = new global::QueryCat.Plugins.Sdk.VariantValue();
                        await _val197.ReadAsync(iprot, cancellationToken);
                        Parameters[_key196] = _val197;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_query)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp198 = new TStruct("RunQuery_args");
            await oprot.WriteStructBeginAsync(tmp198, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp199 = new TField();
            tmp199.Name = "token";
            tmp199.Type = TType.I64;
            tmp199.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp199, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Query != null))
            {
              tmp199.Name = "query";
              tmp199.Type = TType.String;
              tmp199.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp199, cancellationToken);
              await oprot.WriteStringAsync(Query, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Parameters != null) && __isset.@parameters)
            {
              tmp199.Name = "parameters";
              tmp199.Type = TType.Map;
              tmp199.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp199, cancellationToken);
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Parameters.Count), cancellationToken);
              foreach (string _iter200 in Parameters.Keys)
              {
                await oprot.WriteStringAsync(_iter200, cancellationToken);
                await Parameters[_iter200].WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RunQuery_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(Query, other.Query)
            && ((__isset.@parameters == other.__isset.@parameters) && ((!__isset.@parameters) || (TCollections.Equals(Parameters, other.Parameters))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            if((Query != null))
            {
              hashcode = (hashcode * 397) + Query.GetHashCode();
            }
            if((Parameters != null) && __isset.@parameters)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Parameters);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp201 = new StringBuilder("RunQuery_args(");
          tmp201.Append(", Token: ");
          Token.ToString(tmp201);
          if((Query != null))
          {
            tmp201.Append(", Query: ");
            Query.ToString(tmp201);
          }
          if((Parameters != null) && __isset.@parameters)
          {
            tmp201.Append(", Parameters: ");
            Parameters.ToString(tmp201);
          }
          tmp201.Append(')');
          return tmp201.ToString();
        }
      }


      public partial class RunQuery_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.VariantValue? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.VariantValue? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RunQuery_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp203 = new TStruct("RunQuery_result");
            await oprot.WriteStructBeginAsync(tmp203, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp204 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp204.Name = "Success";
                tmp204.Type = TType.Struct;
                tmp204.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp204, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp204.Name = "E";
                tmp204.Type = TType.Struct;
                tmp204.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp204, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RunQuery_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp205 = new StringBuilder("RunQuery_result(");
          int tmp206 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp206++) { tmp205.Append(", "); }
            tmp205.Append("Success: ");
            Success.ToString(tmp205);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp206++) { tmp205.Append(", "); }
            tmp205.Append("E: ");
            E.ToString(tmp205);
          }
          tmp205.Append(')');
          return tmp205.ToString();
        }
      }


      public partial class SetConfigValue_args : TBase
      {

        public long Token { get; set; } = 0;

        public string Key { get; set; } = string.Empty;

        public global::QueryCat.Plugins.Sdk.VariantValue? Value { get; set; }

        public SetConfigValue_args()
        {
        }

        public SetConfigValue_args(long @token, string @key, global::QueryCat.Plugins.Sdk.VariantValue? @value) : this()
        {
          this.Token = @token;
          this.Key = @key;
          this.Value = @value;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_key = false;
            bool isset_value = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                    isset_key = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Value = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Value.ReadAsync(iprot, cancellationToken);
                    isset_value = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_key)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_value)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp207 = new TStruct("SetConfigValue_args");
            await oprot.WriteStructBeginAsync(tmp207, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp208 = new TField();
            tmp208.Name = "token";
            tmp208.Type = TType.I64;
            tmp208.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp208, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Key != null))
            {
              tmp208.Name = "key";
              tmp208.Type = TType.String;
              tmp208.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp208, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Value != null))
            {
              tmp208.Name = "value";
              tmp208.Type = TType.Struct;
              tmp208.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp208, cancellationToken);
              await Value.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not SetConfigValue_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(Key, other.Key)
            && global::System.Object.Equals(Value, other.Value);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            if((Key != null))
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if((Value != null))
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp209 = new StringBuilder("SetConfigValue_args(");
          tmp209.Append(", Token: ");
          Token.ToString(tmp209);
          if((Key != null))
          {
            tmp209.Append(", Key: ");
            Key.ToString(tmp209);
          }
          if((Value != null))
          {
            tmp209.Append(", Value: ");
            Value.ToString(tmp209);
          }
          tmp209.Append(')');
          return tmp209.ToString();
        }
      }


      public partial class SetConfigValue_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @e;
        }

        public SetConfigValue_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp211 = new TStruct("SetConfigValue_result");
            await oprot.WriteStructBeginAsync(tmp211, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp212 = new TField();

            if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp212.Name = "E";
                tmp212.Type = TType.Struct;
                tmp212.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp212, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not SetConfigValue_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp213 = new StringBuilder("SetConfigValue_result(");
          int tmp214 = 0;
          if((E != null) && __isset.@e)
          {
            if(0 < tmp214++) { tmp213.Append(", "); }
            tmp213.Append("E: ");
            E.ToString(tmp213);
          }
          tmp213.Append(')');
          return tmp213.ToString();
        }
      }


      public partial class GetConfigValue_args : TBase
      {

        public long Token { get; set; } = 0;

        public string Key { get; set; } = string.Empty;

        public GetConfigValue_args()
        {
        }

        public GetConfigValue_args(long @token, string @key) : this()
        {
          this.Token = @token;
          this.Key = @key;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_key = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                    isset_key = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_key)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp215 = new TStruct("GetConfigValue_args");
            await oprot.WriteStructBeginAsync(tmp215, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp216 = new TField();
            tmp216.Name = "token";
            tmp216.Type = TType.I64;
            tmp216.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp216, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Key != null))
            {
              tmp216.Name = "key";
              tmp216.Type = TType.String;
              tmp216.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp216, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetConfigValue_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(Key, other.Key);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            if((Key != null))
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp217 = new StringBuilder("GetConfigValue_args(");
          tmp217.Append(", Token: ");
          Token.ToString(tmp217);
          if((Key != null))
          {
            tmp217.Append(", Key: ");
            Key.ToString(tmp217);
          }
          tmp217.Append(')');
          return tmp217.ToString();
        }
      }


      public partial class GetConfigValue_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.VariantValue? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.VariantValue? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public GetConfigValue_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp219 = new TStruct("GetConfigValue_result");
            await oprot.WriteStructBeginAsync(tmp219, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp220 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp220.Name = "Success";
                tmp220.Type = TType.Struct;
                tmp220.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp220, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp220.Name = "E";
                tmp220.Type = TType.Struct;
                tmp220.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp220, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetConfigValue_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp221 = new StringBuilder("GetConfigValue_result(");
          int tmp222 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp222++) { tmp221.Append(", "); }
            tmp221.Append("Success: ");
            Success.ToString(tmp221);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp222++) { tmp221.Append(", "); }
            tmp221.Append("E: ");
            E.ToString(tmp221);
          }
          tmp221.Append(')');
          return tmp221.ToString();
        }
      }


      public partial class GetVariable_args : TBase
      {

        public long Token { get; set; } = 0;

        public string Name { get; set; } = string.Empty;

        public GetVariable_args()
        {
        }

        public GetVariable_args(long @token, string @name) : this()
        {
          this.Token = @token;
          this.Name = @name;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_name = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                    isset_name = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_name)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp223 = new TStruct("GetVariable_args");
            await oprot.WriteStructBeginAsync(tmp223, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp224 = new TField();
            tmp224.Name = "token";
            tmp224.Type = TType.I64;
            tmp224.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp224, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Name != null))
            {
              tmp224.Name = "name";
              tmp224.Type = TType.String;
              tmp224.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp224, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetVariable_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(Name, other.Name);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            if((Name != null))
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp225 = new StringBuilder("GetVariable_args(");
          tmp225.Append(", Token: ");
          Token.ToString(tmp225);
          if((Name != null))
          {
            tmp225.Append(", Name: ");
            Name.ToString(tmp225);
          }
          tmp225.Append(')');
          return tmp225.ToString();
        }
      }


      public partial class GetVariable_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.VariantValue? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.VariantValue? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public GetVariable_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp227 = new TStruct("GetVariable_result");
            await oprot.WriteStructBeginAsync(tmp227, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp228 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp228.Name = "Success";
                tmp228.Type = TType.Struct;
                tmp228.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp228, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp228.Name = "E";
                tmp228.Type = TType.Struct;
                tmp228.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp228, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetVariable_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp229 = new StringBuilder("GetVariable_result(");
          int tmp230 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp230++) { tmp229.Append(", "); }
            tmp229.Append("Success: ");
            Success.ToString(tmp229);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp230++) { tmp229.Append(", "); }
            tmp229.Append("E: ");
            E.ToString(tmp229);
          }
          tmp229.Append(')');
          return tmp229.ToString();
        }
      }


      public partial class SetVariable_args : TBase
      {

        public long Token { get; set; } = 0;

        public string Name { get; set; } = string.Empty;

        public global::QueryCat.Plugins.Sdk.VariantValue? Value { get; set; }

        public SetVariable_args()
        {
        }

        public SetVariable_args(long @token, string @name, global::QueryCat.Plugins.Sdk.VariantValue? @value) : this()
        {
          this.Token = @token;
          this.Name = @name;
          this.Value = @value;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_name = false;
            bool isset_value = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                    isset_name = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Value = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Value.ReadAsync(iprot, cancellationToken);
                    isset_value = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_name)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_value)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp231 = new TStruct("SetVariable_args");
            await oprot.WriteStructBeginAsync(tmp231, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp232 = new TField();
            tmp232.Name = "token";
            tmp232.Type = TType.I64;
            tmp232.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp232, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Name != null))
            {
              tmp232.Name = "name";
              tmp232.Type = TType.String;
              tmp232.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp232, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Value != null))
            {
              tmp232.Name = "value";
              tmp232.Type = TType.Struct;
              tmp232.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp232, cancellationToken);
              await Value.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not SetVariable_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(Name, other.Name)
            && global::System.Object.Equals(Value, other.Value);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            if((Name != null))
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if((Value != null))
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp233 = new StringBuilder("SetVariable_args(");
          tmp233.Append(", Token: ");
          Token.ToString(tmp233);
          if((Name != null))
          {
            tmp233.Append(", Name: ");
            Name.ToString(tmp233);
          }
          if((Value != null))
          {
            tmp233.Append(", Value: ");
            Value.ToString(tmp233);
          }
          tmp233.Append(')');
          return tmp233.ToString();
        }
      }


      public partial class SetVariable_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.VariantValue? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.VariantValue? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public SetVariable_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp235 = new TStruct("SetVariable_result");
            await oprot.WriteStructBeginAsync(tmp235, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp236 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp236.Name = "Success";
                tmp236.Type = TType.Struct;
                tmp236.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp236, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp236.Name = "E";
                tmp236.Type = TType.Struct;
                tmp236.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp236, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not SetVariable_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp237 = new StringBuilder("SetVariable_result(");
          int tmp238 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp238++) { tmp237.Append(", "); }
            tmp237.Append("Success: ");
            Success.ToString(tmp237);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp238++) { tmp237.Append(", "); }
            tmp237.Append("E: ");
            E.ToString(tmp237);
          }
          tmp237.Append(')');
          return tmp237.ToString();
        }
      }


      public partial class Blob_Read_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ObjectBlobHandle { get; set; } = 0;

        public int Offset { get; set; } = 0;

        public int Count { get; set; } = 0;

        public Blob_Read_args()
        {
        }

        public Blob_Read_args(long @token, int object_blob_handle, int @offset, int @count) : this()
        {
          this.Token = @token;
          this.ObjectBlobHandle = object_blob_handle;
          this.Offset = @offset;
          this.Count = @count;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_blob_handle = false;
            bool isset_offset = false;
            bool isset_count = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectBlobHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_blob_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Offset = await iprot.ReadI32Async(cancellationToken);
                    isset_offset = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                    isset_count = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_blob_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_offset)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_count)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp239 = new TStruct("Blob_Read_args");
            await oprot.WriteStructBeginAsync(tmp239, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp240 = new TField();
            tmp240.Name = "token";
            tmp240.Type = TType.I64;
            tmp240.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp240, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp240.Name = "object_blob_handle";
            tmp240.Type = TType.I32;
            tmp240.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp240, cancellationToken);
            await oprot.WriteI32Async(ObjectBlobHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp240.Name = "offset";
            tmp240.Type = TType.I32;
            tmp240.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp240, cancellationToken);
            await oprot.WriteI32Async(Offset, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp240.Name = "count";
            tmp240.Type = TType.I32;
            tmp240.ID = 4;
            await oprot.WriteFieldBeginAsync(tmp240, cancellationToken);
            await oprot.WriteI32Async(Count, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_Read_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectBlobHandle, other.ObjectBlobHandle)
            && global::System.Object.Equals(Offset, other.Offset)
            && global::System.Object.Equals(Count, other.Count);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectBlobHandle.GetHashCode();
            hashcode = (hashcode * 397) + Offset.GetHashCode();
            hashcode = (hashcode * 397) + Count.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp241 = new StringBuilder("Blob_Read_args(");
          tmp241.Append(", Token: ");
          Token.ToString(tmp241);
          tmp241.Append(", ObjectBlobHandle: ");
          ObjectBlobHandle.ToString(tmp241);
          tmp241.Append(", Offset: ");
          Offset.ToString(tmp241);
          tmp241.Append(", Count: ");
          Count.ToString(tmp241);
          tmp241.Append(')');
          return tmp241.ToString();
        }
      }


      public partial class Blob_Read_result : TBase
      {
        private byte[]? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public byte[]? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public Blob_Read_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp243 = new TStruct("Blob_Read_result");
            await oprot.WriteStructBeginAsync(tmp243, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp244 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp244.Name = "Success";
                tmp244.Type = TType.String;
                tmp244.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp244, cancellationToken);
                await oprot.WriteBinaryAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp244.Name = "E";
                tmp244.Type = TType.Struct;
                tmp244.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp244, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_Read_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp245 = new StringBuilder("Blob_Read_result(");
          int tmp246 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp246++) { tmp245.Append(", "); }
            tmp245.Append("Success: ");
            Success.ToString(tmp245);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp246++) { tmp245.Append(", "); }
            tmp245.Append("E: ");
            E.ToString(tmp245);
          }
          tmp245.Append(')');
          return tmp245.ToString();
        }
      }


      public partial class Blob_Write_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ObjectBlobHandle { get; set; } = 0;

        public byte[] Bytes { get; set; }= [];

        public Blob_Write_args()
        {
        }

        public Blob_Write_args(long @token, int object_blob_handle, byte[] @bytes) : this()
        {
          this.Token = @token;
          this.ObjectBlobHandle = object_blob_handle;
          this.Bytes = @bytes;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_blob_handle = false;
            bool isset_bytes = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectBlobHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_blob_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Bytes = await iprot.ReadBinaryAsync(cancellationToken);
                    isset_bytes = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_blob_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_bytes)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp247 = new TStruct("Blob_Write_args");
            await oprot.WriteStructBeginAsync(tmp247, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp248 = new TField();
            tmp248.Name = "token";
            tmp248.Type = TType.I64;
            tmp248.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp248, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp248.Name = "object_blob_handle";
            tmp248.Type = TType.I32;
            tmp248.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp248, cancellationToken);
            await oprot.WriteI32Async(ObjectBlobHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Bytes != null))
            {
              tmp248.Name = "bytes";
              tmp248.Type = TType.String;
              tmp248.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp248, cancellationToken);
              await oprot.WriteBinaryAsync(Bytes, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_Write_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectBlobHandle, other.ObjectBlobHandle)
            && TCollections.Equals(Bytes, other.Bytes);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectBlobHandle.GetHashCode();
            if((Bytes != null))
            {
              hashcode = (hashcode * 397) + Bytes.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp249 = new StringBuilder("Blob_Write_args(");
          tmp249.Append(", Token: ");
          Token.ToString(tmp249);
          tmp249.Append(", ObjectBlobHandle: ");
          ObjectBlobHandle.ToString(tmp249);
          if((Bytes != null))
          {
            tmp249.Append(", Bytes: ");
            Bytes.ToString(tmp249);
          }
          tmp249.Append(')');
          return tmp249.ToString();
        }
      }


      public partial class Blob_Write_result : TBase
      {
        private long _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public long Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public Blob_Write_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I64)
                  {
                    Success = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp251 = new TStruct("Blob_Write_result");
            await oprot.WriteStructBeginAsync(tmp251, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp252 = new TField();

            if(this.__isset.@success)
            {
              tmp252.Name = "Success";
              tmp252.Type = TType.I64;
              tmp252.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp252, cancellationToken);
              await oprot.WriteI64Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp252.Name = "E";
                tmp252.Type = TType.Struct;
                tmp252.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp252, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_Write_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp253 = new StringBuilder("Blob_Write_result(");
          int tmp254 = 0;
          if(__isset.@success)
          {
            if(0 < tmp254++) { tmp253.Append(", "); }
            tmp253.Append("Success: ");
            Success.ToString(tmp253);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp254++) { tmp253.Append(", "); }
            tmp253.Append("E: ");
            E.ToString(tmp253);
          }
          tmp253.Append(')');
          return tmp253.ToString();
        }
      }


      public partial class Blob_GetLength_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ObjectBlobHandle { get; set; } = 0;

        public Blob_GetLength_args()
        {
        }

        public Blob_GetLength_args(long @token, int object_blob_handle) : this()
        {
          this.Token = @token;
          this.ObjectBlobHandle = object_blob_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_blob_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectBlobHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_blob_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_blob_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp255 = new TStruct("Blob_GetLength_args");
            await oprot.WriteStructBeginAsync(tmp255, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp256 = new TField();
            tmp256.Name = "token";
            tmp256.Type = TType.I64;
            tmp256.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp256, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp256.Name = "object_blob_handle";
            tmp256.Type = TType.I32;
            tmp256.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp256, cancellationToken);
            await oprot.WriteI32Async(ObjectBlobHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_GetLength_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectBlobHandle, other.ObjectBlobHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectBlobHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp257 = new StringBuilder("Blob_GetLength_args(");
          tmp257.Append(", Token: ");
          Token.ToString(tmp257);
          tmp257.Append(", ObjectBlobHandle: ");
          ObjectBlobHandle.ToString(tmp257);
          tmp257.Append(')');
          return tmp257.ToString();
        }
      }


      public partial class Blob_GetLength_result : TBase
      {
        private long _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public long Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public Blob_GetLength_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I64)
                  {
                    Success = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp259 = new TStruct("Blob_GetLength_result");
            await oprot.WriteStructBeginAsync(tmp259, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp260 = new TField();

            if(this.__isset.@success)
            {
              tmp260.Name = "Success";
              tmp260.Type = TType.I64;
              tmp260.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp260, cancellationToken);
              await oprot.WriteI64Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp260.Name = "E";
                tmp260.Type = TType.Struct;
                tmp260.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp260, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_GetLength_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp261 = new StringBuilder("Blob_GetLength_result(");
          int tmp262 = 0;
          if(__isset.@success)
          {
            if(0 < tmp262++) { tmp261.Append(", "); }
            tmp261.Append("Success: ");
            Success.ToString(tmp261);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp262++) { tmp261.Append(", "); }
            tmp261.Append("E: ");
            E.ToString(tmp261);
          }
          tmp261.Append(')');
          return tmp261.ToString();
        }
      }


      public partial class Log_args : TBase
      {
        private List<string>? _arguments;

        public long Token { get; set; } = 0;

        /// <summary>
        /// 
        /// <seealso cref="global::QueryCat.Plugins.Sdk.LogLevel"/>
        /// </summary>
        public global::QueryCat.Plugins.Sdk.LogLevel Level { get; set; } = default;

        public string Message { get; set; } = string.Empty;

        public List<string>? Arguments
        {
          get
          {
            return _arguments;
          }
          set
          {
            __isset.@arguments = true;
            this._arguments = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @arguments;
        }

        public Log_args()
        {
        }

        public Log_args(long @token, global::QueryCat.Plugins.Sdk.LogLevel @level, string @message) : this()
        {
          this.Token = @token;
          this.Level = @level;
          this.Message = @message;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_level = false;
            bool isset_message = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Level = (global::QueryCat.Plugins.Sdk.LogLevel)await iprot.ReadI32Async(cancellationToken);
                    isset_level = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                    isset_message = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list263 = await iprot.ReadListBeginAsync(cancellationToken);
                      Arguments = new List<string>(_list263.Count);
                      for(int _i264 = 0; _i264 < _list263.Count; ++_i264)
                      {
                        string _elem265;
                        _elem265 = await iprot.ReadStringAsync(cancellationToken);
                        Arguments.Add(_elem265);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_level)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_message)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp266 = new TStruct("Log_args");
            await oprot.WriteStructBeginAsync(tmp266, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp267 = new TField();
            tmp267.Name = "token";
            tmp267.Type = TType.I64;
            tmp267.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp267, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp267.Name = "level";
            tmp267.Type = TType.I32;
            tmp267.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp267, cancellationToken);
            await oprot.WriteI32Async((int)Level, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Message != null))
            {
              tmp267.Name = "message";
              tmp267.Type = TType.String;
              tmp267.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp267, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Arguments != null) && __isset.@arguments)
            {
              tmp267.Name = "arguments";
              tmp267.Type = TType.List;
              tmp267.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp267, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.String, Arguments.Count), cancellationToken);
              foreach (string _iter268 in Arguments)
              {
                await oprot.WriteStringAsync(_iter268, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Log_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(Level, other.Level)
            && global::System.Object.Equals(Message, other.Message)
            && ((__isset.@arguments == other.__isset.@arguments) && ((!__isset.@arguments) || (TCollections.Equals(Arguments, other.Arguments))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + Level.GetHashCode();
            if((Message != null))
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
            if((Arguments != null) && __isset.@arguments)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Arguments);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp269 = new StringBuilder("Log_args(");
          tmp269.Append(", Token: ");
          Token.ToString(tmp269);
          tmp269.Append(", Level: ");
          Level.ToString(tmp269);
          if((Message != null))
          {
            tmp269.Append(", Message: ");
            Message.ToString(tmp269);
          }
          if((Arguments != null) && __isset.@arguments)
          {
            tmp269.Append(", Arguments: ");
            Arguments.ToString(tmp269);
          }
          tmp269.Append(')');
          return tmp269.ToString();
        }
      }


      public partial class Log_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @e;
        }

        public Log_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp271 = new TStruct("Log_result");
            await oprot.WriteStructBeginAsync(tmp271, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp272 = new TField();

            if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp272.Name = "E";
                tmp272.Type = TType.Struct;
                tmp272.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp272, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Log_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp273 = new StringBuilder("Log_result(");
          int tmp274 = 0;
          if((E != null) && __isset.@e)
          {
            if(0 < tmp274++) { tmp273.Append(", "); }
            tmp273.Append("E: ");
            E.ToString(tmp273);
          }
          tmp273.Append(')');
          return tmp273.ToString();
        }
      }

    }

  }
}
