/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


// Thrift code generated for net8
#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0290  // use primary CTOR
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace QueryCat.Plugins.Sdk
{
  public partial class PluginsManager
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.RegistrationResult> RegisterPluginAsync(string registration_token, string callback_uri, global::QueryCat.Plugins.Sdk.PluginData? plugin_data, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> CallFunctionAsync(long @token, string function_name, List<global::QueryCat.Plugins.Sdk.VariantValue>? @args, int object_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> RunQueryAsync(long @token, string @query, Dictionary<string, global::QueryCat.Plugins.Sdk.VariantValue>? @parameters, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task SetConfigValueAsync(long @token, string @key, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> GetConfigValueAsync(long @token, string @key, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> GetVariableAsync(long @token, string @name, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> SetVariableAsync(long @token, string @name, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.ScopeVariable>> GetVariablesAsync(long @token, int scope_id, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ExecutionScope> PushScopeAsync(long @token, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ExecutionScope> PopScopeAsync(long @token, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ExecutionScope> PeekTopScopeAsync(long @token, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.CompletionResult>> GetCompletionsAsync(long @token, string @text, int @position, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<byte[]> Blob_ReadAsync(long @token, int object_blob_handle, int @offset, int @count, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<long> Blob_WriteAsync(long @token, int object_blob_handle, byte[] @bytes, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<long> Blob_GetLengthAsync(long @token, int object_blob_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<string> Blob_GetContentTypeAsync(long @token, int object_blob_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task LogAsync(long @token, global::QueryCat.Plugins.Sdk.LogLevel @level, string @message, List<string>? @arguments, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.Statistic> GetStatisticAsync(long @token, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.RegistrationResult> RegisterPluginAsync(string registration_token, string callback_uri, global::QueryCat.Plugins.Sdk.PluginData? plugin_data, CancellationToken cancellationToken = default)
      {
        await send_RegisterPluginAsync(registration_token, callback_uri, plugin_data, cancellationToken);
        return await recv_RegisterPluginAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RegisterPluginAsync(string registration_token, string callback_uri, global::QueryCat.Plugins.Sdk.PluginData? plugin_data, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RegisterPlugin", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp120 = new InternalStructs.RegisterPlugin_args() {
          RegistrationToken = registration_token,
          CallbackUri = callback_uri,
          PluginData = plugin_data,
        };
        
        await tmp120.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.RegistrationResult> recv_RegisterPluginAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp121 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp121.Type == TMessageType.Exception)
        {
          var tmp122 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp122;
        }

        var tmp123 = new InternalStructs.RegisterPlugin_result();
        await tmp123.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp123.__isset.success)
        {
          return tmp123.Success!;
        }
        if (tmp123.__isset.@e)
        {
          throw tmp123.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RegisterPluginAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> CallFunctionAsync(long @token, string function_name, List<global::QueryCat.Plugins.Sdk.VariantValue>? @args, int object_handle, CancellationToken cancellationToken = default)
      {
        await send_CallFunctionAsync(@token, function_name, @args, object_handle, cancellationToken);
        return await recv_CallFunctionAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_CallFunctionAsync(long @token, string function_name, List<global::QueryCat.Plugins.Sdk.VariantValue>? @args, int object_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("CallFunction", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp124 = new InternalStructs.CallFunction_args() {
          Token = @token,
          FunctionName = function_name,
          Args = @args,
          ObjectHandle = object_handle,
        };
        
        await tmp124.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> recv_CallFunctionAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp125 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp125.Type == TMessageType.Exception)
        {
          var tmp126 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp126;
        }

        var tmp127 = new InternalStructs.CallFunction_result();
        await tmp127.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp127.__isset.success)
        {
          return tmp127.Success!;
        }
        if (tmp127.__isset.@e)
        {
          throw tmp127.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CallFunctionAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> RunQueryAsync(long @token, string @query, Dictionary<string, global::QueryCat.Plugins.Sdk.VariantValue>? @parameters, CancellationToken cancellationToken = default)
      {
        await send_RunQueryAsync(@token, @query, @parameters, cancellationToken);
        return await recv_RunQueryAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RunQueryAsync(long @token, string @query, Dictionary<string, global::QueryCat.Plugins.Sdk.VariantValue>? @parameters, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RunQuery", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp128 = new InternalStructs.RunQuery_args() {
          Token = @token,
          Query = @query,
          Parameters = @parameters,
        };
        
        await tmp128.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> recv_RunQueryAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp129 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp129.Type == TMessageType.Exception)
        {
          var tmp130 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp130;
        }

        var tmp131 = new InternalStructs.RunQuery_result();
        await tmp131.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp131.__isset.success)
        {
          return tmp131.Success!;
        }
        if (tmp131.__isset.@e)
        {
          throw tmp131.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RunQueryAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task SetConfigValueAsync(long @token, string @key, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default)
      {
        await send_SetConfigValueAsync(@token, @key, @value, cancellationToken);
        await recv_SetConfigValueAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_SetConfigValueAsync(long @token, string @key, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SetConfigValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp132 = new InternalStructs.SetConfigValue_args() {
          Token = @token,
          Key = @key,
          Value = @value,
        };
        
        await tmp132.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_SetConfigValueAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp133 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp133.Type == TMessageType.Exception)
        {
          var tmp134 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp134;
        }

        var tmp135 = new InternalStructs.SetConfigValue_result();
        await tmp135.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp135.__isset.@e)
        {
          throw tmp135.E!;
        }
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> GetConfigValueAsync(long @token, string @key, CancellationToken cancellationToken = default)
      {
        await send_GetConfigValueAsync(@token, @key, cancellationToken);
        return await recv_GetConfigValueAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetConfigValueAsync(long @token, string @key, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetConfigValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp136 = new InternalStructs.GetConfigValue_args() {
          Token = @token,
          Key = @key,
        };
        
        await tmp136.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> recv_GetConfigValueAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp137 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp137.Type == TMessageType.Exception)
        {
          var tmp138 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp138;
        }

        var tmp139 = new InternalStructs.GetConfigValue_result();
        await tmp139.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp139.__isset.success)
        {
          return tmp139.Success!;
        }
        if (tmp139.__isset.@e)
        {
          throw tmp139.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetConfigValueAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> GetVariableAsync(long @token, string @name, CancellationToken cancellationToken = default)
      {
        await send_GetVariableAsync(@token, @name, cancellationToken);
        return await recv_GetVariableAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetVariableAsync(long @token, string @name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetVariable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp140 = new InternalStructs.GetVariable_args() {
          Token = @token,
          Name = @name,
        };
        
        await tmp140.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> recv_GetVariableAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp141 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp141.Type == TMessageType.Exception)
        {
          var tmp142 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp142;
        }

        var tmp143 = new InternalStructs.GetVariable_result();
        await tmp143.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp143.__isset.success)
        {
          return tmp143.Success!;
        }
        if (tmp143.__isset.@e)
        {
          throw tmp143.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetVariableAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> SetVariableAsync(long @token, string @name, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default)
      {
        await send_SetVariableAsync(@token, @name, @value, cancellationToken);
        return await recv_SetVariableAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_SetVariableAsync(long @token, string @name, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SetVariable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp144 = new InternalStructs.SetVariable_args() {
          Token = @token,
          Name = @name,
          Value = @value,
        };
        
        await tmp144.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> recv_SetVariableAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp145 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp145.Type == TMessageType.Exception)
        {
          var tmp146 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp146;
        }

        var tmp147 = new InternalStructs.SetVariable_result();
        await tmp147.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp147.__isset.success)
        {
          return tmp147.Success!;
        }
        if (tmp147.__isset.@e)
        {
          throw tmp147.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetVariableAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.ScopeVariable>> GetVariablesAsync(long @token, int scope_id, CancellationToken cancellationToken = default)
      {
        await send_GetVariablesAsync(@token, scope_id, cancellationToken);
        return await recv_GetVariablesAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetVariablesAsync(long @token, int scope_id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetVariables", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp148 = new InternalStructs.GetVariables_args() {
          Token = @token,
          ScopeId = scope_id,
        };
        
        await tmp148.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.ScopeVariable>> recv_GetVariablesAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp149 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp149.Type == TMessageType.Exception)
        {
          var tmp150 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp150;
        }

        var tmp151 = new InternalStructs.GetVariables_result();
        await tmp151.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp151.__isset.success)
        {
          return tmp151.Success!;
        }
        if (tmp151.__isset.@e)
        {
          throw tmp151.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetVariablesAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ExecutionScope> PushScopeAsync(long @token, CancellationToken cancellationToken = default)
      {
        await send_PushScopeAsync(@token, cancellationToken);
        return await recv_PushScopeAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_PushScopeAsync(long @token, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PushScope", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp152 = new InternalStructs.PushScope_args() {
          Token = @token,
        };
        
        await tmp152.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ExecutionScope> recv_PushScopeAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp153 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp153.Type == TMessageType.Exception)
        {
          var tmp154 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp154;
        }

        var tmp155 = new InternalStructs.PushScope_result();
        await tmp155.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp155.__isset.success)
        {
          return tmp155.Success!;
        }
        if (tmp155.__isset.@e)
        {
          throw tmp155.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushScopeAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ExecutionScope> PopScopeAsync(long @token, CancellationToken cancellationToken = default)
      {
        await send_PopScopeAsync(@token, cancellationToken);
        return await recv_PopScopeAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_PopScopeAsync(long @token, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PopScope", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp156 = new InternalStructs.PopScope_args() {
          Token = @token,
        };
        
        await tmp156.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ExecutionScope> recv_PopScopeAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp157 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp157.Type == TMessageType.Exception)
        {
          var tmp158 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp158;
        }

        var tmp159 = new InternalStructs.PopScope_result();
        await tmp159.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp159.__isset.success)
        {
          return tmp159.Success!;
        }
        if (tmp159.__isset.@e)
        {
          throw tmp159.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PopScopeAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ExecutionScope> PeekTopScopeAsync(long @token, CancellationToken cancellationToken = default)
      {
        await send_PeekTopScopeAsync(@token, cancellationToken);
        return await recv_PeekTopScopeAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_PeekTopScopeAsync(long @token, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PeekTopScope", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp160 = new InternalStructs.PeekTopScope_args() {
          Token = @token,
        };
        
        await tmp160.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ExecutionScope> recv_PeekTopScopeAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp161 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp161.Type == TMessageType.Exception)
        {
          var tmp162 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp162;
        }

        var tmp163 = new InternalStructs.PeekTopScope_result();
        await tmp163.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp163.__isset.success)
        {
          return tmp163.Success!;
        }
        if (tmp163.__isset.@e)
        {
          throw tmp163.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PeekTopScopeAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.CompletionResult>> GetCompletionsAsync(long @token, string @text, int @position, CancellationToken cancellationToken = default)
      {
        await send_GetCompletionsAsync(@token, @text, @position, cancellationToken);
        return await recv_GetCompletionsAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetCompletionsAsync(long @token, string @text, int @position, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetCompletions", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp164 = new InternalStructs.GetCompletions_args() {
          Token = @token,
          Text = @text,
          Position = @position,
        };
        
        await tmp164.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.CompletionResult>> recv_GetCompletionsAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp165 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp165.Type == TMessageType.Exception)
        {
          var tmp166 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp166;
        }

        var tmp167 = new InternalStructs.GetCompletions_result();
        await tmp167.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp167.__isset.success)
        {
          return tmp167.Success!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetCompletionsAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<byte[]> Blob_ReadAsync(long @token, int object_blob_handle, int @offset, int @count, CancellationToken cancellationToken = default)
      {
        await send_Blob_ReadAsync(@token, object_blob_handle, @offset, @count, cancellationToken);
        return await recv_Blob_ReadAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Blob_ReadAsync(long @token, int object_blob_handle, int @offset, int @count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Blob_Read", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp168 = new InternalStructs.Blob_Read_args() {
          Token = @token,
          ObjectBlobHandle = object_blob_handle,
          Offset = @offset,
          Count = @count,
        };
        
        await tmp168.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<byte[]> recv_Blob_ReadAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp169 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp169.Type == TMessageType.Exception)
        {
          var tmp170 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp170;
        }

        var tmp171 = new InternalStructs.Blob_Read_result();
        await tmp171.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp171.__isset.success)
        {
          return tmp171.Success!;
        }
        if (tmp171.__isset.@e)
        {
          throw tmp171.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Blob_ReadAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<long> Blob_WriteAsync(long @token, int object_blob_handle, byte[] @bytes, CancellationToken cancellationToken = default)
      {
        await send_Blob_WriteAsync(@token, object_blob_handle, @bytes, cancellationToken);
        return await recv_Blob_WriteAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Blob_WriteAsync(long @token, int object_blob_handle, byte[] @bytes, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Blob_Write", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp172 = new InternalStructs.Blob_Write_args() {
          Token = @token,
          ObjectBlobHandle = object_blob_handle,
          Bytes = @bytes,
        };
        
        await tmp172.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<long> recv_Blob_WriteAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp173 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp173.Type == TMessageType.Exception)
        {
          var tmp174 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp174;
        }

        var tmp175 = new InternalStructs.Blob_Write_result();
        await tmp175.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp175.__isset.success)
        {
          return tmp175.Success;
        }
        if (tmp175.__isset.@e)
        {
          throw tmp175.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Blob_WriteAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<long> Blob_GetLengthAsync(long @token, int object_blob_handle, CancellationToken cancellationToken = default)
      {
        await send_Blob_GetLengthAsync(@token, object_blob_handle, cancellationToken);
        return await recv_Blob_GetLengthAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Blob_GetLengthAsync(long @token, int object_blob_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Blob_GetLength", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp176 = new InternalStructs.Blob_GetLength_args() {
          Token = @token,
          ObjectBlobHandle = object_blob_handle,
        };
        
        await tmp176.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<long> recv_Blob_GetLengthAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp177 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp177.Type == TMessageType.Exception)
        {
          var tmp178 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp178;
        }

        var tmp179 = new InternalStructs.Blob_GetLength_result();
        await tmp179.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp179.__isset.success)
        {
          return tmp179.Success;
        }
        if (tmp179.__isset.@e)
        {
          throw tmp179.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Blob_GetLengthAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> Blob_GetContentTypeAsync(long @token, int object_blob_handle, CancellationToken cancellationToken = default)
      {
        await send_Blob_GetContentTypeAsync(@token, object_blob_handle, cancellationToken);
        return await recv_Blob_GetContentTypeAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Blob_GetContentTypeAsync(long @token, int object_blob_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Blob_GetContentType", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp180 = new InternalStructs.Blob_GetContentType_args() {
          Token = @token,
          ObjectBlobHandle = object_blob_handle,
        };
        
        await tmp180.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_Blob_GetContentTypeAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp181 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp181.Type == TMessageType.Exception)
        {
          var tmp182 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp182;
        }

        var tmp183 = new InternalStructs.Blob_GetContentType_result();
        await tmp183.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp183.__isset.success)
        {
          return tmp183.Success!;
        }
        if (tmp183.__isset.@e)
        {
          throw tmp183.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Blob_GetContentTypeAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task LogAsync(long @token, global::QueryCat.Plugins.Sdk.LogLevel @level, string @message, List<string>? @arguments, CancellationToken cancellationToken = default)
      {
        await send_LogAsync(@token, @level, @message, @arguments, cancellationToken);
        await recv_LogAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_LogAsync(long @token, global::QueryCat.Plugins.Sdk.LogLevel @level, string @message, List<string>? @arguments, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Log", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp184 = new InternalStructs.Log_args() {
          Token = @token,
          Level = @level,
          Message = @message,
          Arguments = @arguments,
        };
        
        await tmp184.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_LogAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp185 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp185.Type == TMessageType.Exception)
        {
          var tmp186 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp186;
        }

        var tmp187 = new InternalStructs.Log_result();
        await tmp187.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp187.__isset.@e)
        {
          throw tmp187.E!;
        }
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.Statistic> GetStatisticAsync(long @token, CancellationToken cancellationToken = default)
      {
        await send_GetStatisticAsync(@token, cancellationToken);
        return await recv_GetStatisticAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetStatisticAsync(long @token, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetStatistic", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp188 = new InternalStructs.GetStatistic_args() {
          Token = @token,
        };
        
        await tmp188.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.Statistic> recv_GetStatisticAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp189 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp189.Type == TMessageType.Exception)
        {
          var tmp190 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp190;
        }

        var tmp191 = new InternalStructs.GetStatistic_result();
        await tmp191.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp191.__isset.success)
        {
          return tmp191.Success!;
        }
        if (tmp191.__isset.@e)
        {
          throw tmp191.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetStatisticAsync failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor>? _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor>? logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["RegisterPlugin"] = RegisterPlugin_ProcessAsync;
        processMap_["CallFunction"] = CallFunction_ProcessAsync;
        processMap_["RunQuery"] = RunQuery_ProcessAsync;
        processMap_["SetConfigValue"] = SetConfigValue_ProcessAsync;
        processMap_["GetConfigValue"] = GetConfigValue_ProcessAsync;
        processMap_["GetVariable"] = GetVariable_ProcessAsync;
        processMap_["SetVariable"] = SetVariable_ProcessAsync;
        processMap_["GetVariables"] = GetVariables_ProcessAsync;
        processMap_["PushScope"] = PushScope_ProcessAsync;
        processMap_["PopScope"] = PopScope_ProcessAsync;
        processMap_["PeekTopScope"] = PeekTopScope_ProcessAsync;
        processMap_["GetCompletions"] = GetCompletions_ProcessAsync;
        processMap_["Blob_Read"] = Blob_Read_ProcessAsync;
        processMap_["Blob_Write"] = Blob_Write_ProcessAsync;
        processMap_["Blob_GetLength"] = Blob_GetLength_ProcessAsync;
        processMap_["Blob_GetContentType"] = Blob_GetContentType_ProcessAsync;
        processMap_["Log"] = Log_ProcessAsync;
        processMap_["GetStatistic"] = GetStatistic_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = [];

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task RegisterPlugin_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp192 = new InternalStructs.RegisterPlugin_args();
        await tmp192.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp193 = new InternalStructs.RegisterPlugin_result();
        try
        {
          try
          {
            tmp193.Success = await _iAsync.RegisterPluginAsync(tmp192.RegistrationToken, tmp192.CallbackUri, tmp192.PluginData, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp194)
          {
            tmp193.E = tmp194;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RegisterPlugin", TMessageType.Reply, seqid), cancellationToken); 
          await tmp193.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp195)
        {
          var tmp196 = $"Error occurred in {GetType().FullName}: {tmp195.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp195, tmp196);
          else
            Console.Error.WriteLine(tmp196);
          var tmp197 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RegisterPlugin", TMessageType.Exception, seqid), cancellationToken);
          await tmp197.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task CallFunction_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp198 = new InternalStructs.CallFunction_args();
        await tmp198.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp199 = new InternalStructs.CallFunction_result();
        try
        {
          try
          {
            tmp199.Success = await _iAsync.CallFunctionAsync(tmp198.Token, tmp198.FunctionName, tmp198.Args, tmp198.ObjectHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp200)
          {
            tmp199.E = tmp200;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("CallFunction", TMessageType.Reply, seqid), cancellationToken); 
          await tmp199.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp201)
        {
          var tmp202 = $"Error occurred in {GetType().FullName}: {tmp201.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp201, tmp202);
          else
            Console.Error.WriteLine(tmp202);
          var tmp203 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("CallFunction", TMessageType.Exception, seqid), cancellationToken);
          await tmp203.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RunQuery_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp204 = new InternalStructs.RunQuery_args();
        await tmp204.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp205 = new InternalStructs.RunQuery_result();
        try
        {
          try
          {
            tmp205.Success = await _iAsync.RunQueryAsync(tmp204.Token, tmp204.Query, tmp204.Parameters, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp206)
          {
            tmp205.E = tmp206;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RunQuery", TMessageType.Reply, seqid), cancellationToken); 
          await tmp205.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp207)
        {
          var tmp208 = $"Error occurred in {GetType().FullName}: {tmp207.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp207, tmp208);
          else
            Console.Error.WriteLine(tmp208);
          var tmp209 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RunQuery", TMessageType.Exception, seqid), cancellationToken);
          await tmp209.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SetConfigValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp210 = new InternalStructs.SetConfigValue_args();
        await tmp210.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp211 = new InternalStructs.SetConfigValue_result();
        try
        {
          try
          {
            await _iAsync.SetConfigValueAsync(tmp210.Token, tmp210.Key, tmp210.Value, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp212)
          {
            tmp211.E = tmp212;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("SetConfigValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp211.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp213)
        {
          var tmp214 = $"Error occurred in {GetType().FullName}: {tmp213.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp213, tmp214);
          else
            Console.Error.WriteLine(tmp214);
          var tmp215 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SetConfigValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp215.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetConfigValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp216 = new InternalStructs.GetConfigValue_args();
        await tmp216.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp217 = new InternalStructs.GetConfigValue_result();
        try
        {
          try
          {
            tmp217.Success = await _iAsync.GetConfigValueAsync(tmp216.Token, tmp216.Key, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp218)
          {
            tmp217.E = tmp218;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("GetConfigValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp217.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp219)
        {
          var tmp220 = $"Error occurred in {GetType().FullName}: {tmp219.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp219, tmp220);
          else
            Console.Error.WriteLine(tmp220);
          var tmp221 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetConfigValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp221.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetVariable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp222 = new InternalStructs.GetVariable_args();
        await tmp222.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp223 = new InternalStructs.GetVariable_result();
        try
        {
          try
          {
            tmp223.Success = await _iAsync.GetVariableAsync(tmp222.Token, tmp222.Name, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp224)
          {
            tmp223.E = tmp224;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("GetVariable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp223.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp225)
        {
          var tmp226 = $"Error occurred in {GetType().FullName}: {tmp225.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp225, tmp226);
          else
            Console.Error.WriteLine(tmp226);
          var tmp227 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetVariable", TMessageType.Exception, seqid), cancellationToken);
          await tmp227.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SetVariable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp228 = new InternalStructs.SetVariable_args();
        await tmp228.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp229 = new InternalStructs.SetVariable_result();
        try
        {
          try
          {
            tmp229.Success = await _iAsync.SetVariableAsync(tmp228.Token, tmp228.Name, tmp228.Value, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp230)
          {
            tmp229.E = tmp230;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("SetVariable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp229.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp231)
        {
          var tmp232 = $"Error occurred in {GetType().FullName}: {tmp231.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp231, tmp232);
          else
            Console.Error.WriteLine(tmp232);
          var tmp233 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SetVariable", TMessageType.Exception, seqid), cancellationToken);
          await tmp233.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetVariables_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp234 = new InternalStructs.GetVariables_args();
        await tmp234.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp235 = new InternalStructs.GetVariables_result();
        try
        {
          try
          {
            tmp235.Success = await _iAsync.GetVariablesAsync(tmp234.Token, tmp234.ScopeId, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp236)
          {
            tmp235.E = tmp236;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("GetVariables", TMessageType.Reply, seqid), cancellationToken); 
          await tmp235.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp237)
        {
          var tmp238 = $"Error occurred in {GetType().FullName}: {tmp237.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp237, tmp238);
          else
            Console.Error.WriteLine(tmp238);
          var tmp239 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetVariables", TMessageType.Exception, seqid), cancellationToken);
          await tmp239.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task PushScope_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp240 = new InternalStructs.PushScope_args();
        await tmp240.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp241 = new InternalStructs.PushScope_result();
        try
        {
          try
          {
            tmp241.Success = await _iAsync.PushScopeAsync(tmp240.Token, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp242)
          {
            tmp241.E = tmp242;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("PushScope", TMessageType.Reply, seqid), cancellationToken); 
          await tmp241.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp243)
        {
          var tmp244 = $"Error occurred in {GetType().FullName}: {tmp243.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp243, tmp244);
          else
            Console.Error.WriteLine(tmp244);
          var tmp245 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PushScope", TMessageType.Exception, seqid), cancellationToken);
          await tmp245.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task PopScope_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp246 = new InternalStructs.PopScope_args();
        await tmp246.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp247 = new InternalStructs.PopScope_result();
        try
        {
          try
          {
            tmp247.Success = await _iAsync.PopScopeAsync(tmp246.Token, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp248)
          {
            tmp247.E = tmp248;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("PopScope", TMessageType.Reply, seqid), cancellationToken); 
          await tmp247.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp249)
        {
          var tmp250 = $"Error occurred in {GetType().FullName}: {tmp249.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp249, tmp250);
          else
            Console.Error.WriteLine(tmp250);
          var tmp251 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PopScope", TMessageType.Exception, seqid), cancellationToken);
          await tmp251.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task PeekTopScope_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp252 = new InternalStructs.PeekTopScope_args();
        await tmp252.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp253 = new InternalStructs.PeekTopScope_result();
        try
        {
          try
          {
            tmp253.Success = await _iAsync.PeekTopScopeAsync(tmp252.Token, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp254)
          {
            tmp253.E = tmp254;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("PeekTopScope", TMessageType.Reply, seqid), cancellationToken); 
          await tmp253.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp255)
        {
          var tmp256 = $"Error occurred in {GetType().FullName}: {tmp255.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp255, tmp256);
          else
            Console.Error.WriteLine(tmp256);
          var tmp257 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PeekTopScope", TMessageType.Exception, seqid), cancellationToken);
          await tmp257.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetCompletions_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp258 = new InternalStructs.GetCompletions_args();
        await tmp258.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp259 = new InternalStructs.GetCompletions_result();
        try
        {
          tmp259.Success = await _iAsync.GetCompletionsAsync(tmp258.Token, tmp258.Text, tmp258.Position, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetCompletions", TMessageType.Reply, seqid), cancellationToken); 
          await tmp259.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp260)
        {
          var tmp261 = $"Error occurred in {GetType().FullName}: {tmp260.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp260, tmp261);
          else
            Console.Error.WriteLine(tmp261);
          var tmp262 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetCompletions", TMessageType.Exception, seqid), cancellationToken);
          await tmp262.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Blob_Read_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp263 = new InternalStructs.Blob_Read_args();
        await tmp263.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp264 = new InternalStructs.Blob_Read_result();
        try
        {
          try
          {
            tmp264.Success = await _iAsync.Blob_ReadAsync(tmp263.Token, tmp263.ObjectBlobHandle, tmp263.Offset, tmp263.Count, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp265)
          {
            tmp264.E = tmp265;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_Read", TMessageType.Reply, seqid), cancellationToken); 
          await tmp264.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp266)
        {
          var tmp267 = $"Error occurred in {GetType().FullName}: {tmp266.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp266, tmp267);
          else
            Console.Error.WriteLine(tmp267);
          var tmp268 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_Read", TMessageType.Exception, seqid), cancellationToken);
          await tmp268.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Blob_Write_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp269 = new InternalStructs.Blob_Write_args();
        await tmp269.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp270 = new InternalStructs.Blob_Write_result();
        try
        {
          try
          {
            tmp270.Success = await _iAsync.Blob_WriteAsync(tmp269.Token, tmp269.ObjectBlobHandle, tmp269.Bytes, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp271)
          {
            tmp270.E = tmp271;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_Write", TMessageType.Reply, seqid), cancellationToken); 
          await tmp270.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp272)
        {
          var tmp273 = $"Error occurred in {GetType().FullName}: {tmp272.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp272, tmp273);
          else
            Console.Error.WriteLine(tmp273);
          var tmp274 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_Write", TMessageType.Exception, seqid), cancellationToken);
          await tmp274.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Blob_GetLength_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp275 = new InternalStructs.Blob_GetLength_args();
        await tmp275.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp276 = new InternalStructs.Blob_GetLength_result();
        try
        {
          try
          {
            tmp276.Success = await _iAsync.Blob_GetLengthAsync(tmp275.Token, tmp275.ObjectBlobHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp277)
          {
            tmp276.E = tmp277;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_GetLength", TMessageType.Reply, seqid), cancellationToken); 
          await tmp276.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp278)
        {
          var tmp279 = $"Error occurred in {GetType().FullName}: {tmp278.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp278, tmp279);
          else
            Console.Error.WriteLine(tmp279);
          var tmp280 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_GetLength", TMessageType.Exception, seqid), cancellationToken);
          await tmp280.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Blob_GetContentType_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp281 = new InternalStructs.Blob_GetContentType_args();
        await tmp281.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp282 = new InternalStructs.Blob_GetContentType_result();
        try
        {
          try
          {
            tmp282.Success = await _iAsync.Blob_GetContentTypeAsync(tmp281.Token, tmp281.ObjectBlobHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp283)
          {
            tmp282.E = tmp283;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_GetContentType", TMessageType.Reply, seqid), cancellationToken); 
          await tmp282.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp284)
        {
          var tmp285 = $"Error occurred in {GetType().FullName}: {tmp284.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp284, tmp285);
          else
            Console.Error.WriteLine(tmp285);
          var tmp286 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_GetContentType", TMessageType.Exception, seqid), cancellationToken);
          await tmp286.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Log_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp287 = new InternalStructs.Log_args();
        await tmp287.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp288 = new InternalStructs.Log_result();
        try
        {
          try
          {
            await _iAsync.LogAsync(tmp287.Token, tmp287.Level, tmp287.Message, tmp287.Arguments, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp289)
          {
            tmp288.E = tmp289;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Log", TMessageType.Reply, seqid), cancellationToken); 
          await tmp288.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp290)
        {
          var tmp291 = $"Error occurred in {GetType().FullName}: {tmp290.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp290, tmp291);
          else
            Console.Error.WriteLine(tmp291);
          var tmp292 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Log", TMessageType.Exception, seqid), cancellationToken);
          await tmp292.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetStatistic_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp293 = new InternalStructs.GetStatistic_args();
        await tmp293.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp294 = new InternalStructs.GetStatistic_result();
        try
        {
          try
          {
            tmp294.Success = await _iAsync.GetStatisticAsync(tmp293.Token, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp295)
          {
            tmp294.E = tmp295;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("GetStatistic", TMessageType.Reply, seqid), cancellationToken); 
          await tmp294.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp296)
        {
          var tmp297 = $"Error occurred in {GetType().FullName}: {tmp296.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp296, tmp297);
          else
            Console.Error.WriteLine(tmp297);
          var tmp298 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetStatistic", TMessageType.Exception, seqid), cancellationToken);
          await tmp298.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class RegisterPlugin_args : TBase
      {

        public string RegistrationToken { get; set; } = string.Empty;

        public string CallbackUri { get; set; } = string.Empty;

        public global::QueryCat.Plugins.Sdk.PluginData? PluginData { get; set; }

        public RegisterPlugin_args()
        {
        }

        public RegisterPlugin_args(string registration_token, string callback_uri, global::QueryCat.Plugins.Sdk.PluginData? plugin_data) : this()
        {
          this.RegistrationToken = registration_token;
          this.CallbackUri = callback_uri;
          this.PluginData = plugin_data;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_registration_token = false;
            bool isset_callback_uri = false;
            bool isset_plugin_data = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    RegistrationToken = await iprot.ReadStringAsync(cancellationToken);
                    isset_registration_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    CallbackUri = await iprot.ReadStringAsync(cancellationToken);
                    isset_callback_uri = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    PluginData = new global::QueryCat.Plugins.Sdk.PluginData();
                    await PluginData.ReadAsync(iprot, cancellationToken);
                    isset_plugin_data = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_registration_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_callback_uri)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_plugin_data)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp299 = new TStruct("RegisterPlugin_args");
            await oprot.WriteStructBeginAsync(tmp299, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp300 = new TField();
            if((RegistrationToken != null))
            {
              tmp300.Name = "registration_token";
              tmp300.Type = TType.String;
              tmp300.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp300, cancellationToken);
              await oprot.WriteStringAsync(RegistrationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((CallbackUri != null))
            {
              tmp300.Name = "callback_uri";
              tmp300.Type = TType.String;
              tmp300.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp300, cancellationToken);
              await oprot.WriteStringAsync(CallbackUri, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((PluginData != null))
            {
              tmp300.Name = "plugin_data";
              tmp300.Type = TType.Struct;
              tmp300.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp300, cancellationToken);
              await PluginData.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RegisterPlugin_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(RegistrationToken, other.RegistrationToken)
            && global::System.Object.Equals(CallbackUri, other.CallbackUri)
            && global::System.Object.Equals(PluginData, other.PluginData);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((RegistrationToken != null))
            {
              hashcode = (hashcode * 397) + RegistrationToken.GetHashCode();
            }
            if((CallbackUri != null))
            {
              hashcode = (hashcode * 397) + CallbackUri.GetHashCode();
            }
            if((PluginData != null))
            {
              hashcode = (hashcode * 397) + PluginData.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp301 = new StringBuilder("RegisterPlugin_args(");
          if((RegistrationToken != null))
          {
            tmp301.Append(", RegistrationToken: ");
            RegistrationToken.ToString(tmp301);
          }
          if((CallbackUri != null))
          {
            tmp301.Append(", CallbackUri: ");
            CallbackUri.ToString(tmp301);
          }
          if((PluginData != null))
          {
            tmp301.Append(", PluginData: ");
            PluginData.ToString(tmp301);
          }
          tmp301.Append(')');
          return tmp301.ToString();
        }
      }


      public partial class RegisterPlugin_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.RegistrationResult? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.RegistrationResult? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RegisterPlugin_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.RegistrationResult();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp303 = new TStruct("RegisterPlugin_result");
            await oprot.WriteStructBeginAsync(tmp303, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp304 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp304.Name = "Success";
                tmp304.Type = TType.Struct;
                tmp304.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp304, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp304.Name = "E";
                tmp304.Type = TType.Struct;
                tmp304.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp304, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RegisterPlugin_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp305 = new StringBuilder("RegisterPlugin_result(");
          int tmp306 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp306++) { tmp305.Append(", "); }
            tmp305.Append("Success: ");
            Success.ToString(tmp305);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp306++) { tmp305.Append(", "); }
            tmp305.Append("E: ");
            E.ToString(tmp305);
          }
          tmp305.Append(')');
          return tmp305.ToString();
        }
      }


      public partial class CallFunction_args : TBase
      {
        private int _object_handle;

        public long Token { get; set; } = 0;

        public string FunctionName { get; set; } = string.Empty;

        public List<global::QueryCat.Plugins.Sdk.VariantValue>? Args { get; set; }

        public int ObjectHandle
        {
          get
          {
            return _object_handle;
          }
          set
          {
            __isset.object_handle = true;
            this._object_handle = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool object_handle;
        }

        public CallFunction_args()
        {
        }

        public CallFunction_args(long @token, string function_name, List<global::QueryCat.Plugins.Sdk.VariantValue>? @args) : this()
        {
          this.Token = @token;
          this.FunctionName = function_name;
          this.Args = @args;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_function_name = false;
            bool isset_args = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    FunctionName = await iprot.ReadStringAsync(cancellationToken);
                    isset_function_name = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list307 = await iprot.ReadListBeginAsync(cancellationToken);
                      Args = new List<global::QueryCat.Plugins.Sdk.VariantValue>(_list307.Count);
                      for(int _i308 = 0; _i308 < _list307.Count; ++_i308)
                      {
                        global::QueryCat.Plugins.Sdk.VariantValue _elem309;
                        _elem309 = new global::QueryCat.Plugins.Sdk.VariantValue();
                        await _elem309.ReadAsync(iprot, cancellationToken);
                        Args.Add(_elem309);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                    isset_args = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_function_name)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_args)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp310 = new TStruct("CallFunction_args");
            await oprot.WriteStructBeginAsync(tmp310, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp311 = new TField();
            tmp311.Name = "token";
            tmp311.Type = TType.I64;
            tmp311.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp311, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((FunctionName != null))
            {
              tmp311.Name = "function_name";
              tmp311.Type = TType.String;
              tmp311.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp311, cancellationToken);
              await oprot.WriteStringAsync(FunctionName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Args != null))
            {
              tmp311.Name = "args";
              tmp311.Type = TType.List;
              tmp311.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp311, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Args.Count), cancellationToken);
              foreach (global::QueryCat.Plugins.Sdk.VariantValue _iter312 in Args)
              {
                await _iter312.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.object_handle)
            {
              tmp311.Name = "object_handle";
              tmp311.Type = TType.I32;
              tmp311.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp311, cancellationToken);
              await oprot.WriteI32Async(ObjectHandle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not CallFunction_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(FunctionName, other.FunctionName)
            && TCollections.Equals(Args, other.Args)
            && ((__isset.object_handle == other.__isset.object_handle) && ((!__isset.object_handle) || (global::System.Object.Equals(ObjectHandle, other.ObjectHandle))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            if((FunctionName != null))
            {
              hashcode = (hashcode * 397) + FunctionName.GetHashCode();
            }
            if((Args != null))
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Args);
            }
            if(__isset.object_handle)
            {
              hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp313 = new StringBuilder("CallFunction_args(");
          tmp313.Append(", Token: ");
          Token.ToString(tmp313);
          if((FunctionName != null))
          {
            tmp313.Append(", FunctionName: ");
            FunctionName.ToString(tmp313);
          }
          if((Args != null))
          {
            tmp313.Append(", Args: ");
            Args.ToString(tmp313);
          }
          if(__isset.object_handle)
          {
            tmp313.Append(", ObjectHandle: ");
            ObjectHandle.ToString(tmp313);
          }
          tmp313.Append(')');
          return tmp313.ToString();
        }
      }


      public partial class CallFunction_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.VariantValue? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.VariantValue? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public CallFunction_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp315 = new TStruct("CallFunction_result");
            await oprot.WriteStructBeginAsync(tmp315, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp316 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp316.Name = "Success";
                tmp316.Type = TType.Struct;
                tmp316.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp316, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp316.Name = "E";
                tmp316.Type = TType.Struct;
                tmp316.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp316, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not CallFunction_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp317 = new StringBuilder("CallFunction_result(");
          int tmp318 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp318++) { tmp317.Append(", "); }
            tmp317.Append("Success: ");
            Success.ToString(tmp317);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp318++) { tmp317.Append(", "); }
            tmp317.Append("E: ");
            E.ToString(tmp317);
          }
          tmp317.Append(')');
          return tmp317.ToString();
        }
      }


      public partial class RunQuery_args : TBase
      {
        private Dictionary<string, global::QueryCat.Plugins.Sdk.VariantValue>? _parameters;

        public long Token { get; set; } = 0;

        public string Query { get; set; } = string.Empty;

        public Dictionary<string, global::QueryCat.Plugins.Sdk.VariantValue>? Parameters
        {
          get
          {
            return _parameters;
          }
          set
          {
            __isset.@parameters = true;
            this._parameters = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @parameters;
        }

        public RunQuery_args()
        {
        }

        public RunQuery_args(long @token, string @query) : this()
        {
          this.Token = @token;
          this.Query = @query;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_query = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Query = await iprot.ReadStringAsync(cancellationToken);
                    isset_query = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Map)
                  {
                    {
                      var _map319 = await iprot.ReadMapBeginAsync(cancellationToken);
                      Parameters = new Dictionary<string, global::QueryCat.Plugins.Sdk.VariantValue>(_map319.Count);
                      for(int _i320 = 0; _i320 < _map319.Count; ++_i320)
                      {
                        string _key321;
                        global::QueryCat.Plugins.Sdk.VariantValue _val322;
                        _key321 = await iprot.ReadStringAsync(cancellationToken);
                        _val322 = new global::QueryCat.Plugins.Sdk.VariantValue();
                        await _val322.ReadAsync(iprot, cancellationToken);
                        Parameters[_key321] = _val322;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_query)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp323 = new TStruct("RunQuery_args");
            await oprot.WriteStructBeginAsync(tmp323, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp324 = new TField();
            tmp324.Name = "token";
            tmp324.Type = TType.I64;
            tmp324.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp324, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Query != null))
            {
              tmp324.Name = "query";
              tmp324.Type = TType.String;
              tmp324.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp324, cancellationToken);
              await oprot.WriteStringAsync(Query, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Parameters != null) && __isset.@parameters)
            {
              tmp324.Name = "parameters";
              tmp324.Type = TType.Map;
              tmp324.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp324, cancellationToken);
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Parameters.Count), cancellationToken);
              foreach (string _iter325 in Parameters.Keys)
              {
                await oprot.WriteStringAsync(_iter325, cancellationToken);
                await Parameters[_iter325].WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RunQuery_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(Query, other.Query)
            && ((__isset.@parameters == other.__isset.@parameters) && ((!__isset.@parameters) || (TCollections.Equals(Parameters, other.Parameters))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            if((Query != null))
            {
              hashcode = (hashcode * 397) + Query.GetHashCode();
            }
            if((Parameters != null) && __isset.@parameters)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Parameters);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp326 = new StringBuilder("RunQuery_args(");
          tmp326.Append(", Token: ");
          Token.ToString(tmp326);
          if((Query != null))
          {
            tmp326.Append(", Query: ");
            Query.ToString(tmp326);
          }
          if((Parameters != null) && __isset.@parameters)
          {
            tmp326.Append(", Parameters: ");
            Parameters.ToString(tmp326);
          }
          tmp326.Append(')');
          return tmp326.ToString();
        }
      }


      public partial class RunQuery_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.VariantValue? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.VariantValue? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RunQuery_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp328 = new TStruct("RunQuery_result");
            await oprot.WriteStructBeginAsync(tmp328, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp329 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp329.Name = "Success";
                tmp329.Type = TType.Struct;
                tmp329.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp329, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp329.Name = "E";
                tmp329.Type = TType.Struct;
                tmp329.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp329, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RunQuery_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp330 = new StringBuilder("RunQuery_result(");
          int tmp331 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp331++) { tmp330.Append(", "); }
            tmp330.Append("Success: ");
            Success.ToString(tmp330);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp331++) { tmp330.Append(", "); }
            tmp330.Append("E: ");
            E.ToString(tmp330);
          }
          tmp330.Append(')');
          return tmp330.ToString();
        }
      }


      public partial class SetConfigValue_args : TBase
      {

        public long Token { get; set; } = 0;

        public string Key { get; set; } = string.Empty;

        public global::QueryCat.Plugins.Sdk.VariantValue? Value { get; set; }

        public SetConfigValue_args()
        {
        }

        public SetConfigValue_args(long @token, string @key, global::QueryCat.Plugins.Sdk.VariantValue? @value) : this()
        {
          this.Token = @token;
          this.Key = @key;
          this.Value = @value;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_key = false;
            bool isset_value = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                    isset_key = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Value = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Value.ReadAsync(iprot, cancellationToken);
                    isset_value = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_key)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_value)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp332 = new TStruct("SetConfigValue_args");
            await oprot.WriteStructBeginAsync(tmp332, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp333 = new TField();
            tmp333.Name = "token";
            tmp333.Type = TType.I64;
            tmp333.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp333, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Key != null))
            {
              tmp333.Name = "key";
              tmp333.Type = TType.String;
              tmp333.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp333, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Value != null))
            {
              tmp333.Name = "value";
              tmp333.Type = TType.Struct;
              tmp333.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp333, cancellationToken);
              await Value.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not SetConfigValue_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(Key, other.Key)
            && global::System.Object.Equals(Value, other.Value);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            if((Key != null))
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if((Value != null))
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp334 = new StringBuilder("SetConfigValue_args(");
          tmp334.Append(", Token: ");
          Token.ToString(tmp334);
          if((Key != null))
          {
            tmp334.Append(", Key: ");
            Key.ToString(tmp334);
          }
          if((Value != null))
          {
            tmp334.Append(", Value: ");
            Value.ToString(tmp334);
          }
          tmp334.Append(')');
          return tmp334.ToString();
        }
      }


      public partial class SetConfigValue_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @e;
        }

        public SetConfigValue_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp336 = new TStruct("SetConfigValue_result");
            await oprot.WriteStructBeginAsync(tmp336, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp337 = new TField();

            if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp337.Name = "E";
                tmp337.Type = TType.Struct;
                tmp337.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp337, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not SetConfigValue_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp338 = new StringBuilder("SetConfigValue_result(");
          int tmp339 = 0;
          if((E != null) && __isset.@e)
          {
            if(0 < tmp339++) { tmp338.Append(", "); }
            tmp338.Append("E: ");
            E.ToString(tmp338);
          }
          tmp338.Append(')');
          return tmp338.ToString();
        }
      }


      public partial class GetConfigValue_args : TBase
      {

        public long Token { get; set; } = 0;

        public string Key { get; set; } = string.Empty;

        public GetConfigValue_args()
        {
        }

        public GetConfigValue_args(long @token, string @key) : this()
        {
          this.Token = @token;
          this.Key = @key;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_key = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                    isset_key = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_key)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp340 = new TStruct("GetConfigValue_args");
            await oprot.WriteStructBeginAsync(tmp340, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp341 = new TField();
            tmp341.Name = "token";
            tmp341.Type = TType.I64;
            tmp341.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp341, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Key != null))
            {
              tmp341.Name = "key";
              tmp341.Type = TType.String;
              tmp341.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp341, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetConfigValue_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(Key, other.Key);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            if((Key != null))
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp342 = new StringBuilder("GetConfigValue_args(");
          tmp342.Append(", Token: ");
          Token.ToString(tmp342);
          if((Key != null))
          {
            tmp342.Append(", Key: ");
            Key.ToString(tmp342);
          }
          tmp342.Append(')');
          return tmp342.ToString();
        }
      }


      public partial class GetConfigValue_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.VariantValue? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.VariantValue? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public GetConfigValue_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp344 = new TStruct("GetConfigValue_result");
            await oprot.WriteStructBeginAsync(tmp344, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp345 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp345.Name = "Success";
                tmp345.Type = TType.Struct;
                tmp345.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp345, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp345.Name = "E";
                tmp345.Type = TType.Struct;
                tmp345.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp345, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetConfigValue_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp346 = new StringBuilder("GetConfigValue_result(");
          int tmp347 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp347++) { tmp346.Append(", "); }
            tmp346.Append("Success: ");
            Success.ToString(tmp346);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp347++) { tmp346.Append(", "); }
            tmp346.Append("E: ");
            E.ToString(tmp346);
          }
          tmp346.Append(')');
          return tmp346.ToString();
        }
      }


      public partial class GetVariable_args : TBase
      {

        public long Token { get; set; } = 0;

        public string Name { get; set; } = string.Empty;

        public GetVariable_args()
        {
        }

        public GetVariable_args(long @token, string @name) : this()
        {
          this.Token = @token;
          this.Name = @name;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_name = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                    isset_name = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_name)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp348 = new TStruct("GetVariable_args");
            await oprot.WriteStructBeginAsync(tmp348, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp349 = new TField();
            tmp349.Name = "token";
            tmp349.Type = TType.I64;
            tmp349.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp349, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Name != null))
            {
              tmp349.Name = "name";
              tmp349.Type = TType.String;
              tmp349.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp349, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetVariable_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(Name, other.Name);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            if((Name != null))
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp350 = new StringBuilder("GetVariable_args(");
          tmp350.Append(", Token: ");
          Token.ToString(tmp350);
          if((Name != null))
          {
            tmp350.Append(", Name: ");
            Name.ToString(tmp350);
          }
          tmp350.Append(')');
          return tmp350.ToString();
        }
      }


      public partial class GetVariable_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.VariantValue? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.VariantValue? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public GetVariable_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp352 = new TStruct("GetVariable_result");
            await oprot.WriteStructBeginAsync(tmp352, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp353 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp353.Name = "Success";
                tmp353.Type = TType.Struct;
                tmp353.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp353, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp353.Name = "E";
                tmp353.Type = TType.Struct;
                tmp353.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp353, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetVariable_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp354 = new StringBuilder("GetVariable_result(");
          int tmp355 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp355++) { tmp354.Append(", "); }
            tmp354.Append("Success: ");
            Success.ToString(tmp354);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp355++) { tmp354.Append(", "); }
            tmp354.Append("E: ");
            E.ToString(tmp354);
          }
          tmp354.Append(')');
          return tmp354.ToString();
        }
      }


      public partial class SetVariable_args : TBase
      {

        public long Token { get; set; } = 0;

        public string Name { get; set; } = string.Empty;

        public global::QueryCat.Plugins.Sdk.VariantValue? Value { get; set; }

        public SetVariable_args()
        {
        }

        public SetVariable_args(long @token, string @name, global::QueryCat.Plugins.Sdk.VariantValue? @value) : this()
        {
          this.Token = @token;
          this.Name = @name;
          this.Value = @value;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_name = false;
            bool isset_value = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                    isset_name = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Value = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Value.ReadAsync(iprot, cancellationToken);
                    isset_value = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_name)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_value)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp356 = new TStruct("SetVariable_args");
            await oprot.WriteStructBeginAsync(tmp356, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp357 = new TField();
            tmp357.Name = "token";
            tmp357.Type = TType.I64;
            tmp357.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp357, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Name != null))
            {
              tmp357.Name = "name";
              tmp357.Type = TType.String;
              tmp357.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp357, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Value != null))
            {
              tmp357.Name = "value";
              tmp357.Type = TType.Struct;
              tmp357.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp357, cancellationToken);
              await Value.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not SetVariable_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(Name, other.Name)
            && global::System.Object.Equals(Value, other.Value);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            if((Name != null))
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if((Value != null))
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp358 = new StringBuilder("SetVariable_args(");
          tmp358.Append(", Token: ");
          Token.ToString(tmp358);
          if((Name != null))
          {
            tmp358.Append(", Name: ");
            Name.ToString(tmp358);
          }
          if((Value != null))
          {
            tmp358.Append(", Value: ");
            Value.ToString(tmp358);
          }
          tmp358.Append(')');
          return tmp358.ToString();
        }
      }


      public partial class SetVariable_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.VariantValue? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.VariantValue? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public SetVariable_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp360 = new TStruct("SetVariable_result");
            await oprot.WriteStructBeginAsync(tmp360, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp361 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp361.Name = "Success";
                tmp361.Type = TType.Struct;
                tmp361.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp361, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp361.Name = "E";
                tmp361.Type = TType.Struct;
                tmp361.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp361, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not SetVariable_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp362 = new StringBuilder("SetVariable_result(");
          int tmp363 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp363++) { tmp362.Append(", "); }
            tmp362.Append("Success: ");
            Success.ToString(tmp362);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp363++) { tmp362.Append(", "); }
            tmp362.Append("E: ");
            E.ToString(tmp362);
          }
          tmp362.Append(')');
          return tmp362.ToString();
        }
      }


      public partial class GetVariables_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ScopeId { get; set; } = 0;

        public GetVariables_args()
        {
        }

        public GetVariables_args(long @token, int scope_id) : this()
        {
          this.Token = @token;
          this.ScopeId = scope_id;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_scope_id = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ScopeId = await iprot.ReadI32Async(cancellationToken);
                    isset_scope_id = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_scope_id)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp364 = new TStruct("GetVariables_args");
            await oprot.WriteStructBeginAsync(tmp364, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp365 = new TField();
            tmp365.Name = "token";
            tmp365.Type = TType.I64;
            tmp365.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp365, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp365.Name = "scope_id";
            tmp365.Type = TType.I32;
            tmp365.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp365, cancellationToken);
            await oprot.WriteI32Async(ScopeId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetVariables_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ScopeId, other.ScopeId);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ScopeId.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp366 = new StringBuilder("GetVariables_args(");
          tmp366.Append(", Token: ");
          Token.ToString(tmp366);
          tmp366.Append(", ScopeId: ");
          ScopeId.ToString(tmp366);
          tmp366.Append(')');
          return tmp366.ToString();
        }
      }


      public partial class GetVariables_result : TBase
      {
        private List<global::QueryCat.Plugins.Sdk.ScopeVariable>? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public List<global::QueryCat.Plugins.Sdk.ScopeVariable>? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public GetVariables_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list368 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::QueryCat.Plugins.Sdk.ScopeVariable>(_list368.Count);
                      for(int _i369 = 0; _i369 < _list368.Count; ++_i369)
                      {
                        global::QueryCat.Plugins.Sdk.ScopeVariable _elem370;
                        _elem370 = new global::QueryCat.Plugins.Sdk.ScopeVariable();
                        await _elem370.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem370);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp371 = new TStruct("GetVariables_result");
            await oprot.WriteStructBeginAsync(tmp371, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp372 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp372.Name = "Success";
                tmp372.Type = TType.List;
                tmp372.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp372, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::QueryCat.Plugins.Sdk.ScopeVariable _iter373 in Success)
                {
                  await _iter373.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp372.Name = "E";
                tmp372.Type = TType.Struct;
                tmp372.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp372, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetVariables_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp374 = new StringBuilder("GetVariables_result(");
          int tmp375 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp375++) { tmp374.Append(", "); }
            tmp374.Append("Success: ");
            Success.ToString(tmp374);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp375++) { tmp374.Append(", "); }
            tmp374.Append("E: ");
            E.ToString(tmp374);
          }
          tmp374.Append(')');
          return tmp374.ToString();
        }
      }


      public partial class PushScope_args : TBase
      {

        public long Token { get; set; } = 0;

        public PushScope_args()
        {
        }

        public PushScope_args(long @token) : this()
        {
          this.Token = @token;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp376 = new TStruct("PushScope_args");
            await oprot.WriteStructBeginAsync(tmp376, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp377 = new TField();
            tmp377.Name = "token";
            tmp377.Type = TType.I64;
            tmp377.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp377, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not PushScope_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp378 = new StringBuilder("PushScope_args(");
          tmp378.Append(", Token: ");
          Token.ToString(tmp378);
          tmp378.Append(')');
          return tmp378.ToString();
        }
      }


      public partial class PushScope_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.ExecutionScope? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.ExecutionScope? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public PushScope_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.ExecutionScope();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp380 = new TStruct("PushScope_result");
            await oprot.WriteStructBeginAsync(tmp380, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp381 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp381.Name = "Success";
                tmp381.Type = TType.Struct;
                tmp381.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp381, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp381.Name = "E";
                tmp381.Type = TType.Struct;
                tmp381.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp381, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not PushScope_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp382 = new StringBuilder("PushScope_result(");
          int tmp383 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp383++) { tmp382.Append(", "); }
            tmp382.Append("Success: ");
            Success.ToString(tmp382);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp383++) { tmp382.Append(", "); }
            tmp382.Append("E: ");
            E.ToString(tmp382);
          }
          tmp382.Append(')');
          return tmp382.ToString();
        }
      }


      public partial class PopScope_args : TBase
      {

        public long Token { get; set; } = 0;

        public PopScope_args()
        {
        }

        public PopScope_args(long @token) : this()
        {
          this.Token = @token;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp384 = new TStruct("PopScope_args");
            await oprot.WriteStructBeginAsync(tmp384, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp385 = new TField();
            tmp385.Name = "token";
            tmp385.Type = TType.I64;
            tmp385.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp385, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not PopScope_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp386 = new StringBuilder("PopScope_args(");
          tmp386.Append(", Token: ");
          Token.ToString(tmp386);
          tmp386.Append(')');
          return tmp386.ToString();
        }
      }


      public partial class PopScope_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.ExecutionScope? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.ExecutionScope? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public PopScope_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.ExecutionScope();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp388 = new TStruct("PopScope_result");
            await oprot.WriteStructBeginAsync(tmp388, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp389 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp389.Name = "Success";
                tmp389.Type = TType.Struct;
                tmp389.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp389, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp389.Name = "E";
                tmp389.Type = TType.Struct;
                tmp389.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp389, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not PopScope_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp390 = new StringBuilder("PopScope_result(");
          int tmp391 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp391++) { tmp390.Append(", "); }
            tmp390.Append("Success: ");
            Success.ToString(tmp390);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp391++) { tmp390.Append(", "); }
            tmp390.Append("E: ");
            E.ToString(tmp390);
          }
          tmp390.Append(')');
          return tmp390.ToString();
        }
      }


      public partial class PeekTopScope_args : TBase
      {

        public long Token { get; set; } = 0;

        public PeekTopScope_args()
        {
        }

        public PeekTopScope_args(long @token) : this()
        {
          this.Token = @token;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp392 = new TStruct("PeekTopScope_args");
            await oprot.WriteStructBeginAsync(tmp392, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp393 = new TField();
            tmp393.Name = "token";
            tmp393.Type = TType.I64;
            tmp393.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp393, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not PeekTopScope_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp394 = new StringBuilder("PeekTopScope_args(");
          tmp394.Append(", Token: ");
          Token.ToString(tmp394);
          tmp394.Append(')');
          return tmp394.ToString();
        }
      }


      public partial class PeekTopScope_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.ExecutionScope? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.ExecutionScope? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public PeekTopScope_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.ExecutionScope();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp396 = new TStruct("PeekTopScope_result");
            await oprot.WriteStructBeginAsync(tmp396, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp397 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp397.Name = "Success";
                tmp397.Type = TType.Struct;
                tmp397.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp397, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp397.Name = "E";
                tmp397.Type = TType.Struct;
                tmp397.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp397, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not PeekTopScope_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp398 = new StringBuilder("PeekTopScope_result(");
          int tmp399 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp399++) { tmp398.Append(", "); }
            tmp398.Append("Success: ");
            Success.ToString(tmp398);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp399++) { tmp398.Append(", "); }
            tmp398.Append("E: ");
            E.ToString(tmp398);
          }
          tmp398.Append(')');
          return tmp398.ToString();
        }
      }


      public partial class GetCompletions_args : TBase
      {

        public long Token { get; set; } = 0;

        public string Text { get; set; } = string.Empty;

        public int Position { get; set; } = 0;

        public GetCompletions_args()
        {
        }

        public GetCompletions_args(long @token, string @text, int @position) : this()
        {
          this.Token = @token;
          this.Text = @text;
          this.Position = @position;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_text = false;
            bool isset_position = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Text = await iprot.ReadStringAsync(cancellationToken);
                    isset_text = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Position = await iprot.ReadI32Async(cancellationToken);
                    isset_position = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_text)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_position)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp400 = new TStruct("GetCompletions_args");
            await oprot.WriteStructBeginAsync(tmp400, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp401 = new TField();
            tmp401.Name = "token";
            tmp401.Type = TType.I64;
            tmp401.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp401, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Text != null))
            {
              tmp401.Name = "text";
              tmp401.Type = TType.String;
              tmp401.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp401, cancellationToken);
              await oprot.WriteStringAsync(Text, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            tmp401.Name = "position";
            tmp401.Type = TType.I32;
            tmp401.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp401, cancellationToken);
            await oprot.WriteI32Async(Position, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetCompletions_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(Text, other.Text)
            && global::System.Object.Equals(Position, other.Position);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            if((Text != null))
            {
              hashcode = (hashcode * 397) + Text.GetHashCode();
            }
            hashcode = (hashcode * 397) + Position.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp402 = new StringBuilder("GetCompletions_args(");
          tmp402.Append(", Token: ");
          Token.ToString(tmp402);
          if((Text != null))
          {
            tmp402.Append(", Text: ");
            Text.ToString(tmp402);
          }
          tmp402.Append(", Position: ");
          Position.ToString(tmp402);
          tmp402.Append(')');
          return tmp402.ToString();
        }
      }


      public partial class GetCompletions_result : TBase
      {
        private List<global::QueryCat.Plugins.Sdk.CompletionResult>? _success;

        public List<global::QueryCat.Plugins.Sdk.CompletionResult>? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public GetCompletions_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list404 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::QueryCat.Plugins.Sdk.CompletionResult>(_list404.Count);
                      for(int _i405 = 0; _i405 < _list404.Count; ++_i405)
                      {
                        global::QueryCat.Plugins.Sdk.CompletionResult _elem406;
                        _elem406 = new global::QueryCat.Plugins.Sdk.CompletionResult();
                        await _elem406.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem406);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp407 = new TStruct("GetCompletions_result");
            await oprot.WriteStructBeginAsync(tmp407, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp408 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp408.Name = "Success";
                tmp408.Type = TType.List;
                tmp408.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp408, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::QueryCat.Plugins.Sdk.CompletionResult _iter409 in Success)
                {
                  await _iter409.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetCompletions_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp410 = new StringBuilder("GetCompletions_result(");
          int tmp411 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp411++) { tmp410.Append(", "); }
            tmp410.Append("Success: ");
            Success.ToString(tmp410);
          }
          tmp410.Append(')');
          return tmp410.ToString();
        }
      }


      public partial class Blob_Read_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ObjectBlobHandle { get; set; } = 0;

        public int Offset { get; set; } = 0;

        public int Count { get; set; } = 0;

        public Blob_Read_args()
        {
        }

        public Blob_Read_args(long @token, int object_blob_handle, int @offset, int @count) : this()
        {
          this.Token = @token;
          this.ObjectBlobHandle = object_blob_handle;
          this.Offset = @offset;
          this.Count = @count;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_blob_handle = false;
            bool isset_offset = false;
            bool isset_count = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectBlobHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_blob_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Offset = await iprot.ReadI32Async(cancellationToken);
                    isset_offset = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                    isset_count = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_blob_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_offset)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_count)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp412 = new TStruct("Blob_Read_args");
            await oprot.WriteStructBeginAsync(tmp412, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp413 = new TField();
            tmp413.Name = "token";
            tmp413.Type = TType.I64;
            tmp413.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp413, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp413.Name = "object_blob_handle";
            tmp413.Type = TType.I32;
            tmp413.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp413, cancellationToken);
            await oprot.WriteI32Async(ObjectBlobHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp413.Name = "offset";
            tmp413.Type = TType.I32;
            tmp413.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp413, cancellationToken);
            await oprot.WriteI32Async(Offset, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp413.Name = "count";
            tmp413.Type = TType.I32;
            tmp413.ID = 4;
            await oprot.WriteFieldBeginAsync(tmp413, cancellationToken);
            await oprot.WriteI32Async(Count, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_Read_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectBlobHandle, other.ObjectBlobHandle)
            && global::System.Object.Equals(Offset, other.Offset)
            && global::System.Object.Equals(Count, other.Count);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectBlobHandle.GetHashCode();
            hashcode = (hashcode * 397) + Offset.GetHashCode();
            hashcode = (hashcode * 397) + Count.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp414 = new StringBuilder("Blob_Read_args(");
          tmp414.Append(", Token: ");
          Token.ToString(tmp414);
          tmp414.Append(", ObjectBlobHandle: ");
          ObjectBlobHandle.ToString(tmp414);
          tmp414.Append(", Offset: ");
          Offset.ToString(tmp414);
          tmp414.Append(", Count: ");
          Count.ToString(tmp414);
          tmp414.Append(')');
          return tmp414.ToString();
        }
      }


      public partial class Blob_Read_result : TBase
      {
        private byte[]? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public byte[]? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public Blob_Read_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp416 = new TStruct("Blob_Read_result");
            await oprot.WriteStructBeginAsync(tmp416, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp417 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp417.Name = "Success";
                tmp417.Type = TType.String;
                tmp417.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp417, cancellationToken);
                await oprot.WriteBinaryAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp417.Name = "E";
                tmp417.Type = TType.Struct;
                tmp417.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp417, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_Read_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp418 = new StringBuilder("Blob_Read_result(");
          int tmp419 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp419++) { tmp418.Append(", "); }
            tmp418.Append("Success: ");
            Success.ToString(tmp418);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp419++) { tmp418.Append(", "); }
            tmp418.Append("E: ");
            E.ToString(tmp418);
          }
          tmp418.Append(')');
          return tmp418.ToString();
        }
      }


      public partial class Blob_Write_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ObjectBlobHandle { get; set; } = 0;

        public byte[] Bytes { get; set; }= [];

        public Blob_Write_args()
        {
        }

        public Blob_Write_args(long @token, int object_blob_handle, byte[] @bytes) : this()
        {
          this.Token = @token;
          this.ObjectBlobHandle = object_blob_handle;
          this.Bytes = @bytes;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_blob_handle = false;
            bool isset_bytes = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectBlobHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_blob_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Bytes = await iprot.ReadBinaryAsync(cancellationToken);
                    isset_bytes = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_blob_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_bytes)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp420 = new TStruct("Blob_Write_args");
            await oprot.WriteStructBeginAsync(tmp420, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp421 = new TField();
            tmp421.Name = "token";
            tmp421.Type = TType.I64;
            tmp421.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp421, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp421.Name = "object_blob_handle";
            tmp421.Type = TType.I32;
            tmp421.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp421, cancellationToken);
            await oprot.WriteI32Async(ObjectBlobHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Bytes != null))
            {
              tmp421.Name = "bytes";
              tmp421.Type = TType.String;
              tmp421.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp421, cancellationToken);
              await oprot.WriteBinaryAsync(Bytes, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_Write_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectBlobHandle, other.ObjectBlobHandle)
            && TCollections.Equals(Bytes, other.Bytes);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectBlobHandle.GetHashCode();
            if((Bytes != null))
            {
              hashcode = (hashcode * 397) + Bytes.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp422 = new StringBuilder("Blob_Write_args(");
          tmp422.Append(", Token: ");
          Token.ToString(tmp422);
          tmp422.Append(", ObjectBlobHandle: ");
          ObjectBlobHandle.ToString(tmp422);
          if((Bytes != null))
          {
            tmp422.Append(", Bytes: ");
            Bytes.ToString(tmp422);
          }
          tmp422.Append(')');
          return tmp422.ToString();
        }
      }


      public partial class Blob_Write_result : TBase
      {
        private long _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public long Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public Blob_Write_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I64)
                  {
                    Success = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp424 = new TStruct("Blob_Write_result");
            await oprot.WriteStructBeginAsync(tmp424, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp425 = new TField();

            if(this.__isset.@success)
            {
              tmp425.Name = "Success";
              tmp425.Type = TType.I64;
              tmp425.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp425, cancellationToken);
              await oprot.WriteI64Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp425.Name = "E";
                tmp425.Type = TType.Struct;
                tmp425.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp425, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_Write_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp426 = new StringBuilder("Blob_Write_result(");
          int tmp427 = 0;
          if(__isset.@success)
          {
            if(0 < tmp427++) { tmp426.Append(", "); }
            tmp426.Append("Success: ");
            Success.ToString(tmp426);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp427++) { tmp426.Append(", "); }
            tmp426.Append("E: ");
            E.ToString(tmp426);
          }
          tmp426.Append(')');
          return tmp426.ToString();
        }
      }


      public partial class Blob_GetLength_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ObjectBlobHandle { get; set; } = 0;

        public Blob_GetLength_args()
        {
        }

        public Blob_GetLength_args(long @token, int object_blob_handle) : this()
        {
          this.Token = @token;
          this.ObjectBlobHandle = object_blob_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_blob_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectBlobHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_blob_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_blob_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp428 = new TStruct("Blob_GetLength_args");
            await oprot.WriteStructBeginAsync(tmp428, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp429 = new TField();
            tmp429.Name = "token";
            tmp429.Type = TType.I64;
            tmp429.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp429, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp429.Name = "object_blob_handle";
            tmp429.Type = TType.I32;
            tmp429.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp429, cancellationToken);
            await oprot.WriteI32Async(ObjectBlobHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_GetLength_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectBlobHandle, other.ObjectBlobHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectBlobHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp430 = new StringBuilder("Blob_GetLength_args(");
          tmp430.Append(", Token: ");
          Token.ToString(tmp430);
          tmp430.Append(", ObjectBlobHandle: ");
          ObjectBlobHandle.ToString(tmp430);
          tmp430.Append(')');
          return tmp430.ToString();
        }
      }


      public partial class Blob_GetLength_result : TBase
      {
        private long _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public long Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public Blob_GetLength_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I64)
                  {
                    Success = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp432 = new TStruct("Blob_GetLength_result");
            await oprot.WriteStructBeginAsync(tmp432, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp433 = new TField();

            if(this.__isset.@success)
            {
              tmp433.Name = "Success";
              tmp433.Type = TType.I64;
              tmp433.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp433, cancellationToken);
              await oprot.WriteI64Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp433.Name = "E";
                tmp433.Type = TType.Struct;
                tmp433.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp433, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_GetLength_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp434 = new StringBuilder("Blob_GetLength_result(");
          int tmp435 = 0;
          if(__isset.@success)
          {
            if(0 < tmp435++) { tmp434.Append(", "); }
            tmp434.Append("Success: ");
            Success.ToString(tmp434);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp435++) { tmp434.Append(", "); }
            tmp434.Append("E: ");
            E.ToString(tmp434);
          }
          tmp434.Append(')');
          return tmp434.ToString();
        }
      }


      public partial class Blob_GetContentType_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ObjectBlobHandle { get; set; } = 0;

        public Blob_GetContentType_args()
        {
        }

        public Blob_GetContentType_args(long @token, int object_blob_handle) : this()
        {
          this.Token = @token;
          this.ObjectBlobHandle = object_blob_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_blob_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectBlobHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_blob_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_blob_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp436 = new TStruct("Blob_GetContentType_args");
            await oprot.WriteStructBeginAsync(tmp436, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp437 = new TField();
            tmp437.Name = "token";
            tmp437.Type = TType.I64;
            tmp437.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp437, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp437.Name = "object_blob_handle";
            tmp437.Type = TType.I32;
            tmp437.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp437, cancellationToken);
            await oprot.WriteI32Async(ObjectBlobHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_GetContentType_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectBlobHandle, other.ObjectBlobHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectBlobHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp438 = new StringBuilder("Blob_GetContentType_args(");
          tmp438.Append(", Token: ");
          Token.ToString(tmp438);
          tmp438.Append(", ObjectBlobHandle: ");
          ObjectBlobHandle.ToString(tmp438);
          tmp438.Append(')');
          return tmp438.ToString();
        }
      }


      public partial class Blob_GetContentType_result : TBase
      {
        private string? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public string? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public Blob_GetContentType_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp440 = new TStruct("Blob_GetContentType_result");
            await oprot.WriteStructBeginAsync(tmp440, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp441 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp441.Name = "Success";
                tmp441.Type = TType.String;
                tmp441.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp441, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp441.Name = "E";
                tmp441.Type = TType.Struct;
                tmp441.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp441, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_GetContentType_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp442 = new StringBuilder("Blob_GetContentType_result(");
          int tmp443 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp443++) { tmp442.Append(", "); }
            tmp442.Append("Success: ");
            Success.ToString(tmp442);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp443++) { tmp442.Append(", "); }
            tmp442.Append("E: ");
            E.ToString(tmp442);
          }
          tmp442.Append(')');
          return tmp442.ToString();
        }
      }


      public partial class Log_args : TBase
      {
        private List<string>? _arguments;

        public long Token { get; set; } = 0;

        /// <summary>
        /// 
        /// <seealso cref="global::QueryCat.Plugins.Sdk.LogLevel"/>
        /// </summary>
        public global::QueryCat.Plugins.Sdk.LogLevel Level { get; set; } = default;

        public string Message { get; set; } = string.Empty;

        public List<string>? Arguments
        {
          get
          {
            return _arguments;
          }
          set
          {
            __isset.@arguments = true;
            this._arguments = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @arguments;
        }

        public Log_args()
        {
        }

        public Log_args(long @token, global::QueryCat.Plugins.Sdk.LogLevel @level, string @message) : this()
        {
          this.Token = @token;
          this.Level = @level;
          this.Message = @message;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_level = false;
            bool isset_message = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Level = (global::QueryCat.Plugins.Sdk.LogLevel)await iprot.ReadI32Async(cancellationToken);
                    isset_level = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                    isset_message = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list444 = await iprot.ReadListBeginAsync(cancellationToken);
                      Arguments = new List<string>(_list444.Count);
                      for(int _i445 = 0; _i445 < _list444.Count; ++_i445)
                      {
                        string _elem446;
                        _elem446 = await iprot.ReadStringAsync(cancellationToken);
                        Arguments.Add(_elem446);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_level)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_message)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp447 = new TStruct("Log_args");
            await oprot.WriteStructBeginAsync(tmp447, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp448 = new TField();
            tmp448.Name = "token";
            tmp448.Type = TType.I64;
            tmp448.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp448, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp448.Name = "level";
            tmp448.Type = TType.I32;
            tmp448.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp448, cancellationToken);
            await oprot.WriteI32Async((int)Level, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Message != null))
            {
              tmp448.Name = "message";
              tmp448.Type = TType.String;
              tmp448.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp448, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Arguments != null) && __isset.@arguments)
            {
              tmp448.Name = "arguments";
              tmp448.Type = TType.List;
              tmp448.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp448, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.String, Arguments.Count), cancellationToken);
              foreach (string _iter449 in Arguments)
              {
                await oprot.WriteStringAsync(_iter449, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Log_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(Level, other.Level)
            && global::System.Object.Equals(Message, other.Message)
            && ((__isset.@arguments == other.__isset.@arguments) && ((!__isset.@arguments) || (TCollections.Equals(Arguments, other.Arguments))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + Level.GetHashCode();
            if((Message != null))
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
            if((Arguments != null) && __isset.@arguments)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Arguments);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp450 = new StringBuilder("Log_args(");
          tmp450.Append(", Token: ");
          Token.ToString(tmp450);
          tmp450.Append(", Level: ");
          Level.ToString(tmp450);
          if((Message != null))
          {
            tmp450.Append(", Message: ");
            Message.ToString(tmp450);
          }
          if((Arguments != null) && __isset.@arguments)
          {
            tmp450.Append(", Arguments: ");
            Arguments.ToString(tmp450);
          }
          tmp450.Append(')');
          return tmp450.ToString();
        }
      }


      public partial class Log_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @e;
        }

        public Log_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp452 = new TStruct("Log_result");
            await oprot.WriteStructBeginAsync(tmp452, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp453 = new TField();

            if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp453.Name = "E";
                tmp453.Type = TType.Struct;
                tmp453.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp453, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Log_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp454 = new StringBuilder("Log_result(");
          int tmp455 = 0;
          if((E != null) && __isset.@e)
          {
            if(0 < tmp455++) { tmp454.Append(", "); }
            tmp454.Append("E: ");
            E.ToString(tmp454);
          }
          tmp454.Append(')');
          return tmp454.ToString();
        }
      }


      public partial class GetStatistic_args : TBase
      {

        public long Token { get; set; } = 0;

        public GetStatistic_args()
        {
        }

        public GetStatistic_args(long @token) : this()
        {
          this.Token = @token;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp456 = new TStruct("GetStatistic_args");
            await oprot.WriteStructBeginAsync(tmp456, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp457 = new TField();
            tmp457.Name = "token";
            tmp457.Type = TType.I64;
            tmp457.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp457, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetStatistic_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp458 = new StringBuilder("GetStatistic_args(");
          tmp458.Append(", Token: ");
          Token.ToString(tmp458);
          tmp458.Append(')');
          return tmp458.ToString();
        }
      }


      public partial class GetStatistic_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.Statistic? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.Statistic? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public GetStatistic_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.Statistic();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp460 = new TStruct("GetStatistic_result");
            await oprot.WriteStructBeginAsync(tmp460, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp461 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp461.Name = "Success";
                tmp461.Type = TType.Struct;
                tmp461.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp461, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp461.Name = "E";
                tmp461.Type = TType.Struct;
                tmp461.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp461, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetStatistic_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp462 = new StringBuilder("GetStatistic_result(");
          int tmp463 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp463++) { tmp462.Append(", "); }
            tmp462.Append("Success: ");
            Success.ToString(tmp462);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp463++) { tmp462.Append(", "); }
            tmp462.Append("E: ");
            E.ToString(tmp462);
          }
          tmp462.Append(')');
          return tmp462.ToString();
        }
      }

    }

  }
}
