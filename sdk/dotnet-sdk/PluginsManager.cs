/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


// Thrift code generated for net8
#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0290  // use primary CTOR
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace QueryCat.Plugins.Sdk
{
  public partial class PluginsManager
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.RegistrationResult> RegisterPluginAsync(string registration_token, string callback_uri, global::QueryCat.Plugins.Sdk.PluginData? plugin_data, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> CallFunctionAsync(long @token, string function_name, List<global::QueryCat.Plugins.Sdk.VariantValue>? @args, int object_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> RunQueryAsync(long @token, string @query, Dictionary<string, global::QueryCat.Plugins.Sdk.VariantValue>? @parameters, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task SetConfigValueAsync(long @token, string @key, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> GetConfigValueAsync(long @token, string @key, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> GetVariableAsync(long @token, string @name, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> SetVariableAsync(long @token, string @name, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.ScopeVariable>> GetVariablesAsync(long @token, int scope_id, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ExecutionScope> PushScopeAsync(long @token, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ExecutionScope> PopScopeAsync(long @token, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ExecutionScope> PeekTopScopeAsync(long @token, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.CompletionResult>> GetCompletionsAsync(long @token, string @text, int @position, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<byte[]> Blob_ReadAsync(long @token, int object_blob_handle, int @offset, int @count, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<long> Blob_WriteAsync(long @token, int object_blob_handle, byte[] @bytes, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<long> Blob_GetLengthAsync(long @token, int object_blob_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<string> Blob_GetContentTypeAsync(long @token, int object_blob_handle, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task LogAsync(long @token, global::QueryCat.Plugins.Sdk.LogLevel @level, string @message, List<string>? @arguments, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.Statistic> GetStatisticAsync(long @token, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.RegistrationResult> RegisterPluginAsync(string registration_token, string callback_uri, global::QueryCat.Plugins.Sdk.PluginData? plugin_data, CancellationToken cancellationToken = default)
      {
        await send_RegisterPluginAsync(registration_token, callback_uri, plugin_data, cancellationToken);
        return await recv_RegisterPluginAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RegisterPluginAsync(string registration_token, string callback_uri, global::QueryCat.Plugins.Sdk.PluginData? plugin_data, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RegisterPlugin", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp104 = new InternalStructs.RegisterPlugin_args() {
          RegistrationToken = registration_token,
          CallbackUri = callback_uri,
          PluginData = plugin_data,
        };
        
        await tmp104.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.RegistrationResult> recv_RegisterPluginAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp105 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp105.Type == TMessageType.Exception)
        {
          var tmp106 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp106;
        }

        var tmp107 = new InternalStructs.RegisterPlugin_result();
        await tmp107.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp107.__isset.success)
        {
          return tmp107.Success!;
        }
        if (tmp107.__isset.@e)
        {
          throw tmp107.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RegisterPluginAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> CallFunctionAsync(long @token, string function_name, List<global::QueryCat.Plugins.Sdk.VariantValue>? @args, int object_handle, CancellationToken cancellationToken = default)
      {
        await send_CallFunctionAsync(@token, function_name, @args, object_handle, cancellationToken);
        return await recv_CallFunctionAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_CallFunctionAsync(long @token, string function_name, List<global::QueryCat.Plugins.Sdk.VariantValue>? @args, int object_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("CallFunction", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp108 = new InternalStructs.CallFunction_args() {
          Token = @token,
          FunctionName = function_name,
          Args = @args,
          ObjectHandle = object_handle,
        };
        
        await tmp108.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> recv_CallFunctionAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp109 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp109.Type == TMessageType.Exception)
        {
          var tmp110 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp110;
        }

        var tmp111 = new InternalStructs.CallFunction_result();
        await tmp111.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp111.__isset.success)
        {
          return tmp111.Success!;
        }
        if (tmp111.__isset.@e)
        {
          throw tmp111.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CallFunctionAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> RunQueryAsync(long @token, string @query, Dictionary<string, global::QueryCat.Plugins.Sdk.VariantValue>? @parameters, CancellationToken cancellationToken = default)
      {
        await send_RunQueryAsync(@token, @query, @parameters, cancellationToken);
        return await recv_RunQueryAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RunQueryAsync(long @token, string @query, Dictionary<string, global::QueryCat.Plugins.Sdk.VariantValue>? @parameters, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RunQuery", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp112 = new InternalStructs.RunQuery_args() {
          Token = @token,
          Query = @query,
          Parameters = @parameters,
        };
        
        await tmp112.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> recv_RunQueryAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp113 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp113.Type == TMessageType.Exception)
        {
          var tmp114 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp114;
        }

        var tmp115 = new InternalStructs.RunQuery_result();
        await tmp115.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp115.__isset.success)
        {
          return tmp115.Success!;
        }
        if (tmp115.__isset.@e)
        {
          throw tmp115.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RunQueryAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task SetConfigValueAsync(long @token, string @key, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default)
      {
        await send_SetConfigValueAsync(@token, @key, @value, cancellationToken);
        await recv_SetConfigValueAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_SetConfigValueAsync(long @token, string @key, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SetConfigValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp116 = new InternalStructs.SetConfigValue_args() {
          Token = @token,
          Key = @key,
          Value = @value,
        };
        
        await tmp116.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_SetConfigValueAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp117 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp117.Type == TMessageType.Exception)
        {
          var tmp118 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp118;
        }

        var tmp119 = new InternalStructs.SetConfigValue_result();
        await tmp119.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp119.__isset.@e)
        {
          throw tmp119.E!;
        }
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> GetConfigValueAsync(long @token, string @key, CancellationToken cancellationToken = default)
      {
        await send_GetConfigValueAsync(@token, @key, cancellationToken);
        return await recv_GetConfigValueAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetConfigValueAsync(long @token, string @key, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetConfigValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp120 = new InternalStructs.GetConfigValue_args() {
          Token = @token,
          Key = @key,
        };
        
        await tmp120.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> recv_GetConfigValueAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp121 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp121.Type == TMessageType.Exception)
        {
          var tmp122 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp122;
        }

        var tmp123 = new InternalStructs.GetConfigValue_result();
        await tmp123.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp123.__isset.success)
        {
          return tmp123.Success!;
        }
        if (tmp123.__isset.@e)
        {
          throw tmp123.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetConfigValueAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> GetVariableAsync(long @token, string @name, CancellationToken cancellationToken = default)
      {
        await send_GetVariableAsync(@token, @name, cancellationToken);
        return await recv_GetVariableAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetVariableAsync(long @token, string @name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetVariable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp124 = new InternalStructs.GetVariable_args() {
          Token = @token,
          Name = @name,
        };
        
        await tmp124.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> recv_GetVariableAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp125 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp125.Type == TMessageType.Exception)
        {
          var tmp126 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp126;
        }

        var tmp127 = new InternalStructs.GetVariable_result();
        await tmp127.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp127.__isset.success)
        {
          return tmp127.Success!;
        }
        if (tmp127.__isset.@e)
        {
          throw tmp127.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetVariableAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> SetVariableAsync(long @token, string @name, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default)
      {
        await send_SetVariableAsync(@token, @name, @value, cancellationToken);
        return await recv_SetVariableAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_SetVariableAsync(long @token, string @name, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SetVariable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp128 = new InternalStructs.SetVariable_args() {
          Token = @token,
          Name = @name,
          Value = @value,
        };
        
        await tmp128.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> recv_SetVariableAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp129 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp129.Type == TMessageType.Exception)
        {
          var tmp130 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp130;
        }

        var tmp131 = new InternalStructs.SetVariable_result();
        await tmp131.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp131.__isset.success)
        {
          return tmp131.Success!;
        }
        if (tmp131.__isset.@e)
        {
          throw tmp131.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetVariableAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.ScopeVariable>> GetVariablesAsync(long @token, int scope_id, CancellationToken cancellationToken = default)
      {
        await send_GetVariablesAsync(@token, scope_id, cancellationToken);
        return await recv_GetVariablesAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetVariablesAsync(long @token, int scope_id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetVariables", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp132 = new InternalStructs.GetVariables_args() {
          Token = @token,
          ScopeId = scope_id,
        };
        
        await tmp132.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.ScopeVariable>> recv_GetVariablesAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp133 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp133.Type == TMessageType.Exception)
        {
          var tmp134 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp134;
        }

        var tmp135 = new InternalStructs.GetVariables_result();
        await tmp135.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp135.__isset.success)
        {
          return tmp135.Success!;
        }
        if (tmp135.__isset.@e)
        {
          throw tmp135.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetVariablesAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ExecutionScope> PushScopeAsync(long @token, CancellationToken cancellationToken = default)
      {
        await send_PushScopeAsync(@token, cancellationToken);
        return await recv_PushScopeAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_PushScopeAsync(long @token, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PushScope", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp136 = new InternalStructs.PushScope_args() {
          Token = @token,
        };
        
        await tmp136.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ExecutionScope> recv_PushScopeAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp137 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp137.Type == TMessageType.Exception)
        {
          var tmp138 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp138;
        }

        var tmp139 = new InternalStructs.PushScope_result();
        await tmp139.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp139.__isset.success)
        {
          return tmp139.Success!;
        }
        if (tmp139.__isset.@e)
        {
          throw tmp139.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushScopeAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ExecutionScope> PopScopeAsync(long @token, CancellationToken cancellationToken = default)
      {
        await send_PopScopeAsync(@token, cancellationToken);
        return await recv_PopScopeAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_PopScopeAsync(long @token, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PopScope", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp140 = new InternalStructs.PopScope_args() {
          Token = @token,
        };
        
        await tmp140.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ExecutionScope> recv_PopScopeAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp141 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp141.Type == TMessageType.Exception)
        {
          var tmp142 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp142;
        }

        var tmp143 = new InternalStructs.PopScope_result();
        await tmp143.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp143.__isset.success)
        {
          return tmp143.Success!;
        }
        if (tmp143.__isset.@e)
        {
          throw tmp143.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PopScopeAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ExecutionScope> PeekTopScopeAsync(long @token, CancellationToken cancellationToken = default)
      {
        await send_PeekTopScopeAsync(@token, cancellationToken);
        return await recv_PeekTopScopeAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_PeekTopScopeAsync(long @token, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PeekTopScope", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp144 = new InternalStructs.PeekTopScope_args() {
          Token = @token,
        };
        
        await tmp144.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ExecutionScope> recv_PeekTopScopeAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp145 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp145.Type == TMessageType.Exception)
        {
          var tmp146 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp146;
        }

        var tmp147 = new InternalStructs.PeekTopScope_result();
        await tmp147.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp147.__isset.success)
        {
          return tmp147.Success!;
        }
        if (tmp147.__isset.@e)
        {
          throw tmp147.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PeekTopScopeAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.CompletionResult>> GetCompletionsAsync(long @token, string @text, int @position, CancellationToken cancellationToken = default)
      {
        await send_GetCompletionsAsync(@token, @text, @position, cancellationToken);
        return await recv_GetCompletionsAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetCompletionsAsync(long @token, string @text, int @position, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetCompletions", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp148 = new InternalStructs.GetCompletions_args() {
          Token = @token,
          Text = @text,
          Position = @position,
        };
        
        await tmp148.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.CompletionResult>> recv_GetCompletionsAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp149 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp149.Type == TMessageType.Exception)
        {
          var tmp150 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp150;
        }

        var tmp151 = new InternalStructs.GetCompletions_result();
        await tmp151.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp151.__isset.success)
        {
          return tmp151.Success!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetCompletionsAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<byte[]> Blob_ReadAsync(long @token, int object_blob_handle, int @offset, int @count, CancellationToken cancellationToken = default)
      {
        await send_Blob_ReadAsync(@token, object_blob_handle, @offset, @count, cancellationToken);
        return await recv_Blob_ReadAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Blob_ReadAsync(long @token, int object_blob_handle, int @offset, int @count, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Blob_Read", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp152 = new InternalStructs.Blob_Read_args() {
          Token = @token,
          ObjectBlobHandle = object_blob_handle,
          Offset = @offset,
          Count = @count,
        };
        
        await tmp152.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<byte[]> recv_Blob_ReadAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp153 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp153.Type == TMessageType.Exception)
        {
          var tmp154 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp154;
        }

        var tmp155 = new InternalStructs.Blob_Read_result();
        await tmp155.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp155.__isset.success)
        {
          return tmp155.Success!;
        }
        if (tmp155.__isset.@e)
        {
          throw tmp155.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Blob_ReadAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<long> Blob_WriteAsync(long @token, int object_blob_handle, byte[] @bytes, CancellationToken cancellationToken = default)
      {
        await send_Blob_WriteAsync(@token, object_blob_handle, @bytes, cancellationToken);
        return await recv_Blob_WriteAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Blob_WriteAsync(long @token, int object_blob_handle, byte[] @bytes, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Blob_Write", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp156 = new InternalStructs.Blob_Write_args() {
          Token = @token,
          ObjectBlobHandle = object_blob_handle,
          Bytes = @bytes,
        };
        
        await tmp156.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<long> recv_Blob_WriteAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp157 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp157.Type == TMessageType.Exception)
        {
          var tmp158 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp158;
        }

        var tmp159 = new InternalStructs.Blob_Write_result();
        await tmp159.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp159.__isset.success)
        {
          return tmp159.Success;
        }
        if (tmp159.__isset.@e)
        {
          throw tmp159.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Blob_WriteAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<long> Blob_GetLengthAsync(long @token, int object_blob_handle, CancellationToken cancellationToken = default)
      {
        await send_Blob_GetLengthAsync(@token, object_blob_handle, cancellationToken);
        return await recv_Blob_GetLengthAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Blob_GetLengthAsync(long @token, int object_blob_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Blob_GetLength", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp160 = new InternalStructs.Blob_GetLength_args() {
          Token = @token,
          ObjectBlobHandle = object_blob_handle,
        };
        
        await tmp160.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<long> recv_Blob_GetLengthAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp161 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp161.Type == TMessageType.Exception)
        {
          var tmp162 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp162;
        }

        var tmp163 = new InternalStructs.Blob_GetLength_result();
        await tmp163.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp163.__isset.success)
        {
          return tmp163.Success;
        }
        if (tmp163.__isset.@e)
        {
          throw tmp163.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Blob_GetLengthAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<string> Blob_GetContentTypeAsync(long @token, int object_blob_handle, CancellationToken cancellationToken = default)
      {
        await send_Blob_GetContentTypeAsync(@token, object_blob_handle, cancellationToken);
        return await recv_Blob_GetContentTypeAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_Blob_GetContentTypeAsync(long @token, int object_blob_handle, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Blob_GetContentType", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp164 = new InternalStructs.Blob_GetContentType_args() {
          Token = @token,
          ObjectBlobHandle = object_blob_handle,
        };
        
        await tmp164.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<string> recv_Blob_GetContentTypeAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp165 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp165.Type == TMessageType.Exception)
        {
          var tmp166 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp166;
        }

        var tmp167 = new InternalStructs.Blob_GetContentType_result();
        await tmp167.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp167.__isset.success)
        {
          return tmp167.Success!;
        }
        if (tmp167.__isset.@e)
        {
          throw tmp167.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Blob_GetContentTypeAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task LogAsync(long @token, global::QueryCat.Plugins.Sdk.LogLevel @level, string @message, List<string>? @arguments, CancellationToken cancellationToken = default)
      {
        await send_LogAsync(@token, @level, @message, @arguments, cancellationToken);
        await recv_LogAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_LogAsync(long @token, global::QueryCat.Plugins.Sdk.LogLevel @level, string @message, List<string>? @arguments, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Log", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp168 = new InternalStructs.Log_args() {
          Token = @token,
          Level = @level,
          Message = @message,
          Arguments = @arguments,
        };
        
        await tmp168.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_LogAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp169 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp169.Type == TMessageType.Exception)
        {
          var tmp170 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp170;
        }

        var tmp171 = new InternalStructs.Log_result();
        await tmp171.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp171.__isset.@e)
        {
          throw tmp171.E!;
        }
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.Statistic> GetStatisticAsync(long @token, CancellationToken cancellationToken = default)
      {
        await send_GetStatisticAsync(@token, cancellationToken);
        return await recv_GetStatisticAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetStatisticAsync(long @token, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetStatistic", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp172 = new InternalStructs.GetStatistic_args() {
          Token = @token,
        };
        
        await tmp172.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.Statistic> recv_GetStatisticAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp173 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp173.Type == TMessageType.Exception)
        {
          var tmp174 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp174;
        }

        var tmp175 = new InternalStructs.GetStatistic_result();
        await tmp175.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp175.__isset.success)
        {
          return tmp175.Success!;
        }
        if (tmp175.__isset.@e)
        {
          throw tmp175.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetStatisticAsync failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor>? _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor>? logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["RegisterPlugin"] = RegisterPlugin_ProcessAsync;
        processMap_["CallFunction"] = CallFunction_ProcessAsync;
        processMap_["RunQuery"] = RunQuery_ProcessAsync;
        processMap_["SetConfigValue"] = SetConfigValue_ProcessAsync;
        processMap_["GetConfigValue"] = GetConfigValue_ProcessAsync;
        processMap_["GetVariable"] = GetVariable_ProcessAsync;
        processMap_["SetVariable"] = SetVariable_ProcessAsync;
        processMap_["GetVariables"] = GetVariables_ProcessAsync;
        processMap_["PushScope"] = PushScope_ProcessAsync;
        processMap_["PopScope"] = PopScope_ProcessAsync;
        processMap_["PeekTopScope"] = PeekTopScope_ProcessAsync;
        processMap_["GetCompletions"] = GetCompletions_ProcessAsync;
        processMap_["Blob_Read"] = Blob_Read_ProcessAsync;
        processMap_["Blob_Write"] = Blob_Write_ProcessAsync;
        processMap_["Blob_GetLength"] = Blob_GetLength_ProcessAsync;
        processMap_["Blob_GetContentType"] = Blob_GetContentType_ProcessAsync;
        processMap_["Log"] = Log_ProcessAsync;
        processMap_["GetStatistic"] = GetStatistic_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = [];

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task RegisterPlugin_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp176 = new InternalStructs.RegisterPlugin_args();
        await tmp176.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp177 = new InternalStructs.RegisterPlugin_result();
        try
        {
          try
          {
            tmp177.Success = await _iAsync.RegisterPluginAsync(tmp176.RegistrationToken, tmp176.CallbackUri, tmp176.PluginData, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp178)
          {
            tmp177.E = tmp178;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RegisterPlugin", TMessageType.Reply, seqid), cancellationToken); 
          await tmp177.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp179)
        {
          var tmp180 = $"Error occurred in {GetType().FullName}: {tmp179.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp179, tmp180);
          else
            Console.Error.WriteLine(tmp180);
          var tmp181 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RegisterPlugin", TMessageType.Exception, seqid), cancellationToken);
          await tmp181.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task CallFunction_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp182 = new InternalStructs.CallFunction_args();
        await tmp182.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp183 = new InternalStructs.CallFunction_result();
        try
        {
          try
          {
            tmp183.Success = await _iAsync.CallFunctionAsync(tmp182.Token, tmp182.FunctionName, tmp182.Args, tmp182.ObjectHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp184)
          {
            tmp183.E = tmp184;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("CallFunction", TMessageType.Reply, seqid), cancellationToken); 
          await tmp183.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp185)
        {
          var tmp186 = $"Error occurred in {GetType().FullName}: {tmp185.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp185, tmp186);
          else
            Console.Error.WriteLine(tmp186);
          var tmp187 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("CallFunction", TMessageType.Exception, seqid), cancellationToken);
          await tmp187.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RunQuery_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp188 = new InternalStructs.RunQuery_args();
        await tmp188.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp189 = new InternalStructs.RunQuery_result();
        try
        {
          try
          {
            tmp189.Success = await _iAsync.RunQueryAsync(tmp188.Token, tmp188.Query, tmp188.Parameters, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp190)
          {
            tmp189.E = tmp190;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RunQuery", TMessageType.Reply, seqid), cancellationToken); 
          await tmp189.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp191)
        {
          var tmp192 = $"Error occurred in {GetType().FullName}: {tmp191.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp191, tmp192);
          else
            Console.Error.WriteLine(tmp192);
          var tmp193 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RunQuery", TMessageType.Exception, seqid), cancellationToken);
          await tmp193.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SetConfigValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp194 = new InternalStructs.SetConfigValue_args();
        await tmp194.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp195 = new InternalStructs.SetConfigValue_result();
        try
        {
          try
          {
            await _iAsync.SetConfigValueAsync(tmp194.Token, tmp194.Key, tmp194.Value, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp196)
          {
            tmp195.E = tmp196;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("SetConfigValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp195.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp197)
        {
          var tmp198 = $"Error occurred in {GetType().FullName}: {tmp197.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp197, tmp198);
          else
            Console.Error.WriteLine(tmp198);
          var tmp199 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SetConfigValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp199.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetConfigValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp200 = new InternalStructs.GetConfigValue_args();
        await tmp200.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp201 = new InternalStructs.GetConfigValue_result();
        try
        {
          try
          {
            tmp201.Success = await _iAsync.GetConfigValueAsync(tmp200.Token, tmp200.Key, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp202)
          {
            tmp201.E = tmp202;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("GetConfigValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp201.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp203)
        {
          var tmp204 = $"Error occurred in {GetType().FullName}: {tmp203.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp203, tmp204);
          else
            Console.Error.WriteLine(tmp204);
          var tmp205 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetConfigValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp205.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetVariable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp206 = new InternalStructs.GetVariable_args();
        await tmp206.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp207 = new InternalStructs.GetVariable_result();
        try
        {
          try
          {
            tmp207.Success = await _iAsync.GetVariableAsync(tmp206.Token, tmp206.Name, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp208)
          {
            tmp207.E = tmp208;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("GetVariable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp207.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp209)
        {
          var tmp210 = $"Error occurred in {GetType().FullName}: {tmp209.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp209, tmp210);
          else
            Console.Error.WriteLine(tmp210);
          var tmp211 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetVariable", TMessageType.Exception, seqid), cancellationToken);
          await tmp211.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SetVariable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp212 = new InternalStructs.SetVariable_args();
        await tmp212.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp213 = new InternalStructs.SetVariable_result();
        try
        {
          try
          {
            tmp213.Success = await _iAsync.SetVariableAsync(tmp212.Token, tmp212.Name, tmp212.Value, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp214)
          {
            tmp213.E = tmp214;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("SetVariable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp213.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp215)
        {
          var tmp216 = $"Error occurred in {GetType().FullName}: {tmp215.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp215, tmp216);
          else
            Console.Error.WriteLine(tmp216);
          var tmp217 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SetVariable", TMessageType.Exception, seqid), cancellationToken);
          await tmp217.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetVariables_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp218 = new InternalStructs.GetVariables_args();
        await tmp218.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp219 = new InternalStructs.GetVariables_result();
        try
        {
          try
          {
            tmp219.Success = await _iAsync.GetVariablesAsync(tmp218.Token, tmp218.ScopeId, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp220)
          {
            tmp219.E = tmp220;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("GetVariables", TMessageType.Reply, seqid), cancellationToken); 
          await tmp219.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp221)
        {
          var tmp222 = $"Error occurred in {GetType().FullName}: {tmp221.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp221, tmp222);
          else
            Console.Error.WriteLine(tmp222);
          var tmp223 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetVariables", TMessageType.Exception, seqid), cancellationToken);
          await tmp223.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task PushScope_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp224 = new InternalStructs.PushScope_args();
        await tmp224.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp225 = new InternalStructs.PushScope_result();
        try
        {
          try
          {
            tmp225.Success = await _iAsync.PushScopeAsync(tmp224.Token, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp226)
          {
            tmp225.E = tmp226;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("PushScope", TMessageType.Reply, seqid), cancellationToken); 
          await tmp225.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp227)
        {
          var tmp228 = $"Error occurred in {GetType().FullName}: {tmp227.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp227, tmp228);
          else
            Console.Error.WriteLine(tmp228);
          var tmp229 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PushScope", TMessageType.Exception, seqid), cancellationToken);
          await tmp229.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task PopScope_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp230 = new InternalStructs.PopScope_args();
        await tmp230.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp231 = new InternalStructs.PopScope_result();
        try
        {
          try
          {
            tmp231.Success = await _iAsync.PopScopeAsync(tmp230.Token, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp232)
          {
            tmp231.E = tmp232;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("PopScope", TMessageType.Reply, seqid), cancellationToken); 
          await tmp231.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp233)
        {
          var tmp234 = $"Error occurred in {GetType().FullName}: {tmp233.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp233, tmp234);
          else
            Console.Error.WriteLine(tmp234);
          var tmp235 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PopScope", TMessageType.Exception, seqid), cancellationToken);
          await tmp235.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task PeekTopScope_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp236 = new InternalStructs.PeekTopScope_args();
        await tmp236.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp237 = new InternalStructs.PeekTopScope_result();
        try
        {
          try
          {
            tmp237.Success = await _iAsync.PeekTopScopeAsync(tmp236.Token, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp238)
          {
            tmp237.E = tmp238;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("PeekTopScope", TMessageType.Reply, seqid), cancellationToken); 
          await tmp237.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp239)
        {
          var tmp240 = $"Error occurred in {GetType().FullName}: {tmp239.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp239, tmp240);
          else
            Console.Error.WriteLine(tmp240);
          var tmp241 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PeekTopScope", TMessageType.Exception, seqid), cancellationToken);
          await tmp241.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetCompletions_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp242 = new InternalStructs.GetCompletions_args();
        await tmp242.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp243 = new InternalStructs.GetCompletions_result();
        try
        {
          tmp243.Success = await _iAsync.GetCompletionsAsync(tmp242.Token, tmp242.Text, tmp242.Position, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetCompletions", TMessageType.Reply, seqid), cancellationToken); 
          await tmp243.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp244)
        {
          var tmp245 = $"Error occurred in {GetType().FullName}: {tmp244.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp244, tmp245);
          else
            Console.Error.WriteLine(tmp245);
          var tmp246 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetCompletions", TMessageType.Exception, seqid), cancellationToken);
          await tmp246.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Blob_Read_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp247 = new InternalStructs.Blob_Read_args();
        await tmp247.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp248 = new InternalStructs.Blob_Read_result();
        try
        {
          try
          {
            tmp248.Success = await _iAsync.Blob_ReadAsync(tmp247.Token, tmp247.ObjectBlobHandle, tmp247.Offset, tmp247.Count, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp249)
          {
            tmp248.E = tmp249;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_Read", TMessageType.Reply, seqid), cancellationToken); 
          await tmp248.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp250)
        {
          var tmp251 = $"Error occurred in {GetType().FullName}: {tmp250.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp250, tmp251);
          else
            Console.Error.WriteLine(tmp251);
          var tmp252 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_Read", TMessageType.Exception, seqid), cancellationToken);
          await tmp252.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Blob_Write_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp253 = new InternalStructs.Blob_Write_args();
        await tmp253.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp254 = new InternalStructs.Blob_Write_result();
        try
        {
          try
          {
            tmp254.Success = await _iAsync.Blob_WriteAsync(tmp253.Token, tmp253.ObjectBlobHandle, tmp253.Bytes, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp255)
          {
            tmp254.E = tmp255;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_Write", TMessageType.Reply, seqid), cancellationToken); 
          await tmp254.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp256)
        {
          var tmp257 = $"Error occurred in {GetType().FullName}: {tmp256.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp256, tmp257);
          else
            Console.Error.WriteLine(tmp257);
          var tmp258 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_Write", TMessageType.Exception, seqid), cancellationToken);
          await tmp258.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Blob_GetLength_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp259 = new InternalStructs.Blob_GetLength_args();
        await tmp259.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp260 = new InternalStructs.Blob_GetLength_result();
        try
        {
          try
          {
            tmp260.Success = await _iAsync.Blob_GetLengthAsync(tmp259.Token, tmp259.ObjectBlobHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp261)
          {
            tmp260.E = tmp261;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_GetLength", TMessageType.Reply, seqid), cancellationToken); 
          await tmp260.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp262)
        {
          var tmp263 = $"Error occurred in {GetType().FullName}: {tmp262.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp262, tmp263);
          else
            Console.Error.WriteLine(tmp263);
          var tmp264 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_GetLength", TMessageType.Exception, seqid), cancellationToken);
          await tmp264.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Blob_GetContentType_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp265 = new InternalStructs.Blob_GetContentType_args();
        await tmp265.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp266 = new InternalStructs.Blob_GetContentType_result();
        try
        {
          try
          {
            tmp266.Success = await _iAsync.Blob_GetContentTypeAsync(tmp265.Token, tmp265.ObjectBlobHandle, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp267)
          {
            tmp266.E = tmp267;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_GetContentType", TMessageType.Reply, seqid), cancellationToken); 
          await tmp266.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp268)
        {
          var tmp269 = $"Error occurred in {GetType().FullName}: {tmp268.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp268, tmp269);
          else
            Console.Error.WriteLine(tmp269);
          var tmp270 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Blob_GetContentType", TMessageType.Exception, seqid), cancellationToken);
          await tmp270.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Log_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp271 = new InternalStructs.Log_args();
        await tmp271.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp272 = new InternalStructs.Log_result();
        try
        {
          try
          {
            await _iAsync.LogAsync(tmp271.Token, tmp271.Level, tmp271.Message, tmp271.Arguments, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp273)
          {
            tmp272.E = tmp273;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Log", TMessageType.Reply, seqid), cancellationToken); 
          await tmp272.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp274)
        {
          var tmp275 = $"Error occurred in {GetType().FullName}: {tmp274.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp274, tmp275);
          else
            Console.Error.WriteLine(tmp275);
          var tmp276 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Log", TMessageType.Exception, seqid), cancellationToken);
          await tmp276.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetStatistic_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp277 = new InternalStructs.GetStatistic_args();
        await tmp277.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp278 = new InternalStructs.GetStatistic_result();
        try
        {
          try
          {
            tmp278.Success = await _iAsync.GetStatisticAsync(tmp277.Token, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp279)
          {
            tmp278.E = tmp279;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("GetStatistic", TMessageType.Reply, seqid), cancellationToken); 
          await tmp278.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp280)
        {
          var tmp281 = $"Error occurred in {GetType().FullName}: {tmp280.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp280, tmp281);
          else
            Console.Error.WriteLine(tmp281);
          var tmp282 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetStatistic", TMessageType.Exception, seqid), cancellationToken);
          await tmp282.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class RegisterPlugin_args : TBase
      {

        public string RegistrationToken { get; set; } = string.Empty;

        public string CallbackUri { get; set; } = string.Empty;

        public global::QueryCat.Plugins.Sdk.PluginData? PluginData { get; set; }

        public RegisterPlugin_args()
        {
        }

        public RegisterPlugin_args(string registration_token, string callback_uri, global::QueryCat.Plugins.Sdk.PluginData? plugin_data) : this()
        {
          this.RegistrationToken = registration_token;
          this.CallbackUri = callback_uri;
          this.PluginData = plugin_data;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_registration_token = false;
            bool isset_callback_uri = false;
            bool isset_plugin_data = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    RegistrationToken = await iprot.ReadStringAsync(cancellationToken);
                    isset_registration_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    CallbackUri = await iprot.ReadStringAsync(cancellationToken);
                    isset_callback_uri = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    PluginData = new global::QueryCat.Plugins.Sdk.PluginData();
                    await PluginData.ReadAsync(iprot, cancellationToken);
                    isset_plugin_data = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_registration_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_callback_uri)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_plugin_data)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp283 = new TStruct("RegisterPlugin_args");
            await oprot.WriteStructBeginAsync(tmp283, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp284 = new TField();
            if((RegistrationToken != null))
            {
              tmp284.Name = "registration_token";
              tmp284.Type = TType.String;
              tmp284.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp284, cancellationToken);
              await oprot.WriteStringAsync(RegistrationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((CallbackUri != null))
            {
              tmp284.Name = "callback_uri";
              tmp284.Type = TType.String;
              tmp284.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp284, cancellationToken);
              await oprot.WriteStringAsync(CallbackUri, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((PluginData != null))
            {
              tmp284.Name = "plugin_data";
              tmp284.Type = TType.Struct;
              tmp284.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp284, cancellationToken);
              await PluginData.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RegisterPlugin_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(RegistrationToken, other.RegistrationToken)
            && global::System.Object.Equals(CallbackUri, other.CallbackUri)
            && global::System.Object.Equals(PluginData, other.PluginData);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((RegistrationToken != null))
            {
              hashcode = (hashcode * 397) + RegistrationToken.GetHashCode();
            }
            if((CallbackUri != null))
            {
              hashcode = (hashcode * 397) + CallbackUri.GetHashCode();
            }
            if((PluginData != null))
            {
              hashcode = (hashcode * 397) + PluginData.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp285 = new StringBuilder("RegisterPlugin_args(");
          if((RegistrationToken != null))
          {
            tmp285.Append(", RegistrationToken: ");
            RegistrationToken.ToString(tmp285);
          }
          if((CallbackUri != null))
          {
            tmp285.Append(", CallbackUri: ");
            CallbackUri.ToString(tmp285);
          }
          if((PluginData != null))
          {
            tmp285.Append(", PluginData: ");
            PluginData.ToString(tmp285);
          }
          tmp285.Append(')');
          return tmp285.ToString();
        }
      }


      public partial class RegisterPlugin_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.RegistrationResult? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.RegistrationResult? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RegisterPlugin_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.RegistrationResult();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp287 = new TStruct("RegisterPlugin_result");
            await oprot.WriteStructBeginAsync(tmp287, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp288 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp288.Name = "Success";
                tmp288.Type = TType.Struct;
                tmp288.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp288, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp288.Name = "E";
                tmp288.Type = TType.Struct;
                tmp288.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp288, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RegisterPlugin_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp289 = new StringBuilder("RegisterPlugin_result(");
          int tmp290 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp290++) { tmp289.Append(", "); }
            tmp289.Append("Success: ");
            Success.ToString(tmp289);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp290++) { tmp289.Append(", "); }
            tmp289.Append("E: ");
            E.ToString(tmp289);
          }
          tmp289.Append(')');
          return tmp289.ToString();
        }
      }


      public partial class CallFunction_args : TBase
      {
        private int _object_handle;

        public long Token { get; set; } = 0;

        public string FunctionName { get; set; } = string.Empty;

        public List<global::QueryCat.Plugins.Sdk.VariantValue>? Args { get; set; }

        public int ObjectHandle
        {
          get
          {
            return _object_handle;
          }
          set
          {
            __isset.object_handle = true;
            this._object_handle = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool object_handle;
        }

        public CallFunction_args()
        {
        }

        public CallFunction_args(long @token, string function_name, List<global::QueryCat.Plugins.Sdk.VariantValue>? @args) : this()
        {
          this.Token = @token;
          this.FunctionName = function_name;
          this.Args = @args;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_function_name = false;
            bool isset_args = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    FunctionName = await iprot.ReadStringAsync(cancellationToken);
                    isset_function_name = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list291 = await iprot.ReadListBeginAsync(cancellationToken);
                      Args = new List<global::QueryCat.Plugins.Sdk.VariantValue>(_list291.Count);
                      for(int _i292 = 0; _i292 < _list291.Count; ++_i292)
                      {
                        global::QueryCat.Plugins.Sdk.VariantValue _elem293;
                        _elem293 = new global::QueryCat.Plugins.Sdk.VariantValue();
                        await _elem293.ReadAsync(iprot, cancellationToken);
                        Args.Add(_elem293);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                    isset_args = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.I32)
                  {
                    ObjectHandle = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_function_name)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_args)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp294 = new TStruct("CallFunction_args");
            await oprot.WriteStructBeginAsync(tmp294, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp295 = new TField();
            tmp295.Name = "token";
            tmp295.Type = TType.I64;
            tmp295.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp295, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((FunctionName != null))
            {
              tmp295.Name = "function_name";
              tmp295.Type = TType.String;
              tmp295.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp295, cancellationToken);
              await oprot.WriteStringAsync(FunctionName, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Args != null))
            {
              tmp295.Name = "args";
              tmp295.Type = TType.List;
              tmp295.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp295, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Args.Count), cancellationToken);
              foreach (global::QueryCat.Plugins.Sdk.VariantValue _iter296 in Args)
              {
                await _iter296.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.object_handle)
            {
              tmp295.Name = "object_handle";
              tmp295.Type = TType.I32;
              tmp295.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp295, cancellationToken);
              await oprot.WriteI32Async(ObjectHandle, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not CallFunction_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(FunctionName, other.FunctionName)
            && TCollections.Equals(Args, other.Args)
            && ((__isset.object_handle == other.__isset.object_handle) && ((!__isset.object_handle) || (global::System.Object.Equals(ObjectHandle, other.ObjectHandle))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            if((FunctionName != null))
            {
              hashcode = (hashcode * 397) + FunctionName.GetHashCode();
            }
            if((Args != null))
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Args);
            }
            if(__isset.object_handle)
            {
              hashcode = (hashcode * 397) + ObjectHandle.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp297 = new StringBuilder("CallFunction_args(");
          tmp297.Append(", Token: ");
          Token.ToString(tmp297);
          if((FunctionName != null))
          {
            tmp297.Append(", FunctionName: ");
            FunctionName.ToString(tmp297);
          }
          if((Args != null))
          {
            tmp297.Append(", Args: ");
            Args.ToString(tmp297);
          }
          if(__isset.object_handle)
          {
            tmp297.Append(", ObjectHandle: ");
            ObjectHandle.ToString(tmp297);
          }
          tmp297.Append(')');
          return tmp297.ToString();
        }
      }


      public partial class CallFunction_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.VariantValue? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.VariantValue? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public CallFunction_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp299 = new TStruct("CallFunction_result");
            await oprot.WriteStructBeginAsync(tmp299, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp300 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp300.Name = "Success";
                tmp300.Type = TType.Struct;
                tmp300.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp300, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp300.Name = "E";
                tmp300.Type = TType.Struct;
                tmp300.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp300, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not CallFunction_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp301 = new StringBuilder("CallFunction_result(");
          int tmp302 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp302++) { tmp301.Append(", "); }
            tmp301.Append("Success: ");
            Success.ToString(tmp301);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp302++) { tmp301.Append(", "); }
            tmp301.Append("E: ");
            E.ToString(tmp301);
          }
          tmp301.Append(')');
          return tmp301.ToString();
        }
      }


      public partial class RunQuery_args : TBase
      {
        private Dictionary<string, global::QueryCat.Plugins.Sdk.VariantValue>? _parameters;

        public long Token { get; set; } = 0;

        public string Query { get; set; } = string.Empty;

        public Dictionary<string, global::QueryCat.Plugins.Sdk.VariantValue>? Parameters
        {
          get
          {
            return _parameters;
          }
          set
          {
            __isset.@parameters = true;
            this._parameters = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @parameters;
        }

        public RunQuery_args()
        {
        }

        public RunQuery_args(long @token, string @query) : this()
        {
          this.Token = @token;
          this.Query = @query;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_query = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Query = await iprot.ReadStringAsync(cancellationToken);
                    isset_query = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Map)
                  {
                    {
                      var _map303 = await iprot.ReadMapBeginAsync(cancellationToken);
                      Parameters = new Dictionary<string, global::QueryCat.Plugins.Sdk.VariantValue>(_map303.Count);
                      for(int _i304 = 0; _i304 < _map303.Count; ++_i304)
                      {
                        string _key305;
                        global::QueryCat.Plugins.Sdk.VariantValue _val306;
                        _key305 = await iprot.ReadStringAsync(cancellationToken);
                        _val306 = new global::QueryCat.Plugins.Sdk.VariantValue();
                        await _val306.ReadAsync(iprot, cancellationToken);
                        Parameters[_key305] = _val306;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_query)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp307 = new TStruct("RunQuery_args");
            await oprot.WriteStructBeginAsync(tmp307, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp308 = new TField();
            tmp308.Name = "token";
            tmp308.Type = TType.I64;
            tmp308.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp308, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Query != null))
            {
              tmp308.Name = "query";
              tmp308.Type = TType.String;
              tmp308.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp308, cancellationToken);
              await oprot.WriteStringAsync(Query, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Parameters != null) && __isset.@parameters)
            {
              tmp308.Name = "parameters";
              tmp308.Type = TType.Map;
              tmp308.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp308, cancellationToken);
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Parameters.Count), cancellationToken);
              foreach (string _iter309 in Parameters.Keys)
              {
                await oprot.WriteStringAsync(_iter309, cancellationToken);
                await Parameters[_iter309].WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RunQuery_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(Query, other.Query)
            && ((__isset.@parameters == other.__isset.@parameters) && ((!__isset.@parameters) || (TCollections.Equals(Parameters, other.Parameters))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            if((Query != null))
            {
              hashcode = (hashcode * 397) + Query.GetHashCode();
            }
            if((Parameters != null) && __isset.@parameters)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Parameters);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp310 = new StringBuilder("RunQuery_args(");
          tmp310.Append(", Token: ");
          Token.ToString(tmp310);
          if((Query != null))
          {
            tmp310.Append(", Query: ");
            Query.ToString(tmp310);
          }
          if((Parameters != null) && __isset.@parameters)
          {
            tmp310.Append(", Parameters: ");
            Parameters.ToString(tmp310);
          }
          tmp310.Append(')');
          return tmp310.ToString();
        }
      }


      public partial class RunQuery_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.VariantValue? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.VariantValue? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RunQuery_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp312 = new TStruct("RunQuery_result");
            await oprot.WriteStructBeginAsync(tmp312, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp313 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp313.Name = "Success";
                tmp313.Type = TType.Struct;
                tmp313.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp313, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp313.Name = "E";
                tmp313.Type = TType.Struct;
                tmp313.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp313, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RunQuery_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp314 = new StringBuilder("RunQuery_result(");
          int tmp315 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp315++) { tmp314.Append(", "); }
            tmp314.Append("Success: ");
            Success.ToString(tmp314);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp315++) { tmp314.Append(", "); }
            tmp314.Append("E: ");
            E.ToString(tmp314);
          }
          tmp314.Append(')');
          return tmp314.ToString();
        }
      }


      public partial class SetConfigValue_args : TBase
      {

        public long Token { get; set; } = 0;

        public string Key { get; set; } = string.Empty;

        public global::QueryCat.Plugins.Sdk.VariantValue? Value { get; set; }

        public SetConfigValue_args()
        {
        }

        public SetConfigValue_args(long @token, string @key, global::QueryCat.Plugins.Sdk.VariantValue? @value) : this()
        {
          this.Token = @token;
          this.Key = @key;
          this.Value = @value;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_key = false;
            bool isset_value = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                    isset_key = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Value = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Value.ReadAsync(iprot, cancellationToken);
                    isset_value = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_key)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_value)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp316 = new TStruct("SetConfigValue_args");
            await oprot.WriteStructBeginAsync(tmp316, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp317 = new TField();
            tmp317.Name = "token";
            tmp317.Type = TType.I64;
            tmp317.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp317, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Key != null))
            {
              tmp317.Name = "key";
              tmp317.Type = TType.String;
              tmp317.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp317, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Value != null))
            {
              tmp317.Name = "value";
              tmp317.Type = TType.Struct;
              tmp317.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp317, cancellationToken);
              await Value.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not SetConfigValue_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(Key, other.Key)
            && global::System.Object.Equals(Value, other.Value);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            if((Key != null))
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if((Value != null))
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp318 = new StringBuilder("SetConfigValue_args(");
          tmp318.Append(", Token: ");
          Token.ToString(tmp318);
          if((Key != null))
          {
            tmp318.Append(", Key: ");
            Key.ToString(tmp318);
          }
          if((Value != null))
          {
            tmp318.Append(", Value: ");
            Value.ToString(tmp318);
          }
          tmp318.Append(')');
          return tmp318.ToString();
        }
      }


      public partial class SetConfigValue_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @e;
        }

        public SetConfigValue_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp320 = new TStruct("SetConfigValue_result");
            await oprot.WriteStructBeginAsync(tmp320, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp321 = new TField();

            if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp321.Name = "E";
                tmp321.Type = TType.Struct;
                tmp321.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp321, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not SetConfigValue_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp322 = new StringBuilder("SetConfigValue_result(");
          int tmp323 = 0;
          if((E != null) && __isset.@e)
          {
            if(0 < tmp323++) { tmp322.Append(", "); }
            tmp322.Append("E: ");
            E.ToString(tmp322);
          }
          tmp322.Append(')');
          return tmp322.ToString();
        }
      }


      public partial class GetConfigValue_args : TBase
      {

        public long Token { get; set; } = 0;

        public string Key { get; set; } = string.Empty;

        public GetConfigValue_args()
        {
        }

        public GetConfigValue_args(long @token, string @key) : this()
        {
          this.Token = @token;
          this.Key = @key;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_key = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                    isset_key = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_key)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp324 = new TStruct("GetConfigValue_args");
            await oprot.WriteStructBeginAsync(tmp324, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp325 = new TField();
            tmp325.Name = "token";
            tmp325.Type = TType.I64;
            tmp325.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp325, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Key != null))
            {
              tmp325.Name = "key";
              tmp325.Type = TType.String;
              tmp325.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp325, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetConfigValue_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(Key, other.Key);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            if((Key != null))
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp326 = new StringBuilder("GetConfigValue_args(");
          tmp326.Append(", Token: ");
          Token.ToString(tmp326);
          if((Key != null))
          {
            tmp326.Append(", Key: ");
            Key.ToString(tmp326);
          }
          tmp326.Append(')');
          return tmp326.ToString();
        }
      }


      public partial class GetConfigValue_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.VariantValue? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.VariantValue? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public GetConfigValue_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp328 = new TStruct("GetConfigValue_result");
            await oprot.WriteStructBeginAsync(tmp328, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp329 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp329.Name = "Success";
                tmp329.Type = TType.Struct;
                tmp329.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp329, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp329.Name = "E";
                tmp329.Type = TType.Struct;
                tmp329.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp329, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetConfigValue_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp330 = new StringBuilder("GetConfigValue_result(");
          int tmp331 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp331++) { tmp330.Append(", "); }
            tmp330.Append("Success: ");
            Success.ToString(tmp330);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp331++) { tmp330.Append(", "); }
            tmp330.Append("E: ");
            E.ToString(tmp330);
          }
          tmp330.Append(')');
          return tmp330.ToString();
        }
      }


      public partial class GetVariable_args : TBase
      {

        public long Token { get; set; } = 0;

        public string Name { get; set; } = string.Empty;

        public GetVariable_args()
        {
        }

        public GetVariable_args(long @token, string @name) : this()
        {
          this.Token = @token;
          this.Name = @name;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_name = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                    isset_name = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_name)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp332 = new TStruct("GetVariable_args");
            await oprot.WriteStructBeginAsync(tmp332, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp333 = new TField();
            tmp333.Name = "token";
            tmp333.Type = TType.I64;
            tmp333.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp333, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Name != null))
            {
              tmp333.Name = "name";
              tmp333.Type = TType.String;
              tmp333.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp333, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetVariable_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(Name, other.Name);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            if((Name != null))
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp334 = new StringBuilder("GetVariable_args(");
          tmp334.Append(", Token: ");
          Token.ToString(tmp334);
          if((Name != null))
          {
            tmp334.Append(", Name: ");
            Name.ToString(tmp334);
          }
          tmp334.Append(')');
          return tmp334.ToString();
        }
      }


      public partial class GetVariable_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.VariantValue? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.VariantValue? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public GetVariable_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp336 = new TStruct("GetVariable_result");
            await oprot.WriteStructBeginAsync(tmp336, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp337 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp337.Name = "Success";
                tmp337.Type = TType.Struct;
                tmp337.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp337, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp337.Name = "E";
                tmp337.Type = TType.Struct;
                tmp337.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp337, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetVariable_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp338 = new StringBuilder("GetVariable_result(");
          int tmp339 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp339++) { tmp338.Append(", "); }
            tmp338.Append("Success: ");
            Success.ToString(tmp338);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp339++) { tmp338.Append(", "); }
            tmp338.Append("E: ");
            E.ToString(tmp338);
          }
          tmp338.Append(')');
          return tmp338.ToString();
        }
      }


      public partial class SetVariable_args : TBase
      {

        public long Token { get; set; } = 0;

        public string Name { get; set; } = string.Empty;

        public global::QueryCat.Plugins.Sdk.VariantValue? Value { get; set; }

        public SetVariable_args()
        {
        }

        public SetVariable_args(long @token, string @name, global::QueryCat.Plugins.Sdk.VariantValue? @value) : this()
        {
          this.Token = @token;
          this.Name = @name;
          this.Value = @value;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_name = false;
            bool isset_value = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                    isset_name = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Value = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Value.ReadAsync(iprot, cancellationToken);
                    isset_value = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_name)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_value)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp340 = new TStruct("SetVariable_args");
            await oprot.WriteStructBeginAsync(tmp340, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp341 = new TField();
            tmp341.Name = "token";
            tmp341.Type = TType.I64;
            tmp341.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp341, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Name != null))
            {
              tmp341.Name = "name";
              tmp341.Type = TType.String;
              tmp341.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp341, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Value != null))
            {
              tmp341.Name = "value";
              tmp341.Type = TType.Struct;
              tmp341.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp341, cancellationToken);
              await Value.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not SetVariable_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(Name, other.Name)
            && global::System.Object.Equals(Value, other.Value);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            if((Name != null))
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if((Value != null))
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp342 = new StringBuilder("SetVariable_args(");
          tmp342.Append(", Token: ");
          Token.ToString(tmp342);
          if((Name != null))
          {
            tmp342.Append(", Name: ");
            Name.ToString(tmp342);
          }
          if((Value != null))
          {
            tmp342.Append(", Value: ");
            Value.ToString(tmp342);
          }
          tmp342.Append(')');
          return tmp342.ToString();
        }
      }


      public partial class SetVariable_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.VariantValue? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.VariantValue? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public SetVariable_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp344 = new TStruct("SetVariable_result");
            await oprot.WriteStructBeginAsync(tmp344, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp345 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp345.Name = "Success";
                tmp345.Type = TType.Struct;
                tmp345.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp345, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp345.Name = "E";
                tmp345.Type = TType.Struct;
                tmp345.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp345, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not SetVariable_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp346 = new StringBuilder("SetVariable_result(");
          int tmp347 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp347++) { tmp346.Append(", "); }
            tmp346.Append("Success: ");
            Success.ToString(tmp346);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp347++) { tmp346.Append(", "); }
            tmp346.Append("E: ");
            E.ToString(tmp346);
          }
          tmp346.Append(')');
          return tmp346.ToString();
        }
      }


      public partial class GetVariables_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ScopeId { get; set; } = 0;

        public GetVariables_args()
        {
        }

        public GetVariables_args(long @token, int scope_id) : this()
        {
          this.Token = @token;
          this.ScopeId = scope_id;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_scope_id = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ScopeId = await iprot.ReadI32Async(cancellationToken);
                    isset_scope_id = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_scope_id)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp348 = new TStruct("GetVariables_args");
            await oprot.WriteStructBeginAsync(tmp348, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp349 = new TField();
            tmp349.Name = "token";
            tmp349.Type = TType.I64;
            tmp349.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp349, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp349.Name = "scope_id";
            tmp349.Type = TType.I32;
            tmp349.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp349, cancellationToken);
            await oprot.WriteI32Async(ScopeId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetVariables_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ScopeId, other.ScopeId);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ScopeId.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp350 = new StringBuilder("GetVariables_args(");
          tmp350.Append(", Token: ");
          Token.ToString(tmp350);
          tmp350.Append(", ScopeId: ");
          ScopeId.ToString(tmp350);
          tmp350.Append(')');
          return tmp350.ToString();
        }
      }


      public partial class GetVariables_result : TBase
      {
        private List<global::QueryCat.Plugins.Sdk.ScopeVariable>? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public List<global::QueryCat.Plugins.Sdk.ScopeVariable>? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public GetVariables_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list352 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::QueryCat.Plugins.Sdk.ScopeVariable>(_list352.Count);
                      for(int _i353 = 0; _i353 < _list352.Count; ++_i353)
                      {
                        global::QueryCat.Plugins.Sdk.ScopeVariable _elem354;
                        _elem354 = new global::QueryCat.Plugins.Sdk.ScopeVariable();
                        await _elem354.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem354);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp355 = new TStruct("GetVariables_result");
            await oprot.WriteStructBeginAsync(tmp355, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp356 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp356.Name = "Success";
                tmp356.Type = TType.List;
                tmp356.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp356, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::QueryCat.Plugins.Sdk.ScopeVariable _iter357 in Success)
                {
                  await _iter357.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp356.Name = "E";
                tmp356.Type = TType.Struct;
                tmp356.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp356, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetVariables_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp358 = new StringBuilder("GetVariables_result(");
          int tmp359 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp359++) { tmp358.Append(", "); }
            tmp358.Append("Success: ");
            Success.ToString(tmp358);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp359++) { tmp358.Append(", "); }
            tmp358.Append("E: ");
            E.ToString(tmp358);
          }
          tmp358.Append(')');
          return tmp358.ToString();
        }
      }


      public partial class PushScope_args : TBase
      {

        public long Token { get; set; } = 0;

        public PushScope_args()
        {
        }

        public PushScope_args(long @token) : this()
        {
          this.Token = @token;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp360 = new TStruct("PushScope_args");
            await oprot.WriteStructBeginAsync(tmp360, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp361 = new TField();
            tmp361.Name = "token";
            tmp361.Type = TType.I64;
            tmp361.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp361, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not PushScope_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp362 = new StringBuilder("PushScope_args(");
          tmp362.Append(", Token: ");
          Token.ToString(tmp362);
          tmp362.Append(')');
          return tmp362.ToString();
        }
      }


      public partial class PushScope_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.ExecutionScope? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.ExecutionScope? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public PushScope_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.ExecutionScope();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp364 = new TStruct("PushScope_result");
            await oprot.WriteStructBeginAsync(tmp364, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp365 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp365.Name = "Success";
                tmp365.Type = TType.Struct;
                tmp365.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp365, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp365.Name = "E";
                tmp365.Type = TType.Struct;
                tmp365.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp365, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not PushScope_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp366 = new StringBuilder("PushScope_result(");
          int tmp367 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp367++) { tmp366.Append(", "); }
            tmp366.Append("Success: ");
            Success.ToString(tmp366);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp367++) { tmp366.Append(", "); }
            tmp366.Append("E: ");
            E.ToString(tmp366);
          }
          tmp366.Append(')');
          return tmp366.ToString();
        }
      }


      public partial class PopScope_args : TBase
      {

        public long Token { get; set; } = 0;

        public PopScope_args()
        {
        }

        public PopScope_args(long @token) : this()
        {
          this.Token = @token;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp368 = new TStruct("PopScope_args");
            await oprot.WriteStructBeginAsync(tmp368, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp369 = new TField();
            tmp369.Name = "token";
            tmp369.Type = TType.I64;
            tmp369.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp369, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not PopScope_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp370 = new StringBuilder("PopScope_args(");
          tmp370.Append(", Token: ");
          Token.ToString(tmp370);
          tmp370.Append(')');
          return tmp370.ToString();
        }
      }


      public partial class PopScope_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.ExecutionScope? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.ExecutionScope? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public PopScope_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.ExecutionScope();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp372 = new TStruct("PopScope_result");
            await oprot.WriteStructBeginAsync(tmp372, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp373 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp373.Name = "Success";
                tmp373.Type = TType.Struct;
                tmp373.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp373, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp373.Name = "E";
                tmp373.Type = TType.Struct;
                tmp373.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp373, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not PopScope_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp374 = new StringBuilder("PopScope_result(");
          int tmp375 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp375++) { tmp374.Append(", "); }
            tmp374.Append("Success: ");
            Success.ToString(tmp374);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp375++) { tmp374.Append(", "); }
            tmp374.Append("E: ");
            E.ToString(tmp374);
          }
          tmp374.Append(')');
          return tmp374.ToString();
        }
      }


      public partial class PeekTopScope_args : TBase
      {

        public long Token { get; set; } = 0;

        public PeekTopScope_args()
        {
        }

        public PeekTopScope_args(long @token) : this()
        {
          this.Token = @token;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp376 = new TStruct("PeekTopScope_args");
            await oprot.WriteStructBeginAsync(tmp376, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp377 = new TField();
            tmp377.Name = "token";
            tmp377.Type = TType.I64;
            tmp377.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp377, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not PeekTopScope_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp378 = new StringBuilder("PeekTopScope_args(");
          tmp378.Append(", Token: ");
          Token.ToString(tmp378);
          tmp378.Append(')');
          return tmp378.ToString();
        }
      }


      public partial class PeekTopScope_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.ExecutionScope? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.ExecutionScope? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public PeekTopScope_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.ExecutionScope();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp380 = new TStruct("PeekTopScope_result");
            await oprot.WriteStructBeginAsync(tmp380, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp381 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp381.Name = "Success";
                tmp381.Type = TType.Struct;
                tmp381.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp381, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp381.Name = "E";
                tmp381.Type = TType.Struct;
                tmp381.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp381, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not PeekTopScope_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp382 = new StringBuilder("PeekTopScope_result(");
          int tmp383 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp383++) { tmp382.Append(", "); }
            tmp382.Append("Success: ");
            Success.ToString(tmp382);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp383++) { tmp382.Append(", "); }
            tmp382.Append("E: ");
            E.ToString(tmp382);
          }
          tmp382.Append(')');
          return tmp382.ToString();
        }
      }


      public partial class GetCompletions_args : TBase
      {

        public long Token { get; set; } = 0;

        public string Text { get; set; } = string.Empty;

        public int Position { get; set; } = 0;

        public GetCompletions_args()
        {
        }

        public GetCompletions_args(long @token, string @text, int @position) : this()
        {
          this.Token = @token;
          this.Text = @text;
          this.Position = @position;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_text = false;
            bool isset_position = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Text = await iprot.ReadStringAsync(cancellationToken);
                    isset_text = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Position = await iprot.ReadI32Async(cancellationToken);
                    isset_position = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_text)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_position)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp384 = new TStruct("GetCompletions_args");
            await oprot.WriteStructBeginAsync(tmp384, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp385 = new TField();
            tmp385.Name = "token";
            tmp385.Type = TType.I64;
            tmp385.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp385, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Text != null))
            {
              tmp385.Name = "text";
              tmp385.Type = TType.String;
              tmp385.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp385, cancellationToken);
              await oprot.WriteStringAsync(Text, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            tmp385.Name = "position";
            tmp385.Type = TType.I32;
            tmp385.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp385, cancellationToken);
            await oprot.WriteI32Async(Position, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetCompletions_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(Text, other.Text)
            && global::System.Object.Equals(Position, other.Position);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            if((Text != null))
            {
              hashcode = (hashcode * 397) + Text.GetHashCode();
            }
            hashcode = (hashcode * 397) + Position.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp386 = new StringBuilder("GetCompletions_args(");
          tmp386.Append(", Token: ");
          Token.ToString(tmp386);
          if((Text != null))
          {
            tmp386.Append(", Text: ");
            Text.ToString(tmp386);
          }
          tmp386.Append(", Position: ");
          Position.ToString(tmp386);
          tmp386.Append(')');
          return tmp386.ToString();
        }
      }


      public partial class GetCompletions_result : TBase
      {
        private List<global::QueryCat.Plugins.Sdk.CompletionResult>? _success;

        public List<global::QueryCat.Plugins.Sdk.CompletionResult>? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public GetCompletions_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list388 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::QueryCat.Plugins.Sdk.CompletionResult>(_list388.Count);
                      for(int _i389 = 0; _i389 < _list388.Count; ++_i389)
                      {
                        global::QueryCat.Plugins.Sdk.CompletionResult _elem390;
                        _elem390 = new global::QueryCat.Plugins.Sdk.CompletionResult();
                        await _elem390.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem390);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp391 = new TStruct("GetCompletions_result");
            await oprot.WriteStructBeginAsync(tmp391, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp392 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp392.Name = "Success";
                tmp392.Type = TType.List;
                tmp392.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp392, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::QueryCat.Plugins.Sdk.CompletionResult _iter393 in Success)
                {
                  await _iter393.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetCompletions_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp394 = new StringBuilder("GetCompletions_result(");
          int tmp395 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp395++) { tmp394.Append(", "); }
            tmp394.Append("Success: ");
            Success.ToString(tmp394);
          }
          tmp394.Append(')');
          return tmp394.ToString();
        }
      }


      public partial class Blob_Read_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ObjectBlobHandle { get; set; } = 0;

        public int Offset { get; set; } = 0;

        public int Count { get; set; } = 0;

        public Blob_Read_args()
        {
        }

        public Blob_Read_args(long @token, int object_blob_handle, int @offset, int @count) : this()
        {
          this.Token = @token;
          this.ObjectBlobHandle = object_blob_handle;
          this.Offset = @offset;
          this.Count = @count;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_blob_handle = false;
            bool isset_offset = false;
            bool isset_count = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectBlobHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_blob_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Offset = await iprot.ReadI32Async(cancellationToken);
                    isset_offset = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.I32)
                  {
                    Count = await iprot.ReadI32Async(cancellationToken);
                    isset_count = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_blob_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_offset)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_count)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp396 = new TStruct("Blob_Read_args");
            await oprot.WriteStructBeginAsync(tmp396, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp397 = new TField();
            tmp397.Name = "token";
            tmp397.Type = TType.I64;
            tmp397.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp397, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp397.Name = "object_blob_handle";
            tmp397.Type = TType.I32;
            tmp397.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp397, cancellationToken);
            await oprot.WriteI32Async(ObjectBlobHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp397.Name = "offset";
            tmp397.Type = TType.I32;
            tmp397.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp397, cancellationToken);
            await oprot.WriteI32Async(Offset, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp397.Name = "count";
            tmp397.Type = TType.I32;
            tmp397.ID = 4;
            await oprot.WriteFieldBeginAsync(tmp397, cancellationToken);
            await oprot.WriteI32Async(Count, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_Read_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectBlobHandle, other.ObjectBlobHandle)
            && global::System.Object.Equals(Offset, other.Offset)
            && global::System.Object.Equals(Count, other.Count);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectBlobHandle.GetHashCode();
            hashcode = (hashcode * 397) + Offset.GetHashCode();
            hashcode = (hashcode * 397) + Count.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp398 = new StringBuilder("Blob_Read_args(");
          tmp398.Append(", Token: ");
          Token.ToString(tmp398);
          tmp398.Append(", ObjectBlobHandle: ");
          ObjectBlobHandle.ToString(tmp398);
          tmp398.Append(", Offset: ");
          Offset.ToString(tmp398);
          tmp398.Append(", Count: ");
          Count.ToString(tmp398);
          tmp398.Append(')');
          return tmp398.ToString();
        }
      }


      public partial class Blob_Read_result : TBase
      {
        private byte[]? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public byte[]? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public Blob_Read_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadBinaryAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp400 = new TStruct("Blob_Read_result");
            await oprot.WriteStructBeginAsync(tmp400, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp401 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp401.Name = "Success";
                tmp401.Type = TType.String;
                tmp401.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp401, cancellationToken);
                await oprot.WriteBinaryAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp401.Name = "E";
                tmp401.Type = TType.Struct;
                tmp401.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp401, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_Read_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp402 = new StringBuilder("Blob_Read_result(");
          int tmp403 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp403++) { tmp402.Append(", "); }
            tmp402.Append("Success: ");
            Success.ToString(tmp402);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp403++) { tmp402.Append(", "); }
            tmp402.Append("E: ");
            E.ToString(tmp402);
          }
          tmp402.Append(')');
          return tmp402.ToString();
        }
      }


      public partial class Blob_Write_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ObjectBlobHandle { get; set; } = 0;

        public byte[] Bytes { get; set; }= [];

        public Blob_Write_args()
        {
        }

        public Blob_Write_args(long @token, int object_blob_handle, byte[] @bytes) : this()
        {
          this.Token = @token;
          this.ObjectBlobHandle = object_blob_handle;
          this.Bytes = @bytes;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_blob_handle = false;
            bool isset_bytes = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectBlobHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_blob_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Bytes = await iprot.ReadBinaryAsync(cancellationToken);
                    isset_bytes = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_blob_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_bytes)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp404 = new TStruct("Blob_Write_args");
            await oprot.WriteStructBeginAsync(tmp404, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp405 = new TField();
            tmp405.Name = "token";
            tmp405.Type = TType.I64;
            tmp405.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp405, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp405.Name = "object_blob_handle";
            tmp405.Type = TType.I32;
            tmp405.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp405, cancellationToken);
            await oprot.WriteI32Async(ObjectBlobHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Bytes != null))
            {
              tmp405.Name = "bytes";
              tmp405.Type = TType.String;
              tmp405.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp405, cancellationToken);
              await oprot.WriteBinaryAsync(Bytes, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_Write_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectBlobHandle, other.ObjectBlobHandle)
            && TCollections.Equals(Bytes, other.Bytes);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectBlobHandle.GetHashCode();
            if((Bytes != null))
            {
              hashcode = (hashcode * 397) + Bytes.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp406 = new StringBuilder("Blob_Write_args(");
          tmp406.Append(", Token: ");
          Token.ToString(tmp406);
          tmp406.Append(", ObjectBlobHandle: ");
          ObjectBlobHandle.ToString(tmp406);
          if((Bytes != null))
          {
            tmp406.Append(", Bytes: ");
            Bytes.ToString(tmp406);
          }
          tmp406.Append(')');
          return tmp406.ToString();
        }
      }


      public partial class Blob_Write_result : TBase
      {
        private long _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public long Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public Blob_Write_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I64)
                  {
                    Success = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp408 = new TStruct("Blob_Write_result");
            await oprot.WriteStructBeginAsync(tmp408, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp409 = new TField();

            if(this.__isset.@success)
            {
              tmp409.Name = "Success";
              tmp409.Type = TType.I64;
              tmp409.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp409, cancellationToken);
              await oprot.WriteI64Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp409.Name = "E";
                tmp409.Type = TType.Struct;
                tmp409.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp409, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_Write_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp410 = new StringBuilder("Blob_Write_result(");
          int tmp411 = 0;
          if(__isset.@success)
          {
            if(0 < tmp411++) { tmp410.Append(", "); }
            tmp410.Append("Success: ");
            Success.ToString(tmp410);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp411++) { tmp410.Append(", "); }
            tmp410.Append("E: ");
            E.ToString(tmp410);
          }
          tmp410.Append(')');
          return tmp410.ToString();
        }
      }


      public partial class Blob_GetLength_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ObjectBlobHandle { get; set; } = 0;

        public Blob_GetLength_args()
        {
        }

        public Blob_GetLength_args(long @token, int object_blob_handle) : this()
        {
          this.Token = @token;
          this.ObjectBlobHandle = object_blob_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_blob_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectBlobHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_blob_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_blob_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp412 = new TStruct("Blob_GetLength_args");
            await oprot.WriteStructBeginAsync(tmp412, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp413 = new TField();
            tmp413.Name = "token";
            tmp413.Type = TType.I64;
            tmp413.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp413, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp413.Name = "object_blob_handle";
            tmp413.Type = TType.I32;
            tmp413.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp413, cancellationToken);
            await oprot.WriteI32Async(ObjectBlobHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_GetLength_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectBlobHandle, other.ObjectBlobHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectBlobHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp414 = new StringBuilder("Blob_GetLength_args(");
          tmp414.Append(", Token: ");
          Token.ToString(tmp414);
          tmp414.Append(", ObjectBlobHandle: ");
          ObjectBlobHandle.ToString(tmp414);
          tmp414.Append(')');
          return tmp414.ToString();
        }
      }


      public partial class Blob_GetLength_result : TBase
      {
        private long _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public long Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public Blob_GetLength_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.I64)
                  {
                    Success = await iprot.ReadI64Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp416 = new TStruct("Blob_GetLength_result");
            await oprot.WriteStructBeginAsync(tmp416, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp417 = new TField();

            if(this.__isset.@success)
            {
              tmp417.Name = "Success";
              tmp417.Type = TType.I64;
              tmp417.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp417, cancellationToken);
              await oprot.WriteI64Async(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp417.Name = "E";
                tmp417.Type = TType.Struct;
                tmp417.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp417, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_GetLength_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp418 = new StringBuilder("Blob_GetLength_result(");
          int tmp419 = 0;
          if(__isset.@success)
          {
            if(0 < tmp419++) { tmp418.Append(", "); }
            tmp418.Append("Success: ");
            Success.ToString(tmp418);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp419++) { tmp418.Append(", "); }
            tmp418.Append("E: ");
            E.ToString(tmp418);
          }
          tmp418.Append(')');
          return tmp418.ToString();
        }
      }


      public partial class Blob_GetContentType_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ObjectBlobHandle { get; set; } = 0;

        public Blob_GetContentType_args()
        {
        }

        public Blob_GetContentType_args(long @token, int object_blob_handle) : this()
        {
          this.Token = @token;
          this.ObjectBlobHandle = object_blob_handle;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_object_blob_handle = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ObjectBlobHandle = await iprot.ReadI32Async(cancellationToken);
                    isset_object_blob_handle = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_object_blob_handle)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp420 = new TStruct("Blob_GetContentType_args");
            await oprot.WriteStructBeginAsync(tmp420, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp421 = new TField();
            tmp421.Name = "token";
            tmp421.Type = TType.I64;
            tmp421.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp421, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp421.Name = "object_blob_handle";
            tmp421.Type = TType.I32;
            tmp421.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp421, cancellationToken);
            await oprot.WriteI32Async(ObjectBlobHandle, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_GetContentType_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ObjectBlobHandle, other.ObjectBlobHandle);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ObjectBlobHandle.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp422 = new StringBuilder("Blob_GetContentType_args(");
          tmp422.Append(", Token: ");
          Token.ToString(tmp422);
          tmp422.Append(", ObjectBlobHandle: ");
          ObjectBlobHandle.ToString(tmp422);
          tmp422.Append(')');
          return tmp422.ToString();
        }
      }


      public partial class Blob_GetContentType_result : TBase
      {
        private string? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public string? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public Blob_GetContentType_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.String)
                  {
                    Success = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp424 = new TStruct("Blob_GetContentType_result");
            await oprot.WriteStructBeginAsync(tmp424, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp425 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp425.Name = "Success";
                tmp425.Type = TType.String;
                tmp425.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp425, cancellationToken);
                await oprot.WriteStringAsync(Success, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp425.Name = "E";
                tmp425.Type = TType.Struct;
                tmp425.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp425, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Blob_GetContentType_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp426 = new StringBuilder("Blob_GetContentType_result(");
          int tmp427 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp427++) { tmp426.Append(", "); }
            tmp426.Append("Success: ");
            Success.ToString(tmp426);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp427++) { tmp426.Append(", "); }
            tmp426.Append("E: ");
            E.ToString(tmp426);
          }
          tmp426.Append(')');
          return tmp426.ToString();
        }
      }


      public partial class Log_args : TBase
      {
        private List<string>? _arguments;

        public long Token { get; set; } = 0;

        /// <summary>
        /// 
        /// <seealso cref="global::QueryCat.Plugins.Sdk.LogLevel"/>
        /// </summary>
        public global::QueryCat.Plugins.Sdk.LogLevel Level { get; set; } = default;

        public string Message { get; set; } = string.Empty;

        public List<string>? Arguments
        {
          get
          {
            return _arguments;
          }
          set
          {
            __isset.@arguments = true;
            this._arguments = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @arguments;
        }

        public Log_args()
        {
        }

        public Log_args(long @token, global::QueryCat.Plugins.Sdk.LogLevel @level, string @message) : this()
        {
          this.Token = @token;
          this.Level = @level;
          this.Message = @message;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_level = false;
            bool isset_message = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Level = (global::QueryCat.Plugins.Sdk.LogLevel)await iprot.ReadI32Async(cancellationToken);
                    isset_level = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                    isset_message = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list428 = await iprot.ReadListBeginAsync(cancellationToken);
                      Arguments = new List<string>(_list428.Count);
                      for(int _i429 = 0; _i429 < _list428.Count; ++_i429)
                      {
                        string _elem430;
                        _elem430 = await iprot.ReadStringAsync(cancellationToken);
                        Arguments.Add(_elem430);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_level)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_message)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp431 = new TStruct("Log_args");
            await oprot.WriteStructBeginAsync(tmp431, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp432 = new TField();
            tmp432.Name = "token";
            tmp432.Type = TType.I64;
            tmp432.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp432, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp432.Name = "level";
            tmp432.Type = TType.I32;
            tmp432.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp432, cancellationToken);
            await oprot.WriteI32Async((int)Level, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Message != null))
            {
              tmp432.Name = "message";
              tmp432.Type = TType.String;
              tmp432.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp432, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Arguments != null) && __isset.@arguments)
            {
              tmp432.Name = "arguments";
              tmp432.Type = TType.List;
              tmp432.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp432, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.String, Arguments.Count), cancellationToken);
              foreach (string _iter433 in Arguments)
              {
                await oprot.WriteStringAsync(_iter433, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Log_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(Level, other.Level)
            && global::System.Object.Equals(Message, other.Message)
            && ((__isset.@arguments == other.__isset.@arguments) && ((!__isset.@arguments) || (TCollections.Equals(Arguments, other.Arguments))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + Level.GetHashCode();
            if((Message != null))
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
            if((Arguments != null) && __isset.@arguments)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Arguments);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp434 = new StringBuilder("Log_args(");
          tmp434.Append(", Token: ");
          Token.ToString(tmp434);
          tmp434.Append(", Level: ");
          Level.ToString(tmp434);
          if((Message != null))
          {
            tmp434.Append(", Message: ");
            Message.ToString(tmp434);
          }
          if((Arguments != null) && __isset.@arguments)
          {
            tmp434.Append(", Arguments: ");
            Arguments.ToString(tmp434);
          }
          tmp434.Append(')');
          return tmp434.ToString();
        }
      }


      public partial class Log_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @e;
        }

        public Log_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp436 = new TStruct("Log_result");
            await oprot.WriteStructBeginAsync(tmp436, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp437 = new TField();

            if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp437.Name = "E";
                tmp437.Type = TType.Struct;
                tmp437.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp437, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Log_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp438 = new StringBuilder("Log_result(");
          int tmp439 = 0;
          if((E != null) && __isset.@e)
          {
            if(0 < tmp439++) { tmp438.Append(", "); }
            tmp438.Append("E: ");
            E.ToString(tmp438);
          }
          tmp438.Append(')');
          return tmp438.ToString();
        }
      }


      public partial class GetStatistic_args : TBase
      {

        public long Token { get; set; } = 0;

        public GetStatistic_args()
        {
        }

        public GetStatistic_args(long @token) : this()
        {
          this.Token = @token;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp440 = new TStruct("GetStatistic_args");
            await oprot.WriteStructBeginAsync(tmp440, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp441 = new TField();
            tmp441.Name = "token";
            tmp441.Type = TType.I64;
            tmp441.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp441, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetStatistic_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp442 = new StringBuilder("GetStatistic_args(");
          tmp442.Append(", Token: ");
          Token.ToString(tmp442);
          tmp442.Append(')');
          return tmp442.ToString();
        }
      }


      public partial class GetStatistic_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.Statistic? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.Statistic? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public GetStatistic_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.Statistic();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp444 = new TStruct("GetStatistic_result");
            await oprot.WriteStructBeginAsync(tmp444, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp445 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp445.Name = "Success";
                tmp445.Type = TType.Struct;
                tmp445.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp445, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp445.Name = "E";
                tmp445.Type = TType.Struct;
                tmp445.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp445, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetStatistic_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp446 = new StringBuilder("GetStatistic_result(");
          int tmp447 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp447++) { tmp446.Append(", "); }
            tmp446.Append("Success: ");
            Success.ToString(tmp446);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp447++) { tmp446.Append(", "); }
            tmp446.Append("E: ");
            E.ToString(tmp446);
          }
          tmp446.Append(')');
          return tmp446.ToString();
        }
      }

    }

  }
}
