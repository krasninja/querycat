/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


// Thrift code generated for net8
#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0290  // use primary CTOR
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace QueryCat.Plugins.Sdk
{
  public partial class PluginsManager
  {
    public interface IAsync : global::QueryCat.Plugins.Sdk.QueryCatIO.IAsync
    {
      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.RegistrationResult> RegisterPluginAsync(string registration_token, string callback_uri, global::QueryCat.Plugins.Sdk.PluginData? plugin_data, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> RunQueryAsync(long @token, string @query, Dictionary<string, global::QueryCat.Plugins.Sdk.VariantValue>? @parameters, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task SetConfigValueAsync(long @token, string @key, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> GetConfigValueAsync(long @token, string @key, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> GetVariableAsync(long @token, string @name, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> SetVariableAsync(long @token, string @name, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.ScopeVariable>> GetVariablesAsync(long @token, int scope_id, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ExecutionScope> PushScopeAsync(long @token, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ExecutionScope> PopScopeAsync(long @token, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ExecutionScope> PeekTopScopeAsync(long @token, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.CompletionResult>> GetCompletionsAsync(long @token, string @text, int @position, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task LogAsync(long @token, global::QueryCat.Plugins.Sdk.LogLevel @level, string @message, List<string>? @arguments, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.Statistic> GetStatisticAsync(long @token, CancellationToken cancellationToken = default);

    }


    public class Client : global::QueryCat.Plugins.Sdk.QueryCatIO.Client, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.RegistrationResult> RegisterPluginAsync(string registration_token, string callback_uri, global::QueryCat.Plugins.Sdk.PluginData? plugin_data, CancellationToken cancellationToken = default)
      {
        await send_RegisterPluginAsync(registration_token, callback_uri, plugin_data, cancellationToken);
        return await recv_RegisterPluginAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RegisterPluginAsync(string registration_token, string callback_uri, global::QueryCat.Plugins.Sdk.PluginData? plugin_data, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RegisterPlugin", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp657 = new InternalStructs.RegisterPlugin_args() {
          RegistrationToken = registration_token,
          CallbackUri = callback_uri,
          PluginData = plugin_data,
        };
        
        await tmp657.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.RegistrationResult> recv_RegisterPluginAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp658 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp658.Type == TMessageType.Exception)
        {
          var tmp659 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp659;
        }

        var tmp660 = new InternalStructs.RegisterPlugin_result();
        await tmp660.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp660.__isset.success)
        {
          return tmp660.Success!;
        }
        if (tmp660.__isset.@e)
        {
          throw tmp660.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RegisterPluginAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> RunQueryAsync(long @token, string @query, Dictionary<string, global::QueryCat.Plugins.Sdk.VariantValue>? @parameters, CancellationToken cancellationToken = default)
      {
        await send_RunQueryAsync(@token, @query, @parameters, cancellationToken);
        return await recv_RunQueryAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RunQueryAsync(long @token, string @query, Dictionary<string, global::QueryCat.Plugins.Sdk.VariantValue>? @parameters, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RunQuery", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp661 = new InternalStructs.RunQuery_args() {
          Token = @token,
          Query = @query,
          Parameters = @parameters,
        };
        
        await tmp661.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> recv_RunQueryAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp662 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp662.Type == TMessageType.Exception)
        {
          var tmp663 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp663;
        }

        var tmp664 = new InternalStructs.RunQuery_result();
        await tmp664.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp664.__isset.success)
        {
          return tmp664.Success!;
        }
        if (tmp664.__isset.@e)
        {
          throw tmp664.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RunQueryAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task SetConfigValueAsync(long @token, string @key, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default)
      {
        await send_SetConfigValueAsync(@token, @key, @value, cancellationToken);
        await recv_SetConfigValueAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_SetConfigValueAsync(long @token, string @key, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SetConfigValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp665 = new InternalStructs.SetConfigValue_args() {
          Token = @token,
          Key = @key,
          Value = @value,
        };
        
        await tmp665.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_SetConfigValueAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp666 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp666.Type == TMessageType.Exception)
        {
          var tmp667 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp667;
        }

        var tmp668 = new InternalStructs.SetConfigValue_result();
        await tmp668.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp668.__isset.@e)
        {
          throw tmp668.E!;
        }
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> GetConfigValueAsync(long @token, string @key, CancellationToken cancellationToken = default)
      {
        await send_GetConfigValueAsync(@token, @key, cancellationToken);
        return await recv_GetConfigValueAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetConfigValueAsync(long @token, string @key, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetConfigValue", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp669 = new InternalStructs.GetConfigValue_args() {
          Token = @token,
          Key = @key,
        };
        
        await tmp669.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> recv_GetConfigValueAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp670 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp670.Type == TMessageType.Exception)
        {
          var tmp671 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp671;
        }

        var tmp672 = new InternalStructs.GetConfigValue_result();
        await tmp672.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp672.__isset.success)
        {
          return tmp672.Success!;
        }
        if (tmp672.__isset.@e)
        {
          throw tmp672.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetConfigValueAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> GetVariableAsync(long @token, string @name, CancellationToken cancellationToken = default)
      {
        await send_GetVariableAsync(@token, @name, cancellationToken);
        return await recv_GetVariableAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetVariableAsync(long @token, string @name, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetVariable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp673 = new InternalStructs.GetVariable_args() {
          Token = @token,
          Name = @name,
        };
        
        await tmp673.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> recv_GetVariableAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp674 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp674.Type == TMessageType.Exception)
        {
          var tmp675 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp675;
        }

        var tmp676 = new InternalStructs.GetVariable_result();
        await tmp676.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp676.__isset.success)
        {
          return tmp676.Success!;
        }
        if (tmp676.__isset.@e)
        {
          throw tmp676.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetVariableAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> SetVariableAsync(long @token, string @name, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default)
      {
        await send_SetVariableAsync(@token, @name, @value, cancellationToken);
        return await recv_SetVariableAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_SetVariableAsync(long @token, string @name, global::QueryCat.Plugins.Sdk.VariantValue? @value, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SetVariable", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp677 = new InternalStructs.SetVariable_args() {
          Token = @token,
          Name = @name,
          Value = @value,
        };
        
        await tmp677.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.VariantValue> recv_SetVariableAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp678 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp678.Type == TMessageType.Exception)
        {
          var tmp679 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp679;
        }

        var tmp680 = new InternalStructs.SetVariable_result();
        await tmp680.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp680.__isset.success)
        {
          return tmp680.Success!;
        }
        if (tmp680.__isset.@e)
        {
          throw tmp680.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetVariableAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.ScopeVariable>> GetVariablesAsync(long @token, int scope_id, CancellationToken cancellationToken = default)
      {
        await send_GetVariablesAsync(@token, scope_id, cancellationToken);
        return await recv_GetVariablesAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetVariablesAsync(long @token, int scope_id, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetVariables", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp681 = new InternalStructs.GetVariables_args() {
          Token = @token,
          ScopeId = scope_id,
        };
        
        await tmp681.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.ScopeVariable>> recv_GetVariablesAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp682 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp682.Type == TMessageType.Exception)
        {
          var tmp683 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp683;
        }

        var tmp684 = new InternalStructs.GetVariables_result();
        await tmp684.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp684.__isset.success)
        {
          return tmp684.Success!;
        }
        if (tmp684.__isset.@e)
        {
          throw tmp684.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetVariablesAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ExecutionScope> PushScopeAsync(long @token, CancellationToken cancellationToken = default)
      {
        await send_PushScopeAsync(@token, cancellationToken);
        return await recv_PushScopeAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_PushScopeAsync(long @token, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PushScope", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp685 = new InternalStructs.PushScope_args() {
          Token = @token,
        };
        
        await tmp685.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ExecutionScope> recv_PushScopeAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp686 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp686.Type == TMessageType.Exception)
        {
          var tmp687 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp687;
        }

        var tmp688 = new InternalStructs.PushScope_result();
        await tmp688.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp688.__isset.success)
        {
          return tmp688.Success!;
        }
        if (tmp688.__isset.@e)
        {
          throw tmp688.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PushScopeAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ExecutionScope> PopScopeAsync(long @token, CancellationToken cancellationToken = default)
      {
        await send_PopScopeAsync(@token, cancellationToken);
        return await recv_PopScopeAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_PopScopeAsync(long @token, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PopScope", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp689 = new InternalStructs.PopScope_args() {
          Token = @token,
        };
        
        await tmp689.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ExecutionScope> recv_PopScopeAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp690 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp690.Type == TMessageType.Exception)
        {
          var tmp691 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp691;
        }

        var tmp692 = new InternalStructs.PopScope_result();
        await tmp692.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp692.__isset.success)
        {
          return tmp692.Success!;
        }
        if (tmp692.__isset.@e)
        {
          throw tmp692.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PopScopeAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ExecutionScope> PeekTopScopeAsync(long @token, CancellationToken cancellationToken = default)
      {
        await send_PeekTopScopeAsync(@token, cancellationToken);
        return await recv_PeekTopScopeAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_PeekTopScopeAsync(long @token, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("PeekTopScope", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp693 = new InternalStructs.PeekTopScope_args() {
          Token = @token,
        };
        
        await tmp693.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.ExecutionScope> recv_PeekTopScopeAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp694 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp694.Type == TMessageType.Exception)
        {
          var tmp695 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp695;
        }

        var tmp696 = new InternalStructs.PeekTopScope_result();
        await tmp696.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp696.__isset.success)
        {
          return tmp696.Success!;
        }
        if (tmp696.__isset.@e)
        {
          throw tmp696.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PeekTopScopeAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.CompletionResult>> GetCompletionsAsync(long @token, string @text, int @position, CancellationToken cancellationToken = default)
      {
        await send_GetCompletionsAsync(@token, @text, @position, cancellationToken);
        return await recv_GetCompletionsAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetCompletionsAsync(long @token, string @text, int @position, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetCompletions", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp697 = new InternalStructs.GetCompletions_args() {
          Token = @token,
          Text = @text,
          Position = @position,
        };
        
        await tmp697.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::QueryCat.Plugins.Sdk.CompletionResult>> recv_GetCompletionsAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp698 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp698.Type == TMessageType.Exception)
        {
          var tmp699 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp699;
        }

        var tmp700 = new InternalStructs.GetCompletions_result();
        await tmp700.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp700.__isset.success)
        {
          return tmp700.Success!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetCompletionsAsync failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task LogAsync(long @token, global::QueryCat.Plugins.Sdk.LogLevel @level, string @message, List<string>? @arguments, CancellationToken cancellationToken = default)
      {
        await send_LogAsync(@token, @level, @message, @arguments, cancellationToken);
        await recv_LogAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_LogAsync(long @token, global::QueryCat.Plugins.Sdk.LogLevel @level, string @message, List<string>? @arguments, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("Log", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp701 = new InternalStructs.Log_args() {
          Token = @token,
          Level = @level,
          Message = @message,
          Arguments = @arguments,
        };
        
        await tmp701.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task recv_LogAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp702 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp702.Type == TMessageType.Exception)
        {
          var tmp703 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp703;
        }

        var tmp704 = new InternalStructs.Log_result();
        await tmp704.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp704.__isset.@e)
        {
          throw tmp704.E!;
        }
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.Statistic> GetStatisticAsync(long @token, CancellationToken cancellationToken = default)
      {
        await send_GetStatisticAsync(@token, cancellationToken);
        return await recv_GetStatisticAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetStatisticAsync(long @token, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetStatistic", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp705 = new InternalStructs.GetStatistic_args() {
          Token = @token,
        };
        
        await tmp705.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::QueryCat.Plugins.Sdk.Statistic> recv_GetStatisticAsync(CancellationToken cancellationToken = default)
      {
        
        var tmp706 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp706.Type == TMessageType.Exception)
        {
          var tmp707 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp707;
        }

        var tmp708 = new InternalStructs.GetStatistic_result();
        await tmp708.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp708.__isset.success)
        {
          return tmp708.Success!;
        }
        if (tmp708.__isset.@e)
        {
          throw tmp708.E!;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetStatisticAsync failed: unknown result");
      }

    }

    public class AsyncProcessor : global::QueryCat.Plugins.Sdk.QueryCatIO.AsyncProcessor, ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor>? _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor>? logger = default) : base(iAsync)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["RegisterPlugin"] = RegisterPlugin_ProcessAsync;
        processMap_["RunQuery"] = RunQuery_ProcessAsync;
        processMap_["SetConfigValue"] = SetConfigValue_ProcessAsync;
        processMap_["GetConfigValue"] = GetConfigValue_ProcessAsync;
        processMap_["GetVariable"] = GetVariable_ProcessAsync;
        processMap_["SetVariable"] = SetVariable_ProcessAsync;
        processMap_["GetVariables"] = GetVariables_ProcessAsync;
        processMap_["PushScope"] = PushScope_ProcessAsync;
        processMap_["PopScope"] = PopScope_ProcessAsync;
        processMap_["PeekTopScope"] = PeekTopScope_ProcessAsync;
        processMap_["GetCompletions"] = GetCompletions_ProcessAsync;
        processMap_["Log"] = Log_ProcessAsync;
        processMap_["GetStatistic"] = GetStatistic_ProcessAsync;
      }


      public new async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public new async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task RegisterPlugin_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp709 = new InternalStructs.RegisterPlugin_args();
        await tmp709.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp710 = new InternalStructs.RegisterPlugin_result();
        try
        {
          try
          {
            tmp710.Success = await _iAsync.RegisterPluginAsync(tmp709.RegistrationToken, tmp709.CallbackUri, tmp709.PluginData, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp711)
          {
            tmp710.E = tmp711;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RegisterPlugin", TMessageType.Reply, seqid), cancellationToken); 
          await tmp710.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp712)
        {
          var tmp713 = $"Error occurred in {GetType().FullName}: {tmp712.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp712, tmp713);
          else
            Console.Error.WriteLine(tmp713);
          var tmp714 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RegisterPlugin", TMessageType.Exception, seqid), cancellationToken);
          await tmp714.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RunQuery_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp715 = new InternalStructs.RunQuery_args();
        await tmp715.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp716 = new InternalStructs.RunQuery_result();
        try
        {
          try
          {
            tmp716.Success = await _iAsync.RunQueryAsync(tmp715.Token, tmp715.Query, tmp715.Parameters, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp717)
          {
            tmp716.E = tmp717;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("RunQuery", TMessageType.Reply, seqid), cancellationToken); 
          await tmp716.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp718)
        {
          var tmp719 = $"Error occurred in {GetType().FullName}: {tmp718.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp718, tmp719);
          else
            Console.Error.WriteLine(tmp719);
          var tmp720 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RunQuery", TMessageType.Exception, seqid), cancellationToken);
          await tmp720.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SetConfigValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp721 = new InternalStructs.SetConfigValue_args();
        await tmp721.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp722 = new InternalStructs.SetConfigValue_result();
        try
        {
          try
          {
            await _iAsync.SetConfigValueAsync(tmp721.Token, tmp721.Key, tmp721.Value, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp723)
          {
            tmp722.E = tmp723;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("SetConfigValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp722.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp724)
        {
          var tmp725 = $"Error occurred in {GetType().FullName}: {tmp724.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp724, tmp725);
          else
            Console.Error.WriteLine(tmp725);
          var tmp726 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SetConfigValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp726.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetConfigValue_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp727 = new InternalStructs.GetConfigValue_args();
        await tmp727.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp728 = new InternalStructs.GetConfigValue_result();
        try
        {
          try
          {
            tmp728.Success = await _iAsync.GetConfigValueAsync(tmp727.Token, tmp727.Key, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp729)
          {
            tmp728.E = tmp729;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("GetConfigValue", TMessageType.Reply, seqid), cancellationToken); 
          await tmp728.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp730)
        {
          var tmp731 = $"Error occurred in {GetType().FullName}: {tmp730.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp730, tmp731);
          else
            Console.Error.WriteLine(tmp731);
          var tmp732 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetConfigValue", TMessageType.Exception, seqid), cancellationToken);
          await tmp732.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetVariable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp733 = new InternalStructs.GetVariable_args();
        await tmp733.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp734 = new InternalStructs.GetVariable_result();
        try
        {
          try
          {
            tmp734.Success = await _iAsync.GetVariableAsync(tmp733.Token, tmp733.Name, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp735)
          {
            tmp734.E = tmp735;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("GetVariable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp734.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp736)
        {
          var tmp737 = $"Error occurred in {GetType().FullName}: {tmp736.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp736, tmp737);
          else
            Console.Error.WriteLine(tmp737);
          var tmp738 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetVariable", TMessageType.Exception, seqid), cancellationToken);
          await tmp738.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SetVariable_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp739 = new InternalStructs.SetVariable_args();
        await tmp739.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp740 = new InternalStructs.SetVariable_result();
        try
        {
          try
          {
            tmp740.Success = await _iAsync.SetVariableAsync(tmp739.Token, tmp739.Name, tmp739.Value, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp741)
          {
            tmp740.E = tmp741;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("SetVariable", TMessageType.Reply, seqid), cancellationToken); 
          await tmp740.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp742)
        {
          var tmp743 = $"Error occurred in {GetType().FullName}: {tmp742.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp742, tmp743);
          else
            Console.Error.WriteLine(tmp743);
          var tmp744 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SetVariable", TMessageType.Exception, seqid), cancellationToken);
          await tmp744.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetVariables_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp745 = new InternalStructs.GetVariables_args();
        await tmp745.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp746 = new InternalStructs.GetVariables_result();
        try
        {
          try
          {
            tmp746.Success = await _iAsync.GetVariablesAsync(tmp745.Token, tmp745.ScopeId, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp747)
          {
            tmp746.E = tmp747;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("GetVariables", TMessageType.Reply, seqid), cancellationToken); 
          await tmp746.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp748)
        {
          var tmp749 = $"Error occurred in {GetType().FullName}: {tmp748.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp748, tmp749);
          else
            Console.Error.WriteLine(tmp749);
          var tmp750 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetVariables", TMessageType.Exception, seqid), cancellationToken);
          await tmp750.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task PushScope_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp751 = new InternalStructs.PushScope_args();
        await tmp751.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp752 = new InternalStructs.PushScope_result();
        try
        {
          try
          {
            tmp752.Success = await _iAsync.PushScopeAsync(tmp751.Token, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp753)
          {
            tmp752.E = tmp753;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("PushScope", TMessageType.Reply, seqid), cancellationToken); 
          await tmp752.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp754)
        {
          var tmp755 = $"Error occurred in {GetType().FullName}: {tmp754.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp754, tmp755);
          else
            Console.Error.WriteLine(tmp755);
          var tmp756 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PushScope", TMessageType.Exception, seqid), cancellationToken);
          await tmp756.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task PopScope_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp757 = new InternalStructs.PopScope_args();
        await tmp757.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp758 = new InternalStructs.PopScope_result();
        try
        {
          try
          {
            tmp758.Success = await _iAsync.PopScopeAsync(tmp757.Token, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp759)
          {
            tmp758.E = tmp759;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("PopScope", TMessageType.Reply, seqid), cancellationToken); 
          await tmp758.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp760)
        {
          var tmp761 = $"Error occurred in {GetType().FullName}: {tmp760.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp760, tmp761);
          else
            Console.Error.WriteLine(tmp761);
          var tmp762 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PopScope", TMessageType.Exception, seqid), cancellationToken);
          await tmp762.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task PeekTopScope_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp763 = new InternalStructs.PeekTopScope_args();
        await tmp763.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp764 = new InternalStructs.PeekTopScope_result();
        try
        {
          try
          {
            tmp764.Success = await _iAsync.PeekTopScopeAsync(tmp763.Token, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp765)
          {
            tmp764.E = tmp765;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("PeekTopScope", TMessageType.Reply, seqid), cancellationToken); 
          await tmp764.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp766)
        {
          var tmp767 = $"Error occurred in {GetType().FullName}: {tmp766.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp766, tmp767);
          else
            Console.Error.WriteLine(tmp767);
          var tmp768 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("PeekTopScope", TMessageType.Exception, seqid), cancellationToken);
          await tmp768.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetCompletions_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp769 = new InternalStructs.GetCompletions_args();
        await tmp769.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp770 = new InternalStructs.GetCompletions_result();
        try
        {
          tmp770.Success = await _iAsync.GetCompletionsAsync(tmp769.Token, tmp769.Text, tmp769.Position, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetCompletions", TMessageType.Reply, seqid), cancellationToken); 
          await tmp770.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp771)
        {
          var tmp772 = $"Error occurred in {GetType().FullName}: {tmp771.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp771, tmp772);
          else
            Console.Error.WriteLine(tmp772);
          var tmp773 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetCompletions", TMessageType.Exception, seqid), cancellationToken);
          await tmp773.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task Log_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp774 = new InternalStructs.Log_args();
        await tmp774.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp775 = new InternalStructs.Log_result();
        try
        {
          try
          {
            await _iAsync.LogAsync(tmp774.Token, tmp774.Level, tmp774.Message, tmp774.Arguments, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp776)
          {
            tmp775.E = tmp776;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("Log", TMessageType.Reply, seqid), cancellationToken); 
          await tmp775.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp777)
        {
          var tmp778 = $"Error occurred in {GetType().FullName}: {tmp777.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp777, tmp778);
          else
            Console.Error.WriteLine(tmp778);
          var tmp779 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("Log", TMessageType.Exception, seqid), cancellationToken);
          await tmp779.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetStatistic_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp780 = new InternalStructs.GetStatistic_args();
        await tmp780.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp781 = new InternalStructs.GetStatistic_result();
        try
        {
          try
          {
            tmp781.Success = await _iAsync.GetStatisticAsync(tmp780.Token, cancellationToken);
          }
          catch (global::QueryCat.Plugins.Sdk.QueryCatPluginException tmp782)
          {
            tmp781.E = tmp782;
          }
          await oprot.WriteMessageBeginAsync(new TMessage("GetStatistic", TMessageType.Reply, seqid), cancellationToken); 
          await tmp781.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp783)
        {
          var tmp784 = $"Error occurred in {GetType().FullName}: {tmp783.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp783, tmp784);
          else
            Console.Error.WriteLine(tmp784);
          var tmp785 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetStatistic", TMessageType.Exception, seqid), cancellationToken);
          await tmp785.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class RegisterPlugin_args : TBase
      {

        public string RegistrationToken { get; set; } = string.Empty;

        public string CallbackUri { get; set; } = string.Empty;

        public global::QueryCat.Plugins.Sdk.PluginData? PluginData { get; set; }

        public RegisterPlugin_args()
        {
        }

        public RegisterPlugin_args(string registration_token, string callback_uri, global::QueryCat.Plugins.Sdk.PluginData? plugin_data) : this()
        {
          this.RegistrationToken = registration_token;
          this.CallbackUri = callback_uri;
          this.PluginData = plugin_data;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_registration_token = false;
            bool isset_callback_uri = false;
            bool isset_plugin_data = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    RegistrationToken = await iprot.ReadStringAsync(cancellationToken);
                    isset_registration_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    CallbackUri = await iprot.ReadStringAsync(cancellationToken);
                    isset_callback_uri = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    PluginData = new global::QueryCat.Plugins.Sdk.PluginData();
                    await PluginData.ReadAsync(iprot, cancellationToken);
                    isset_plugin_data = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_registration_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_callback_uri)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_plugin_data)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp786 = new TStruct("RegisterPlugin_args");
            await oprot.WriteStructBeginAsync(tmp786, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp787 = new TField();
            if((RegistrationToken != null))
            {
              tmp787.Name = "registration_token";
              tmp787.Type = TType.String;
              tmp787.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp787, cancellationToken);
              await oprot.WriteStringAsync(RegistrationToken, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((CallbackUri != null))
            {
              tmp787.Name = "callback_uri";
              tmp787.Type = TType.String;
              tmp787.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp787, cancellationToken);
              await oprot.WriteStringAsync(CallbackUri, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((PluginData != null))
            {
              tmp787.Name = "plugin_data";
              tmp787.Type = TType.Struct;
              tmp787.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp787, cancellationToken);
              await PluginData.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RegisterPlugin_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(RegistrationToken, other.RegistrationToken)
            && global::System.Object.Equals(CallbackUri, other.CallbackUri)
            && global::System.Object.Equals(PluginData, other.PluginData);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((RegistrationToken != null))
            {
              hashcode = (hashcode * 397) + RegistrationToken.GetHashCode();
            }
            if((CallbackUri != null))
            {
              hashcode = (hashcode * 397) + CallbackUri.GetHashCode();
            }
            if((PluginData != null))
            {
              hashcode = (hashcode * 397) + PluginData.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp788 = new StringBuilder("RegisterPlugin_args(");
          if((RegistrationToken != null))
          {
            tmp788.Append(", RegistrationToken: ");
            RegistrationToken.ToString(tmp788);
          }
          if((CallbackUri != null))
          {
            tmp788.Append(", CallbackUri: ");
            CallbackUri.ToString(tmp788);
          }
          if((PluginData != null))
          {
            tmp788.Append(", PluginData: ");
            PluginData.ToString(tmp788);
          }
          tmp788.Append(')');
          return tmp788.ToString();
        }
      }


      public partial class RegisterPlugin_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.RegistrationResult? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.RegistrationResult? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RegisterPlugin_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.RegistrationResult();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp790 = new TStruct("RegisterPlugin_result");
            await oprot.WriteStructBeginAsync(tmp790, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp791 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp791.Name = "Success";
                tmp791.Type = TType.Struct;
                tmp791.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp791, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp791.Name = "E";
                tmp791.Type = TType.Struct;
                tmp791.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp791, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RegisterPlugin_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp792 = new StringBuilder("RegisterPlugin_result(");
          int tmp793 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp793++) { tmp792.Append(", "); }
            tmp792.Append("Success: ");
            Success.ToString(tmp792);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp793++) { tmp792.Append(", "); }
            tmp792.Append("E: ");
            E.ToString(tmp792);
          }
          tmp792.Append(')');
          return tmp792.ToString();
        }
      }


      public partial class RunQuery_args : TBase
      {
        private Dictionary<string, global::QueryCat.Plugins.Sdk.VariantValue>? _parameters;

        public long Token { get; set; } = 0;

        public string Query { get; set; } = string.Empty;

        public Dictionary<string, global::QueryCat.Plugins.Sdk.VariantValue>? Parameters
        {
          get
          {
            return _parameters;
          }
          set
          {
            __isset.@parameters = true;
            this._parameters = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @parameters;
        }

        public RunQuery_args()
        {
        }

        public RunQuery_args(long @token, string @query) : this()
        {
          this.Token = @token;
          this.Query = @query;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_query = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Query = await iprot.ReadStringAsync(cancellationToken);
                    isset_query = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Map)
                  {
                    {
                      var _map794 = await iprot.ReadMapBeginAsync(cancellationToken);
                      Parameters = new Dictionary<string, global::QueryCat.Plugins.Sdk.VariantValue>(_map794.Count);
                      for(int _i795 = 0; _i795 < _map794.Count; ++_i795)
                      {
                        string _key796;
                        global::QueryCat.Plugins.Sdk.VariantValue _val797;
                        _key796 = await iprot.ReadStringAsync(cancellationToken);
                        _val797 = new global::QueryCat.Plugins.Sdk.VariantValue();
                        await _val797.ReadAsync(iprot, cancellationToken);
                        Parameters[_key796] = _val797;
                      }
                      await iprot.ReadMapEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_query)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp798 = new TStruct("RunQuery_args");
            await oprot.WriteStructBeginAsync(tmp798, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp799 = new TField();
            tmp799.Name = "token";
            tmp799.Type = TType.I64;
            tmp799.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp799, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Query != null))
            {
              tmp799.Name = "query";
              tmp799.Type = TType.String;
              tmp799.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp799, cancellationToken);
              await oprot.WriteStringAsync(Query, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Parameters != null) && __isset.@parameters)
            {
              tmp799.Name = "parameters";
              tmp799.Type = TType.Map;
              tmp799.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp799, cancellationToken);
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Parameters.Count), cancellationToken);
              foreach (string _iter800 in Parameters.Keys)
              {
                await oprot.WriteStringAsync(_iter800, cancellationToken);
                await Parameters[_iter800].WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RunQuery_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(Query, other.Query)
            && ((__isset.@parameters == other.__isset.@parameters) && ((!__isset.@parameters) || (TCollections.Equals(Parameters, other.Parameters))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            if((Query != null))
            {
              hashcode = (hashcode * 397) + Query.GetHashCode();
            }
            if((Parameters != null) && __isset.@parameters)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Parameters);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp801 = new StringBuilder("RunQuery_args(");
          tmp801.Append(", Token: ");
          Token.ToString(tmp801);
          if((Query != null))
          {
            tmp801.Append(", Query: ");
            Query.ToString(tmp801);
          }
          if((Parameters != null) && __isset.@parameters)
          {
            tmp801.Append(", Parameters: ");
            Parameters.ToString(tmp801);
          }
          tmp801.Append(')');
          return tmp801.ToString();
        }
      }


      public partial class RunQuery_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.VariantValue? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.VariantValue? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public RunQuery_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp803 = new TStruct("RunQuery_result");
            await oprot.WriteStructBeginAsync(tmp803, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp804 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp804.Name = "Success";
                tmp804.Type = TType.Struct;
                tmp804.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp804, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp804.Name = "E";
                tmp804.Type = TType.Struct;
                tmp804.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp804, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not RunQuery_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp805 = new StringBuilder("RunQuery_result(");
          int tmp806 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp806++) { tmp805.Append(", "); }
            tmp805.Append("Success: ");
            Success.ToString(tmp805);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp806++) { tmp805.Append(", "); }
            tmp805.Append("E: ");
            E.ToString(tmp805);
          }
          tmp805.Append(')');
          return tmp805.ToString();
        }
      }


      public partial class SetConfigValue_args : TBase
      {

        public long Token { get; set; } = 0;

        public string Key { get; set; } = string.Empty;

        public global::QueryCat.Plugins.Sdk.VariantValue? Value { get; set; }

        public SetConfigValue_args()
        {
        }

        public SetConfigValue_args(long @token, string @key, global::QueryCat.Plugins.Sdk.VariantValue? @value) : this()
        {
          this.Token = @token;
          this.Key = @key;
          this.Value = @value;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_key = false;
            bool isset_value = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                    isset_key = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Value = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Value.ReadAsync(iprot, cancellationToken);
                    isset_value = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_key)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_value)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp807 = new TStruct("SetConfigValue_args");
            await oprot.WriteStructBeginAsync(tmp807, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp808 = new TField();
            tmp808.Name = "token";
            tmp808.Type = TType.I64;
            tmp808.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp808, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Key != null))
            {
              tmp808.Name = "key";
              tmp808.Type = TType.String;
              tmp808.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp808, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Value != null))
            {
              tmp808.Name = "value";
              tmp808.Type = TType.Struct;
              tmp808.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp808, cancellationToken);
              await Value.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not SetConfigValue_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(Key, other.Key)
            && global::System.Object.Equals(Value, other.Value);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            if((Key != null))
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
            if((Value != null))
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp809 = new StringBuilder("SetConfigValue_args(");
          tmp809.Append(", Token: ");
          Token.ToString(tmp809);
          if((Key != null))
          {
            tmp809.Append(", Key: ");
            Key.ToString(tmp809);
          }
          if((Value != null))
          {
            tmp809.Append(", Value: ");
            Value.ToString(tmp809);
          }
          tmp809.Append(')');
          return tmp809.ToString();
        }
      }


      public partial class SetConfigValue_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @e;
        }

        public SetConfigValue_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp811 = new TStruct("SetConfigValue_result");
            await oprot.WriteStructBeginAsync(tmp811, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp812 = new TField();

            if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp812.Name = "E";
                tmp812.Type = TType.Struct;
                tmp812.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp812, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not SetConfigValue_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp813 = new StringBuilder("SetConfigValue_result(");
          int tmp814 = 0;
          if((E != null) && __isset.@e)
          {
            if(0 < tmp814++) { tmp813.Append(", "); }
            tmp813.Append("E: ");
            E.ToString(tmp813);
          }
          tmp813.Append(')');
          return tmp813.ToString();
        }
      }


      public partial class GetConfigValue_args : TBase
      {

        public long Token { get; set; } = 0;

        public string Key { get; set; } = string.Empty;

        public GetConfigValue_args()
        {
        }

        public GetConfigValue_args(long @token, string @key) : this()
        {
          this.Token = @token;
          this.Key = @key;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_key = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Key = await iprot.ReadStringAsync(cancellationToken);
                    isset_key = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_key)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp815 = new TStruct("GetConfigValue_args");
            await oprot.WriteStructBeginAsync(tmp815, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp816 = new TField();
            tmp816.Name = "token";
            tmp816.Type = TType.I64;
            tmp816.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp816, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Key != null))
            {
              tmp816.Name = "key";
              tmp816.Type = TType.String;
              tmp816.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp816, cancellationToken);
              await oprot.WriteStringAsync(Key, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetConfigValue_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(Key, other.Key);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            if((Key != null))
            {
              hashcode = (hashcode * 397) + Key.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp817 = new StringBuilder("GetConfigValue_args(");
          tmp817.Append(", Token: ");
          Token.ToString(tmp817);
          if((Key != null))
          {
            tmp817.Append(", Key: ");
            Key.ToString(tmp817);
          }
          tmp817.Append(')');
          return tmp817.ToString();
        }
      }


      public partial class GetConfigValue_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.VariantValue? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.VariantValue? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public GetConfigValue_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp819 = new TStruct("GetConfigValue_result");
            await oprot.WriteStructBeginAsync(tmp819, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp820 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp820.Name = "Success";
                tmp820.Type = TType.Struct;
                tmp820.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp820, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp820.Name = "E";
                tmp820.Type = TType.Struct;
                tmp820.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp820, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetConfigValue_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp821 = new StringBuilder("GetConfigValue_result(");
          int tmp822 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp822++) { tmp821.Append(", "); }
            tmp821.Append("Success: ");
            Success.ToString(tmp821);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp822++) { tmp821.Append(", "); }
            tmp821.Append("E: ");
            E.ToString(tmp821);
          }
          tmp821.Append(')');
          return tmp821.ToString();
        }
      }


      public partial class GetVariable_args : TBase
      {

        public long Token { get; set; } = 0;

        public string Name { get; set; } = string.Empty;

        public GetVariable_args()
        {
        }

        public GetVariable_args(long @token, string @name) : this()
        {
          this.Token = @token;
          this.Name = @name;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_name = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                    isset_name = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_name)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp823 = new TStruct("GetVariable_args");
            await oprot.WriteStructBeginAsync(tmp823, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp824 = new TField();
            tmp824.Name = "token";
            tmp824.Type = TType.I64;
            tmp824.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp824, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Name != null))
            {
              tmp824.Name = "name";
              tmp824.Type = TType.String;
              tmp824.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp824, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetVariable_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(Name, other.Name);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            if((Name != null))
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp825 = new StringBuilder("GetVariable_args(");
          tmp825.Append(", Token: ");
          Token.ToString(tmp825);
          if((Name != null))
          {
            tmp825.Append(", Name: ");
            Name.ToString(tmp825);
          }
          tmp825.Append(')');
          return tmp825.ToString();
        }
      }


      public partial class GetVariable_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.VariantValue? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.VariantValue? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public GetVariable_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp827 = new TStruct("GetVariable_result");
            await oprot.WriteStructBeginAsync(tmp827, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp828 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp828.Name = "Success";
                tmp828.Type = TType.Struct;
                tmp828.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp828, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp828.Name = "E";
                tmp828.Type = TType.Struct;
                tmp828.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp828, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetVariable_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp829 = new StringBuilder("GetVariable_result(");
          int tmp830 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp830++) { tmp829.Append(", "); }
            tmp829.Append("Success: ");
            Success.ToString(tmp829);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp830++) { tmp829.Append(", "); }
            tmp829.Append("E: ");
            E.ToString(tmp829);
          }
          tmp829.Append(')');
          return tmp829.ToString();
        }
      }


      public partial class SetVariable_args : TBase
      {

        public long Token { get; set; } = 0;

        public string Name { get; set; } = string.Empty;

        public global::QueryCat.Plugins.Sdk.VariantValue? Value { get; set; }

        public SetVariable_args()
        {
        }

        public SetVariable_args(long @token, string @name, global::QueryCat.Plugins.Sdk.VariantValue? @value) : this()
        {
          this.Token = @token;
          this.Name = @name;
          this.Value = @value;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_name = false;
            bool isset_value = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Name = await iprot.ReadStringAsync(cancellationToken);
                    isset_name = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.Struct)
                  {
                    Value = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Value.ReadAsync(iprot, cancellationToken);
                    isset_value = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_name)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_value)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp831 = new TStruct("SetVariable_args");
            await oprot.WriteStructBeginAsync(tmp831, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp832 = new TField();
            tmp832.Name = "token";
            tmp832.Type = TType.I64;
            tmp832.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp832, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Name != null))
            {
              tmp832.Name = "name";
              tmp832.Type = TType.String;
              tmp832.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp832, cancellationToken);
              await oprot.WriteStringAsync(Name, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Value != null))
            {
              tmp832.Name = "value";
              tmp832.Type = TType.Struct;
              tmp832.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp832, cancellationToken);
              await Value.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not SetVariable_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(Name, other.Name)
            && global::System.Object.Equals(Value, other.Value);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            if((Name != null))
            {
              hashcode = (hashcode * 397) + Name.GetHashCode();
            }
            if((Value != null))
            {
              hashcode = (hashcode * 397) + Value.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp833 = new StringBuilder("SetVariable_args(");
          tmp833.Append(", Token: ");
          Token.ToString(tmp833);
          if((Name != null))
          {
            tmp833.Append(", Name: ");
            Name.ToString(tmp833);
          }
          if((Value != null))
          {
            tmp833.Append(", Value: ");
            Value.ToString(tmp833);
          }
          tmp833.Append(')');
          return tmp833.ToString();
        }
      }


      public partial class SetVariable_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.VariantValue? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.VariantValue? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public SetVariable_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.VariantValue();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp835 = new TStruct("SetVariable_result");
            await oprot.WriteStructBeginAsync(tmp835, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp836 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp836.Name = "Success";
                tmp836.Type = TType.Struct;
                tmp836.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp836, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp836.Name = "E";
                tmp836.Type = TType.Struct;
                tmp836.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp836, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not SetVariable_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp837 = new StringBuilder("SetVariable_result(");
          int tmp838 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp838++) { tmp837.Append(", "); }
            tmp837.Append("Success: ");
            Success.ToString(tmp837);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp838++) { tmp837.Append(", "); }
            tmp837.Append("E: ");
            E.ToString(tmp837);
          }
          tmp837.Append(')');
          return tmp837.ToString();
        }
      }


      public partial class GetVariables_args : TBase
      {

        public long Token { get; set; } = 0;

        public int ScopeId { get; set; } = 0;

        public GetVariables_args()
        {
        }

        public GetVariables_args(long @token, int scope_id) : this()
        {
          this.Token = @token;
          this.ScopeId = scope_id;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_scope_id = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    ScopeId = await iprot.ReadI32Async(cancellationToken);
                    isset_scope_id = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_scope_id)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp839 = new TStruct("GetVariables_args");
            await oprot.WriteStructBeginAsync(tmp839, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp840 = new TField();
            tmp840.Name = "token";
            tmp840.Type = TType.I64;
            tmp840.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp840, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp840.Name = "scope_id";
            tmp840.Type = TType.I32;
            tmp840.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp840, cancellationToken);
            await oprot.WriteI32Async(ScopeId, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetVariables_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(ScopeId, other.ScopeId);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + ScopeId.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp841 = new StringBuilder("GetVariables_args(");
          tmp841.Append(", Token: ");
          Token.ToString(tmp841);
          tmp841.Append(", ScopeId: ");
          ScopeId.ToString(tmp841);
          tmp841.Append(')');
          return tmp841.ToString();
        }
      }


      public partial class GetVariables_result : TBase
      {
        private List<global::QueryCat.Plugins.Sdk.ScopeVariable>? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public List<global::QueryCat.Plugins.Sdk.ScopeVariable>? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public GetVariables_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list843 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::QueryCat.Plugins.Sdk.ScopeVariable>(_list843.Count);
                      for(int _i844 = 0; _i844 < _list843.Count; ++_i844)
                      {
                        global::QueryCat.Plugins.Sdk.ScopeVariable _elem845;
                        _elem845 = new global::QueryCat.Plugins.Sdk.ScopeVariable();
                        await _elem845.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem845);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp846 = new TStruct("GetVariables_result");
            await oprot.WriteStructBeginAsync(tmp846, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp847 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp847.Name = "Success";
                tmp847.Type = TType.List;
                tmp847.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp847, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::QueryCat.Plugins.Sdk.ScopeVariable _iter848 in Success)
                {
                  await _iter848.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp847.Name = "E";
                tmp847.Type = TType.Struct;
                tmp847.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp847, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetVariables_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (TCollections.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp849 = new StringBuilder("GetVariables_result(");
          int tmp850 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp850++) { tmp849.Append(", "); }
            tmp849.Append("Success: ");
            Success.ToString(tmp849);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp850++) { tmp849.Append(", "); }
            tmp849.Append("E: ");
            E.ToString(tmp849);
          }
          tmp849.Append(')');
          return tmp849.ToString();
        }
      }


      public partial class PushScope_args : TBase
      {

        public long Token { get; set; } = 0;

        public PushScope_args()
        {
        }

        public PushScope_args(long @token) : this()
        {
          this.Token = @token;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp851 = new TStruct("PushScope_args");
            await oprot.WriteStructBeginAsync(tmp851, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp852 = new TField();
            tmp852.Name = "token";
            tmp852.Type = TType.I64;
            tmp852.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp852, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not PushScope_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp853 = new StringBuilder("PushScope_args(");
          tmp853.Append(", Token: ");
          Token.ToString(tmp853);
          tmp853.Append(')');
          return tmp853.ToString();
        }
      }


      public partial class PushScope_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.ExecutionScope? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.ExecutionScope? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public PushScope_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.ExecutionScope();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp855 = new TStruct("PushScope_result");
            await oprot.WriteStructBeginAsync(tmp855, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp856 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp856.Name = "Success";
                tmp856.Type = TType.Struct;
                tmp856.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp856, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp856.Name = "E";
                tmp856.Type = TType.Struct;
                tmp856.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp856, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not PushScope_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp857 = new StringBuilder("PushScope_result(");
          int tmp858 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp858++) { tmp857.Append(", "); }
            tmp857.Append("Success: ");
            Success.ToString(tmp857);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp858++) { tmp857.Append(", "); }
            tmp857.Append("E: ");
            E.ToString(tmp857);
          }
          tmp857.Append(')');
          return tmp857.ToString();
        }
      }


      public partial class PopScope_args : TBase
      {

        public long Token { get; set; } = 0;

        public PopScope_args()
        {
        }

        public PopScope_args(long @token) : this()
        {
          this.Token = @token;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp859 = new TStruct("PopScope_args");
            await oprot.WriteStructBeginAsync(tmp859, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp860 = new TField();
            tmp860.Name = "token";
            tmp860.Type = TType.I64;
            tmp860.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp860, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not PopScope_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp861 = new StringBuilder("PopScope_args(");
          tmp861.Append(", Token: ");
          Token.ToString(tmp861);
          tmp861.Append(')');
          return tmp861.ToString();
        }
      }


      public partial class PopScope_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.ExecutionScope? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.ExecutionScope? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public PopScope_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.ExecutionScope();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp863 = new TStruct("PopScope_result");
            await oprot.WriteStructBeginAsync(tmp863, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp864 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp864.Name = "Success";
                tmp864.Type = TType.Struct;
                tmp864.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp864, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp864.Name = "E";
                tmp864.Type = TType.Struct;
                tmp864.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp864, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not PopScope_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp865 = new StringBuilder("PopScope_result(");
          int tmp866 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp866++) { tmp865.Append(", "); }
            tmp865.Append("Success: ");
            Success.ToString(tmp865);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp866++) { tmp865.Append(", "); }
            tmp865.Append("E: ");
            E.ToString(tmp865);
          }
          tmp865.Append(')');
          return tmp865.ToString();
        }
      }


      public partial class PeekTopScope_args : TBase
      {

        public long Token { get; set; } = 0;

        public PeekTopScope_args()
        {
        }

        public PeekTopScope_args(long @token) : this()
        {
          this.Token = @token;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp867 = new TStruct("PeekTopScope_args");
            await oprot.WriteStructBeginAsync(tmp867, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp868 = new TField();
            tmp868.Name = "token";
            tmp868.Type = TType.I64;
            tmp868.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp868, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not PeekTopScope_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp869 = new StringBuilder("PeekTopScope_args(");
          tmp869.Append(", Token: ");
          Token.ToString(tmp869);
          tmp869.Append(')');
          return tmp869.ToString();
        }
      }


      public partial class PeekTopScope_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.ExecutionScope? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.ExecutionScope? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public PeekTopScope_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.ExecutionScope();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp871 = new TStruct("PeekTopScope_result");
            await oprot.WriteStructBeginAsync(tmp871, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp872 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp872.Name = "Success";
                tmp872.Type = TType.Struct;
                tmp872.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp872, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp872.Name = "E";
                tmp872.Type = TType.Struct;
                tmp872.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp872, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not PeekTopScope_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp873 = new StringBuilder("PeekTopScope_result(");
          int tmp874 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp874++) { tmp873.Append(", "); }
            tmp873.Append("Success: ");
            Success.ToString(tmp873);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp874++) { tmp873.Append(", "); }
            tmp873.Append("E: ");
            E.ToString(tmp873);
          }
          tmp873.Append(')');
          return tmp873.ToString();
        }
      }


      public partial class GetCompletions_args : TBase
      {

        public long Token { get; set; } = 0;

        public string Text { get; set; } = string.Empty;

        public int Position { get; set; } = 0;

        public GetCompletions_args()
        {
        }

        public GetCompletions_args(long @token, string @text, int @position) : this()
        {
          this.Token = @token;
          this.Text = @text;
          this.Position = @position;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_text = false;
            bool isset_position = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Text = await iprot.ReadStringAsync(cancellationToken);
                    isset_text = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.I32)
                  {
                    Position = await iprot.ReadI32Async(cancellationToken);
                    isset_position = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_text)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_position)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp875 = new TStruct("GetCompletions_args");
            await oprot.WriteStructBeginAsync(tmp875, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp876 = new TField();
            tmp876.Name = "token";
            tmp876.Type = TType.I64;
            tmp876.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp876, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Text != null))
            {
              tmp876.Name = "text";
              tmp876.Type = TType.String;
              tmp876.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp876, cancellationToken);
              await oprot.WriteStringAsync(Text, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            tmp876.Name = "position";
            tmp876.Type = TType.I32;
            tmp876.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp876, cancellationToken);
            await oprot.WriteI32Async(Position, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetCompletions_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(Text, other.Text)
            && global::System.Object.Equals(Position, other.Position);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            if((Text != null))
            {
              hashcode = (hashcode * 397) + Text.GetHashCode();
            }
            hashcode = (hashcode * 397) + Position.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp877 = new StringBuilder("GetCompletions_args(");
          tmp877.Append(", Token: ");
          Token.ToString(tmp877);
          if((Text != null))
          {
            tmp877.Append(", Text: ");
            Text.ToString(tmp877);
          }
          tmp877.Append(", Position: ");
          Position.ToString(tmp877);
          tmp877.Append(')');
          return tmp877.ToString();
        }
      }


      public partial class GetCompletions_result : TBase
      {
        private List<global::QueryCat.Plugins.Sdk.CompletionResult>? _success;

        public List<global::QueryCat.Plugins.Sdk.CompletionResult>? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public GetCompletions_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list879 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::QueryCat.Plugins.Sdk.CompletionResult>(_list879.Count);
                      for(int _i880 = 0; _i880 < _list879.Count; ++_i880)
                      {
                        global::QueryCat.Plugins.Sdk.CompletionResult _elem881;
                        _elem881 = new global::QueryCat.Plugins.Sdk.CompletionResult();
                        await _elem881.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem881);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp882 = new TStruct("GetCompletions_result");
            await oprot.WriteStructBeginAsync(tmp882, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp883 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp883.Name = "Success";
                tmp883.Type = TType.List;
                tmp883.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp883, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::QueryCat.Plugins.Sdk.CompletionResult _iter884 in Success)
                {
                  await _iter884.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetCompletions_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp885 = new StringBuilder("GetCompletions_result(");
          int tmp886 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp886++) { tmp885.Append(", "); }
            tmp885.Append("Success: ");
            Success.ToString(tmp885);
          }
          tmp885.Append(')');
          return tmp885.ToString();
        }
      }


      public partial class Log_args : TBase
      {
        private List<string>? _arguments;

        public long Token { get; set; } = 0;

        /// <summary>
        /// 
        /// <seealso cref="global::QueryCat.Plugins.Sdk.LogLevel"/>
        /// </summary>
        public global::QueryCat.Plugins.Sdk.LogLevel Level { get; set; } = default;

        public string Message { get; set; } = string.Empty;

        public List<string>? Arguments
        {
          get
          {
            return _arguments;
          }
          set
          {
            __isset.@arguments = true;
            this._arguments = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @arguments;
        }

        public Log_args()
        {
        }

        public Log_args(long @token, global::QueryCat.Plugins.Sdk.LogLevel @level, string @message) : this()
        {
          this.Token = @token;
          this.Level = @level;
          this.Message = @message;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            bool isset_level = false;
            bool isset_message = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Level = (global::QueryCat.Plugins.Sdk.LogLevel)await iprot.ReadI32Async(cancellationToken);
                    isset_level = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                    isset_message = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 4:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list887 = await iprot.ReadListBeginAsync(cancellationToken);
                      Arguments = new List<string>(_list887.Count);
                      for(int _i888 = 0; _i888 < _list887.Count; ++_i888)
                      {
                        string _elem889;
                        _elem889 = await iprot.ReadStringAsync(cancellationToken);
                        Arguments.Add(_elem889);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_level)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
            if (!isset_message)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp890 = new TStruct("Log_args");
            await oprot.WriteStructBeginAsync(tmp890, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp891 = new TField();
            tmp891.Name = "token";
            tmp891.Type = TType.I64;
            tmp891.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp891, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            tmp891.Name = "level";
            tmp891.Type = TType.I32;
            tmp891.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp891, cancellationToken);
            await oprot.WriteI32Async((int)Level, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            if((Message != null))
            {
              tmp891.Name = "message";
              tmp891.Type = TType.String;
              tmp891.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp891, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Arguments != null) && __isset.@arguments)
            {
              tmp891.Name = "arguments";
              tmp891.Type = TType.List;
              tmp891.ID = 4;
              await oprot.WriteFieldBeginAsync(tmp891, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.String, Arguments.Count), cancellationToken);
              foreach (string _iter892 in Arguments)
              {
                await oprot.WriteStringAsync(_iter892, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Log_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token)
            && global::System.Object.Equals(Level, other.Level)
            && global::System.Object.Equals(Message, other.Message)
            && ((__isset.@arguments == other.__isset.@arguments) && ((!__isset.@arguments) || (TCollections.Equals(Arguments, other.Arguments))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
            hashcode = (hashcode * 397) + Level.GetHashCode();
            if((Message != null))
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
            if((Arguments != null) && __isset.@arguments)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Arguments);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp893 = new StringBuilder("Log_args(");
          tmp893.Append(", Token: ");
          Token.ToString(tmp893);
          tmp893.Append(", Level: ");
          Level.ToString(tmp893);
          if((Message != null))
          {
            tmp893.Append(", Message: ");
            Message.ToString(tmp893);
          }
          if((Arguments != null) && __isset.@arguments)
          {
            tmp893.Append(", Arguments: ");
            Arguments.ToString(tmp893);
          }
          tmp893.Append(')');
          return tmp893.ToString();
        }
      }


      public partial class Log_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @e;
        }

        public Log_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp895 = new TStruct("Log_result");
            await oprot.WriteStructBeginAsync(tmp895, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp896 = new TField();

            if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp896.Name = "E";
                tmp896.Type = TType.Struct;
                tmp896.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp896, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not Log_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp897 = new StringBuilder("Log_result(");
          int tmp898 = 0;
          if((E != null) && __isset.@e)
          {
            if(0 < tmp898++) { tmp897.Append(", "); }
            tmp897.Append("E: ");
            E.ToString(tmp897);
          }
          tmp897.Append(')');
          return tmp897.ToString();
        }
      }


      public partial class GetStatistic_args : TBase
      {

        public long Token { get; set; } = 0;

        public GetStatistic_args()
        {
        }

        public GetStatistic_args(long @token) : this()
        {
          this.Token = @token;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            bool isset_token = false;
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.I64)
                  {
                    Token = await iprot.ReadI64Async(cancellationToken);
                    isset_token = true;
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
            if (!isset_token)
            {
              throw new TProtocolException(TProtocolException.INVALID_DATA);
            }
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp899 = new TStruct("GetStatistic_args");
            await oprot.WriteStructBeginAsync(tmp899, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp900 = new TField();
            tmp900.Name = "token";
            tmp900.Type = TType.I64;
            tmp900.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp900, cancellationToken);
            await oprot.WriteI64Async(Token, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetStatistic_args other) return false;
          if (ReferenceEquals(this, other)) return true;
          return global::System.Object.Equals(Token, other.Token);
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            hashcode = (hashcode * 397) + Token.GetHashCode();
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp901 = new StringBuilder("GetStatistic_args(");
          tmp901.Append(", Token: ");
          Token.ToString(tmp901);
          tmp901.Append(')');
          return tmp901.ToString();
        }
      }


      public partial class GetStatistic_result : TBase
      {
        private global::QueryCat.Plugins.Sdk.Statistic? _success;
        private global::QueryCat.Plugins.Sdk.QueryCatPluginException? _e;

        public global::QueryCat.Plugins.Sdk.Statistic? Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }

        public global::QueryCat.Plugins.Sdk.QueryCatPluginException? E
        {
          get
          {
            return _e;
          }
          set
          {
            __isset.@e = true;
            this._e = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
          public bool @e;
        }

        public GetStatistic_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::QueryCat.Plugins.Sdk.Statistic();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    E = new global::QueryCat.Plugins.Sdk.QueryCatPluginException();
                    await E.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp903 = new TStruct("GetStatistic_result");
            await oprot.WriteStructBeginAsync(tmp903, cancellationToken);
            #pragma warning disable IDE0017  // simplified init
            var tmp904 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp904.Name = "Success";
                tmp904.Type = TType.Struct;
                tmp904.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp904, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            else if(this.__isset.@e)
            {
              if (E != null)
              {
                tmp904.Name = "E";
                tmp904.Type = TType.Struct;
                tmp904.ID = 1;
                await oprot.WriteFieldBeginAsync(tmp904, cancellationToken);
                await E.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            #pragma warning restore IDE0017  // simplified init
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object? that)
        {
          if (that is not GetStatistic_result other) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))))
            && ((__isset.@e == other.__isset.@e) && ((!__isset.@e) || (global::System.Object.Equals(E, other.E))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
            if((E != null) && __isset.@e)
            {
              hashcode = (hashcode * 397) + E.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp905 = new StringBuilder("GetStatistic_result(");
          int tmp906 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp906++) { tmp905.Append(", "); }
            tmp905.Append("Success: ");
            Success.ToString(tmp905);
          }
          if((E != null) && __isset.@e)
          {
            if(0 < tmp906++) { tmp905.Append(", "); }
            tmp905.Append("E: ");
            E.ToString(tmp905);
          }
          tmp905.Append(')');
          return tmp905.ToString();
        }
      }

    }

  }
}
