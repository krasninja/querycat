/**
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


// Thrift code generated for net8
#nullable enable                 // requires C# 8.0
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0290  // use primary CTOR
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static

namespace QueryCat.Plugins.Sdk
{

  public partial class ContextInfo : TBase
  {

    public int PrereadRowsCount { get; set; } = 0;

    public bool SkipIfNoColumns { get; set; } = false;

    public ContextInfo()
    {
    }

    public ContextInfo(int preread_rows_count, bool skip_if_no_columns) : this()
    {
      this.PrereadRowsCount = preread_rows_count;
      this.SkipIfNoColumns = skip_if_no_columns;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_preread_rows_count = false;
        bool isset_skip_if_no_columns = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                PrereadRowsCount = await iprot.ReadI32Async(cancellationToken);
                isset_preread_rows_count = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Bool)
              {
                SkipIfNoColumns = await iprot.ReadBoolAsync(cancellationToken);
                isset_skip_if_no_columns = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_preread_rows_count)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_skip_if_no_columns)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp64 = new TStruct("ContextInfo");
        await oprot.WriteStructBeginAsync(tmp64, cancellationToken);
        #pragma warning disable IDE0017  // simplified init
        var tmp65 = new TField();
        tmp65.Name = "preread_rows_count";
        tmp65.Type = TType.I32;
        tmp65.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp65, cancellationToken);
        await oprot.WriteI32Async(PrereadRowsCount, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        tmp65.Name = "skip_if_no_columns";
        tmp65.Type = TType.Bool;
        tmp65.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp65, cancellationToken);
        await oprot.WriteBoolAsync(SkipIfNoColumns, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        #pragma warning restore IDE0017  // simplified init
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object? that)
    {
      if (that is not ContextInfo other) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(PrereadRowsCount, other.PrereadRowsCount)
        && global::System.Object.Equals(SkipIfNoColumns, other.SkipIfNoColumns);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + PrereadRowsCount.GetHashCode();
        hashcode = (hashcode * 397) + SkipIfNoColumns.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp66 = new StringBuilder("ContextInfo(");
      tmp66.Append(", PrereadRowsCount: ");
      PrereadRowsCount.ToString(tmp66);
      tmp66.Append(", SkipIfNoColumns: ");
      SkipIfNoColumns.ToString(tmp66);
      tmp66.Append(')');
      return tmp66.ToString();
    }
  }

}
